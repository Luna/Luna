## This test file checks operations on files that are happening between various backends.

   Because it relies not only on Standard.Base but also the S3 backend provided
   by Standard.AWS, it is currently placed in `AWS_Tests`.
   Once we start supporting more backends, we should consider creating
   a separate test project for these integrations (e.g. `Integrator_Tests`).

from Standard.Base import all
import Standard.Base.Enso_Cloud.Data_Link.Data_Link_Format
import Standard.Base.Errors.File_Error.File_Error

from Standard.AWS import S3_File

from Standard.Test import all

from project.S3_Spec import api_pending, writable_root

add_specs suite_builder =
    my_writable_dir = writable_root / "inter-backend-test-run-"+(Date_Time.now.format "yyyy-MM-dd_HHmmss.fV" . replace "/" "|")+"/"
    sources = [my_writable_dir / "source1.txt", File.create_temporary_file "source2" ".txt"]
    destinations = [my_writable_dir / "destination1.txt", File.create_temporary_file "destination2" ".txt"]
    sources.each source_file-> destinations.each destination_file-> if source_file.is_a File && destination_file.is_a File then Nothing else
        src_typ = Meta.type_of source_file . to_display_text
        dest_typ = Meta.type_of destination_file . to_display_text
        suite_builder.group "("+src_typ+" -> "+dest_typ+") copying/moving" pending=api_pending group_builder->
            group_builder.teardown <|
                source_file.delete_if_exists
                destination_file.delete_if_exists

            group_builder.specify "should be able to copy files" <|
                "Hello".write source_file on_existing_file=Existing_File_Behavior.Overwrite . should_succeed
                destination_file.delete_if_exists

                source_file.copy_to destination_file . should_succeed
                destination_file.read . should_equal "Hello"
                source_file.exists . should_be_true

            group_builder.specify "should be able to move files" <|
                "Hello".write source_file on_existing_file=Existing_File_Behavior.Overwrite . should_succeed
                destination_file.delete_if_exists

                source_file.move_to destination_file . should_succeed
                destination_file.read . should_equal "Hello"
                source_file.exists . should_be_false

            group_builder.specify "should fail if the source file does not exist" <|
                source_file.delete_if_exists
                destination_file.delete_if_exists

                r = source_file.copy_to destination_file
                r.should_fail_with File_Error
                r.catch.should_be_a File_Error.Not_Found

                r2 = source_file.move_to destination_file
                r2.should_fail_with File_Error
                r2.catch.should_be_a File_Error.Not_Found

                destination_file.exists . should_be_false

            group_builder.specify "should fail to copy/move a file if it exists and replace_existing=False" <|
                "Hello".write source_file on_existing_file=Existing_File_Behavior.Overwrite . should_succeed
                "World".write destination_file on_existing_file=Existing_File_Behavior.Overwrite . should_succeed

                r = source_file.copy_to destination_file
                r.should_fail_with File_Error
                r.catch.should_be_a File_Error.Already_Exists

                r2 = source_file.move_to destination_file
                r2.should_fail_with File_Error
                r2.catch.should_be_a File_Error.Already_Exists

                destination_file.read . should_equal "World"

            group_builder.specify "should overwrite existing destination in copy/move if replace_existing=True" <|
                "Hello".write source_file on_existing_file=Existing_File_Behavior.Overwrite . should_succeed
                "World".write destination_file on_existing_file=Existing_File_Behavior.Overwrite . should_succeed

                source_file.copy_to destination_file replace_existing=True . should_succeed
                destination_file.read . should_equal "Hello"
                source_file.exists . should_be_true

                "FooBar".write source_file on_existing_file=Existing_File_Behavior.Overwrite . should_succeed
                source_file.move_to destination_file replace_existing=True . should_succeed
                destination_file.read . should_equal "FooBar"
                source_file.exists . should_be_false

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter
