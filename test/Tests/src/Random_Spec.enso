from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec = Test.group "Random" <|
    Test.specify "should allow generating random integers" <|
        Random.set_seed 12345
        Random.integer 0 100 . should_equal 51
        Random.integer 0 10000 . should_equal 9080
        Random.integer 0 100000000000000 . should_fail_with Illegal_Argument

        random_range = 0.up_to 1000 . map (_-> Random.integer 0 100) . compute_bulk [Statistic.Minimum, Statistic.Maximum]
        (random_range.at 0 >= 0) . should_equal True
        (random_range.at 1 <= 100) . should_equal True

    Test.specify "should allow generating random floats" <|
        Random.set_seed 12345
        Random.float . should_equal 0.3618031071604718 epsilon=0.00000001
        Random.float . should_equal 0.932993485288541 epsilon=0.00000001

        random_range = 0.up_to 1000 . map _->Random.float . compute_bulk [Statistic.Minimum, Statistic.Maximum]
        (random_range.at 0 >= 0) . should_equal True
        (random_range.at 1 <= 1) . should_equal True

    Test.specify "should allow generating random booleans" <|
        Random.set_seed 0
        0.up_to 3 . map _->Random.boolean . should_equal [True, True, False]

    Test.specify "should allow generating random gaussian floats" <|
        Random.set_seed 12345
        Random.gaussian . should_equal -0.187808989658912 epsilon=0.00000001
        Random.gaussian . should_equal 0.5884363051154796 epsilon=0.00000001

    Test.specify "should allow generating random dates" <|
        Random.set_seed 4000
        range = Date_Range.new (Date.new 2023 03 01) (Date.new 2023 10 15)
        Random.date range . should_equal (Date.new 2023 6 9)
        Random.date range . should_equal (Date.new 2023 7 16)
        Random.date range . should_equal (Date.new 2023 10 12)

        small_range = Date_Range.new (Date.new 2023 03 01) (Date.new 2023 03 04)
        all_from_small_range = [Date.new 2023 03 01, Date.new 2023 03 02, Date.new 2023 03 03]
        dates = 0.up_to 100 . map (_-> Random.date small_range)
        dates.should_contain_the_same_elements_as all_from_small_range

    Test.specify "should allow generating random times" <|
        Random.set_seed 12345
        start = Time_Of_Day.new 8 12 15
        end = Time_Of_Day.new 9 40 2
        Random.time start end . should_equal (Time_Of_Day.new 9 31 10)
        Random.time start end . should_equal (Time_Of_Day.new 8 34 31)
        Random.time start end . should_equal (Time_Of_Day.new 9 27 48)
        Random.time . should_equal (Time_Of_Day.new 0 13 48)
        Random.time . should_equal (Time_Of_Day.new 14 20 55)
        Random.time . should_equal (Time_Of_Day.new 8 48 4)

        small_range_start = Time_Of_Day.new 8 12 15
        small_range_end = Time_Of_Day.new 8 12 18
        all_from_small_range = [Time_Of_Day.new 8 12 15, Time_Of_Day.new 8 12 16, Time_Of_Day.new 8 12 17, Time_Of_Day.new 8 12 18]
        times = 0.up_to 100 . map (_-> Random.time small_range_start small_range_end)
        times.should_contain_the_same_elements_as all_from_small_range

    Test.specify "should allow generating random UUIDs" <|
        Random.uuid . should_only_contain_elements_in "0123456789abcdef-"

    Test.specify "should allow to select a random item from a vector, without replacement" <|
        Random.set_seed 0
        vector = ["A", "B", "C"]
        shuffles = 0.up_to 100 . map _->
            Random.item vector 2
        shuffles . should_contain_the_same_elements_as [["A", "B"], ["A", "C"], ["B", "A"], ["B", "C"], ["C", "A"], ["C", "B"]]

        overflow = Random.item vector 100
        overflow.length . should_equal 3
        overflow.should_contain_the_same_elements_as vector

        Random.item ["A", "A", "A"] 2 . should_equal ["A", "A"]
        Random.item ["A", "A", "A"] 0 . should_equal []
        Random.item ["A", "A", "A"] 3 . should_equal ["A", "A", "A"]
        Random.item ["A", "A", "A"] 100 . should_equal ["A", "A", "A"]

    Test.specify "should allow to select a random item from a vector, with replacement" <|
        Random.set_seed 0
        vector = 0.up_to 10 . to_vector

        Random.item vector . length . should_equal 1
        Random.item vector 4 . length . should_equal 4

        0.up_to 20 . map _->
            items = Random.item vector 5 with_replacement=True
            items.should_only_contain_elements_in vector

    Test.specify "should allow to generate random permutations" <|
        Random.set_seed 0
        list = [0, 1, 2]
        permutations = 0.up_to 100 . map _->
            Random.permute list
        permutations_2 = 0.up_to 100 . map _->
            Random.permute list

        all_permutations = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]]
        permutations . should_contain_the_same_elements_as all_permutations
        permutations_2 . should_contain_the_same_elements_as all_permutations

    Test.specify "should not allow using a too-large integer range" <|
        high = 9223372036854775807000
        Random.integer 0 high . should_fail_with Illegal_Argument

    Test.specify "Can call an instance directly" <|
        Random.new_generator 12345 . integer 0 100 . should_equal 51
        Random.new_generator 12345 . float . should_equal 0.3618031071604718 epsilon=0.00000001
        Random.new_generator 12345 . gaussian . should_equal -0.187808989658912 epsilon=0.00000001

main = Test_Suite.run_main spec
