from Standard.Base import all

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

polyglot java import java.util.HashMap

type Child
    Value number

    == : Any -> Boolean
    == self other = case other of
        _ : Child -> (self.number % 100) == (other.number % 100)
        _ -> False

type Parent
    Value child

    == : Any -> Boolean
    == self other = case other of
        _ : Parent -> self.child == other.child
        _ -> False

type GrandParent
    Value parent

    == : Any -> Boolean
    == self other = case other of
        _ : GrandParent -> self.parent == other.parent
        _ -> False

type ManyFieldType
    Value f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15

type FourFieldType
    Value f1 f2 f3 f4

type Point
    Value x y

type Rect
    Value (a:Point) (b:Point)


spec =
    Test.group "Operator ==" <|
        Test.specify "should dispatch to overriden `==` on atoms" <|
            child1 = Child.Value 11
            parent1 = Parent.Value child1
            grand_parent1 = GrandParent.Value parent1

            child2 = Child.Value 111
            parent2 = Parent.Value child2
            grand_parent2 = GrandParent.Value parent2

            grand_parent1.should_equal grand_parent2

        Test.specify "should handle `==` on types with many fields" <|
            many_fields1 = ManyFieldType.Value (Child.Value 1) (Child.Value 2) (Child.Value 3) (Child.Value 4) (Child.Value 5) (Child.Value 6) (Child.Value 7) (Child.Value 8) (Child.Value 9) (Child.Value 10) (Child.Value 11) (Child.Value 12) (Child.Value 13) (Child.Value 14) (Child.Value 15)
            many_fields2 = ManyFieldType.Value (Child.Value 101) (Child.Value 102) (Child.Value 103) (Child.Value 104) (Child.Value 105) (Child.Value 106) (Child.Value 107) (Child.Value 108) (Child.Value 109) (Child.Value 110) (Child.Value 111) (Child.Value 112) (Child.Value 113) (Child.Value 114) (Child.Value 115)

            many_fields1.should_equal many_fields2

        Test.specify "should dispatch to equals on host values" <|
            java_object1 = HashMap.new
            java_object1.put "a" 1
            java_object1.put "b" 2

            java_object2 = HashMap.new
            java_object2.put "b" 2
            java_object2.put "a" 1

            java_object1.should_equal java_object2

        Test.specify "should return False for different Atoms with same fields" <|
            p1 = Point.Value 1 2
            p2 = Point.Value 3 4
            rect = Rect.Value p1 p2
            four_field = FourFieldType.Value 1 2 3 4
            rect.should_not_equal four_field


main = Test_Suite.run_main spec
