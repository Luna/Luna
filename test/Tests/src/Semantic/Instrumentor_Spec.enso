from Standard.Base import all
from Standard.Test import all

fib n = if n <= 1 then 1 else
    a = fib n-1
    b = fib n-2
    a+b

spec =
    Test.group "Instrument fibonacci" <|
        Test.specify "collect and filter on return updates" <|
            b = Vector.new_builder

            collect uuid:Text result =
                a_plus_b_uuid = "00000000-aaaa-bbbb-0000-000000000000" # UUID for a+b
                if uuid == a_plus_b_uuid then
                    b.append result
                Nothing

            instrumenter = Meta.meta .fib . instrument . on_return collect . activate

            instrumenter . with _->
                result = fib 10

                v = b.to_vector

                v.length . should_equal 1
                v.at 0 . should_equal 89
                result . should_equal 89

            instrumenter.finalize

            result = fib 10
            result . should_equal 89

            # no more instrumenting after finalize
            b.to_vector.length . should_equal 1

        Test.specify "replay with caches and specify different result" <|
            replay uuid:Text = case uuid of
                "00000000-ffff-bbbb-0000-000000000000" -> 42
                _ -> Nothing

            instrumenter = Meta.meta .fib . instrument . on_enter replay . activate

            instrumenter . with _->
                result = fib 10
                result . should_equal 42

            instrumenter.finalize

            result = fib 10
            result . should_equal 89

main = Test_Suite.run_main spec



#### METADATA ####
[[{"index":{"value":127},"size":{"value":3}},"00000000-aaaa-bbbb-0000-000000000000"], [{"index":{"value":69},"size":{"value":61}},"00000000-ffff-bbbb-0000-000000000000"]]
