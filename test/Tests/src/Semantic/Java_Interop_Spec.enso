from Standard.Base import all
import Standard.Test
import Standard.Base.Data.Time.Duration

polyglot java import java.lang.Float
polyglot java import java.lang.Integer
polyglot java import java.lang.Long
polyglot java import java.lang.String
polyglot java import java.lang.StringBuilder as Java_String_Builder
polyglot java import java.util.ArrayList
polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.LocalDate
polyglot java import java.time.LocalTime


Any.test_me x = x.is_nothing

java_date year month=1 day=1 =
    Panic.catch Any (LocalDate.of year month day) (err -> Error.throw (Time_Error_Data <| err.payload.to_display_text.drop (Text_Sub_Range.First 16)))

foreign js js_date year month_index=0 day=1 = """
    return new Date(year, month_index, day)

spec =
    Test.group "Java FFI" <|
        Test.specify "should call methods imported from Java" <|
            Long.sum 1 2 . should_equal 3

        Test.specify "should call constructors imported from Java" <|
            list = ArrayList.new
            list.add 432
            list.get 0 . should_equal 432
        Test.specify "should auto-convert numeric types across the polyglot boundary" <|
            (Float.valueOf "123.3" + 5).should_equal 128.3 epsilon=0.0001
            (Integer.sum 1 2 + 3) . should_equal 6
        Test.specify "should auto-convert strings across the polyglot boundary" <|
            (String.format "%s bar %s" "baz" "quux" + " foo").should_equal "baz bar quux foo"
        Test.specify "should support Java import renaming" <|
            builder = Java_String_Builder.new
            builder.append "foo"
            builder.append "bar"
            str = builder.toString
            str.should_equal "foobar"
        Test.specify "should invoke static methods" <|
            x = Integer.valueOf 1
            x.test_me x . should_equal False

    Test.group "Java/Enso Date" <|
        Test.specify "Java date has Enso properties" <|
            april1st = LocalDate.of 2022 04 01
            april1st.year.should_equal 2022
            april1st.month.should_equal 4
            april1st.day.should_equal 1

        Test.specify "send Enso date into Java" <|
            ensodate = Date.new 2022 04 01
            javatime = LocalTime.of 10 26
            javatimedate = javatime . to_date_time ensodate
            april1st = javatimedate . date
            april1st.year.should_equal 2022
            april1st.month.should_equal 4
            april1st.day.should_equal 1

        Test.specify "Difference of Java Date and Enso date should be an Enso Duration" <|
            Duration.between (java_date 2022 01 01) (Date.new 2022 01 02) . should_equal 24.hours
            Duration.between (Date.new 2022 01 01) (java_date 2022 01 02) . should_equal 24.hours

        Test.specify "Difference of two Java Dates should be an Enso Duration" <|
            Duration.between (java_date 2022 01 01) (java_date 2022 01 02) . should_equal 24.hours

        Test.specify "Difference of two JS Dates is an Enso Duration" <|
            Duration.between (js_date 2022 09 01) (js_date 2022 09 02) . should_equal 24.hours

        Test.specify "Difference of JS Dates and Java Dates should be Enso Duration" <|
            Duration.between (js_date 2022 08 01) (java_date 2022 09 02) . should_equal 24.hours
            Duration.between (java_date 2022 09 01) (js_date 2022 08 02) . should_equal 24.hours


main = Test.Suite.run_main spec
