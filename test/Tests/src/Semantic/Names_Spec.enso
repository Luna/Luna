from Standard.Base import all

from project.Semantic.Names.Definitions import another_method, another_constant
import Standard.Test

Definitions.Foo.my_method = case self of
    Definitions.Foo x y z -> x * y * z

get_foo module = module.Foo

constant = 1

add_one (x = 0) = x + 1

spec =
    Test.group "Qualified Names" <|
        Test.specify "should allow to call constructors in a qualified manner" <|
            Definitions.Foo 1 2 3 . sum . should_equal 6
            Definitions . Foo 1 2 3 . sum . should_equal 6
        Test.specify "should allow pattern matching in a qualified manner" <|
            v = Definitions.Foo 1 2 3
            res = case v of
                Definitions.Foo a b c -> a + b + c
            res.should_equal 6
        Test.specify "should allow defining methods on qualified names" <|
            v = Definitions.Foo 2 3 5
            v.my_method.should_equal 30
        Test.specify "should allow using constructors from value-bound modules" <|
            v = here.get_foo Definitions 1 2 3
            v.sum.should_equal 6
    Test.group "Uppercase Methods" <|
        Test.specify "should allow calling methods without a target, through uppercase resolution" <|
            v = Constant
            v.should_equal 1
        Test.specify "should allow calling methods that use defaulted arguments" <|
            Add_One.should_equal 1
            Add_One 100 . should_equal 101
        Test.specify "should allow calling this module's methods" <|
            add_one.should_equal 1
            add_one 100 . should_equal 101
        Test.specify "should allow calling methods imported from another module" <|
            Another_Constant.should_equal 10
        Test.specify "should allow calling methods imported from another module without name mangling" <|
            (another_method 10).should_equal 10
            another_constant.should_equal 10
        Test.specify "should allow calling methods with fully qualified module name" <|
            (Definitions.another_method 10).should_equal 10
