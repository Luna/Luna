from Standard.Base import all
from Standard.Test import Test, Test_Suite
from Standard.Base.Data.Time import Period

spec =
    Test.group "Period" <|
        Test.specify "should create period years" <|
            period = (Period.years 5)
            period.years . should_equal 5
            period.days . should_equal 0

        Test.specify "should add two Periods" <|
            ((Period.years 1) + (Period.years 2)).years . should_equal 3
            ((Period.days 1) + (Period.months 2)).days . should_equal 1
            ((Period.days 1) + (Period.months 2)).months . should_equal 2
            ((Period.months 2) + (Period.days 1)).days . should_equal 1
            ((Period.months 2) + (Period.days 1)).months . should_equal 2

        Test.specify "should subtract two Periods" <|
            ((Period.years 2) - (Period.years 1)).years . should_equal 1
            ((Period.years 1) - (Period.months 2)).months . should_equal (-2)
            ((Period.years 1) - (Period.months 2)).years . should_equal 1

        Test.specify "should get Period between two dates" <|
            (Period.between (Date.new year=100) (Date.new year=150)) . should_equal (Period.years 50)
            (Period.between (Date.new year=150) (Date.new year=100)) . should_equal (Period.new years=(-50))
            (Period.between (Date.new 2022 10 19) (Date.new 2022 11 01)) . should_equal (Period.days 13)

        Test.specify "should compare between two Periods_With_Date" <|
            ((Period.between (Date.new 2022 1 1) (Date.new 2022 1 2)) == (Period.between (Date.new 2022 5 1) (Date.new 2022 5 2))) . should_be_true
            ((Period.between (Date.new 2022 1 1) (Date.new 2022 1 15)) > (Period.between (Date.new 2022 5 1) (Date.new 2022 5 2))) . should_be_true
            ((Period.between (Date.new 2022 1 1) (Date.new 2022 1 15)) > (Period.between (Date.new 2022 5 1) (Date.new 2022 3 2))) . should_be_true
            ((Period.between (Date.new 2022 1 1) (Date.new 2022 1 2)) < (Period.between (Date.new 2022 5 1) (Date.new 2022 5 10))) . should_be_true
            ((Period.between (Date.new 2022 1 10) (Date.new 2022 1 1)) < (Period.between (Date.new 2022 5 1) (Date.new 2022 5 10))) . should_be_true
            ((Period.between (Date.new 2022 1 10) (Date.new 2022 1 1)) != (Period.between (Date.new 2022 5 1) (Date.new 2022 5 10))) . should_be_true
            # 2020 is a leap year, so February in 2020 has more days than February in 2021
            ((Period.between (Date.new 2020 1 2) (Date.new 2020 1 3)) > (Period.between (Date.new 2021 1 2) (Date.new 2021 1 3))) . should_be_true

        Test.specify "should compare between Period_With_Date and Period_Without_Date" <|
            (Period.between (Date.new 2022 1 1) (Date.new 2022 1 2)) == (Period.days 1)
            (Period.between (Date.new 2022 1 1) (Date.new 2022 1 10)) > (Period.days 1)
            (Period.between (Date.new 2022 1 1) (Date.new 2001 1 1)) < (Period.days 1)
            (Period.days 1) == (Period.between (Date.new 2022 1 1) (Date.new 2022 1 2))
            (Period.days 1) > (Period.between (Date.new 2022 1 1) (Date.new 2022 1 10))
            (Period.days 1) < (Period.between (Date.new 2022 1 1) (Date.new 2001 1 1))

        Test.specify "should not compare between two Period_Without_Date" <|
            ((Period.days 1) == (Period.days 1)) . should_fail_with Time_Error_Data
            ((Period.days 10) > (Period.days 1)) . should_fail_with Time_Error_Data
            ((Period.years 10) > (Period.days 1)) . should_fail_with Time_Error_Data
            ((Period.new years=10 months=3) > (Period.months 5)) . should_fail_with Time_Error_Data


main = Test_Suite.run_main spec
