from Standard.Base import all

import Standard.Base.Data.Time.Duration
import Standard.Test

spec =
    Test.group "Duration" <|

        Test.specify "should create interval seconds" <|
            duration = 5.seconds
            duration.seconds . should_equal 5

        Test.specify "should create interval between two points in time" <|
            Duration.between (Date_Time.new 2001 1 1 3) (Date_Time.new 2001 1 1 10) . should_equal (Duration.new hours=7)
            Duration.between (Date_Time.new 2001 1 1) (Date_Time.new 2001 1 7) . should_equal (Duration.new hours=(6 * 24))
            Duration.between (Date_Time.new 2001 1 1 13) (Date_Time.new 2001 1 7 16) . should_equal (Duration.new hours=(3 + 6 * 24))

        Test.specify "should check if empty" <|
            interval = 0.seconds
            interval.is_empty . should_be_true

        Test.specify "should normalize periods" <|
            duration = 60.seconds
            duration.minutes . should_equal 1
            duration.hours . should_equal 0

        Test.specify "should normalize addition" <|
            duration = 11.hours + 1.hours
            duration.hours . should_equal 12

        Test.specify "should normalize subtraction" <|
            duration = 13.hours - 1.hours
            duration.hours . should_equal 12

        Test.specify "should check equality" <|
            3.seconds.should_equal 3.seconds
            60.seconds.should_equal 1.minute
            61.seconds.should_equal (1.minute + 1.second)
            60.minutes.should_equal 1.hour

        Test.specify "should convert to Json" <|
            # Test units separately, as adding, e.g., seconds modifies also milliseconds
            (13.nanoseconds.to_json.get "nanoseconds") . to_text . should_equal "13"

        Test.specify "should be comparable" <|
            duration_1 = 5.hour
            duration_2 = 1.minutes
            duration_1.compare_to duration_1 . should_equal Ordering.Equal
            duration_1==duration_1 . should_be_true
            duration_1!=duration_2 . should_be_true
            duration_1>duration_2 . should_be_true
            duration_1<duration_2 . should_be_false

        Test.specify "Date_Time supports adding and subtracting Duration" <|
            ((Date_Time.new 2022 10 1 hour=10) + 2.hours) . should_equal (Date_Time.new 2022 10 1 hour=12)
            ((Date_Time.new 2022 10 1 hour=10) - 2.hours) . should_equal (Date_Time.new 2022 10 1 hour=8)
            ((Date_Time.new 2022 10 2) - 24.hours) . should_equal (Date_Time.new 2022 10 1)
            ((Date_Time.new 2022 10 1 hour=2) - 3.minutes) . should_equal (Date_Time.new 2022 10 1 hour=1 minute=57)


main = Test.Suite.run_main spec
