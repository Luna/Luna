from Standard.Base import all
import Standard.Base.Errors.Common.Syntax_Error
import Standard.Base.Errors.File_Error.File_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    Test.group "Read XML" <|
        Test.specify "Can read from a file" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            doc = XML_Document.from_file test_file
            doc.root_element.name . should_equal "class"

        Test.specify "Error if file does not exist" <|
            test_file = enso_project.data / "xml" / "sample.xmlnotexists"
            XML_Document.from_file test_file . should_fail_with File_Error

        Test.specify "Can read from a stream" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            test_file.with_input_stream [File_Access.Read] input_stream->
                doc = XML_Document.from_stream input_stream
                doc.root_element.name . should_equal "class"

        Test.specify "Can read from a string" <|
            xml_string = enso_project.data/"xml"/"sample.xml" . read_text
            doc = XML_Document.from_string xml_string
            doc.root_element.name . should_equal "class"

        Test.specify "Can read from a short string" <|
            xml_string = "<class></class>"
            doc = XML_Document.from_string xml_string
            doc.root_element.name . should_equal "class"

        Test.specify "Parse error from file" <|
            test_file = enso_project.data / "sample.txt"
            XML_Document.from_file test_file . catch . should_be_a XML_Error.Parse_Error

        Test.specify "Parse error from string" <|
            xml_string = "<<<<</"
            XML_Document.from_string xml_string . catch . should_be_a XML_Error.Parse_Error

    Test.group "at/get" <|
        Test.specify "Can get child elements" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            root = XML_Document.from_file test_file . root_element
            teacher0 = root.at 0
            teacher0.name . should_equal "teacher"
            teacher0.at "@id" . should_equal "100"
            teacher1 = root.at 1
            teacher1.name . should_equal "teacher"
            teacher1.at "@id" . should_equal "101"

        Test.specify "Can get nested elements" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            root = XML_Document.from_file test_file . root_element

            root.at 0 . at 0 . name . should_equal "firstname"
            root.at 0 . at 1 . name . should_equal "lastname"
            root.at 0 . at 2 . name . should_equal "bio"

            root.at 2 . at 0 . name . should_equal "firstname"
            root.at 2 . at 1 . name . should_equal "lastname"
            root.at 2 . at 2 . name . should_equal "gpa"

main = Test_Suite.run_main spec
