from Standard.Base import all
import Standard.Base.Errors.Common.Syntax_Error
import Standard.Base.Errors.File_Error.File_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    Test.group "Read XML" <|
        Test.specify "Can read from a file" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            doc = XML_Document.from_file test_file
            doc.root_element.name . should_equal "class"

        Test.specify "Error if file does not exist" <|
            test_file = enso_project.data / "xml" / "sample.xmlnotexists"
            XML_Document.from_file test_file . should_fail_with File_Error

        Test.specify "Can read from a stream" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            test_file.with_input_stream [File_Access.Read] input_stream->
                doc = XML_Document.from_stream input_stream
                doc.root_element.name . should_equal "class"

        Test.specify "Can read from a string" <|
            xml_string = enso_project.data/"xml"/"sample.xml" . read_text
            doc = XML_Document.from_string xml_string
            doc.root_element.name . should_equal "class"

        Test.specify "Can read from a short string" <|
            xml_string = "<class></class>"
            doc = XML_Document.from_string xml_string
            doc.root_element.name . should_equal "class"

        Test.specify "Parse error from file" <|
            test_file = enso_project.data / "sample.txt"
            XML_Document.from_file test_file . catch . should_be_a XML_Error.Parse_Error

        Test.specify "Parse error from string" <|
            xml_string = "<<<<</"
            XML_Document.from_string xml_string . catch . should_be_a XML_Error.Parse_Error

    Test.group "at/get" <|
        Test.specify "Can get elements by index" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            root = XML_Document.from_file test_file . root_element

            root.at 0 . name . should_equal "teacher"

            root.at 0 . at 0 . name . should_equal "firstname"
            root.at 0 . at 1 . name . should_equal "lastname"
            root.at 0 . at 2 . name . should_equal "bio"
            root.at 0 . at 2 . at 0 . should_equal '\n            Blah blah\n        '

            root.at 3 . at 0 . name . should_equal "firstname"
            root.at 3 . at 1 . name . should_equal "lastname"
            root.at 3 . at 2 . name . should_equal "gpa"
            root.at 3 . at 2 . at 0 . should_equal "3.99"

        Test.specify "Can get element attributes" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            root = XML_Document.from_file test_file . root_element

            root.at 0 . at "@id" . should_equal "100"
            root.at 1 . at "@id" . should_equal "101"
            root.at 2 . at "@studentId" . should_equal "1000"
            root.at 3 . at "@studentId" . should_equal "1001"

        Test.specify "Can get element an attribute map" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            root = XML_Document.from_file test_file . root_element
            root.at 2 . attributes . should_equal (Map.from_vector [["studentId", "1000"], ["year", "2"]])
            root.at 3 . attributes . should_equal (Map.from_vector [["studentId", "1001"], ["year", "3"]])

        Test.specify "Can get via xpath" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            root = XML_Document.from_file test_file . root_element

            classes = root.at "/class"
            classes.length . should_equal 1
            classes.at 0 . name . should_equal "class"

            teachers = root.at "/class/teacher"
            teachers.length . should_equal 2
            teachers.at 0 . at "@id" . should_equal "100"
            teachers.at 1 . at "@id" . should_equal "101"

            students = root.at "/class/student"
            students.length . should_equal 2
            students.at 0 . at "@studentId" . should_equal "1000"
            students.at 1 . at "@studentId" . should_equal "1001"

            root.at "/class/teacher[1]/firstname" . at 0 . text . should_equal "Mary"
            root.at "/class/teacher[2]/firstname" . at 0 . text . should_equal "Bob"
            root.at "/class/teacher[1]/bio" . at 0 . text . should_equal '\n            Blah blah\n        '
            root.at "/class/teacher[2]/bio" . at 0 . text . should_equal '\n            This that\n        '

            root.at "teacher[1]/firstname" . at 0 . text . should_equal "Mary"
            root.at "teacher[2]/firstname" . at 0 . text . should_equal "Bob"
            root.at "teacher[1]/bio" . at 0 . text . should_equal '\n            Blah blah\n        '
            root.at "teacher[2]/bio" . at 0 . text . should_equal '\n            This that\n        '

    Test.group "outer_xml" <|
        Test.specify "outer_xml" <|
            test_file = enso_project.data / "xml" / "sample.xml"
            root = XML_Document.from_file test_file . root_element
            root.at "/class/teacher[1]/bio" . at 0 . outer_xml . should_equal '<bio>\n            Blah blah\n        </bio>'
            root.at "/class/teacher[2]/bio" . at 0 . outer_xml . should_equal '<bio>\n            This that\n        </bio>'

main = Test_Suite.run_main spec
