from Standard.Base import all
import Standard.Base.Error.Common.Index_Out_Of_Bounds
import Standard.Base.Error.Common.Not_Found

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec = Test.group "Pair" <|
    Test.specify "should be created by new" <|
        Pair.new 1 2 . should_equal (Pair.Value 1 2)

    Test.specify "should allow mapping" <|
        Pair.new 1 2 . map x->x+1 . should_equal (Pair.Value 2 3)

    Test.specify "should have length 2" <|
        Pair.new "A" "B" . length . should_equal 2

    Test.specify "should have allow getting by index" <|
        Pair.new "A" "B" . get 0 . should_equal "A"
        Pair.new "A" "B" . get -2 . should_equal "A"
        Pair.new "A" "B" . get 1 . should_equal "B"
        Pair.new "A" "B" . get -1 . should_equal "B"
        Pair.new "A" "B" . get 2 . should_equal Nothing
        Pair.new "A" "B" . get -3 "C" . should_equal "C"
        Pair.new "A" "B" . at 0 . should_equal "A"
        Pair.new "A" "B" . at -2 . should_equal "A"
        Pair.new "A" "B" . at 1 . should_equal "B"
        Pair.new "A" "B" . at -1 . should_equal "B"
        Pair.new "A" "B" . at 2 . should_fail_with Index_Out_Of_Bounds.Error

    Test.specify "should have allow getting by first, second and last" <|
        Pair.new "A" "B" . first . should_equal "A"
        Pair.new "A" "B" . second . should_equal "B"
        Pair.new "A" "B" . last . should_equal "B"

    Test.specify "should be convertable to a vector" <|
        Pair.new "A" "B" . to_vector . should_equal ["A", "B"]

    Test.specify "should allow checking all, any and contains" <|
        Pair.new 1 3 . any (>0) . should_equal True
        Pair.new 1 3 . any (>2) . should_equal True
        Pair.new 1 3 . any (>3) . should_equal False
        Pair.new 1 3 . all (>0) . should_equal True
        Pair.new 1 3 . all (>2) . should_equal False
        Pair.new 1 3 . all (>3) . should_equal False
        Pair.new 1 3 . contains 1 . should_equal True
        Pair.new 1 3 . contains 2 . should_equal False
        Pair.new 1 3 . contains 3 . should_equal True

    Test.specify "should allow finding an item" <|
        Pair.new 1 3 . find (>0) . should_equal 1
        Pair.new 1 3 . find (>2) . should_equal 3
        Pair.new 1 3 . find (>3) . should_fail_with Not_Found
        Pair.new 1 3 . find (>0) start=1 . should_equal 3
        Pair.new 1 3 . find (>0) start=2 . should_fail_with Not_Found
        Pair.new 1 3 . find (>0) start=-1 . should_equal 3
        Pair.new 1 3 . find (>0) start=-22 . should_equal 1
        Pair.new 1 3 . find (>3) if_missing=Nothing . should_equal Nothing

main = Test_Suite.run_main spec
