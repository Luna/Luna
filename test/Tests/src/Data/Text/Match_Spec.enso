
from Standard.Base import all
import Standard.Test

import Standard.Base.Data.Text.Span
import Standard.Base.Data.Text.Regex

spec =
    groups = [Regex.Group "foobar" 0 6, Regex.Group "o" 1 2, Regex.Group "ar" 4 6, Regex.Group Nothing Nothing Nothing]
    named_groups = Map.from_vector [["pirate", Regex.Group "ar" 4 6], ["test", Regex.group Nothing Nothing Nothing]]
    region_start = 0
    region_end = 6
    match = Regex.Match groups named_groups region_start region_end

    Test.group "Regex.Match.group" <|

        Test.specify "should return the full match with index 0" <|
            match.group 0 . should_equal "foobar"

        Test.specify "should return the group contents if it matches by index" <|
            match.group 1 . should_equal "o"

        Test.specify "should return the group contents if it matches by name" <|
            match.group "pirate" . should_equal "ar"

        Test.specify "should return Nothing if the group did not match" <|
            match.group 3 . should_equal Nothing

        Test.specify "should fail with No_Such_Group_Error if the group did not exist" <|
            match.group "fail" . should_fail_with Regex.No_Such_Group_Error
            match.group 5 . should_fail_with Regex.No_Such_Group_Error

        Test.specify "should make named groups accessible by index" <|
            match.group 2 . should_equal (match.group "pirate")

    Test.group "Regex.Match.groups" <|
        Test.specify "should return the results of all groups" <|
            groups = match.groups
            groups.length . should_equal 4
            groups.should_equal ["foobar", "o", "ar", Nothing]

        Test.specify "should replace unmatchedgroups by a user-specified value" <|
            groups = match.groups "UNMATCHED"
            groups.length . should_equal 4
            groups.should_equal ["foobar", "o", "ar", "UNMATCHED"]

    Test.group "Regex.Match.named_groups" <|
        Test.specify "should return the results of all named groups" <|
            groups = match.named_groups
            groups.size . should_equal 2
            groups.get "pirate" . should_equal "ar"
            groups.get "test" . should_equal Nothing

        Test.specify "should replace unmatchedgroups by a user-specified value" <|
            groups = match.named_groups "UNMATCHED"
            groups.size . should_equal 2
            groups.get "pirate" . should_equal "ar"
            groups.get "test" . should_equal "UNMATCHED"

    Test.group "Regex.Match.start" <|
        Test.specify "should return the start of a group by index" <|
            match.start 1 . should_equal 1

        Test.specify "should return the start of a group by name" <|
            match.start "pirate" . should_equal 4

        Test.specify "should return Nothing if the group didn't match" <|
            match.start 3 . should_equal Nothing
            match.start "test" . should_equal Nothing

        Test.specify "should return No_Such_Group_Error if the group doesn't exist" <|
            match.start 5 . should_fail_with Regex.No_Such_Group_Error
            match.start "none" . should_fail_with Regex.No_Such_Group_Error

    Test.group "Regex.Match.end" <|
        Test.specify "should return the end of a group by index" <|
            match.end 1 . should_equal 2

        Test.specify "should return the end of a group by name" <|
            match.end "pirate" . should_equal 6

        Test.specify "should return Nothing if the group didn't match" <|
            match.end 3 . should_equal Nothing
            match.end "test" . should_equal Nothing

        Test.specify "should return No_Such_Group_Error if the group doesn't exist" <|
            match.end 5 . should_fail_with Regex.No_Such_Group_Error
            match.end "none" . should_fail_with Regex.No_Such_Group_Error

    Test.group "Regex.Match.span" <|
        Test.specify "should get the span of a group by index" <|
            match.span 1 . should_equal (Span.new 1 2 "foobar")

        Test.specify "should get the span of a group by name" <|
            match.span "pirate" . should_equal (Span.new 4 6 "foobar")

        Test.specify "should return Nothing if the group didn't match" <|
            match.span 3 . should_equal Nothing
            match.span "test" . should_equal Nothing

        Test.specify "should fail with a No_Such_Group_Error if the group doesn't exist" <|
            match.span 5 . should_fail_with Regex.No_Such_Group_Error
            match.span "none" . should_fail_with Regex.No_Such_Group_Error

    Test.group "Regex.Match.start_position" <|
        Test.specify "should return the region start over which this match was performed" <|
            match.start_position . should_equal 0

    Test.group "Regex.Match.end_position" <|
        Test.specify "should return the region end over which this match was performed" <|
            match.end_position . should_equal 6
