from Standard.Base import all

from Standard.Base.Data.Text.Encoding as Encoding_Module import Encoding
import Standard.Base.Data.Text.Encoding as Encoding_Module

import Standard.Test

spec =
    Test.group "Encoding object" <|
        Test.specify "Can get standard UTF encodings" <|
            Encoding.utf_8 . should_equal (Encoding "UTF-8")
            Encoding.utf_16_le . should_equal (Encoding "UTF-16LE")
            Encoding.utf_16_be . should_equal (Encoding "UTF-16BE")
            Encoding.utf_32_le . should_equal (Encoding "UTF-32LE")
            Encoding.utf_32_be . should_equal (Encoding "UTF-32BE")

        Test.specify "Catches invalid character sets" <|
            invalid = Encoding "NotAValidCharacterSet"
            invalid.to_java_charset . should_fail_with Illegal_Argument_Error

        Test.specify "Can get full set of character sets" <|
            character_sets = Encoding_Module.all_character_sets
            character_sets.length . should_not_equal 0
            character_sets.contains "UTF-8" . should_equal True

        Test.specify "Can get full set of encoding objects" <|
            encodings = Encoding_Module.all_encodings
            encodings.length . should_not_equal 0
            encodings.contains Encoding.utf_8 . should_equal True

    Test.group "ASCII" <|
        test = 'Hello World!'
        test_ascii = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]

        Test.specify "should dump ASCII bytes to a vector via encoding" <|
            test.bytes Encoding.ascii . should_equal test_ascii

        Test.specify "should convert an array of bytes to text" <|
            Text.from_bytes test_ascii Encoding.ascii . should_equal test

    Test.group "Invalid ASCII" <|
        test = "Ok But Not Ok Ã¦"
        IO.println <| test.bytes Encoding.ascii

    Test.group "UTF_8" <|
        kshi = '\u0915\u094D\u0937\u093F'
        kshi_utf_8 = [-32, -92, -107, -32, -91, -115, -32, -92, -73, -32, -92, -65]

        Test.specify "should dump utf-8 bytes to a vector via encoding" <|
            kshi.bytes Encoding.utf_8 . should_equal kshi_utf_8

        Test.specify "should dump utf-8 bytes to a vector" <|
            kshi.utf_8.should_equal kshi_utf_8

        Test.specify "should convert an array of bytes to text via encoding" <|
            Text.from_bytes kshi_utf_8 Encoding.utf_8 . should_equal kshi

        Test.specify "should convert an array of bytes to text" <|
            Text.from_utf_8 kshi_utf_8 . should_equal kshi

    Test.group "codepoints" <|
        facepalm = '\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F'
        facepalm_codes = [129318, 127996, 8205, 9794, 65039]

        Test.specify "should dump utf codepoints to a vector" <|
            facepalm.codepoints.should_equal facepalm_codes

        Test.specify "should convert an array of codepoints to text" <|
            Text.from_codepoints facepalm_codes . should_equal facepalm

main = Test.Suite.run_main here.spec
