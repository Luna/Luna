from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Test import Test, Test_Suite
import Standard.Test.Test_Environment
import Standard.Test.Extensions

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup

polyglot java import java.lang.Thread

spec setup:Cloud_Tests_Setup = setup.with_prepared_environment <|
    Test.group "Enso Cloud Secrets" pending=setup.pending <|
        Test.specify "should be able to list existing secrets" <|
            # We cannot test much more because we do not know what secrets are already there, further tests will check more by creating and deleting secrets
            Enso_Secret.list . should_be_a Vector

        Test.specify "should allow to create, list and delete secrets" <|
            my_secret = Enso_Secret.create "my_test_secret" "my_secret_value"
            my_secret.should_succeed
            my_secret.name . should_equal "my_test_secret"
            my_secret.id.is_empty . should_be_false

            wait_until_secret_is_propagated my_secret
            Enso_Secret.list . should_contain my_secret

            my_secret.delete . should_succeed

            wait_until_secret_is_propagated my_secret should_exist=False
            Enso_Secret.list . should_not_contain my_secret

        Test.specify "should allow to get a secret by name" <|
            created_secret = Enso_Secret.create "my_test_secret-2" "my_secret_value"
            created_secret.should_succeed

            wait_until_secret_is_propagated created_secret

            fetched_secret = Enso_Secret.get "my_test_secret-2"
            fetched_secret . should_equal created_secret

            created_secret.delete . should_succeed

        Test.specify "should fail to create a secret if it already exists" <|
            created_secret = Enso_Secret.create "my_test_secret-3" "my_secret_value"
            created_secret.should_succeed

            wait_until_secret_is_propagated created_secret

            r1 = Enso_Secret.create "my_test_secret-3" "my_secret_value"
            r1.should_fail_with Illegal_Argument
            r1.catch.to_display_text . should_contain "already exists"

            created_secret.delete . should_succeed

        # TODO later test secrets in JDBC in Database tests
        Test.specify "should allow to use secrets in HTTP request headers" pending=setup.httpbin_pending <|
            secret1 = Enso_Secret.create "my_test_secret-6" "Yet another Mystery"
            secret1.should_succeed

            Panic.with_finalizer secret1.delete <|
                wait_until_secret_is_propagated secret1
                uri = setup.httpbin_uri / "get"
                response = uri.fetch headers=[Header.new "X-My-Secret" secret1]
                response.at "headers" . at "X-my-secret" . should_equal "Yet another Mystery"

main = Test_Suite.run_main (spec Cloud_Tests_Setup.prepare)

## PRIVATE
   A helper method that retries a few times to get the secret, waiting until it starts being accessible.
   This is needed, because after creating a secret, there is a slight delay before it shows up within `list`.
   To make tests robust, we add this retry logic.
wait_until_secret_is_propagated secret should_exist=True =
    # Delays are in seconds
    sleep_time = 0.1
    total_sleep_delay = 10

    max_iterations = total_sleep_delay / sleep_time
    go i =
        if i >= max_iterations then Panic.throw (Illegal_State.Error "Secret update not visible in list after "+i.to_text+" retries.") else
            exists = Enso_Secret.get secret.name . is_error . not
            if exists != should_exist then
                Thread.sleep (1000*sleep_time . floor)
                @Tail_Call go (i+1)
    go 0
