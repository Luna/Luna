from Standard.Base import all
import Standard.Base.Data.Enso_Cloud.Enso_Secret.Enso_Secret_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Test import Test, Test_Suite
import Standard.Test.Test_Environment
import Standard.Test.Extensions

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup
from project.Network.URI_Spec import decode_query_params

spec setup:Cloud_Tests_Setup = setup.with_prepared_environment <|
    Test.group "Enso Cloud Secrets" pending=setup.pending <|
        Test.specify "should be able to list existing secrets" <|
            # We cannot test much more because we do not know what secrets are already there, further tests will check more by creating and deleting secrets
            Enso_Secret.list . should_be_a Vector

        Test.specify "should allow to create, list and delete secrets" <|
            my_secret = Enso_Secret.create "my_test_secret" "my_secret_value"
            my_secret.should_succeed
            my_secret.name . should_equal "my_test_secret"

            Enso_Secret.list . should_contain my_secret

            my_secret.delete . should_succeed

            Enso_Secret.list . should_not_contain my_secret

        Test.specify "should allow to get a secret by name" <|
            created_secret = Enso_Secret.create "my_test_secret-2" "my_secret_value"
            created_secret.should_succeed

            fetched_secret = Enso_Secret.get "my_test_secret-2"
            fetched_secret . should_equal created_secret

            created_secret.delete . should_succeed

        Test.specify "should fail to create a secret if it already exists" <|
            created_secret = Enso_Secret.create "my_test_secret-3" "my_secret_value"
            created_secret.should_succeed

            r1 = Enso_Secret.create "my_test_secret-3" "my_secret_value"
            r1.should_fail_with Illegal_Argument
            r1.catch.to_display_text . should_contain "already exists"

            created_secret.delete . should_succeed

        # TODO later test secrets in JDBC in Database tests
        Test.specify "should allow to use secrets in HTTP request query arguments" pending=setup.httpbin_pending <|
            secret1 = Enso_Secret.create "my_test_secret-4" "My Very Secret Value"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <|
                secret2 = Enso_Secret.create "my_test_secret-5" "Another Secret Value containing Emoji 😊❤️ and ąęś"
                secret2.should_succeed
                Panic.with_finalizer secret2.delete <|
                    uri = (setup.httpbin_uri / "get")
                        . add_query_argument "arg1" secret1
                        . add_query_argument "arg2" "plain value"
                        . add_query_argument "arg3" secret2

                    uri.to_text . should_equal (setup.httpbin_uri.to_text + "get?arg1=__SECRET__&arg2=plain+value&arg3=__SECRET__")
                    uri.raw_query . should_fail_with Enso_Secret_Error

                    response = uri.fetch
                    decode_query_params response . should_equal [["arg1", "My Very Secret Value"], ["arg2", "plain value"], ["arg3", "Another Secret Value containing Emoji 😊❤️ and ąęś"]]

        Test.specify "should allow to use secrets in HTTP request headers" pending=setup.httpbin_pending <|
            secret1 = Enso_Secret.create "my_test_secret-6" "Yet another Mystery"
            secret1.should_succeed
            Panic.with_finalizer secret1.delete <|
                uri = setup.httpbin_uri / "get"
                response = uri.fetch headers=[Header.new "X-My-Secret" secret1]
                response.at "headers" . at "X-My-Secret" . should_equal "Yet another Mystery"

main = Test_Suite.run_main (spec Cloud_Tests_Setup.prepare)
