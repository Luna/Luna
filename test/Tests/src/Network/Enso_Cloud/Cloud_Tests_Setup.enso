from Standard.Base import all
import Standard.Base.Errors.Illegal_State.Illegal_State

import Standard.Test.Test_Environment

polyglot java import org.enso.base.enso_cloud.AuthenticationProvider

type Cloud_Tests_Setup
    Mock api_url:URI credentials_location:File
    Cloud api_url:URI credentials_location:File
    None

    with_prepared_environment self ~action =
        if self == Cloud_Tests_Setup.None then action else
            Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_API_URI" self.api_url.to_text <|
                Test_Environment.unsafe_with_environment_override "ENSO_CLOUD_CREDENTIALS_FILE" self.credentials_location.absolute.normalize.path <|
                    action

    pending self = case self of
        Cloud_Tests_Setup.None -> "Cloud tests run only if ENSO_RUN_REAL_CLOUD_TEST or ENSO_HTTP_TEST_HTTPBIN_URL environment variable is defined."
        _ -> Nothing

    mock_only_pending self = case self of
        Cloud_Tests_Setup.Mock _ _ -> Nothing
        Cloud_Tests_Setup.Cloud _ _ -> "Mock cloud tests only run if ENSO_RUN_REAL_CLOUD_TEST is NOT defined, as they would interfere with other cloud tests."
        _ -> "Cloud tests run only if ENSO_HTTP_TEST_HTTPBIN_URL environment variable is defined."

    httpbin_pending self =
        if Environment.get "ENSO_HTTP_TEST_HTTPBIN_URL" . is_nothing . not then Nothing else
            "This test requires the ENSO_HTTP_TEST_HTTPBIN_URL environment variable to be defined."

    httpbin_uri self -> URI =
        base_url = Environment.get "ENSO_HTTP_TEST_HTTPBIN_URL"
        if base_url.is_nothing then
            Panic.throw (Illegal_State.Error "ENSO_HTTP_TEST_HTTPBIN_URL environment variable is not defined.")
        with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
        URI.from with_slash

    is_mock self -> Boolean = case self of
        Cloud_Tests_Setup.Mock _ _ -> True
        _ -> False

    ## Resets the user token, to avoid cached token from other tests interfering.
    reset_token =
        AuthenticationProvider.setToken Nothing

    ## Detects the setup based on environment settings.
    prepare : Cloud_Tests_Setup
    prepare =
        real_cloud = Environment.get "ENSO_RUN_REAL_CLOUD_TEST" . is_nothing . not
        case real_cloud of
            True ->
                api_url = Environment.get "ENSO_CLOUD_API_URI" . if_nothing <|
                    Panic.throw (Illegal_State.Error "If ENSO_RUN_REAL_CLOUD_TEST is defined, ENSO_CLOUD_API_URI must be defined as well.")
                credentials_location = Environment.get "ENSO_CLOUD_CREDENTIALS_FILE" . if_nothing <|
                    Panic.throw (Illegal_State.Error "If ENSO_RUN_REAL_CLOUD_TEST is defined, ENSO_CLOUD_CREDENTIALS_FILE must be defined as well.")

                Cloud_Tests_Setup.reset_token
                Cloud_Tests_Setup.Cloud (URI.from api_url) (File.new credentials_location)

            False ->
                base_url = Environment.get "ENSO_HTTP_TEST_HTTPBIN_URL"
                if base_url.is_nothing then Cloud_Tests_Setup.None else
                    with_slash = if base_url.ends_with "/" then base_url else base_url + "/"
                    enso_cloud_url = with_slash + "enso-cloud-mock/"

                    tmp_cred_file = File.create_temporary_file "enso-test-credentials" ".txt"
                    Cloud_Tests_Setup.test_token.write tmp_cred_file

                    Cloud_Tests_Setup.reset_token
                    Cloud_Tests_Setup.Mock (URI.from enso_cloud_url) tmp_cred_file

    test_token -> Text = "TEST-ENSO-TOKEN-caffee"
