from Standard.Base import all
import Standard.Base.Errors.Common.Syntax_Error

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    Test.group "URI" <|
        Test.specify "should parse URI from string" <|
            addr = URI.parse "http://user:pass@example.com/foo/bar?key=val"
            addr.scheme.should_equal "http"
            addr.user_info.should_equal "user:pass"
            addr.host.should_equal "example.com"
            addr.authority.should_equal "user:pass@example.com"
            addr.port.should_equal Nothing
            addr.path.should_equal "/foo/bar"
            addr.query.should_equal "key=val"
            addr.fragment.should_equal Nothing

        Test.specify "should allow to convert a text to URI" <|
            addr2 = URI.from "https://example.org:1234/?a=b&c=d+e#line=10,20"
            addr2.should_be_a URI
            addr2.scheme.should_equal "https"
            addr2.user_info.should_equal Nothing
            addr2.host.should_equal "example.org"
            addr2.authority.should_equal "example.org"
            addr2.port.should_equal 1234
            addr2.path.should_equal "/"
            addr2.query.should_equal "a=b&c=d+e"
            addr2.fragment.should_equal "line=10,20"

            addr3 = "ftp://example.com:21/" . to URI
            addr3.should_be_a URI
            addr3.scheme.should_equal "ftp"
            addr3.user_info.should_equal Nothing
            addr3.host.should_equal "example.com"
            addr3.authority.should_equal "example.com"
            addr3.port.should_equal 21
            addr3.path.should_equal "/"
            addr3.query.should_equal Nothing
            addr3.fragment.should_equal Nothing

        Test.specify "should escape URI" <|
            addr = URI.parse "https://%D0%9B%D0%B8%D0%BD%D1%83%D1%81:pass@ru.wikipedia.org/wiki/%D0%AF%D0%B4%D1%80%D0%BE_Linux?%D0%9A%D0%BE%D0%B4"
            addr.user_info.should_equal "Линус:pass"
            addr.authority.should_equal "Линус:pass@ru.wikipedia.org"
            addr.path.should_equal "/wiki/Ядро_Linux"
            addr.query.should_equal "Код"
            addr.fragment.should_equal Nothing
            addr.raw_user_info.should_equal "%D0%9B%D0%B8%D0%BD%D1%83%D1%81:pass"
            addr.raw_authority.should_equal "%D0%9B%D0%B8%D0%BD%D1%83%D1%81:pass@ru.wikipedia.org"
            addr.raw_path.should_equal "/wiki/%D0%AF%D0%B4%D1%80%D0%BE_Linux"
            addr.raw_query.should_equal "%D0%9A%D0%BE%D0%B4"
            addr.raw_fragment.should_equal Nothing

        Test.specify "should return Syntax_Error when parsing invalid URI" <|
            r = URI.parse "a b c"
            r.should_fail_with Syntax_Error
            r.catch.to_display_text . should_contain "a b c"
            URI.from "a b c" . should_fail_with Syntax_Error

        Test.specify "should compare two URIs for equality" <|
            (URI.parse "http://google.com").should_equal (URI.parse "http://google.com")
            (URI.parse "http://google.com").should_not_equal (URI.parse "http://amazon.com")

    Test.group "URI_With_Query" <|
        Test.specify "should allow to convert URI to URI_With_Query" <|
            TODO

        Test.specify "will convert to URI_With_Query if a query argument is added" <|

        Test.specify "should be able to add multiple query arguments" <|

        Test.specify "should be able to convert back to URI" <|

        Test.specify "will not convert back to URI if secrets are present in the query arguments" pending="TODO testing secrets is for later" <|

        Test.specify "should correctly handle various characters within the key and value of arguments" <|
            TODO tests both on raw URI_With_Query and on to_uri

        # TODO common tests on URI?
        # maybe fetch/post

main = Test_Suite.run_main spec
