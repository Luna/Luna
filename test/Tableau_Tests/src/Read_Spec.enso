from Standard.Base import all
import Standard.Base.Errors.File_Error.File_Error

from Standard.Table import all
from Standard.Tableau import Hyper_File
import Standard.Tableau.Hyper_Errors.Hyper_Table_Not_Found

from Standard.Test import all

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter

add_specs suite_builder = suite_builder.group "Read Tables" group_builder->
    no_file = enso_project.data / "no_file.hyper"
    names_file = enso_project.data / "names.hyper"
    names_table = Hyper_File.new names_file . tables . first

    check_names_table table rows=14 =
        table.row_count.should_equal rows
        table.columns.map .name . should_equal ["first_name", "last_name", "age", "Calculation1"]
        table.columns.map .value_type . should_equal ([Value_Type.Char Nothing variable_length=True, Value_Type.Char Nothing variable_length=True, Value_Type.Integer ..Bits_64, Value_Type.Integer ..Bits_64].take rows)
        table.at "first_name" . to_vector . should_equal (["James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas", "Daniel", Nothing, "Anthony", Nothing].take rows)
        table.at "last_name" . to_vector . should_equal (["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Garcia", Nothing, Nothing].take rows)
        table.at "age" . to_vector . should_equal ([39, 40, 41, 42, 43, 44, 39, 9, 10, 11, 12, 1, 2, 25].take rows)

    group_builder.specify "should be able to read the structure of a table" <|
        metadata =  names_table.column_metadata
        metadata.length.should_equal 4
        metadata.map .name . should_equal ["first_name", "last_name", "age", "Calculation1"]
        metadata.map .value_type . should_equal [Value_Type.Char Nothing variable_length=True, Value_Type.Char Nothing variable_length=True, Value_Type.Integer ..Bits_64, Value_Type.Integer ..Bits_64]
        metadata.map .nullable . should_equal [True, True, True, True]

    group_builder.specify "should be able to read the column_info of a table" <|
        metadata = names_table.column_info
        metadata.row_count.should_equal 4
        metadata.columns.map .name . should_equal ["Column", "Value Type", "Nullable"]
        metadata.at "Column" . to_vector . should_equal ["first_name", "last_name", "age", "Calculation1"]
        metadata.at "Value Type" . to_vector . should_equal [Value_Type.Char Nothing variable_length=True, Value_Type.Char Nothing variable_length=True, Value_Type.Integer ..Bits_64, Value_Type.Integer ..Bits_64]

    group_builder.specify "should be able to read a table" <|
        table = names_table.read
        check_names_table table

        table_2 = Hyper_File.new names_file . read "Extract"
        check_names_table table_2

    group_builder.specify "should be able to read a table with limited rows" <|
        table = names_table.read (..First 5)
        check_names_table table 5

        table_2 = Hyper_File.new names_file . read "Extract"  limit=(..First 7)
        check_names_table table_2 7

    group_builder.specify "should handle a missing file when reading a table" <|
        r1 = Hyper_File.new no_file . read "Extract"
        r1.should_fail_with File_Error
        r1.catch.should_be_a File_Error.Not_Found

    group_builder.specify "should handle a missing table when reading a table" <|
        r1 = Hyper_File.new names_file . read "NoTable"
        r1.should_fail_with Hyper_Table_Not_Found

        r2 = Hyper_File.new names_file . read "NoTable" schema="Extract"
        r2.should_fail_with Hyper_Table_Not_Found
