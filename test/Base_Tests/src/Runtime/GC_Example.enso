from Standard.Base import all
import Standard.Base.Runtime.Managed_Resource.Managed_Resource
import Standard.Base.Runtime.Ref.Ref

type My_Resource
    Value counter:Ref

    close self =
        self.counter.modify (x-> x-1)
        Nothing

    allocate counter:Ref =
        counter.modify (+1)
        Managed_Resource.register (My_Resource.Value counter) close_resource

close_resource resource = resource.close

repeat_cleanup_until_done counter println =
    go i =
        if counter.get == 0 then Nothing else
            if i % 100 == 0 then
                println "Still "+counter.get.to_text+" resources to clean up..."
            Runtime.gc
            @Tail_Call go i+1
    go 1

perform_test n:Integer println =
    resource_holder = Ref.new Nothing
    counter = Ref.new 0

    println "Allocating "+n.to_text+" resources..."
    allocate_resources ref =
        all = 0.up_to n . map _->
            My_Resource.allocate counter
        ref.put all
    allocate_resources resource_holder

    println "Cleaning up... "+resource_holder.get.length.to_text+" resources"
    # We replace the vector with Nothing to make the resources inaccessible and schedule them for GC
    resource_holder.put Nothing

    repeat_cleanup_until_done counter println
    println "All cleaned up! Remaining: "+counter.get.to_text
    counter.get

main n=1000000 =
    perform_test n IO.println
