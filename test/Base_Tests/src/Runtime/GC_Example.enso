from Standard.Base import all
import Standard.Base.Runtime.Managed_Resource.Managed_Resource
import Standard.Base.Runtime.Ref.Ref

type My_Resource
    Value counter:Ref

    close self =
        self.counter.modify (x-> x-1)
        Nothing

    allocate counter:Ref =
        counter.modify (+1)
        Managed_Resource.register (My_Resource.Value counter) close_resource

close_resource resource = resource.close

repeat_cleanup_until_done counter =
    go i =
        if counter.get == 0 then Nothing else
            if i % 100 == 0 then
                IO.println "Still "+counter.get.to_text+" resources to clean up..."
            Runtime.gc
            @Tail_Call go i+1
    go 1

perform_test n:Integer println =

    counter = Ref.new 0
    println "Allocating "+n.to_text+" resources..."
    0.up_to n . each _->
        My_Resource.allocate counter

    println "Cleaning up..."
    repeat_cleanup_until_done counter
    println "All cleaned up! Remaining: "+counter.get.to_text
    counter.get

main n=1000000 =
    perform_test n IO.println

