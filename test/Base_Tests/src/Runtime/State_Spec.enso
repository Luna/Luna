from Standard.Base import all

import Standard.Base.Runtime.State
from Standard.Base.Errors.Common import Unsupported_Argument_Types, Uninitialized_State

from Standard.Test import all

type Lazy_Data
    private Value ~lazy_field

add_specs suite_builder = suite_builder.group "State" group_builder->
    group_builder.specify "Type as a key" <|
        s = State.run Test 42 <|
            State.get Test
        s . should_equal 42

    group_builder.specify "string as a key" <|
        s n = State.run "my_state" n <|
            State.get "my_state"

        p = Panic.catch Unsupported_Argument_Types (s 42) err->
            err.payload

        Meta.type_of p . should_equal Unsupported_Argument_Types

    fill_field =
        (State.get Lazy_Data) + 1

    group_builder.specify "lazy field and state: alloc and get" <|
        fourty_two = State.run Lazy_Data 41 <|
            data = Lazy_Data.Value fill_field
            data.lazy_field

        fourty_two . should_equal 42

    group_builder.specify "lazy field and state: just alloc" <|
        data = State.run Lazy_Data 41 <|
            Lazy_Data.Value fill_field

        Test.expect_panic Uninitialized_State <| data.lazy_field

    group_builder.specify "lazy field and state: just get" <|
        data =
            Lazy_Data.Value fill_field

        fourty_two = State.run Lazy_Data 41 <|
            data.lazy_field

        fourty_two . should_equal 42

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter

