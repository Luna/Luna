from Standard.Base import all
import Standard.Base.Enso_Cloud.Internal.Audit_Log.Audit_Log
import Standard.Base.Enso_Cloud.Internal.Test_Utils
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Test import all
import Standard.Test.Test_Environment

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup


add_specs suite_builder setup:Cloud_Tests_Setup =
    suite_builder.group "Enso Cloud Audit Log" pending=setup.pending group_builder->
        [False, True].each async->
            group_builder.specify "should be able to send a log message "+(if async then "(async)" else "(sync)") <|
                before = Date_Time.now
                random_payload = "payload-" + Random.uuid
                Audit_Log.report_event "TestEventType" "Message" (JS_Object.from_pairs [["my_field", random_payload]]) async=async
                Test.with_retries <|
                    my_event = Test_Utils.get_audit_log_events . find ev-> (ev.metadata.get "my_field") == random_payload
                    my_event.should_succeed
                    (my_event.timestamp > before).should_be_true
                    my_event.message.should_equal "Message"
                    my_event.metadata.get "type" . should_equal "TestEventType"

        group_builder.specify "does not allow restricted fields in metadata" <|
            Audit_Log.report_event "TestEventType" "Message" (JS_Object.from_pairs [["type", "my type override?"]]) . should_fail_with Illegal_Argument

main filter=Nothing =
    setup = Cloud_Tests_Setup.prepare
    suite = Test.build suite_builder->
        add_specs suite_builder setup
    suite.run_with_filter filter
