from Standard.Base import all
import Standard.Base.Enso_Cloud.Data_Link.Data_Link_Format
import Standard.Base.Enso_Cloud.Errors.Missing_Data_Link_Library
import Standard.Base.Errors.Common.Not_Found
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Enso_Cloud.Enso_File.Enso_Asset_Type

from Standard.Test import all
import Standard.Test.Test_Environment

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup

add_specs suite_builder setup:Cloud_Tests_Setup = setup.with_prepared_environment <|
    suite_builder.group "DataLinks in Enso Cloud" pending=setup.real_cloud_pending group_builder->
        group_builder.specify "should be able to access an example HTTP data-link" <|
            ## We assume that the cloud has a sample data-link called `TestDataLink` present
               TODO in future iterations this file will be created by the test suite itself, to make it self-contained
            assets = Enso_File.root.list
            datalink = assets.find a-> a.name.starts_with "TestDataLink-HTTP"
            datalink.should_be_a Enso_File
            datalink.asset_type.should_equal Enso_Asset_Type.Data_Link

            # We assume that the datalink points to https://raw.githubusercontent.com/enso-org/enso/develop/test/Base_Tests/data/sample.txt
            r = datalink.read
            r.should_be_a Text
            r.should_contain "Cupcake"

        group_builder.specify "will report which library is missing if a datalink relying on other library is accessed" <|
            assets = Enso_File.root.list
            datalink = assets.find a-> a.name.starts_with "TestDataLink-S3"
            datalink.should_be_a Enso_File
            datalink.asset_type.should_equal Enso_Asset_Type.Data_Link

            r = datalink.read
            r.should_fail_with Missing_Data_Link_Library
            r.catch.to_display_text . should_contain "The data link for S3 is provided by the library Standard.AWS which is not loaded."

        group_builder.specify "does not allow to use Data_Link_Format to read/write regular files" <|
            temp_file = File.create_temporary_file "not-a-datalink" ".txt"
            Test.expect_panic Illegal_Argument <|
                Data_Link_Format.write_raw_config temp_file "{}"
            Test.expect_panic Illegal_Argument <|
                Data_Link_Format.read_raw_config temp_file

        group_builder.specify "should be able to read a local datalink to an Enso File" <|
            datalink = transform_datalink (enso_project.data / "datalinks" / "example-enso-file.datalink") content->
                content.replace "PLACEHOLDER_ORG_NAME" Enso_User.current.organization_name
            datalink.read . should_equal "Hello Another!"

        group_builder.specify "should be able to read a datalink in the Cloud to Enso File" <|
            # TODO currently this link is created manually, later we should be generating it as part of the test
            datalink = Enso_File.new "enso://"+Enso_User.current.organization_name+"/TestDataLink-EnsoFile"
            datalink.read . should_equal "Hello Another!"

        group_builder.specify "should be able to write Text to a data link pointing to a Cloud file" <|
            directory_name = "data-link-test"+(Date_Time.now.format "yyyy-MM-dd_HHmmss.fV" . replace "/" "|")
            dir = (Enso_File.root / directory_name).create_directory
            dir.should_succeed
            Panic.with_finalizer (dir.delete_if_exists recursive=True) <|
                datalink = transform_datalink (enso_project.data / "datalinks" / "writable-enso-file.datalink") content->
                    content . replace "PLACEHOLDER_ORG_NAME" Enso_User.current.organization_name
                            . replace "PLACEHOLDER_DIRECTORY_NAME" directory_name

                r1 = datalink.read
                r1.should_fail_with File_Error
                r1.catch.should_be_a File_Error.Not_Found

                my_content = Random.uuid
                my_content.write datalink . should_equal datalink

                datalink.read . should_equal my_content




main filter=Nothing =
    setup = Cloud_Tests_Setup.prepare
    suite = Test.build suite_builder->
        add_specs suite_builder setup
    suite.run_with_filter filter


## Reads the datalink as plain text and applies the transformation.
transform_datalink base_file transform =
    content = Data_Link_Format.read_raw_config base_file
    new_content = transform content
    temp_file = File.create_temporary_file prefix=base_file.name suffix=base_file.extension
    Data_Link_Format.write_raw_config temp_file new_content replace_existing=True . if_not_error temp_file
