from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Test import Test, Test_Suite
import Standard.Test.Test_Environment
import Standard.Test.Extensions

import project.Network.Enso_Cloud.Cloud_Tests_Setup.Cloud_Tests_Setup
from enso_dev.Base_Tests.Network.Enso_Cloud.Cloud_Tests_Setup import with_retries

spec setup:Cloud_Tests_Setup = setup.with_prepared_environment <|
    Test.group "Enso Cloud Files" pending=setup.real_cloud_pending <|
        Test.specify "should be able to list the root directory" <|
            assets = Enso_File.root.list
            # We don't a priori know the contents, so we can only check very generic properties
            assets . should_be_a Vector
            assets.each f-> f.should_be_a Enso_File

            ## We assume that it contains a test file `test_file.json`
               TODO in future iterations this file will be created by the test suite itself, to make it self-contained
               The file is expected to contain:
               [1, 2, 3, "foo"]
            assets.map .name . should_contain "test_file.json"
        Test.specify "should allow to create and delete a directory" <|
            my_name = "my_test_dir-" + (Random.uuid.take 5)
            my_dir = Enso_File.root.create_directory my_name
            my_dir.should_succeed
            delete_on_fail caught_panic =
                my_dir.delete
                Panic.throw caught_panic
            Panic.catch Any handler=delete_on_fail <| with_retries <|
                my_dir.is_directory . should_be_true
                my_dir.exists . should_be_true
                my_dir.name . should_equal my_name

                # TODO this is a workaround because create does not return organizationId!
                # Enso_File.root.list . should_contain my_dir
                Enso_File.root.list.map .name . should_contain my_name

            my_dir.delete . should_succeed

            with_retries <|
                # TODO workaround for missing organizationId
                # Enso_File.root.list . should_not_contain my_dir
                Enso_File.root.list.map .name . should_not_contain my_name

                # TODO the dir still shows as 'existing' after deletion, probably because it still is there in the Trash
                # my_dir.exists . should_be_false

        Test.specify "should allow to find a file by name" <|
            # TODO the file should be created programmatically when write is implemented
            f = Enso_File.root / "test_file.json"
            f.should_succeed
            f.name . should_equal "test_file.json"
            f.is_directory . should_be_false
            f.exists . should_be_true

        Test.specify "should not find nonexistent files" <|
            f = Enso_File.root / "nonexistent_file.json"
            f.should_fail_with Not_Found

        Test.specify "should not allow to create a directory inside of a regular file" <|
            # TODO the file should be created programmatically when write is implemented
            test_file = Enso_File.root / "test_file.json"
            test_file.exists . should_be_true

            r = test_file.create_directory "my_test_dir"
            r.should_fail_with Illegal_Argument

        Test.specify "should delete all contents of a directory when deleting a directory" <|
            dir1 = Enso_File.root.create_directory "my_test_dir1"+(Random.uuid.take 5)
            dir1.should_succeed

            dir2 = dir1.create_directory "my_test_dir2"
            dir2.should_succeed

            dir1.delete . should_succeed

            with_retries <|
                dir1.exists . should_be_false
                # The inner directory should also have been trashed if its parent is removed
                dir2.exists . should_be_false

        Test.specify "should not allow to delete the root directory" <|
            Enso_File.root.delete . should_fail_with Illegal_Argument

        Test.specify "should be able to create and delete a file" pending="TODO: Cloud file write support" <|
            Error.throw "TODO"

        expected_file_text = '[1, 2, 3, "foo"]'
        Test.specify "should be able to read and decode a file using various formats" <|
            # TODO the file should be created programmatically when write is implemented
            test_file = Enso_File.root / "test_file.json"
            test_file.exists . should_be_true

            test_file.read Plain_Text . should_equal expected_file_text

            # auto-detection of JSON format:
            json = test_file.read
            json.should_be_a Vector
            json.should_equal [1, 2, 3, "foo"]

            test_file.read_bytes . should_equal expected_file_text.utf_8

        Test.specify "should be able to open a file as input stream" <|
            test_file = Enso_File.root / "test_file.json"
            test_file.exists . should_be_true

            bytes = test_file.with_input_stream [File_Access.Read] stream->
                stream.read_all_bytes

            bytes.should_equal expected_file_text.utf_8


main = Test_Suite.run_main (spec Cloud_Tests_Setup.prepare)
