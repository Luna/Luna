from Standard.Base import all
import Standard.Base.Data.Vector.Map_Error
import Standard.Base.Errors.Encoding_Error.Encoding_Error
import Standard.Base.Errors.File_Error.File_Error

from Standard.Test import all

type Lazy_Ref
    Value ~get

add_specs suite_builder =
    sample_xxx = enso_project.data / "sample.xxx"
    sample_txt = enso_project.data / "helloworld.txt"
    windows_log = enso_project.data / "windows.log"

    suite_builder.group "Auto_Detect" group_builder->
        group_builder.specify "should raise an error when reading an unknown file" <|
            bytes = sample_xxx.read
            bytes.should_fail_with File_Error
            bytes.catch.should_be_a File_Error.Unsupported_Type

        group_builder.specify "should be able to read a text file" <|
            content = sample_txt.read
            content.should_equal "Hello World!"

        group_builder.specify "should raise a not-found error when reading a nonexistent file even of unknown format" <|
            r1 = (File.new "nonexistent.file.of.weird-format").read
            r1.should_fail_with File_Error
            r1.catch.should_be_a File_Error.Not_Found

    suite_builder.group "Bytes" group_builder->
        group_builder.specify "should be able to read a file as Bytes" <|
            bytes = sample_xxx.read Bytes
            bytes.should_equal [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]

        group_builder.specify "should be able to read a file as Bytes by method" <|
            bytes = Data.read (sample_xxx) Bytes
            bytes.should_equal [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]

        group_builder.specify "should be able to read a file as Bytes by path" <|
            path = sample_xxx.path
            bytes = Data.read path Bytes
            bytes.should_equal [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]

    suite_builder.group "Plain_Text" group_builder->
        group_builder.specify "should be able to read a file as Text" <|
            text = sample_xxx.read ..Plain_Text
            text.should_equal "Hello World!"

        group_builder.specify "should be able to read a file as Text with Encoding" <|
            text = windows_log.read (..Plain_Text Encoding.windows_1252)
            text.should_equal "Hello World! $¢¤¥"

        group_builder.specify "should raise a warning when invalid encoding in a Text file" <|
            action = windows_log.read (..Plain_Text Encoding.ascii) on_problems=_
            tester result = result . should_equal 'Hello World! $\uFFFD\uFFFD\uFFFD'
            problems = [Encoding_Error.Error "Failed to decode 3 code units (at positions: 14, 15, 16)."]
            Problems.test_problem_handling action problems tester

            # Check that it defaults to warning.
            Problems.expect_only_warning Encoding_Error <|
                windows_log.read (..Plain_Text Encoding.ascii)

    suite_builder.group "JSON_Format" group_builder->
        group_builder.specify "should be able to read a file as Json" <|
            f1 = enso_project.data / "sample.json"
            j1 = f1.read
            j1.at "arr" . should_equal [1, 2, 3]
            j1.at "num" . should_equal 42.5
            j1.at "not" . should_equal Nothing

            f2 = enso_project.data / "sample-json.weird-extension"
            j2 = f2.read JSON_Format
            j2.at 0 . at "foo" . should_equal "bar"
            j2.at 1 . should_equal 42
            j2.at 2 . should_equal Nothing
            j2.at 3 . should_equal "baz"

        group_builder.specify "should gracefully handle malformed files" <|
            f1 = enso_project.data / "sample-malformed.json"
            r1 = f1.read
            r1.should_fail_with File_Error
            r1.catch.should_be_a File_Error.Corrupted_Format

    suite_builder.group "File Format" group_builder->
        group_builder.specify "should provide a list of all supported file format name patterns" <|
            patterns = File_Format.all_known_name_patterns
            patterns.should_contain "*.txt"
            patterns.should_contain "*.json"

    suite_builder.group "Data.read_many" group_builder->
        js_object = JS_Object.from_pairs [["arr", [1, 2, 3]], ["num", 42.5], ["not", Nothing]]
        js_as_text = Lazy_Ref.Value <|
            (enso_project.data / "sample.json") . read ..Plain_Text
        group_builder.specify "should allow to read a list of files and return them as vector" <|
            files = [enso_project.data / "sample.json", enso_project.data / "helloworld.txt"]

            # Read all files using Auto_Detect - each file is read according to its inferred format.
            r1 = Data.read_many files
            r1.should_equal [js_object, "Hello World!"]

            # Read all files using a specified format.
            r2 = Data.read_many files format=..Plain_Text
            r2.should_be_a Vector
            r2.should_equal [js_as_text.get, "Hello World!"]

        group_builder.specify "should work with paths as Text" <|
            files = [enso_project.data / "sample.json", enso_project.data / "helloworld.txt"]
            paths = files.map .path
            r1 = Data.read_many paths return=..Vector
            r1.should_equal [js_object, "Hello World!"]

        three_files = [enso_project.data / "sample.json", enso_project.data / "nonexistent.txt", enso_project.data / "helloworld.txt"]
        group_builder.specify "should allow to Report_Error if any file fails to load" <|
            r1 = Data.read_many three_files return=..Vector on_problems=..Report_Error
            # The error reports as File_Error
            r1.should_fail_with File_Error
            # But it's actually Map_Error with index metadata
            r1.should_fail_with unwrap_errors=False Map_Error
            r1.catch.index . should_equal 1
            r1.catch.inner_error.should_be_a File_Error.Not_Found

        group_builder.specify "should allow to Ignore errors if any file fails to load" <|
            r1 = Data.read_many three_files return=..Vector on_problems=..Ignore
            r1.should_equal [js_object, Nothing, "Hello World!"]
            Problems.assume_no_problems r1

        group_builder.specify "should allow to continue loading if errors are encountered, but report them as warnings" <|
            r1 = Data.read_many three_files return=..Vector on_problems=..Report_Warning
            r1.should_equal [js_object, Nothing, "Hello World!"]
            Problems.expect_only_warning File_Error r1

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter
