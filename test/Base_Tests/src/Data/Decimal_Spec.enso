from Standard.Base import all
import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Base.Data.Numbers import Number_Parse_Error
from Standard.Base.Errors.Common import Loss_Of_Numeric_Precision

from Standard.Test import all

polyglot java import org.enso.base.numeric.Decimal_Utils

Decimal.should_have_rep self rep = self.get_internal_representation . should_equal rep

add_specs suite_builder =
    suite_builder.group "construction" group_builder->
        group_builder.specify "should be able to construct a Decimal from a string" <|
            Decimal.new "123.45" . should_have_rep [12345, 5, 2]
            Decimal.from_text "123.45" . should_have_rep [12345, 5, 2]

        group_builder.specify "should throw Number_Parse_Error on a badly-formatted string" <|
            Decimal.new "ee" . should_fail_with Number_Parse_Error
            Decimal.new "--123.3.3" . should_fail_with Number_Parse_Error

        group_builder.specify "should be able to construct a Decimal from a string, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 4
            Decimal.new "123.45" mc . should_have_rep [1235, 4, 1]
            Decimal.new "123.45" mc . should_equal (Decimal.new "123.5")

        group_builder.specify "should be able to construct a Decimal from a string, with an explicit precision, using a non-default rounding" <|
            mc = Math_Context.new 4 Rounding_Mode.half_down
            Decimal.new "123.45" mc . should_have_rep [1234, 4, 1]
            Decimal.new "123.45" mc . should_equal (Decimal.new "123.4")

        group_builder.specify "should be able to construct a Decimal from a long string" <|
            Decimal.new "495782984723948723947239938732974241.2345" . should_have_rep [4957829847239487239472399387329742412345, 40, 4]
            Decimal.from_text "495782984723948723947239938732974241.2345" . should_have_rep [4957829847239487239472399387329742412345, 40, 4]

        group_builder.specify "should be able to construct a Decimal from a small integer" <|
            Decimal.new 1234500 . should_have_rep [1234500, 7, 0]

        group_builder.specify "should be able to construct a Decimal from a small integer, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 4
            Decimal.new 1234500 mc . should_have_rep [1235, 4, -3]
            Decimal.new 1234500 mc . should_equal (Decimal.new 1235000)

        group_builder.specify "should be able to construct a Decimal from a small integer, with an explicit precision, using the non-default rounding" <|
            mc = Math_Context.new 4 Rounding_Mode.half_down
            Decimal.new 1234500 mc . should_have_rep [1234, 4, -3]
            Decimal.new 1234500 mc . should_equal (Decimal.new 1234000)

        group_builder.specify "should be able to construct a Decimal from a large integer" <|
            Decimal.new 495782984723948723947239938732974241234500 . should_have_rep [495782984723948723947239938732974241234500 , 42, 0]

        group_builder.specify "should be able to construct a Decimal from a large integer, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 39
            Decimal.new 495782984723948723947239938732974241234500 mc . should_have_rep [495782984723948723947239938732974241235 , 39, -3]
            Decimal.new 495782984723948723947239938732974241234500 mc . should_equal (Decimal.new 495782984723948723947239938732974241235000 )

        group_builder.specify "should be able to construct a Decimal from a large integer, with an explicit precision, using the non-default rounding" <|
            mc = Math_Context.new 39 Rounding_Mode.half_down
            Decimal.new 495782984723948723947239938732974241234500 mc . should_have_rep [495782984723948723947239938732974241234 , 39, -3]
            Decimal.new 495782984723948723947239938732974241234500 mc . should_equal (Decimal.new 495782984723948723947239938732974241234000 )

        group_builder.specify "should be able to construct a Decimal from a float" <|
            d = Decimal.from_float 123.45
            d.should_have_rep [12345, 5, 2]

        group_builder.specify "should be able to construct a Decimal from a float, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 5
            d = Decimal.from_float 123.125 mc
            d.should_have_rep [12313, 5, 2]
            d.should_equal (Decimal.new "123.13")

        group_builder.specify "should be able to construct a Decimal from a float, with an explicit precision, using a non-default rounding" <|
            mc = Math_Context.new 5 Rounding_Mode.half_down
            d = Decimal.from_float 123.125 mc
            d.should_have_rep [12312, 5, 2]
            d.should_equal (Decimal.new "123.12")

        group_builder.specify "should report precision loss accurately" <|
            mc4 = Math_Context.new 4
            mc5 = Math_Context.new 5

            Problems.not_expect_warning (Decimal.new "123.25")
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new "123.25" mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new "123.25" mc5)

            Problems.not_expect_warning (Decimal.new 123.25)
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 123.25 mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new 123.25 mc5)

            Problems.not_expect_warning (Decimal.new 12325)
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 12325 mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new 12325 mc5)

        group_builder.specify "should throw Illegal_Argument for NaN/Inf" <|
            Decimal.new Number.nan . should_fail_with Illegal_Argument
            Decimal.new Number.positive_infinity . should_fail_with Illegal_Argument
            Decimal.new Number.negative_infinity . should_fail_with Illegal_Argument

        group_builder.specify "should be convertible via .from" <|
            Decimal.from "123.45" . should_equal (Decimal.new "123.45")
            Decimal.from "123.45" . should_equal (Decimal.from_text "123.45")
            Decimal.from 123.45 . should_equal (Decimal.new 123.45)
            Decimal.from 123.45 . should_equal (Decimal.from_float 123.45)
            Decimal.from 12345 . should_equal (Decimal.new 12345)
            Decimal.from 12345 . should_equal (Decimal.from_integer 12345)

        group_builder.specify "should compare correctly" <|
            nums = [["-45.23", "124.872"], [-45.23, 124.872], [-45, 124]]
            nums.map pr->
                a = Decimal.new (pr.at 0)
                b = Decimal.new (pr.at 1)

                (a == a) . should_be_true
                (b == b) . should_be_true
                (a == b) . should_be_false
                (b == a) . should_be_false

                (a != a) . should_be_false
                (b != b) . should_be_false
                (a != b) . should_be_true
                (b != a) . should_be_true

                (a <= a) . should_be_true
                (b <= b) . should_be_true
                (a <= b) . should_be_true
                (b <= a) . should_be_false

                (a >= a) . should_be_true
                (b >= b) . should_be_true
                (a >= b) . should_be_false
                (b >= a) . should_be_true

                (a < b) . should_be_true
                (b > a) . should_be_true
                (a > b) . should_be_false
                (b < a) . should_be_false

                (a <= b) . should_be_true
                (b >= a) . should_be_true
                (a >= b) . should_be_false
                (b <= a) . should_be_false

                (a < a) . should_be_false
                (b < b) . should_be_false
                (a > a) . should_be_false
                (b > b) . should_be_false

                Decimal.new (pr.at 0) . should_equal (Decimal.new (pr.at 0))
                Decimal.new (pr.at 1) . should_equal (Decimal.new (pr.at 1))

                a . should_equal a
                b . should_equal b
                a . should_not_equal b
                b . should_not_equal a

        group_builder.specify "should compare correctly, even with different internal representations" <|
            a = Decimal.new "12000"
            b = Decimal.new "12000" (Math_Context.new 2)
            c = Decimal.new "12000" (Math_Context.new 3)
            [[a, b], [a, c], [b, c]].map pr->
                x0 = pr.at 0
                x1 = pr.at 1
                ir0 = x0.get_internal_representation
                ir1 = x1.get_internal_representation
                # TODO: specialization error if we sipmly say (ir0 != ir1)
                ([0, 1, 2].all i-> ((ir0.at i) == (ir1.at i))) . should_be_false

                (x0 == x1) . should_be_true
                (x1 == x0) . should_be_true
                (x0 != x1) . should_be_false
                (x1 != x0) . should_be_false

    suite_builder.group "arithmetic" group_builder->
        group_builder.specify "should be able to create a Decimal from a negative Float " <|
            vs = []
                + [92233720368547758080.0]
                + [9223372036854777000.0]
                + [9223372036854776001.0]
                + [9223372036854776000.0]
                + [9223372036854775808.0]
                + [9223372036854775000.0]
                + [9223372036854774000.0]
                + [9223372036854700000.0]
                + [9223372036854000000.0]
                + [9223372000000000000.0]
                + [922337203685470000.0]
                + [92233720368547000.0]
                + [9223372036854700.0]
                + [922337203685470.0]
                + [92233720368547.0]
                + [9223372036854.0]
                + [922337203685.0]
                + [92233720368.0]
                + [9223372036.0]
                + [922337203.0]
                + [92233720.0]
                + [9223372.0]
                + [922337.0]
                + [92233.0]
                + [9223.0]
                + [922.0]

            vs.map v->
                IO.println "======== "+v.to_text
                #r = Decimal.float_id v
                r = identity v
                IO.println "float_id "+v.to_text+" "+r.to_text

        values_ = [["0", 0]]
            + [["1", 1]]
            + [["-1", -1]]
            + [["2", 2]]
            + [["-2", -2]]
            + [["12.34", 12.34]]
            + [["-34.56", -34.56]]
            + [["9223372036854775806", 9223372036854775806]]
            + [["9223372036854775807", 9223372036854775807]]
            + [["9223372036854775808", 9223372036854775808]]
            + [["-9223372036854775809", -9223372036854775809]]
            + [["-9223372036854775808", -9223372036854775808]]
            + [["-9223372036854775807", -9223372036854775807]]
            + [[9223372036854775806.0, 9223372036854775806.0]]
            + [[9223372036854775807.0, 9223372036854775807.0]]
            + [[9223372036854775808.0, 9223372036854775808.0]]
            + [[-9223372036854775809.0, -9223372036854775809.0]]
            + [[-9223372036854775808.0, -9223372036854775808.0]]
            + [[-9223372036854775807.0, -9223372036854775807.0]]
            + [["9223372036854775806000", 9223372036854775806000]]
            + [["9223372036854775807000", 9223372036854775807000]]
            + [["9223372036854775808000", 9223372036854775808000]]
            + [["-9223372036854775809000", -9223372036854775809000]]
            + [["-9223372036854775808000", -9223372036854775808000]]
            + [["-9223372036854775807000", -9223372036854775807000]]
            + [["9223372036854775806000.0", 9223372036854775806000.0]]
            + [["9223372036854775807000.0", 9223372036854775807000.0]]
            + [["9223372036854775808000.0", 9223372036854775808000.0]]
            + [["-9223372036854775809000.0", -9223372036854775809000.0]]
            + [["-9223372036854775808000.0", -9223372036854775808000.0]]
            + [["-9223372036854775807000.0", -9223372036854775807000.0]]
            + [["2.0", 2.0]]
            + [["2.00", 2.0]]
            + [[Decimal.new 12000 (Math_Context.new 0), 1200]]
            + [[Decimal.new 12000 (Math_Context.new 1), 1200]]
            + [[Decimal.new 12000 (Math_Context.new 2), 1200]]
            + [[Decimal.new 12000 (Math_Context.new 3), 12000]]

        values = []

        values.map_with_index i-> pr->
            group_builder.specify "should add Decimals correctly "+i.to_text <|
                IO.println i
                IO.println pr
                arg = pr.at 0
                expected = pr.at 1
                b = (Decimal.new arg) == expected
                b.should_be_true
                Decimal.new arg . should_equal expected

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter="negative Float"
