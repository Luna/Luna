from Standard.Base import all
import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Base.Data.Numbers import Number_Parse_Error
from Standard.Base.Errors.Common import Loss_Of_Numeric_Precision

from Standard.Test import all

polyglot java import org.enso.base.numeric.Decimal_Utils

Decimal.should_have_rep self rep = self.get_internal_representation . should_equal rep

Any.ssee self b = if self == b then Nothing else
    IO.println "SSEE "+self.to_text+" "+b.to_text

add_specs suite_builder =
    suite_builder.group "construction" group_builder->
        group_builder.specify "should be able to construct a Decimal from a string" <|
            Decimal.new "123.45" . should_have_rep [12345, 5, 2]
            Decimal.from_text "123.45" . should_have_rep [12345, 5, 2]

        group_builder.specify "should throw Number_Parse_Error on a badly-formatted string" <|
            Decimal.new "ee" . should_fail_with Number_Parse_Error
            Decimal.new "--123.3.3" . should_fail_with Number_Parse_Error

        group_builder.specify "should be able to construct a Decimal from a string, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 4
            Decimal.new "123.45" mc . should_have_rep [1235, 4, 1]
            Decimal.new "123.45" mc . should_equal (Decimal.new "123.5")

        group_builder.specify "should be able to construct a Decimal from a string, with an explicit precision, using a non-default rounding" <|
            mc = Math_Context.new 4 Rounding_Mode.half_down
            Decimal.new "123.45" mc . should_have_rep [1234, 4, 1]
            Decimal.new "123.45" mc . should_equal (Decimal.new "123.4")

        group_builder.specify "should be able to construct a Decimal from a long string" <|
            Decimal.new "495782984723948723947239938732974241.2345" . should_have_rep [4957829847239487239472399387329742412345, 40, 4]
            Decimal.from_text "495782984723948723947239938732974241.2345" . should_have_rep [4957829847239487239472399387329742412345, 40, 4]

        group_builder.specify "should be able to construct a Decimal from a small integer" <|
            Decimal.new 1234500 . should_have_rep [1234500, 7, 0]

        group_builder.specify "should be able to construct a Decimal from a small integer, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 4
            Decimal.new 1234500 mc . should_have_rep [1235, 4, -3]
            Decimal.new 1234500 mc . should_equal (Decimal.new 1235000)

        group_builder.specify "should be able to construct a Decimal from a small integer, with an explicit precision, using the non-default rounding" <|
            mc = Math_Context.new 4 Rounding_Mode.half_down
            Decimal.new 1234500 mc . should_have_rep [1234, 4, -3]
            Decimal.new 1234500 mc . should_equal (Decimal.new 1234000)

        group_builder.specify "should be able to construct a Decimal from a large integer" <|
            Decimal.new 495782984723948723947239938732974241234500 . should_have_rep [495782984723948723947239938732974241234500 , 42, 0]

        group_builder.specify "should be able to construct a Decimal from a large integer, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 39
            Decimal.new 495782984723948723947239938732974241234500 mc . should_have_rep [495782984723948723947239938732974241235 , 39, -3]
            Decimal.new 495782984723948723947239938732974241234500 mc . should_equal (Decimal.new 495782984723948723947239938732974241235000 )

        group_builder.specify "should be able to construct a Decimal from a large integer, with an explicit precision, using the non-default rounding" <|
            mc = Math_Context.new 39 Rounding_Mode.half_down
            Decimal.new 495782984723948723947239938732974241234500 mc . should_have_rep [495782984723948723947239938732974241234 , 39, -3]
            Decimal.new 495782984723948723947239938732974241234500 mc . should_equal (Decimal.new 495782984723948723947239938732974241234000 )

        group_builder.specify "should be able to construct a Decimal from a float" <|
            d = Decimal.from_float 123.45
            d.should_have_rep [12345, 5, 2]

        group_builder.specify "should be able to construct a Decimal from a float, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 5
            d = Decimal.from_float 123.125 mc
            d.should_have_rep [12313, 5, 2]
            d.should_equal (Decimal.new "123.13")

        group_builder.specify "should be able to construct a Decimal from a float, with an explicit precision, using a non-default rounding" <|
            mc = Math_Context.new 5 Rounding_Mode.half_down
            d = Decimal.from_float 123.125 mc
            d.should_have_rep [12312, 5, 2]
            d.should_equal (Decimal.new "123.12")

        group_builder.specify "should report precision loss accurately" <|
            mc4 = Math_Context.new 4
            mc5 = Math_Context.new 5

            Problems.not_expect_warning (Decimal.new "123.25")
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new "123.25" mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new "123.25" mc5)

            Problems.not_expect_warning (Decimal.new 123.25)
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 123.25 mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new 123.25 mc5)

            Problems.not_expect_warning (Decimal.new 12325)
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 12325 mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new 12325 mc5)

        group_builder.specify "should throw Illegal_Argument for NaN/Inf" <|
            Decimal.new Number.nan . should_fail_with Illegal_Argument
            Decimal.new Number.positive_infinity . should_fail_with Illegal_Argument
            Decimal.new Number.negative_infinity . should_fail_with Illegal_Argument

        group_builder.specify "should be convertible via .from" <|
            Decimal.from "123.45" . should_equal (Decimal.new "123.45")
            Decimal.from "123.45" . should_equal (Decimal.from_text "123.45")
            Decimal.from 123.45 . should_equal (Decimal.new 123.45)
            Decimal.from 123.45 . should_equal (Decimal.from_float 123.45)
            Decimal.from 12345 . should_equal (Decimal.new 12345)
            Decimal.from 12345 . should_equal (Decimal.from_integer 12345)

        group_builder.specify "constructor should respect Math_Context " <|
            Decimal.new 12000 (Math_Context.new 0) . should_equal 12000
            Decimal.new 12000 (Math_Context.new 1) . should_equal 10000
            Decimal.new 12000 (Math_Context.new 2) . should_equal 12000
            Decimal.new 12000 (Math_Context.new 3) . should_equal 12000

    suite_builder.group "comparison" group_builder->
        group_builder.specify "should compare correctly" <|
            nums = [["-45.23", "124.872"], [-45.23, 124.872], [-45, 124]]
            nums.map pr->
                a = Decimal.new (pr.at 0)
                b = Decimal.new (pr.at 1)

                (a == a) . should_be_true
                (b == b) . should_be_true
                (a == b) . should_be_false
                (b == a) . should_be_false

                (a != a) . should_be_false
                (b != b) . should_be_false
                (a != b) . should_be_true
                (b != a) . should_be_true

                (a <= a) . should_be_true
                (b <= b) . should_be_true
                (a <= b) . should_be_true
                (b <= a) . should_be_false

                (a >= a) . should_be_true
                (b >= b) . should_be_true
                (a >= b) . should_be_false
                (b >= a) . should_be_true

                (a < b) . should_be_true
                (b > a) . should_be_true
                (a > b) . should_be_false
                (b < a) . should_be_false

                (a <= b) . should_be_true
                (b >= a) . should_be_true
                (a >= b) . should_be_false
                (b <= a) . should_be_false

                (a < a) . should_be_false
                (b < b) . should_be_false
                (a > a) . should_be_false
                (b > b) . should_be_false

                Decimal.new (pr.at 0) . should_equal (Decimal.new (pr.at 0))
                Decimal.new (pr.at 1) . should_equal (Decimal.new (pr.at 1))

                a . should_equal a
                b . should_equal b
                a . should_not_equal b
                b . should_not_equal a

        group_builder.specify "should compare correctly, even with different internal representations" <|
            a = Decimal.new "12000"
            b = Decimal.new "12000" (Math_Context.new 2)
            c = Decimal.new "12000" (Math_Context.new 3)
            [[a, b], [a, c], [b, c]].map pr->
                x0 = pr.at 0
                x1 = pr.at 1
                ir0 = x0.get_internal_representation
                ir1 = x1.get_internal_representation
                # TODO: specialization error if we sipmly say (ir0 != ir1)
                ([0, 1, 2].all i-> ((ir0.at i) == (ir1.at i))) . should_be_false

                (x0 == x1) . should_be_true
                (x1 == x0) . should_be_true
                (x0 != x1) . should_be_false
                (x1 != x0) . should_be_false

        vs = []
            + [92233720368547758080.0]
            + [9223372036854777000.0]
            + [9223372036854776001.0]
            + [9223372036854776000.0]
            + [9223372036854775808.0]
            + [9223372036854775000.0]
            + [9223372036854774000.0]
            + [9223372036854700000.0]
            + [9223372036854000000.0]
            + [9223372000000000000.0]
            + [922337203685470000.0]
            + [92233720368547000.0]
            + [9223372036854700.0]
            + [922337203685470.0]
            + [92233720368547.0]
            + [9223372036854.0]
            + [922337203685.0]
            + [92233720368.0]
            + [9223372036.0]
            + [922337203.0]
            + [92233720.0]
            + [9223372.0]
            + [922337.0]
            + [92233.0]
            + [9223.0]
            + [922.0]
            + [-92233720368547758080.0]
            + [-9223372036854777000.0]
            + [-9223372036854776001.0]
            + [-9223372036854776000.0]
            + [-9223372036854775808.0]
            + [-9223372036854775000.0]
            + [-9223372036854774000.0]
            + [-9223372036854700000.0]
            + [-9223372036854000000.0]
            + [-9223372000000000000.0]
            + [-922337203685470000.0]
            + [-92233720368547000.0]
            + [-9223372036854700.0]
            + [-922337203685470.0]
            + [-92233720368547.0]
            + [-9223372036854.0]
            + [-922337203685.0]
            + [-92233720368.0]
            + [-9223372036.0]
            + [-922337203.0]
            + [-92233720.0]
            + [-9223372.0]
            + [-922337.0]
            + [-92233.0]
            + [-9223.0]
            + [-922.0]

        vs.map_with_index i-> v->
            group_builder.specify "should be able to create a Decimal from a negative Float "+i.to_text <|
                IO.println "======== "+v.to_text
                r = Decimal.float_id v
                #r = identity v
                IO.println "float_id "+v.to_text+" "+r.to_text
                r . should_equal r

        ok_values = []
            + [[0.1, 0.1]]
            + [["0.1", 0.1]]
            + [["0", 0]]
            + [["1", 1]]
            + [["-1", -1]]
            + [["2", 2]]
            + [["-2", -2]]
            + [["0", 0.0]]
            + [["1", 1.0]]
            + [["-1", -1.0]]
            + [["2", 2.0]]
            + [["-2", -2.0]]
            + [[0, 0]]
            + [[1, 1]]
            + [[-1, -1]]
            + [[2, 2]]
            + [[-2, -2]]
            + [[0, 0.0]]
            + [[1, 1.0]]
            + [[-1, -1.0]]
            + [[2, 2.0]]
            + [[-2, -2.0]]
            + [["12.34", 12.34]]
            + [["-34.56", -34.56]]
            + [["72775434512.34", 72775434512.34]]
            + [["-347757349.56784374", -347757349.56784374]]
            + [[12.34, 12.34]]
            + [[-34.56, -34.56]]
            + [[72775434512.34, 72775434512.34]]
            + [[-347757349.56784374, -347757349.56784374]]
            + [["2.0", 2.0]]
            + [["2.00", 2.0]]
            + [["2.000", 2.0]]
            + [[9223372036854770000.0, 9223372036854770000.0]]
            + [[9223372036854770000000.0, 9223372036854770000000.0]]
            + [[92233720368547700000000000000000000000.0, 92233720368547700000000000000000000000.0]]
            + [[9223372036854775805, 9223372036854775805]]
            + [[9223372036854775806, 9223372036854775806]]
            + [[9223372036854775807, 9223372036854775807]]
            + [[9223372036854775808, 9223372036854775808]]
            + [[9223372036854775809, 9223372036854775809]]
            + [[9223372036854775999, 9223372036854775999]]
            + [[9223372036854776000, 9223372036854776000]]
            + [[9223372036854776001, 9223372036854776001]]
            + [[9223372036854777000, 9223372036854777000]]
            + [[-9223372036854775810, -9223372036854775810]]
            + [[-9223372036854775809, -9223372036854775809]]
            + [[-9223372036854775808, -9223372036854775808]]
            + [[-9223372036854775807, -9223372036854775807]]
            + [[-9223372036854775807, -9223372036854775807]]
            + [[-9223372036854775806, -9223372036854775806]]
            + [[3946372036854775806000, 3946372036854775806000]]
            + [[3946372036854775807000, 3946372036854775807000]]
            + [[3946372036854775808000, 3946372036854775808000]]
            + [[-3946372036854775809000, -3946372036854775809000]]
            + [[-3946372036854775808000, -3946372036854775808000]]
            + [[-3946372036854775807000, -3946372036854775807000]]
            + [[39463720368547758060000000, 39463720368547758060000000]]
            + [[39463720368547758070000000, 39463720368547758070000000]]
            + [[39463720368547758080000000, 39463720368547758080000000]]
            + [[-39463720368547758090000000, -39463720368547758090000000]]
            + [[-39463720368547758080000000, -39463720368547758080000000]]
            + [[-39463720368547758070000000, -39463720368547758070000000]]
            + [["9223372036854775805", 9223372036854775805]]
            + [["9223372036854775806", 9223372036854775806]]
            + [["9223372036854775807", 9223372036854775807]]
            + [["9223372036854775808", 9223372036854775808]]
            + [["9223372036854775809", 9223372036854775809]]
            + [["9223372036854775999", 9223372036854775999]]
            + [["9223372036854776000", 9223372036854776000]]
            + [["9223372036854776001", 9223372036854776001]]
            + [["9223372036854777000", 9223372036854777000]]
            + [["-9223372036854775810", -9223372036854775810]]
            + [["-9223372036854775809", -9223372036854775809]]
            + [["-9223372036854775808", -9223372036854775808]]
            + [["-9223372036854775807", -9223372036854775807]]
            + [["-9223372036854775807", -9223372036854775807]]
            + [["-9223372036854775806", -9223372036854775806]]
            + [["3946372036854775806000", 3946372036854775806000]]
            + [["3946372036854775807000", 3946372036854775807000]]
            + [["3946372036854775808000", 3946372036854775808000]]
            + [["-3946372036854775809000", -3946372036854775809000]]
            + [["-3946372036854775808000", -3946372036854775808000]]
            + [["-3946372036854775807000", -3946372036854775807000]]
            + [["39463720368547758060000000", 39463720368547758060000000]]
            + [["39463720368547758070000000", 39463720368547758070000000]]
            + [["39463720368547758080000000", 39463720368547758080000000]]
            + [["-39463720368547758090000000", -39463720368547758090000000]]
            + [["-39463720368547758080000000", -39463720368547758080000000]]
            + [["-39463720368547758070000000", -39463720368547758070000000]]
            + [[Float.max_value, Float.max_value]]
            + [[-Float.max_value, -Float.max_value]]
            + [[Float.min_value, Float.min_value]]
            + [[-Float.min_value, -Float.min_value]]
            + [[Float.max_value-1.0, Float.max_value-1.0]]
            + [[-Float.max_value+1.0, -Float.max_value+1.0]]

        problematic_values = []
            + [[9223372036854776000.0, 9223372036854776000.0]]
            + [[-9223372036854776000.0, -9223372036854776000.0]]
            + [["9223372036854776000.0", 9223372036854776000.0]]
            + [["-9223372036854776000.0", -9223372036854776000.0]]

        values = ok_values # + problematic_values
        _ = [problematic_values]

        valuest = []
            + [["9223372036854776000.0", 9223372036854776000.0]]
        _ = [values, valuest]

        values.map_with_index i-> pr->
            v = pr.at 0
            d = Decimal.new v
            expected = pr.at 1

            group_builder.specify "should compare correctly to Integer and Float "+i.to_text+" "+d.to_text+" "+(Meta.get_simple_type_name v) <|
                d . should_equal expected
                expected . should_equal d
                (d == expected) . should_be_true
                (expected == d) . should_be_true
                (d != expected) . should_be_false
                (expected != d) . should_be_false

            # IO.println "QQQ "+v.to_text+" "+(v.is_a Text).to_text+" "+(Meta.get_simple_type_name v)
            if v.is_a Text . not then
                group_builder.specify "should compare correctly to Integer and Float (inequalities) "+i.to_text+" "+d.to_text+" "+(Meta.get_simple_type_name v) <|
                    lesser = if v > 10000 then v/2 else if v < -10000 then v*2 else v-1
                    greater = if v > 10000 then v*2 else if v < -10000 then v/2 else v+1
                    IO.println "WWW"+v.to_text+" "+lesser.to_text+" "+greater.to_text
                    (v > lesser) . should_be_true
                    (v < greater) . should_be_true

                    Test.with_clue "EEE "+d.to_text+" "+(Meta.get_simple_type_name d)+" "+greater.to_text+" "+(Meta.get_simple_type_name greater) <|
                        (d <= v) . should_be_true
                        (d >= v) . should_be_true
                        #(v <= d) . should_be_true
                        #(v >= d) . should_be_true

                        if greater.is_infinite.not then
                            (d < greater) . should_be_true
                            (d <= greater) . should_be_true
                            (greater > d) . should_be_true
                            #(greater >= d) . should_be_true
                            (d > greater) . should_be_false
                            (d >= greater) . should_be_false
                            (greater < d) . should_be_false
                            #(greater <= d) . should_be_false

                        if lesser.is_infinite.not then
                            (d > lesser) . should_be_true
                            (d >= lesser) . should_be_true
                            (lesser < d) . should_be_true
                            #(lesser <= d) . should_be_true
                            (d < lesser) . should_be_false
                            (d <= lesser) . should_be_false
                            (lesser > d) . should_be_false
                            #(lesser >= d) . should_be_false

                        (d < d) . should_be_false
                        (d > d) . should_be_false
                        (d <= d) . should_be_true
                        (d >= d) . should_be_true

        group_builder.specify "can support values outside the double range" <|
            d = Decimal.new Float.max_value
            (d == Float.max_value) . should_be_true
            ((d * d) == Float.max_value) . should_be_false
            ((-(d * d)) == -Float.max_value) . should_be_false
            Comparable.hash_builtin (d * d) . should_equal -1851772048
            Comparable.hash_builtin -(d * d) . should_equal 1851772048
            Comparable.hash_builtin ((d * d) + 0.1) . should_equal -1176480326
            Comparable.hash_builtin ((-(d * d)) + 0.1) . should_equal -534461530

        group_builder.specify "Decimals equal to equal values should be equal" pending="== consistency" <|
            i = 6223372036853999999997
            f = i.to_float
            id = Decimal.new i
            fd = Decimal.new f
            i . should_equal f
            f . should_equal i
            i . should_equal id
            id . should_equal i
            f . should_equal fd
            fd . should_equal f
            id . should_equal fd
            fd . should_equal id

    suite_builder.group "arithmetic" group_builder->
        group_builder.specify "should allow arithmetic with Decimals" <|
            ((Decimal.new 1) + (Decimal.new 2)) . should_equal (Decimal.new 3)
            ((Decimal.new 1.1) + (Decimal.new 2.2)) . should_equal (Decimal.new 3.3)

            ((Decimal.new 10) - (Decimal.new 6)) . should_equal (Decimal.new 4)
            ((Decimal.new 10.1) - (Decimal.new 6.6)) . should_equal (Decimal.new 3.5)

            ((Decimal.new 3) * (Decimal.new 7)) . should_equal (Decimal.new 21)
            ((Decimal.new 3.12) * (Decimal.new 7.97)) . should_equal (Decimal.new 24.8664)

            ((Decimal.new 50) / (Decimal.new 2)) . should_equal (Decimal.new 25)
            ((Decimal.new 50.75) / (Decimal.new 2.5)) . should_equal (Decimal.new 20.3)

            ((Decimal.new 1) + (Decimal.new -2)) . should_equal (Decimal.new -1)
            ((Decimal.new 1.1) + (Decimal.new -2.2)) . should_equal (Decimal.new -1.1)

            ((Decimal.new -10) - (Decimal.new 6)) . should_equal (Decimal.new -16)
            ((Decimal.new 10.1) - (Decimal.new -6.6)) . should_equal (Decimal.new 16.7)

            ((Decimal.new 3) * (Decimal.new -7)) . should_equal (Decimal.new -21)
            ((Decimal.new -3.12) * (Decimal.new 7.97)) . should_equal (Decimal.new -24.8664)

            ((Decimal.new -50) / (Decimal.new -2)) . should_equal (Decimal.new 25)
            ((Decimal.new -50.75) / (Decimal.new -2.5)) . should_equal (Decimal.new 20.3)

            ((Decimal.new 213427523957) + (Decimal.new 93849398884384)) . should_equal (Decimal.new 94062826408341)
            ((Decimal.new 723579374753.3535345) + (Decimal.new 35263659267.23434535)) . should_equal (Decimal.new "758843034020.587844")

            ((Decimal.new -29388920982834) - (Decimal.new 842820)) . should_equal (Decimal.new -29388921825654)
            ((Decimal.new -8273762787.3535345) - (Decimal.new 76287273.23434535)) . should_equal (Decimal.new "-8350050060.58788035")

            ((Decimal.new 7297927982888383) * (Decimal.new 828737)) . should_equal (Decimal.new 6048062942754969862271)
            ((Decimal.new 893872388.3535345) * (Decimal.new 72374727737.23434535)) . should_equal (Decimal.new "64693770738918459194.623193774730")

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter="should allow arithmetic"
