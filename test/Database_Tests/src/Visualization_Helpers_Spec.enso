from Standard.Base import all

from Standard.Database import all
from Standard.Database.Connection.Connection import Sql_Error
import Standard.Visualization.Table.Visualization as Table_Visualization
import Standard.Visualization.Sql.Visualization as Sql_Visualization
import Standard.Test
import Database_Tests.Common_Spec

type Foo
    type Foo x
    to_json : Json
    to_json = Json.from_pairs [["x", this.x]]


visualization_spec connection =
    connection.execute_update 'CREATE TABLE "T" ("A" VARCHAR, "B" INTEGER, "C" INTEGER)'
    t = connection.access_table "T"
    t.insert ['a', 2, 3]
    t.insert ['a', 2, 5]
    t.insert ['a', 3, 6]
    Test.group "[Table Visualization] Dataframe" <|
        Test.specify "should wrap internal errors" <|
            Nothing

    Test.group "[Table Visualization] Database" <|
         Test.specify "should visualize simple tables" <|
             Nothing

    Test.group "[Table Visualization] Other" <|
        Test.specify "should handle Vectors" <|
            vis = Table_Visualization.prepare_visualization [1, 2, 3] 2
            json = Json.from_pairs [["json", [1, 2]], ["all_rows_count", 3]]
            vis . should_equal json.to_text
        Test.specify "should handle other datatypes" <|
            vis = Table_Visualization.prepare_visualization (Foo 42) 2
            json = Json.from_pairs [["json", (Foo 42)]]
            vis . should_equal json.to_text

    Test.group "[Sql Visualization] Database" <|
        Test.specify "should provide type metadata for interpolations" <|
            q = t.where ((t.at "B" == 2) && (t.at "A" == True)) . at "C"
            vis = Sql_Visualization.prepare_visualization q
            int_param = Json.from_pairs [["value", 2], ["actual_type", "Builtins.Main.Integer"], ["expected_sql_type", "INTEGER"], ["expected_enso_type", "Builtins.Main.Integer"]]
            str_param = Json.from_pairs [["value", True], ["actual_type", "Builtins.Main.Boolean"], ["expected_sql_type", "VARCHAR"], ["expected_enso_type", "Builtins.Main.Text"]]
            code = 'SELECT "T"."C" AS "C" FROM "T" AS "T" WHERE (("T"."B" = ?) AND ("T"."A" = ?))'
            json = Json.from_pairs [["dialect", "sqlite"], ["code", code], ["interpolations", [int_param, str_param]]]
            vis . should_equal json.to_text

spec =
    Enso_Project.data.create_directory
    file = Enso_Project.data / "sqlite_test.db"
    file.delete_if_exists
    connection = Database.open_sqlite_file file
    here.visualization_spec connection
    connection.close
    file.delete
