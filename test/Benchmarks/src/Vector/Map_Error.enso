from Standard.Base import all

import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Test import Bench

import project.Vector.Utils

options = Bench.options . set_warmup (Bench.phase_conf 1 3) . set_measure (Bench.phase_conf 1 3)

type Data
    Value ~vec

    create =
        Data.Value create_vec

## Repeats 0..9
create_vec = Vector.new 100000 (i-> i%10)

id i = i

always_throw i =
    _ = [i]
    Error.throw (Illegal_Argument.Error "error")

throw_ten_percent i = if i > 0 then i else
    Error.throw (Illegal_Argument.Error "error")

collect_benches = Bench.build builder->
    data = Data.create

    builder.group "Map_Error" options group_builder->
        group_builder.specify "Map_Id_No_Errors" <|
            data.vec.map id
        group_builder.specify "Map_Id_All_Errors_With_Ignore" <|
            data.vec.map always_throw on_problems=Problem_Behavior.Ignore
        group_builder.specify "Map_Id_Ten_Percent_Errors_With_Ignore" <|
            data.vec.map throw_ten_percent on_problems=Problem_Behavior.Ignore

main = collect_benches . run_main
