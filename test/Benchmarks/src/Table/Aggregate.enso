from Standard.Base import all hiding First, Last

from Standard.Table import Table
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all

from Standard.Test import Bench, Faker, Phase_Conf


create_table : Integer -> Integer -> Table
create_table rows (seed=1646322139) =
    faker = Faker.new seed
    key1 = ["Code", 0.up_to rows . map _-> faker.alpha 3]
    key2 = ["Index", 0.up_to rows . map _-> faker.integer 0 10]
    key3 = ["Flag", 0.up_to rows . map _-> faker.boolean]
    value1 = ["Value", 0.up_to rows . map _-> ((faker.decimal -100 100)*100000).floor/100000]
    value2 = ["ValueWithNothing", 0.up_to rows . map _-> faker.make_some_nothing ((faker.decimal -100 100)*100).floor/100]
    text1 = ["TextWithNothing", 0.up_to rows . map _-> faker.make_some_nothing (faker.alpha_numeric 10)]
    text2 = ["Hexadecimal", 0.up_to rows . map _-> faker.make_some_nothing (faker.hexadecimal 8)]
    Table.new [key1, key2, key3, value1, value2, text1, text2]


options = Bench.options . set_warmup (Phase_Conf.Seconds 3) . set_measure (Phase_Conf.Seconds 3)


collect_benches = Bench.build builder->
    vector_size = 250000
    table = create_table vector_size

    builder.group "Table_Aggregate" options group_builder->
        group_builder.specify "Count_table" <|
            table.aggregate [Count]

        group_builder.specify "Max_table" <|
            table.aggregate [Maximum "ValueWithNothing"]

        group_builder.specify "Sum_table" <|
            table.aggregate [Sum "ValueWithNothing"]

        group_builder.specify "Count_Distinct_table" <|
            table.aggregate [Count_Distinct "Index"]

        group_builder.specify "StDev_table" <|
            table.aggregate [Standard_Deviation "Value"]

        group_builder.specify "Median_table" <|
            table.aggregate [Median "Value"]

        group_builder.specify "Mode_table" <|
            table.aggregate [Mode "Index"]

        group_builder.specify "Count_grouped" <|
            table.aggregate [Group_By "Index", Count]

        group_builder.specify "Max_grouped" <|
            table.aggregate [Group_By "Index", Maximum "ValueWithNothing"]

        group_builder.specify "Sum_grouped" <|
            table.aggregate [Group_By "Index", Sum "ValueWithNothing"]

        group_builder.specify "Count_Distinct_grouped" <|
            table.aggregate [Group_By "Index", Count_Distinct "Code"]

        group_builder.specify "StDev_grouped" <|
            table.aggregate [Group_By "Index", Standard_Deviation "Value"]

        group_builder.specify "Median_grouped" <|
            table.aggregate [Group_By "Index", Median "Value"]

        group_builder.specify "Mode_grouped" <|
            table.aggregate [Group_By "Index", Mode "Index"]

        group_builder.specify "Count_2_level_groups" <|
            table.aggregate [Group_By "Index", Group_By "Flag", Count]

        group_builder.specify "Max_2_level_groups" <|
            table.aggregate [Group_By "Index", Group_By "Flag", Maximum "ValueWithNothing"]

        group_builder.specify "Sum_2_level_groups" <|
            table.aggregate [Group_By "Index", Group_By "Flag", Sum "ValueWithNothing"]

        group_builder.specify "Count_Distinct_2_level_groups" <|
            table.aggregate [Group_By "Index", Group_By "Flag", Count_Distinct "Code"]

        group_builder.specify "StDev_2_level_groups" <|
            table.aggregate [Group_By "Index", Group_By "Flag", Standard_Deviation "Value"]

        group_builder.specify "Median_2_level_groups" <|
            table.aggregate [Group_By "Index", Group_By "Flag", Median "Value"]

        group_builder.specify "Mode_2_level_groups" <|
            table.aggregate [Group_By "Index", Group_By "Flag", Mode "Index"]


main = collect_benches . run_main
