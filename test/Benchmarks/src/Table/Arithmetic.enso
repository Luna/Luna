from Standard.Base import all

from Standard.Table import Table, Value_Type

from Standard.Test import Bench

polyglot java import java.lang.Long as Java_Long

options = Bench.options . set_warmup (Bench.phase_conf 3 5) . set_measure (Bench.phase_conf 3 5)


create_table : Table
create_table num_rows =
    x = Vector.new num_rows i->
        i+1
    y = Vector.new num_rows i->
        if i % 10 < 2 then Java_Long.MAX_VALUE else i+1
    u = Vector.new num_rows i->
        10 + (i % 100)

    t = Table.new [["X", x], ["Y", y], ["U", u]]

    assert condition =
        if condition.not then Panic.throw "Assertion failed"

    assert ((t.at "X" . value_type) == Value_Type.Integer)
    assert ((t.at "Y" . value_type) == Value_Type.Integer)
    assert ((t.at "U" . value_type) == Value_Type.Integer)
    t

foreign arrow int64_new = """
    new[Int64]

foreign arrow int64_plus = """
    +[Int64]

to_arrow t:Table =
    column_to_arrow name:Text =
        v = t.at name . to_vector
        builder = int64_new.new v.length
        v.map e-> builder.append e
        builder.build

    [column_to_arrow "X", column_to_arrow "Y"]

type Data
    private Value ~lazy

    table self = self.lazy.at 0
    arrow_plus self = self.lazy.at 1
    arrow_x self = self.lazy.at 2
    arrow_y self = self.lazy.at 3

    create num_rows = Data.Value <|
        table = create_table num_rows
        all = [table, int64_plus] + to_arrow table
        all


collect_benches = Bench.build builder->
    num_rows = 1000000
    data = Data.create num_rows

    builder.group ("Column_Arithmetic_" + num_rows.to_text) options group_builder->
        group_builder.specify "Plus_Fitting" <|
            (data.table.at "X") + (data.table.at "U")
        group_builder.specify "Plus_Overflowing" <|
            (data.table.at "Y") + (data.table.at "U")
        group_builder.specify "Multiply_Fitting" <|
            (data.table.at "X") * (data.table.at "U")
        group_builder.specify "Multiply_Overflowing" <|
            (data.table.at "Y") * (data.table.at "U")

    builder.group ("Arrow_Arithmetic_" + num_rows.to_text) options group_builder->
        group_builder.specify "Plus_Fitting" <|
            v = data.arrow_plus data.arrow_x data.arrow_y
            IO.println <| v . take 100

main = collect_benches . run_main
