## NOTE
   This benchmark assumes that the Table operations used here are implemented in Java.
   This is a valid assumption as of 2023-07-12.
   If we ever change these operations, we would need to add this benchmark to have custom implementations for the Java side as well if we still want to use it for comparisons.

   This file is _not_ automatically run when the benchmarks are run.
from Standard.Base import all
from Standard.Table import all

from Standard.Test import Bench

import project.Table.Performance_Research.Common_Setup.Common_Setup

polyglot java import org.enso.table.data.column.builder.BoolBuilder
polyglot java import org.enso.table.data.column.builder.NumericBuilder
polyglot java import org.enso.table.data.column.builder.StringBuilder

# Adding two String columns
type Boxed_Bi_Map_Test
    Instance text_column_1 text_column_2

    java_map self =
        self.text_column_1 + self.text_column_2

    enso_map_as_vector self =
        vector_proxy_1 = self.text_column_1.to_vector
        vector_proxy_2 = self.text_column_2.to_vector
        mapped = vector_proxy_1.zip vector_proxy_2 (+)
        new_column = Column.from_vector "result" mapped
        new_column

    enso_map_with_builder self =
        n = self.text_column_1.length
        if self.text_column_2.length != n then Panic.throw "LENGTH MISMATCH" else
            builder = StringBuilder.new n
            storage_1 = self.text_column_1.java_column.getStorage
            storage_2 = self.text_column_2.java_column.getStorage
            0.up_to n . each i->
                item_1 = storage_1.getItemBoxed i
                item_2 = storage_2.getItemBoxed i
                if item_1.is_nothing || item_2.is_nothing then builder.appendNulls 1 else
                    res = item_1 + item_2
                    builder.append res
            Column.from_storage "result" builder.seal

# Adding two Long columns
type Primitive_Bi_Map_Test
    Instance int_column_1 int_column_2

    java_map self =
        self.int_column_1 + self.int_column_2

    enso_map_as_vector self =
        vector_proxy_1 = self.int_column_1.to_vector
        vector_proxy_2 = self.int_column_2.to_vector
        mapped = vector_proxy_1.zip vector_proxy_2 (+)
        new_column = Column.from_vector "result" mapped
        new_column

    enso_map_with_builder self =
        n = self.int_column_1.length
        if self.int_column_2.length != n then Panic.throw "LENGTH MISMATCH" else
            builder = NumericBuilder.createLongBuilder n
            storage_1 = self.int_column_1.java_column.getStorage
            storage_2 = self.int_column_2.java_column.getStorage
            0.up_to n . each i->
                if storage_1.isNa i || storage_2.isNa i then builder.appendNulls 1 else
                    item_1 = storage_1.getItem i
                    item_2 = storage_2.getItem i
                    res = item_1 + item_2
                    builder.appendLong res
            Column.from_storage "result" builder.seal

main = spec Common_Setup.Config

spec setup =
    t = setup.generate_input_table

    iter_size = setup.iter_size
    num_iterations = setup.num_iterations

    primitive_bimap = Primitive_Bi_Map_Test.Instance (t.at "ints") (t.at "ints2")
    Bench.measure (primitive_bimap.java_map) "Primitive_Bi_Map_Test.java_map" iter_size num_iterations run_gc_between_iterations=True
    Bench.measure (primitive_bimap.enso_map_as_vector) "Primitive_Bi_Map_Test.enso_map_as_vector" iter_size num_iterations run_gc_between_iterations=True
    Bench.measure (primitive_bimap.enso_map_with_builder) "Primitive_Bi_Map_Test.enso_map_with_builder" iter_size num_iterations run_gc_between_iterations=True

    boxed_bimap = Boxed_Bi_Map_Test.Instance (t.at "text") (t.at "text2")
    Bench.measure (boxed_bimap.java_map) "Boxed_Bi_Map_Test.java_map" iter_size num_iterations run_gc_between_iterations=True
    Bench.measure (boxed_bimap.enso_map_as_vector) "Boxed_Bi_Map_Test.enso_map_as_vector" iter_size num_iterations run_gc_between_iterations=True
    Bench.measure (boxed_bimap.enso_map_with_builder) "Boxed_Bi_Map_Test.enso_map_with_builder" iter_size num_iterations run_gc_between_iterations=True
