from Standard.Base import all

from Standard.Table import Table, Sort_Column

from Standard.Test import Bench

type My
    Data x

type My_Comparator
    compare my_1 my_2 =
        Ordering.compare my_2.x my_1.x

    hash my =
        Ordering.hash my.x

Comparable.from (that:My) = Comparable.new that My_Comparator


vector_size = 100000

create_ints = (0.up_to vector_size).to_vector.take (..Sample vector_size 42)

create_dates = create_ints.map x->
    (Date_Time.new 1990 1 1) + (Duration.new seconds=x)

create_objects = create_ints.map My.Data

create_ints_table = Table.new [['ints', create_ints]]

create_dates_table = Table.new [['dates', create_dates]]

create_objects_table = Table.new [['objects', create_objects]]


type Data
    Value ~ints ~dates ~objects ~ints_table ~dates_table ~objects_table

    create =
        Data.Value create_ints create_dates create_objects create_ints_table create_dates_table create_objects_table


table_sort_opts = Bench.options . set_warmup (Bench.phase_conf 5 8) . set_measure (Bench.phase_conf 5 3)
vec_sort_opts   = Bench.options . set_warmup (Bench.phase_conf 1 7) . set_measure (Bench.phase_conf 1 3)


collect_benches = Bench.build builder->
    data = Data.create

    builder.group "Table_Sorting" table_sort_opts group_builder->
        group_builder.specify "table_sort_ints" <|
            data.ints_table.sort [..Index 0]

        group_builder.specify "table_sort_dates" <|
            data.dates_table.sort [..Index 0]

        group_builder.specify "table_sort_objects" <|
            data.objects_table.sort [..Index 0]

    builder.group "Vector_Sorting" vec_sort_opts group_builder->
        group_builder.specify "vector_sort_ints" <|
            data.ints.sort

        group_builder.specify "vector_sort_dates" <|
            data.dates.sort

        group_builder.specify "vector_sort_objects" <|
            data.objects.sort


main = collect_benches . run_main
