from Standard.Base import all

from Standard.Table import Table, Value_Type

from Standard.Test import Bench

options = Bench.options . set_warmup (Bench.phase_conf 1 4) . set_measure (Bench.phase_conf 2 2)

create_table : Table
create_table num_rows =
    ints1 = Vector.new num_rows i-> i
    ints2 = Vector.new num_rows i->
        case i % 3 of
            0 -> -i
            1 -> i + 1
            2 -> i % 100

    base_date = Date.new 2020 01 01
    dates1 = ints1.map x-> base_date.date_add x ..Day
    dates2 = ints2.map x-> base_date.date_add x ..Day

    texts1 = Vector.new num_rows i->
        case i % 4 of
            0 -> "abc"
            1 -> ""
            2 -> "Ä…Ä™Å‚Å›Ä‡Å¼Åº"
            3 -> "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    texts2 = Vector.new num_rows i->
        case i % 4 of
            0 -> "def"
            1 -> "......"
            2 -> "Å¼Å¼Å¼ğŸš‚ğŸš‚"
            3 -> "a"

    bools1 = Vector.new num_rows i-> i % 2 == 0
    bools2 = Vector.new num_rows i-> i % 3 == 0

    t = Table.new [["ints1", ints1], ["ints2", ints2], ["dates1", dates1], ["dates2", dates2], ["texts1", texts1], ["texts2", texts2], ["bools1", bools1], ["bools2", bools2]]
    Runtime.assert ((t.at "ints1" . value_type) == Value_Type.Integer)
    Runtime.assert ((t.at "ints2" . value_type) == Value_Type.Integer)
    Runtime.assert ((t.at "dates1" . value_type) == Value_Type.Date)
    Runtime.assert ((t.at "dates2" . value_type) == Value_Type.Date)
    Runtime.assert ((t.at "texts1" . value_type) == Value_Type.Char)
    Runtime.assert ((t.at "texts2" . value_type) == Value_Type.Char)
    Runtime.assert ((t.at "bools1" . value_type) == Value_Type.Boolean)
    Runtime.assert ((t.at "bools2" . value_type) == Value_Type.Boolean)
    t.column_info.print
    t

type Data
    private Value ~table

    create num_rows = Data.Value (create_table num_rows)

collect_benches = Bench.build builder->
    num_rows = 1000000
    data = Data.create num_rows

    builder.group ("Column_Comparisons_" + num_rows.to_text) options group_builder->
        group_builder.specify "integer_constant" <|
            (data.table.at "ints1") <= 5
        group_builder.specify "integer_column" <|
            (data.table.at "ints1") <= (data.table.at "ints2")

        group_builder.specify "date_constant" <|
            (data.table.at "dates1") <= (Date.new 2021 01 01)
        group_builder.specify "date_column" <|
            (data.table.at "dates1") <= (data.table.at "dates2")

        group_builder.specify "text_constant" <|
            (data.table.at "texts1") <= "def"
        group_builder.specify "text_column" <|
            (data.table.at "texts1") <= (data.table.at "texts2")

        group_builder.specify "bool_column" <|
            (data.table.at "bools1") <= (data.table.at "bools2")

    builder.group ("Column_Minmax_" + num_rows.to_text) options group_builder->
        group_builder.specify "integer_constant" <|
            (data.table.at "ints1") . min 5
        group_builder.specify "integer_column" <|
            (data.table.at "ints1") . min (data.table.at "ints2")

        group_builder.specify "date_constant" <|
            (data.table.at "dates1") . min (Date.new 2021 01 01)
        group_builder.specify "date_column" <|
            (data.table.at "dates1") . min (data.table.at "dates2")

        group_builder.specify "text_constant" <|
            (data.table.at "texts1") . min "def"
        group_builder.specify "text_column" <|
            (data.table.at "texts1") . min (data.table.at "texts2")

        group_builder.specify "bool_column" <|
            (data.table.at "bools1") . min (data.table.at "bools2")

main = collect_benches . run_main
