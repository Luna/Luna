from Standard.Base import all

from Standard.Table import Column
from Standard.Test import Bench, Faker


options = Bench.options


type Data
    Value ~ints ~floats

    create vector_size faker =
        Data.Value (create_ints vector_size faker) (create_floats vector_size faker)


create_ints vector_size faker =
    ints_vec = Vector.new vector_size _->(faker.integer -1000000000 1000000000)
    Column.from_vector "ints" ints_vec


create_floats vector_size faker =
    floats_vec = Vector.new vector_size _->(faker.decimal -1000000000 1000000000)
    Column.from_vector "floats" floats_vec


collect_benches = Bench.build builder->
    vector_size = 1000000
    ## No specific significance to this constant, just fixed to make generated set deterministic
    fixed_random_seed = 1644575867
    faker = Faker.new fixed_random_seed

    data = Data.create vector_size faker

    builder.group "Column_Numeric" options group_builder->
        group_builder.specify "Column_round_floats" <|
            data.floats.round

        group_builder.specify "Column_truncate_floats" <|
            data.floats.truncate

        group_builder.specify "Column_ceil_floats" <|
            data.floats.ceil

        group_builder.specify "Column_floor_floats" <|
            data.floats.floor

        group_builder.specify "Column_round_ints" <|
            data.ints.round

        group_builder.specify "Column_truncate_ints" <|
            data.ints.truncate

        group_builder.specify "Column_ceil_ints" <|
            data.ints.ceil

        group_builder.specify "Column_floor_ints" <|
            data.ints.floor

        [True, False].each use_bankers->
            [0, -2, 2].map decimal_places->
                name = ...
                fun x = x.round decimal_places use_bankers

                group_builder.specify ("floats_" + name) <|
                    fun data.floats

                group_builder.specify ("ints_" + name) <|
                    fun data.ints


main = collect_benches . run_main
