from Standard.Base import all

from Standard.Table import Column
from Standard.Test import Bench, Faker


options = Bench.options


type Data
    Value ~ints ~floats ~big_ints ~big_floats ~decimals

    create vector_size faker =
        Data.Value (create_ints vector_size faker) (create_floats vector_size faker) (create_big_ints vector_size faker) (create_big_floats vector_size faker) (create_decimals vector_size faker)


create_ints vector_size faker =
    ints_vec = Vector.new vector_size _->(faker.integer -1000000000 1000000000)
    Column.from_vector "ints" ints_vec


create_floats vector_size faker =
    floats_vec = Vector.new vector_size _->(faker.float -1000000000 1000000000)
    Column.from_vector "floats" floats_vec


create_big_ints vector_size faker =
    ints_vec = Vector.new vector_size _->(faker.integer -1000000000000000000000 1000000000000000000000)
    Column.from_vector "big_ints" ints_vec


create_big_floats vector_size faker =
    floats_vec = Vector.new vector_size _->(faker.integer -1000000000000000000000 1000000000000000000000)
    Column.from_vector "big_floats" floats_vec


create_decimals vector_size faker =
    decimals_vec = Vector.new vector_size _->(faker.decimal -1000000000000000000000 1000000000000000000000)
    Column.from_vector "decimals" decimals_vec 


collect_benches = Bench.build builder->
    vector_size = 5 * 1000 * 1000
    ## No specific significance to this constant, just fixed to make generated set deterministic
    fixed_random_seed = 1644575867
    faker = Faker.new fixed_random_seed

    data = Data.create vector_size faker

    builder.group "Column_Numeric" options group_builder->
        group_builder.specify "round_ints" <|
            data.ints.round

        group_builder.specify "truncate_ints" <|
            data.ints.truncate

        group_builder.specify "ceil_ints" <|
            data.ints.ceil

        group_builder.specify "floor_ints" <|
            data.ints.floor

        group_builder.specify "round_floats" <|
            data.floats.round

        group_builder.specify "truncate_floats" <|
            data.floats.truncate

        group_builder.specify "ceil_floats" <|
            data.floats.ceil

        group_builder.specify "floor_floats" <|
            data.floats.floor

        group_builder.specify "round_big_ints" <|
            data.big_ints.round

        group_builder.specify "truncate_big_ints" <|
            data.big_ints.truncate

        group_builder.specify "ceil_big_ints" <|
            data.big_ints.ceil

        group_builder.specify "floor_big_ints" <|
            data.big_ints.floor

        group_builder.specify "round_big_floats" <|
            data.big_floats.round

        group_builder.specify "truncate_big_floats" <|
            data.big_floats.truncate

        group_builder.specify "ceil_big_floats" <|
            data.big_floats.ceil

        group_builder.specify "floor_big_floats" <|
            data.big_floats.floor

        group_builder.specify "round_decimals" <|
            data.decimals.round

        group_builder.specify "truncate_decimals" <|
            data.decimals.truncate

        group_builder.specify "ceil_decimals" <|
            data.decimals.ceil

        group_builder.specify "floor_decimals" <|
            data.decimals.floor

        [True, False].each use_bankers->
            [0, -2, 2].map decimal_places->
                name = create_name "round_decimal_places_" decimal_places use_bankers
                fun x = x.round decimal_places use_bankers

                group_builder.specify ("ints_" + name) <|
                    fun data.ints

                group_builder.specify ("floats_" + name) <|
                    fun data.floats

                group_builder.specify ("big_ints_" + name) <|
                    fun data.big_ints

                group_builder.specify ("big_floats_" + name) <|
                    fun data.big_floats

                group_builder.specify ("decimals_" + name) <|
                    fun data.decimals


## Creates a valid name for the benchmark
create_name : Text -> Integer -> Boolean -> Text
create_name prefix dec_places use_bankers =
    use_bankers_str = "_use_bankers_" + (use_bankers.to_text.to_case Case.Lower)
    case dec_places >= 0 of
        True -> prefix + dec_places.to_text + use_bankers_str
        False -> prefix + "minus_" + (dec_places.abs.to_text) + use_bankers_str


main = collect_benches . run_main
