from Standard.Base import all

from Standard.Test import Bench, Faker, Phase_Conf


cycle_character_template num character_templates =
  character_templates.at (num % (character_templates.length))


collect_benches = Bench.build builder->
    ## The `Text.pretty` benchmarks check both scenarios where the Texts are
       short and very long. This is to verify that making a single pass over
       the text is in fact faster than multiple passes.
    faker = Faker.new

    regular_characters = (Faker.upper_case_letters + Faker.lower_case_letters)
    # Keep this up to date with the special characters in Text.java
    special_characters = '\\\'\n\t\u{7}\u{8}\u{c}\r\u{b}\u{1b}'.char_vector

    # 20% special, 80% regular
    make_template length =
      r = regular_characters
      s = special_characters
      Vector.new length ix-> cycle_character_template ix [r, r, s, s, r]

    very_short_template = make_template 40
    very_short_random = faker.string_value very_short_template
    big_template = make_template 100000
    big_random = faker.string_value big_template


    builder.group "Text_Pretty_Short" (Bench.options.set_warmup (Phase_Conf.Iterations 100*1000) . set_measure (Phase_Conf.Iterations 100*1000)) group_builder->
        group_builder.specify "very_short_random" <|
            very_short_random.pretty

    builder.group "Text_Pretty_Big" (Bench.options.set_warmup (Phase_Conf.Iterations 1000) . set_measure (Phase_Conf.Iterations 1000)) group_builder->
        group_builder.specify "big_random" <|
            big_random.pretty


main = collect_benches . run_main
