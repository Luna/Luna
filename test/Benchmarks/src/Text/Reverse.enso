from Standard.Base import all

from Standard.Test import Bench, Faker, Phase_Conf


## The `Text.reverse` benchmarks check both scenarios where the Texts are
   short and very long. This is to show any overheads related to string
   building.
collect_benches = Bench.build builder->
    character_template = (Faker.upper_case_letters + Faker.lower_case_letters + 'ąę\u{301}\u{302}\u{303}\u{321}'.char_vector)

    faker = Faker.new
    ## Warning: this relies on the fact that Faker will treat the accent
       codepoint `\u{301}` as a separate code unit. We rely on this to add
       accents randomly to neighboring characters. If the implementation of
       Faker is changed, this must be modified accordingly.
    make_alpha_template length = Vector.new length _-> character_template

    very_short_template = make_alpha_template 4
    very_short_random = faker.string_value very_short_template
    big_template = make_alpha_template 100000
    big_random = faker.string_value big_template

    builder.group "Text_Reverse_Short" (Bench.options.set_warmup (Phase_Conf.Iterations 100*1000) . set_measure (Phase_Conf.Iterations 100*1000)) group_builder->
        group_builder.specify "very_short_random" <|
            very_short_random.reverse

    builder.group "Text_Reverse_Big" (Bench.options.set_warmup (Phase_Conf.Iterations 100) . set_measure (Phase_Conf.Iterations 100)) group_builder->
        group_builder.specify "big_random" <|
            big_random.reverse


main = collect_benches . run_main
