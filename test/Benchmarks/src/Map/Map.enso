from Standard.Base import all

from Standard.Table import Column, Value_Type, Auto
import Standard.Table.Data.Type.Value_Type.Bits

from Standard.Test import Bench

options = Bench.options . set_warmup (Bench.phase_conf 2 3) . set_measure (Bench.phase_conf 2 3)

type Data
    Value ~ints

    create n =
        create_ints =
            rng = Random.new
            Vector.new n _->
                rng.integer 0 (n.div 100)
        Data.Value create_ints

type Scenario
    Instance map_constructor

    run_distinct ints =
        TODO

    run_count_keys ints = TODO

collect_benches = Bench.build builder->
    n = 100000
    data = Data.create n

    builder.group ("Column_from_vector_" + num_rows.to_text) options group_builder->
        # Scenario similar to what is done in distinct
        group_builder.specify "Enso_Incremental" <|
            TODO
        group_builder.specify "Java_Incremental" <|
            TODO

        # A scenario similar to what is done in add_row_number with grouping
        group_builder.specify "Enso_Replacement" <|
            TODO
        group_builder.specify "Java_Replacement" <|
            TODO

main = collect_benches . run_main
