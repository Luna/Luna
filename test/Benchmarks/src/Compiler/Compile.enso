from Standard.Base import all

from Standard.Test import Bench

polyglot java import java.lang.System as Java_System
polyglot java import java.io.File as Java_File

type Data
    Value ~enso_bin:File ~std_base:File

    bench_compile_base self =
        self.startup [ "--no-compile-dependencies", "--log-level", "debug", "--no-global-cache", "--compile", self.std_base.to_text]

    startup self  args =
        cache_dir = self.std_base / ".enso" / "cache"
        cache_dir.delete recursive=True

        exe = self.enso_bin
        result = Process.run exe.path args
        case result.exit_code of
            Exit_Code.Failure code ->
                IO.println "Exit code: "+code.to_text
                IO.println result.stdout
                IO.println result.stderr
                Panic.throw "Exit code: "+code.to_text
            Exit_Code.Success ->
                Nothing

collect_benches = Bench.build builder->
    options = Bench.options . set_warmup (Bench.phase_conf 1 10) . set_measure (Bench.phase_conf 2 10)


    data =
        Data.Value enso_bin (find_lib enso_bin "Base")

    builder.group "Compile" options group_builder->
        group_builder.specify "Compile_Standard_Base" data.bench_compile_base

find_lib enso_bin:File name:Text namespace="Standard":Text -> File =
    install_dir = enso_bin . parent . parent
    lib_no_version = install_dir / "lib" / namespace / name
    Runtime.assert lib_no_version.is_directory "Found directory "+lib_no_version.to_text
    lib_with_version = lib_no_version.list . at 0
    Runtime.assert lib_with_version.is_directory "Found directory "+lib_with_version.to_text
    lib_with_version


enso_bin =
    find_prefix dir prefix =
        vec = dir.list name_filter=prefix+"*"
        if vec.length == 1 then vec.at 0 else
            msg = "Cannot find " + prefix + "* in " + dir.to_text + '\n'
            err = dir.list.fold msg t-> f->
                t + f.to_text + '\n'
            Panic.throw err

    project_root = File.new enso_project.root.to_text
    repository_root = project_root . parent . parent
    built_distribution = find_prefix repository_root "built-distribution"
    enso_engine = find_prefix built_distribution "enso-engine-"
    enso = find_prefix enso_engine "enso-"
    bin = find_prefix enso "bin"

    exe = File.new bin / if Platform.os == Platform.OS.Windows then "enso.bat" else "enso"

    if exe.is_regular_file.not then Panic.throw "Cannot find "+exe.to_text

    exe

main = collect_benches . run_main
