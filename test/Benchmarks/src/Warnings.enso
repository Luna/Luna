from Standard.Base import all

import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
from Standard.Base.Data.Array_Proxy import Array_Proxy

from Standard.Test import Bench

import project.Vector.Utils

polyglot java import java.util.ArrayList

type My_Error
    Error msg

options = Bench.options . set_warmup (Bench.phase_conf 1 3) . set_measure (Bench.phase_conf 1 3)

type Data
    Value ~no_warnings ~one_warning ~ten_percent_warnings ~all_warnings

fmap f data = Data.Value (f data.no_warnings) (f data.one_warning) (f data.ten_percent_warnings) (f data.all_warnings)

## Repeats 0..9
create_vec = Vector.new 100000  (i-> i%10)

add_one_warning vec =
    an_index = vec.length.div 2
    vec.map_with_index i-> x->
        if i == an_index then Warning.attach (My_Error.Error "warning") x else x

add_ten_percent_warnings vec =
    vec.map x->
        if x == 0 then Warning.attach (My_Error.Error "warning") x else x

add_all_warnings vec =
    vec.map x-> Warning.attach (My_Error.Error "warning") x

collect_benches = Bench.build builder->
    raw_vec = create_vec
    unaltered_data = Data.Value raw_vec (add_one_warning raw_vec) (add_ten_percent_warnings raw_vec) (add_all_warnings raw_vec)

    type_group vector_type alter =
        data = fmap alter unaltered_data

        ##
            IO.println 'AAA'
            IO.println (Warning.get_all (data.no_warnings))
            IO.println (Warning.get_all (data.one_warning))
            IO.println (Warning.get_all (data.ten_percent_warnings))
            IO.println (Warning.get_all (data.all_warnings))

        builder.group "warnings_get_all_"+vector_type options group_builder->
            group_builder.specify "no_warnings" <|
                Warning.get_all data.no_warnings
            group_builder.specify "one_warning" <|
                Warning.get_all data.one_warning
            group_builder.specify "ten_percent_warning" <|
                Warning.get_all data.ten_percent_warnings
            group_builder.specify "all_warnings" <|
                Warning.get_all data.all_warnings

        builder.group "warnings_get_all_wrapped_"+vector_type options group_builder->
            group_builder.specify "no_warnings" <|
                Warning.get_all wrap_errors=True data.no_warnings
            group_builder.specify "one_warning" <|
                Warning.get_all wrap_errors=True data.one_warning
            group_builder.specify "ten_percent_warning" <|
                Warning.get_all wrap_errors=True data.ten_percent_warnings
            group_builder.specify "all_warnings" <|
                Warning.get_all wrap_errors=True data.all_warnings

    type_group "Vector" identity
    type_group "Array" (v -> v.to_array)
    ## We omit JavaArrayList and Array_Proxy since they cannot store values with
       warnings attached.
    type_group "Slice" v->
        v2 = v+[Nothing]
        sliced_vector = v2.slice 0 v.length
        sliced_array = sliced_vector.to_array
        sliced_array

main = collect_benches . run_main
