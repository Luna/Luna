from Base import all

import Base.Test
import Base.Time
import Base.Time.Instant
import Base.Time.Interval
import Base.Time.Local_Date
import Base.Time.Local_Time
import Base.Time.Zone_Offset

spec =
    describe "Local_Date" <|
        it "should create local date" <|
            date = Local_Date.new 2020 1 1
            date . get_year . should_equal 2020
            date . get_month . should_equal 1
            date . get_day . should_equal 1
        it "should create local date from instant" <|
            instant = Instant.new 1970 1 1 0 0 1
            date = Local_Date.of_instant instant
            date . to_epoch_second Local_Time.new Zone_Offset.utc . should_equal 0
        it "should parse local date" <|
            date = Local_Date.parse "1999-01-01"
            date . get_year . should_equal 1999
        it "should add date-based interval" <|
            date = Local_Date.new.plus 1.day
            date . get_year . should_equal 1970
            date . get_month . should_equal 1
            date . get_day . should_equal 2
        it "should subtract date-based interval" <|
            date = Local_Date.new.minus 1.year
            date . get_year . should_equal 1969
            date . get_month . should_equal 1
            date . get_day . should_equal 1
        it "should throw error when adding time-based interval" <|
            case Local_Date.new.plus 1.hour . catch (x -> x) of
                Time.Error message ->
                    message . should_equal "Date does not support time intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
        it "should throw error when subtracting time-based interval" <|
            case Local_Date.new.minus (1.day . minus 1.minute) . catch (x -> x) of
                Time.Error message ->
                    message . should_equal "Date does not support time intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
