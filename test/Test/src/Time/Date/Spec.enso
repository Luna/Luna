from Base import all

import Base.Test
import Base.Time
import Base.Time.Date
import Base.Time.Duration
import Base.Time.Time_Of_Day
import Base.Time.Zone

spec =
    describe "Date" <|
        it "should create local date" <|
            date = Date.new 2020 1 1
            date . get_year . should_equal 2020
            date . get_month . should_equal 1
            date . get_day . should_equal 1
        it "should parse local date" <|
            date = Date.parse "1999-01-01"
            date . get_year . should_equal 1999
        it "should add date-based interval" <|
            date = Date.new 1970 . plus 1.day
            date . get_year . should_equal 1970
            date . get_month . should_equal 1
            date . get_day . should_equal 2
        it "should convert to time" <|
            time = Date.new 2000 12 21 . to_time (Time_Of_Day.new 12 30 45) Zone.utc
            time . get_year . should_equal 2000
            time . get_month . should_equal 12
            time . get_day . should_equal 21
            time . get_hour . should_equal 12
            time . get_minute . should_equal 30
            time . get_second . should_equal 45
            time . get_nanosecond . should_equal 0
            time . get_zone . get_id . should_equal Zone.utc.get_id
        it "should subtract date-based interval" <|
            date = Date.new 1970 . minus 1.year
            date . get_year . should_equal 1969
            date . get_month . should_equal 1
            date . get_day . should_equal 1
        it "should throw error when adding time-based interval" <|
            case Date.new 1970 . plus 1.hour . catch (x -> x) of
                Time.Error message ->
                    message . should_equal "Date does not support time intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
        it "should throw error when subtracting time-based interval" <|
            case Date.new 1970 . minus (1.day . minus 1.minute) . catch (x -> x) of
                Time.Error message ->
                    message . should_equal "Date does not support time intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
