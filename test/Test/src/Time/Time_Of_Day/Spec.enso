from Base import all

import Base.Test
import Base.Time
import Base.Time.Interval
import Base.Time.Time_Of_Day

spec =
    describe "Time_Of_Day" <|
        it "should create local time" <|
            time = Time_Of_Day.new 1 0 0
            time . get_hour . should_equal 1
            time . get_minute . should_equal 0
            time . get_second . should_equal 0
            time . to_seconds . should_equal 3600
        it "should parse local time" <|
            time = Time_Of_Day.parse "10:00:00"
            time.to_seconds . should_equal 36000
        it "should add time-based interval" <|
            time = Time_Of_Day.new.plus 1.minute
            time . to_seconds . should_equal 60
        it "should subtract time-based interval" <|
            time = Time_Of_Day.new.minus 1.minute
            time . to_seconds . should_equal 86340
        it "should throw error when adding date-based interval" <|
            case Time_Of_Day.new.plus 1.day . catch (x -> x) of
                Time.Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
        it "should throw error when subtracting date-based interval" <|
            case Time_Of_Day.new.minus (1.day . minus 1.minute) . catch (x -> x) of
                Time.Error message ->
                    message . should_equal "Time_Of_Day does not support date intervals"
                result ->
                    Test.fail ("Unexpected result: " + result.to_text)
