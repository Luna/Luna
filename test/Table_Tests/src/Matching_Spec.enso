from Standard.Base import all

from Standard.Table.Data.Matching import all
import Standard.Table.Data.Problem_Behavior
import Standard.Test

spec = Test.group 'Matching Helper' <|
    ## These are workarounds to #1600 - default arguments do not work properly
       on Atom constructors.

       Once this is fixed, the tests should be updated accordingly.
    exact = Exact case_sensitivity=True
    regex = Regex case_sensitivity=True
    Test.specify 'Should match a single name with a single exact criterion' <|
        Matching.match_single_criterion "foo" "foo" exact . should_equal True
        Matching.match_single_criterion "foo" "f.*" exact . should_equal False
        Matching.match_single_criterion "foo" "Foo" exact . should_equal False

    Test.specify 'Should match a single name with a single regex criterion' <|
        Matching.match_single_criterion "foo" "foo" regex . should_equal True
        Matching.match_single_criterion "foo" "f.*" regex . should_equal True
        Matching.match_single_criterion "foo" "F.*" regex . should_equal False

    Test.specify 'Should support case-insensitive matching' <|
        Matching.match_single_criterion "foo" "F.*" (Regex case_sensitivity=Insensitive) . should_equal True
        Matching.match_single_criterion "foo" "Foo" (Exact case_sensitivity=Insensitive) . should_equal True

        Matching.match_single_criterion "foo" "fF.*" (Regex case_sensitivity=Insensitive) . should_equal False
        Matching.match_single_criterion "foo" "Foos" (Exact case_sensitivity=Insensitive) . should_equal False

        ## TODO this may not be how we want this to work, but this test is
           included to explicitly illustrate how the current implementation
           behaves in such corner cases
        Matching.match_single_criterion "Î²" "B" (Exact case_sensitivity=Insensitive) . should_equal False

    Test.specify 'Should match a list of names with a list of criteria, correctly handling reordering' <|
        Matching.match_criteria ["foo", "bar", "baz"] ["baz", "foo"] reorder=True . should_equal ["baz", "foo"]
        Matching.match_criteria ["foo", "bar", "baz"] ["baz", "foo"] reorder=False . should_equal ["foo", "baz"]

    Test.specify 'Should allow multiple matches to a single criterion (Regex)' <|
        Matching.match_criteria ["foo", "bar", "baz", "quux"] ["b.*"] reorder=True matching_strategy=regex . should_equal ["bar", "baz"]
        Matching.match_criteria ["foo", "bar", "baz", "quux"] ["b.*", "foo"] reorder=False matching_strategy=regex . should_equal ["foo", "bar", "baz"]

    Test.specify 'Should include the column only with the first criterion that matched it, avoiding duplication' <|
        Matching.match_criteria ["foo", "bar", "baz", "zap"] [".*z.*", "b.*"] reorder=True matching_strategy=regex . should_equal ["baz", "zap", "bar"]
        Matching.match_criteria ["foo", "bar", "baz", "zap"] [".*z.*", "b.*"] reorder=False matching_strategy=regex . should_equal ["bar", "baz", "zap"]

    Test.specify 'Should correctly handle criteria which did not match anything'
        Matching.match_criteria ["foo", "bar", "baz"] ["baz", "unknown_column"] reorder=True on_missing=Problem_Behavior.Report_Error . should_fail_with Column_Missing
        Matching.match_criteria ["foo", "bar", "baz"] ["baz", "unknown_column"] reorder=False on_missing=Problem_Behavior.Report_Error . should_fail_with Column_Missing

        warnings_builder = Vector.new_builder
        report_warning text =
            warnings_builder.append text
        Matching.match_criteria ["foo", "bar", "baz"] ["baz", "unknown_column"] reorder=True on_missing=Problem_Behavior.Report_Warning warning_callback=report_warning . should_equal ["baz"]
        warnings = warnings_builder.to_vector
        warnings.length . should_equal 1
        warnings.first . should_equal (Column_Missing "unknown_column").to_display_text

main = Test.Suite.run_main here.spec
