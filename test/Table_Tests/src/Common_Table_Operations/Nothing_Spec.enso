from Standard.Base import all

from Standard.Table import all

import Standard.Database.Data.Column.Column as Database_Column

from Standard.Test import Test
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

type My_Type
    Value x:Text


spec setup =
    prefix = setup.prefix+"asdfasdf"
    table_builder = setup.table_builder
    table_builder_typed columns types =
        Runtime.assert (columns.length == types.length)
        cast_columns = columns.map_with_index i-> c->
            value_type = types.at i
            Column.from_vector (c.at 0) (c.at 1) . cast value_type
        setup.table_builder cast_columns

    # We cannot create a column of Nothing/NULL in the database without casting it to a non-mixed type.
    type_for_nothing_column = if setup.is_database then Value_Type.Char else Value_Type.Mixed

    zone = Time_Zone.parse "Z"

    mixed_values = if setup.is_database then [] else [[My_Type.Value "1", My_Type.Value "2", Value_Type.Mixed]]
        + [[[1], [2], Value_Type.Mixed]]
    date_time_values = if setup.test_selection.date_time.not then [] else [[Date.new 2024 1 3, Date.new 2024 1 4, Value_Type.Date]]
        + [[Date_Time.new 2024 1 3 2 30 10 zone=zone, Date_Time.new 2024 1 3 2 30 11 zone=zone, Value_Type.Date_Time]]
        + [[Time_Of_Day.new 2 30 10, Time_Of_Day.new 2 30 11, Value_Type.Time]]
    values_without_nothing = [[False, True, Value_Type.Boolean]]
            + [["abcd", "efgh", Value_Type.Char]]
            + [[12, 13, Value_Type.Integer]]
            + [[9223372036854775806, 9223372036854775807, Value_Type.Integer]]
            + [[12.3, 23.4, Value_Type.Float]]
            + date_time_values
            + mixed_values
    values_with_nothing = values_without_nothing + [[Nothing, Nothing, type_for_nothing_column]]

    Test.group prefix+"Comparisons" <|
        comparisons = [["==", ==], ["!=", !=], ["<", <], ["<=", <=], [">", >], [">=", >=]]

        comparisons.map pair->
            comparison_name = pair.at 0
            comparison = pair.at 1

            values_with_nothing.map triple->
                value = triple.at 0
                value_type = triple.at 2

                t0 = table_builder_typed [["x", [value]], ["n", [Nothing]]] [value_type, value_type]

                Test.specify "Correctly handle Nothing in: "+value_type.to_text+" "+comparison_name+" Nothing value" <|
                    c0 = comparison (t0.at "x") Nothing
                    c0.to_vector . should_equal [Nothing]

                Test.specify "Correctly handle Nothing in: "+value_type.to_text+" "+comparison_name+" Nothing column" <|
                    c0 = comparison (t0.at "x") (t0.at "n")
                    c0.to_vector . should_equal [Nothing]

                Test.specify "Correctly handle Nothing in: Nothing column "+comparison_name+" "+value_type.to_text <|
                    c0 = comparison (t0.at "n") (t0.at "x")
                    c0.to_vector . should_equal [Nothing]

    Test.group prefix+"between" <|
        values_with_nothing.map triple->
            value = triple.at 0
            value_type = triple.at 2

            t0 = table_builder_typed [["x", [value]], ["y", [value]], ["n", [Nothing]]] [value_type, value_type, value_type]

            Test.specify "Correctly handle Nothing in: Nothing column between "+value_type.to_text+" and "+value_type.to_text <|
                c0 = t0.at "n" . between (t0.at "x") (t0.at "y")
                c0.to_vector . should_equal [Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+" between Nothing column and "+value_type.to_text <|
                c0 = t0.at "x" . between (t0.at "n") (t0.at "y")
                c0.to_vector . should_equal [Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+" between "+value_type.to_text+" and Nothing column" <|
                c0 = t0.at "x" . between (t0.at "y") (t0.at "n")
                c0.to_vector . should_equal [Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+" between Nothing value and "+value_type.to_text <|
                c0 = t0.at "x" . between Nothing (t0.at "y")
                c0.to_vector . should_equal [Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+" between "+value_type.to_text+" and Nothing value" <|
                c0 = t0.at "x" . between (t0.at "y") Nothing
                c0.to_vector . should_equal [Nothing]

    Test.group prefix+"is_nothing" <|
        values_with_nothing.map triple->
            value = triple.at 0
            value_type = triple.at 2

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+".is_nothing" <|
                t0 = table_builder_typed [["x", [value]]] [value_type]
                c0 = t0.at "x" . is_nothing
                c0.to_vector . should_equal [value == Nothing]

    Test.group prefix+"not" <|
        Test.specify "Correctly handle Nothing in .not" <|
            t0 = table_builder [["x", [True, False, Nothing]]]
            t0.at "x" . not . to_vector . should_equal [False, True, Nothing]

    Test.group prefix+"is_in" <|
        values_with_nothing.map triple->
            value = triple.at 0
            other_value = triple.at 1
            value_type = triple.at 2
            t0 = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] [value_type, value_type, value_type, value_type]

            true_if_not_nothing = if value == Nothing then Nothing else True

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Column (returning True)" <|
                t0.at "x" . is_in (t0.at "z") . to_vector . should_equal [true_if_not_nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Column with Nothings (returning True)" <|
                t0.at "x" . is_in (t0.at "x") . to_vector . should_equal [true_if_not_nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Column with Nothings (returning Nothing)" <|
                t0.at "x" . is_in (t0.at "y") . to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: Nothing.is_in Column with Nothings (returning Nothing)" <|
                t0.at "n" . is_in (t0.at "x") . to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Vector (returning True)" <|
                t0.at "x" . is_in (t0.at "z" . to_vector) . to_vector . should_equal [true_if_not_nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Vector with Nothings (returning True)" <|
                t0.at "x" . is_in (t0.at "x" . to_vector) . to_vector . should_equal [true_if_not_nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Vector with Nothings (returning Nothing)" <|
                t0.at "x" . is_in (t0.at "y" . to_vector) . to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: Nothing.is_in Vector with Nothings (returning Nothing)" <|
                t0.at "n" . is_in (t0.at "x" . to_vector) . to_vector . should_equal [Nothing, Nothing]

    Test.group prefix+"Boolean is_in" <|
        make_containing_values  had_null had_true had_false =
            null_maybe = if had_null then [Nothing] else []
            true_maybe = if had_true then [True] else []
            false_maybe = if had_false then [False] else []
            null_maybe + true_maybe + false_maybe

        # [input, had_null, had_true, had_false, output]
        cases = [[True, True, True, True, True]]
            + [[True, True, True, False, True]]
            + [[True, False, True, True, True]]
            + [[True, False, True, False, True]]
            + [[True, True, False, True, Nothing]]
            + [[True, True, False, False, Nothing]]
            + [[True, False, False, True, False]]
            + [[True, False, False, False, False]]
            + [[False, True, True, True, True]]
            + [[False, True, False, True, True]]
            + [[False, False, True, True, True]]
            + [[False, False, False, True, True]]
            + [[False, True, True, False, Nothing]]
            + [[False, True, False, False, Nothing]]
            + [[False, False, True, False, False]]
            + [[False, False, False, False, False]]
            + [[Nothing, True, True, True, Nothing]]
            + [[Nothing, True, False, True, Nothing]]
            + [[Nothing, False, True, True, Nothing]]
            + [[Nothing, False, False, True, Nothing]]
            + [[Nothing, True, True, False, Nothing]]
            + [[Nothing, True, False, False, Nothing]]
            + [[Nothing, False, True, False, Nothing]]
            + [[Nothing, False, False, False, Nothing]]

        negate : Vector | Column -> Vector | Column
        negate vorc = case vorc of
            _ : Vector -> vorc.map (x-> x.if_not_nothing x.not)
            _ : Column -> vorc.not
            _ : Database_Column -> vorc.not
        negation_cases = [["normal input, normal argument", identity, identity]]
            + [["negated input, normal argument", negate, identity]]
            + [["normal input, negated argument", identity, negate]]
            + [["negated input, negated argument", negate, negate]]

        negation_cases.map negation_case->
            negation_desc = negation_case.at 0
            neg_input = negation_case.at 1
            neg_argument = negation_case.at 2

            cases.map cs->
                input = cs.at 0
                output = cs.at 4
                containing_values = make_containing_values (cs.at 1) (cs.at 2) (cs.at 3) 

                Test.specify "Boolean is_in: (Vector), "+negation_desc+" "+cs.to_text <|
                    input_column = neg_input [input]
                    t = table_builder_typed [["input", input_column]] [Value_Type.Boolean]

                    c = (neg_input (t.at "input")) . is_in containing_values

                    c.to_vector . should_equal [output]

                Test.specify "Boolean is_in: (Column), "+negation_desc+" "+cs.to_text <|
                    input_column = neg_input (Vector.fill containing_values.length input)
                    t = table_builder_typed [["input", input_column], ["containing", neg_argument containing_values]] [Value_Type.Boolean, Value_Type.Boolean]
                    expected_output = if input_column.is_empty then [] else [output]

                    c = (neg_input (t.at "input")) . is_in (neg_argument (t.at "containing"))

                    c.to_vector . length . should_equal input_column.length
                    c.to_vector.distinct . should_equal expected_output

    Test.group prefix+"distinct" <|
        values_without_nothing.map triple->
            value = triple.at 0
            other_value = triple.at 1
            value_type = triple.at 2

            Test.specify "Correctly handle Nothing in .distinct for "+value_type.to_text <|
                t0 = table_builder [["x", [value, other_value, other_value, Nothing, value, Nothing]]]
                t1 = t0 . distinct ["x"]
                v0 = t1.at "x" . to_vector
                v0 . length . should_equal 3
                v0 . should_contain_the_same_elements_as [value, other_value, Nothing]

        Test.specify "Correctly handle Nothing in .distinct for Nothing" <|
            t0 = table_builder_typed [["x", [Nothing, Nothing, Nothing, Nothing, Nothing, Nothing]]] [Value_Type.Char]
            t1 = t0 . distinct ["x"]
            v0 = t1.at "x" . to_vector
            v0 . should_equal [Nothing]

    Test.group prefix+"order_by" <|
        values_with_nothing.map triple->
            value = triple.at 0
            other_value = triple.at 1
            value_type = triple.at 2

            is_comparable = Default_Comparator.compare value other_value != Nothing

            if is_comparable then
                t0 = table_builder_typed [["x", [value, Nothing, other_value, other_value, Nothing, value, Nothing]]] [value_type]

                Test.specify "Correctly handle Nothing in .order_by (asc) for "+value_type.to_text <|
                    t1 = t0 . order_by [Sort_Column.Name "x" Sort_Direction.Ascending]
                    t1.at "x" . to_vector . should_equal [Nothing, Nothing, Nothing, value, value, other_value, other_value]

                Test.specify "Correctly handle Nothing in .order_by (desc) for "+value_type.to_text <|
                    t1 = t0 . order_by [Sort_Column.Name "x" Sort_Direction.Descending]
                    t1.at "x" . to_vector . should_equal [other_value, other_value, value, value, Nothing, Nothing, Nothing]
