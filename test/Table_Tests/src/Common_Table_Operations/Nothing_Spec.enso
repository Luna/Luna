from Standard.Base import all

from Standard.Table import all

from Standard.Test import Test
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

type My_Type
    Value x

spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder

    values = [[True, False, Value_Type.Boolean]]
           + [[My_Type.Value "1", My_Type.Value "2", Value_Type.Mixed]]
           + [["twelve", "thirteen", Value_Type.Char]]
           + [[12, 13, Value_Type.Integer]]
           + [[9223372036854775807, 13, Value_Type.Integer]]
           + [[12.3, 23.4, Value_Type.Float]]
           + [[Date.new 2024 1 3, Date.new 2024 1 4, Value_Type.Date]]
           + [[Date_Time.new 2024 1 3 2 30 10, Date_Time.new 2024 1 3 2 30 11, Value_Type.Date_Time]]
           + [[Time_Of_Day.new 2 30 10, Time_Of_Day.new 2 30 11, Value_Type.Time]]
           + [[[1], [2], Value_Type.Mixed]]

    Test.group prefix+"Comparisons" <|
        operations = [["==", ==], ["!=", !=], ["<", <], ["<=", <=], [">", >], [">=", >=]]

        Test.specify "Confirm expected types" <|
            values.map triple->
                value = triple.at 0
                expected_value_type = triple.at 2
                table_builder [["x", [value, Nothing]]] . at "x" . value_type . should_equal expected_value_type

        operations.map pair->
            operation_name = pair.at 0
            operation = pair.at 1

            values.map triple->
                value = triple.at 0
                expected_value_type = triple.at 2

                Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+" "+operation_name+" Nothing value" <|
                    t0 = table_builder [["x", [value, Nothing]]]
                    c0 = operation (t0.at "x") Nothing
                    c0.to_vector . should_equal [Nothing, Nothing]

                Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+" "+operation_name+" Nothing column" <|
                    t0 = table_builder [["x", [value, Nothing]], ["n", [Nothing, Nothing]]]
                    c0 = operation (t0.at "x") (t0.at "n")
                    c0.to_vector . should_equal [Nothing, Nothing]

                Test.specify "Correctly handle Nothing in: Nothing column "+operation_name+" "+expected_value_type.to_text <|
                    t0 = table_builder [["x", [value, Nothing]], ["n", [Nothing, Nothing]]]
                    c0 = operation (t0.at "n") (t0.at "x")
                    c0.to_vector . should_equal [Nothing, Nothing]

    Test.group prefix+"between" <|
        values.map triple->
            value = triple.at 0
            expected_value_type = triple.at 2
            t0 = table_builder [["x", [value, Nothing]], ["y", [value, Nothing]], ["n", [Nothing, Nothing]]]

            Test.specify "Correctly handle Nothing in: Nothing column between "+expected_value_type.to_text+" and "+expected_value_type.to_text <|
                c0 = t0.at "n" . between (t0.at "x") (t0.at "y")
                c0.to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+" between Nothing column and "+expected_value_type.to_text <|
                c0 = t0.at "x" . between (t0.at "n") (t0.at "y")
                c0.to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+" between "+expected_value_type.to_text+" and Nothing column" <|
                c0 = t0.at "x" . between (t0.at "y") (t0.at "n")
                c0.to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+" between Nothing value and "+expected_value_type.to_text <|
                c0 = t0.at "x" . between Nothing (t0.at "y")
                c0.to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+" between "+expected_value_type.to_text+" and Nothing value" <|
                c0 = t0.at "x" . between (t0.at "y") Nothing
                c0.to_vector . should_equal [Nothing, Nothing]

    Test.group prefix+"is_nothing" <|
        values.map triple->
            value = triple.at 0
            expected_value_type = triple.at 2

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+".is_nothing" <|
                t0 = table_builder [["x", [value, Nothing]]]
                c0 = t0.at "x" . is_nothing
                c0.to_vector . should_equal [False, True]

    Test.group prefix+"not" <|
        Test.specify "Correctly handle Nothing in .not" <|
            t0 = table_builder [["x", [True, False, Nothing]]]
            t0.at "x" . not . to_vector . should_equal [False, True, Nothing]

    Test.group prefix+"is_in" <|
        values.map triple->
            value = triple.at 0
            other_value = triple.at 1
            expected_value_type = triple.at 2
            t0 = table_builder [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["n", [Nothing, Nothing]]]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+".is_in Column (returning True)" <|
                t0.at "x" . is_in (t0.at "x") . to_vector . should_equal [True, Nothing]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+".is_in Column (returning Nothing)" <|
                t0.at "x" . is_in (t0.at "y") . to_vector . should_equal [Nothing, Nothing]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+".is_in Vector (returning True)" <|
                t0.at "x" . is_in (t0.at "x" . to_vector) . to_vector . should_equal [True, Nothing]

            Test.specify "Correctly handle Nothing in: "+expected_value_type.to_text+".is_in Vector (returning Nothing)" <|
                t0.at "x" . is_in (t0.at "y" . to_vector) . to_vector . should_equal [Nothing, Nothing]

    Test.group prefix+"distinct" <|
        values.map triple->
            value = triple.at 0
            other_value = triple.at 1
            expected_value_type = triple.at 2

            Test.specify "Correctly handle Nothing in .distinct for "+expected_value_type.to_text <|
                t0 = table_builder [["x", [value, other_value, other_value, Nothing, value, Nothing]]]
                t1 = t0 . distinct
                t1.at "x" . to_vector . should_contain_the_same_elements_as [value, other_value, Nothing]
