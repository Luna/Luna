from Standard.Base import all

from Standard.Table.Data.Aggregate_Column.Aggregate_Column import Sum, Count
import Standard.Table.Data.Expression.Expression_Error
from Standard.Table.Errors import Missing_Input_Columns, Column_Indexes_Out_Of_Range, No_Such_Column

from Standard.Test import Test, Problems
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend spec

spec setup =
    prefix = setup.prefix
    table_builder = setup.table_builder
    db_todo = if prefix.contains "In-Memory" then Nothing else "Table.transpose is not implemented yet in Database."
    Test.group prefix+"Table.cross_tab" pending=db_todo <|
        table = table_builder [["Key", ["x", "x", "x", "x", "y", "y", "y", "z", "z"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
        Test.specify "should cross_tab counts by default using first column as names" <|
            t1 = table.cross_tab
            t1.row_count . should_equal 1
            t1.column_count . should_equal 3
            t1.at "x" . to_vector . should_equal [4]
            t1.at "y" . to_vector . should_equal [3]
            t1.at "z" . to_vector . should_equal [2]

        Test.specify "should allow a different aggregate" <|
            t1 = table.cross_tab values=[Sum "Value"]
            t1.row_count . should_equal 1
            t1.column_count . should_equal 3
            t1.at "x" . to_vector . should_equal [10]
            t1.at "y" . to_vector . should_equal [18]
            t1.at "z" . to_vector . should_equal [17]

        Test.specify "should allow a custom expression for the aggregate" <|
            t1 = table.cross_tab values=[Sum "[Value]*[Value]"]
            t1.row_count . should_equal 1
            t1.column_count . should_equal 3
            t1.at "x" . to_vector . should_equal [30]
            t1.at "y" . to_vector . should_equal [110]
            t1.at "z" . to_vector . should_equal [145]

        Test.specify "should allow a chosen column" <|
            t = table_builder [["Group", ["A","B","A","B","A","B","A","B","A"]], ["Species", ["x", "x", "x", "x", "y", "y", "y", "z", "z"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            t1 = t.cross_tab [] "Species"
            t1.row_count . should_equal 1
            t1.column_count . should_equal 3
            t1.at "x" . to_vector . should_equal [4]
            t1.at "y" . to_vector . should_equal [3]
            t1.at "z" . to_vector . should_equal [2]

        Test.specify "should allow a grouping" <|
            t = table_builder [["Group", ["A","B","A","B","A","B","A","B","A"]], ["Key", ["x", "x", "x", "x", "y", "y", "y", "z", "z"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            t1 = t.cross_tab ["Group"] "Key"
            t1.row_count . should_equal 2
            t1.column_count . should_equal 4
            t1.at "Group" . to_vector . should_equal ["A", "B"]
            t1.at "x" . to_vector . should_equal [2, 2]
            t1.at "y" . to_vector . should_equal [2, 1]
            t1.at "z" . to_vector . should_equal [1, 1]

        Test.specify "should allow a grouping by text" <|
            t = table_builder [["Group", ["A","B","A","B","A","B","A","B","A"]], ["Key", ["x", "x", "x", "x", "y", "y", "y", "z", "z"]], ["Value", [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
            t1 = t.cross_tab "Group" "Key"
            t1.row_count . should_equal 2
            t1.column_count . should_equal 4
            t1.at "Group" . to_vector . should_equal ["A", "B"]
            t1.at "x" . to_vector . should_equal [2, 2]
            t1.at "y" . to_vector . should_equal [2, 1]
            t1.at "z" . to_vector . should_equal [1, 1]

        Test.specify "should allow multiple values aggregates" <|
            t1 = table.cross_tab values=[Count, Sum "Value"]
            t1.row_count . should_equal 1
            t1.column_names . should_equal ["Key", "x Count", "x Sum Value", "y Count", "y Sum Value", "z Count", "z Sum Value"]
            t1.at "x Count" . to_vector . should_equal [4]
            t1.at "x Sum Value" . to_vector . should_equal [10]
            t1.at "y Count" . to_vector . should_equal [3]
            t1.at "y Sum Value" . to_vector . should_equal [18]
            t1.at "z Count" . to_vector . should_equal [2]
            t1.at "z Sum Value" . to_vector . should_equal [17]

        Test.specify "should fail if name_field is not found" <|
            err1 = table.cross_tab [] "Name"
            err1.should_fail_with Missing_Input_Columns
            err1.catch.criteria . should_equal ["Name"]

        Test.specify "should fail if group-by contains missing columns" <|
            err1 = table.cross_tab ["Group", "Nonexistent Group", "OTHER"] "Key"
            err1.should_fail_with Missing_Input_Columns
            err1.catch.criteria . should_equal ["Nonexistent Group", "OTHER"]

        Test.specify "should fail if aggregate values contain missing columns" <|
            err1 = table.cross_tab values=[Count, Sum "Nonexistent Value", Sum "Value", Sum "OTHER"]
            err1.should_fail_with Missing_Input_Columns
            err1.catch.criteria . should_equal ["Nonexistent Value", "OTHER"]

            err2 = table.cross_tab values=[Count, Sum "Nonexistent Value", Sum "Value", Sum 42]
            err2.should_fail_with Missing_Input_Columns
            err2.catch.criteria . should_equal ["Nonexistent Value"]

            err3 = table.cross_tab values=[Count, Sum 42]
            err3.should_fail_with Column_Indexes_Out_Of_Range
            err3.catch.indexes . should_equal [42]

        Test.specify "should fail if aggregate values contain invalid expressions" <|
            err1 = table.cross_tab values=[Sum "[MISSING]"]
            err1.should_fail_with No_Such_Column
            err1.catch.column_name . should_equal "MISSING"

            err2 = table.cross_tab values=[Sum "[[[["]
            err2.should_fail_with Expression_Error.Syntax_Error
