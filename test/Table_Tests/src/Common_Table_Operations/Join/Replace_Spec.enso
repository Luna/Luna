from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import all
from Standard.Table.Errors import all

from Standard.Database import all
from Standard.Database.Errors import Unsupported_Database_Operation, Invariant_Violation, Integrity_Error

from Standard.Test_New import all

from project.Common_Table_Operations.Util import run_default_backend, within_table
import project.Util

main = run_default_backend add_specs

type Data
    Value ~connection

    setup create_connection_fn =
        Data.Value (create_connection_fn Nothing)

    teardown self = self.connection.close


add_specs suite_builder setup =
    prefix = setup.prefix
    create_connection_fn = setup.create_connection_func
    suite_builder.group prefix+"Table.replace" group_builder->
        data = Data.setup create_connection_fn

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "should be able to replace values via a lookup table, using from/to column defaults" <|
            table = table_builder [['x', [1, 2, 3, 4, 2]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            lookup_table = table_builder [['x', [2, 1, 4, 3]], ['z', [20, 10, 40, 30]]]
            expected = table_builder [['x', [10, 20, 30, 40, 20]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            result = table.replace lookup_table 'x'
            result . should_equal expected

        group_builder.specify "should be able to replace values via a lookup table, specifying from/to columns" <|
            table = table_builder [['x', [1, 2, 3, 4, 2]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            lookup_table = table_builder [['x', [2, 1, 4, 3]], ['z', [20, 10, 40, 30]]]
            expected = table_builder [['x', [10, 20, 30, 40, 20]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            result = table.replace lookup_table 'x' 'x' 'z'
            result . should_equal expected

        group_builder.specify "should fail with Illegal_Argument if the specified columns do not exist" <|
            table = table_builder [['x', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']]]
            lookup_table = table_builder [['x', [2, 1, 4, 3]], ['z', [20, 10, 40, 30]]]
            table.replace lookup_table 'q' 'x' 'z' . should_fail_with Missing_Input_Columns
            table.replace lookup_table 'x' 'q' 'z' . should_fail_with Missing_Input_Columns
            table.replace lookup_table 'x' 'x' 'q' . should_fail_with Missing_Input_Columns

        group_builder.specify "can allow unmatched rows" <|
            table = table_builder [['x', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']]]
            lookup_table = table_builder [['x', [4, 3, 1]], ['z', [40, 30, 10]]]
            expected = table_builder [['x', [10, 2, 30, 40]], ['y', ['a', 'b', 'c', 'd']]]
            result = table.replace lookup_table 'x'
            result . should_equal expected

        group_builder.specify "fails on unmatched rows" <|
            table = table_builder [['x', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']]]
            lookup_table = table_builder [['x', [4, 3, 1]], ['z', [40, 30, 10]]]
            table.replace lookup_table 'x' allow_unmatched_rows=False . should_fail_with Unmatched_Rows_In_Lookup

        group_builder.specify "fails on non-unique keys" <|
            table = table_builder [['x', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']]]
            lookup_table = table_builder [['x', [2, 1, 4, 1, 3]], ['z', [20, 10, 40, 11, 30]]]
            table.replace lookup_table 'x' . should_fail_with Non_Unique_Key

        group_builder.specify "should avoid name clashes in the generated column name" <|
            table = table_builder [['duplicate_key', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']]]
            lookup_table = table_builder [['x', [2, 1, 4, 3]], ['z', [20, 10, 40, 30]]]
            expected = table_builder [['duplicate_key', [10, 20, 30, 40]], ['y', ['a', 'b', 'c', 'd']]]
            result = table.replace lookup_table 'duplicate_key'
            result . should_equal expected

        group_builder.specify "(edge-case) should allow lookup with itself" <|
            table = table_builder [['x', [2, 1, 4, 3]], ['y', [20, 10, 40, 30]]]
            expected = table_builder [['x', [20, 10, 40, 30]], ['y', [20, 10, 40, 30]]]
            result = table.replace table 'x'
            result . should_equal expected

        group_builder.specify "should fail on null key values in lookup table" <|
            table = table_builder [['x', [1, 2, 3, 4, 2]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            lookup_table = table_builder [['x', [2, 1, Nothing, 3]], ['z', [20, 10, 40, 30]]]
            table.replace lookup_table 'x' . should_fail_with Null_Values_In_Key_Columns
