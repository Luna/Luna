from Standard.Base import all
import Standard.Base.Errors.Empty_Error.Empty_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import all
from Standard.Table.Errors import all

from Standard.Database import all
import Standard.Database.Feature.Feature
from Standard.Database.Errors import all

from Standard.Test import all

from project.Common_Table_Operations.Util import run_default_backend, build_sorted_table
import project.Util

main filter=Nothing = run_default_backend add_specs filter

type Lazy_Ref
    Value ~get

add_specs suite_builder setup =
    if setup.is_feature_supported Feature.Replace then (add_replace_specs suite_builder setup) else
        suite_builder.group setup.prefix+"Table.replace" group_builder->
            group_builder.specify "replace should report unsupported" <|
                table_builder = setup.light_table_builder
                t1 = table_builder [['x', [1, 2, 3, 4, 2]], ['y', ['a', 'b', 'c', 'd', 'e']]]
                t2 = table_builder [['x', [2, 1, 4, 3]], ['z', [20, 10, 40, 30]]]
                t3 = t1.replace t2 'x'
                t3.should_fail_with (Unsupported_Database_Operation.Error "replace")

add_replace_specs suite_builder setup =
    prefix = setup.prefix
    suite_builder.group prefix+"Table.replace" group_builder->
        table_builder = build_sorted_table setup

        table1 = Lazy_Ref.Value <|
            table_builder [['x', [1, 2, 3, 4, 2]], ['y', ['a', 'b', 'c', 'd', 'e']]]
        table2 = Lazy_Ref.Value <|
            table_builder [['x', [2, 1, 4, 3]], ['z', [20, 10, 40, 30]]]
        table3 = Lazy_Ref.Value <|
            table_builder [['x', [1, 2, 3, 4]], ['y', ['a', 'b', 'c', 'd']]]
        empty_table = Lazy_Ref.Value <|
            in_memory = Table.new [['x', [1]], ['z', [2]]]
            empty = in_memory.take 0
            table_builder empty.columns
        group_builder.specify "should be able to replace values via a lookup table, using from/to column defaults" <|
            table = table1.get
            lookup_table = table2.get
            expected = Table.new [['x', [10, 20, 20, 30, 40]], ['y', ['a', 'b', 'e', 'c', 'd']]]
            result = table.replace lookup_table 'x' . sort ["x", "y"]
            result . should_equal expected

        group_builder.specify "should be able to replace values via a lookup table, specifying from/to columns" <|
            table = table1.get
            lookup_table = table_builder [['d', [4, 5, 6, 7]], ['x', [2, 1, 4, 3]], ['d2', [5, 6, 7, 8]], ['z', [20, 10, 40, 30]]]
            expected = Table.new [['x', [10, 20, 20, 30, 40]], ['y', ['a', 'b', 'e', 'c', 'd']]]
            result = table.replace lookup_table 'x' 'x' 'z' . sort ["x", "y"]
            result . should_equal expected

        group_builder.specify "should be able to replace values via a lookup table provided as a Map" <|
            table = table1.get
            lookup_table = Dictionary.from_vector [[2, 20], [1, 10], [4, 40], [3, 30]]
            expected = Table.new [['x', [10, 20, 20, 30, 40]], ['y', ['a', 'b', 'e', 'c', 'd']]]
            result = table.replace lookup_table 'x' . sort ["x", "y"]
            result . should_equal expected

        group_builder.specify "should be able to replace multiple columns" <|
            table = table_builder [['x', [1, 2, 3, 4, 2]], ['x2', [2, 1, 2, 1, 4]], ['x3', [3, 4, 1, 3, 4]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            lookup_table = table_builder [['d', [4, 5, 6, 7]], ['x', [2, 1, 4, 3]], ['d2', [5, 6, 7, 8]], ['z', [20, 10, 40, 30]]]
            expected = Table.new [['x', [10, 20, 20, 30, 40]], ['x2', [20, 10, 40, 20, 10]], ['x3', [30, 40, 40, 10, 30]], ['y', ['a', 'b', 'e', 'c', 'd']]]
            result = table.replace lookup_table ['x', 'x2', 'x3'] 'x' 'z' . sort ["x", "y"]
            result . should_equal expected

        group_builder.specify "should be able to replace multiple columns selected by regex" <|
            table = table_builder [['x', [1, 2, 3, 4, 2]], ['x2', [2, 1, 2, 1, 4]], ['x3', [3, 4, 1, 3, 4]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            lookup_table = table_builder [['d', [4, 5, 6, 7]], ['x', [2, 1, 4, 3]], ['d2', [5, 6, 7, 8]], ['z', [20, 10, 40, 30]]]
            expected = Table.new [['x', [10, 20, 20, 30, 40]], ['x2', [20, 10, 40, 20, 10]], ['x3', [30, 40, 40, 10, 30]], ['y', ['a', 'b', 'e', 'c', 'd']]]
            result = table.replace lookup_table [(regex 'x.*')] 'x' 'z' . sort ["x", "y"]
            result . should_equal expected
        
        group_builder.specify "should be able to replace multiple columns selected by type" <|
            table = table_builder [['x', [1, 2, 3, 4, 2]], ['x2', [2, 1, 2, 1, 4]], ['x3', [3, 4, 1, 3, 4]], ['y', ['a', 'b', 'c', 'd', 'e']]]
            lookup_table = table_builder [['d', [4, 5, 6, 7]], ['x', [2, 1, 4, 3]], ['d2', [5, 6, 7, 8]], ['z', [20, 10, 40, 30]]]
            expected = Table.new [['x', [10, 20, 20, 30, 40]], ['x2', [20, 10, 40, 20, 10]], ['x3', [30, 40, 40, 10, 30]], ['y', ['a', 'b', 'e', 'c', 'd']]]
            result = table.replace lookup_table [..By_Type ..Integer] 'x' 'z' . sort ["x", "y"]
            result . should_equal expected

        group_builder.specify "should fail with Missing_Input_Columns if the specified columns do not exist" <|
            table = table3.get
            lookup_table = table2.get
            table.replace lookup_table 'q' 'x' 'z' . should_fail_with Missing_Input_Columns
            table.replace lookup_table 'x' 'q' 'z' . should_fail_with Missing_Input_Columns
            table.replace lookup_table 'x' 'x' 'q' . should_fail_with Missing_Input_Columns

        group_builder.specify "can allow unmatched rows" <|
            table = table3.get
            lookup_table = table_builder [['x', [4, 3, 1]], ['z', [40, 30, 10]]]
            expected = Table.new [['x', [2, 10, 30, 40]], ['y', ['b', 'a', 'c', 'd']]]
            result = table.replace lookup_table 'x' . sort "x"
            result . should_equal expected

        group_builder.specify "fails on unmatched rows" <|
            table = table3.get
            lookup_table = table_builder [['x', [4, 3, 1]], ['z', [40, 30, 10]]]
            table.replace lookup_table 'x' allow_unmatched_rows=False . should_fail_with Unmatched_Rows_In_Lookup

        group_builder.specify "fails on non-unique keys" <|
            table = table3.get
            lookup_table = table_builder [['x', [2, 1, 4, 1, 3]], ['z', [20, 10, 40, 11, 30]]]
            table.replace lookup_table 'x' . should_fail_with Non_Unique_Key

        group_builder.specify "should avoid name clashes in the (internally) generated column name" <|
            table = table3.get.rename_columns [['x', 'duplicate_key']]
            lookup_table = table2.get
            expected = Table.new [['duplicate_key', [10, 20, 30, 40]], ['y', ['a', 'b', 'c', 'd']]]
            result = table.replace lookup_table 'duplicate_key' . sort 'y'
            result . should_equal expected

        group_builder.specify "(edge-case) should allow lookup with itself" <|
            table = table_builder [['x', [2, 1, 4, 3]], ['y', [20, 10, 40, 30]]]
            expected = Table.new [['x', [10, 20, 30, 40]], ['y', [10, 20, 30, 40]]]
            result = table.replace table 'x' . sort "x"
            result . should_equal expected

        group_builder.specify "should not merge columns other than the one specified in the `column` param" <|
            table = table_builder [['x', [1, 2, 3, 4, 2]], ['y', ['a', 'b', 'c', 'd', 'e']], ['q', [4, 5, 6, 7, 8]]]
            lookup_table = table_builder [['x', [2, 1, 4, 3]], ['z', [20, 10, 40, 30]], ['q', [40, 50, 60, 70]]]
            expected = Table.new [['x', [10, 20, 20, 30, 40]], ['y', ['a', 'b', 'e', 'c', 'd']], ['q', [4, 5, 8, 6, 7]]]
            result = table.replace lookup_table 'x' . sort ["x", "y"]
            result . should_equal expected

        group_builder.specify "should fail on null key values in lookup table" <|
            table = table1.get
            lookup_table = table_builder [['x', [2, 1, Nothing, 3]], ['z', [20, 10, 40, 30]]]
            table.replace lookup_table 'x' . should_fail_with Null_Values_In_Key_Columns

        group_builder.specify "should accept an empty (but well-formed) lookup table if allow_unmatched_rows=True, but expect a warning" <|
            table = table1.get
            lookup_table = empty_table.get
            t = table.replace lookup_table 'x' . sort ['y']
            t . should_equal table
            Problems.expect_warning (Empty_Error.Error "lookup_table") t

        group_builder.specify "should throw an error on an empty (but well-formed) lookup table and non-empty base table if allow_unmatched_rows=False" <|
            table = table1.get . sort ['x']
            lookup_table = empty_table.get
            t = table.replace lookup_table 'x' allow_unmatched_rows=False . sort ['y']
            t . should_fail_with Unmatched_Rows_In_Lookup

        group_builder.specify "should accept an empty (but well-formed) lookup table if the base table is also empty, but expect a warning" <|
            table = empty_table.get
            lookup_table = empty_table.get
            t = table.replace lookup_table 'x'
            t . should_equal table
            Problems.expect_warning (Empty_Error.Error "lookup_table") t

        group_builder.specify "should accept an empty lookup map, if allow_unmatched_rows=True, but expect a warning" <|
            table = table1.get
            t = table.replace Dictionary.empty 'x'
            t . should_equal table
            Problems.expect_warning (Empty_Error.Error "lookup_table") t

        group_builder.specify "should throw an error on an empty lookup map and non-empty base table if allow_unmatched_rows=False" <|
            table = table1.get . sort ['x']
            t = table.replace Dictionary.empty 'x' allow_unmatched_rows=False
            t . should_fail_with Unmatched_Rows_In_Lookup
            t.catch.example_key_values . should_equal [1]

        group_builder.specify "should accept an empty lookup map if the base table is also empty, but expect a warning" <|
            table = empty_table.get
            t = table.replace Dictionary.empty 'x'
            t . should_equal table
            Problems.expect_warning (Empty_Error.Error "lookup_table") t

        group_builder.specify "should not allow from/to_coumn to specified if the argument is a Map" <|
            table = table1.get
            lookup_table = Dictionary.from_vector [[2, 20], [1, 10], [4, 40], [3, 30]]
            table.replace lookup_table 'x' from_column=8 . should_fail_with Illegal_Argument
            table.replace lookup_table 'x' to_column=9 . should_fail_with Illegal_Argument
            table.replace lookup_table 'x' from_column=8 to_column=9 . should_fail_with Illegal_Argument

        if setup.flagged ..Date_Time then group_builder.specify "should correctly infer types of columns (Date/Time)" <|
            my_table = setup.table_builder [["X", [1, 2, 3, 2]], ["rowid", [1, 2, 3, 4]]]

            t1 = my_table.replace (Dictionary.from_vector [[1, Date.new 2021], [2, Date.new 2022], [3, Date.new 2023]]) "X" allow_unmatched_rows=False . sort "rowid"
            t1.at "X" . value_type . should_equal Value_Type.Date
            t1.at "X" . to_vector . should_equal [Date.new 2021, Date.new 2022, Date.new 2023, Date.new 2022]

            t2 = my_table.replace (Dictionary.from_vector [[1, Time_Of_Day.new 1 2 3], [2, Time_Of_Day.new 4 5 6], [3, Time_Of_Day.new 7 8 9]]) "X" allow_unmatched_rows=False . sort "rowid"
            t2.at "X" . value_type . should_equal Value_Type.Time
            t2.at "X" . to_vector . should_equal [Time_Of_Day.new 1 2 3, Time_Of_Day.new 4 5 6, Time_Of_Day.new 7 8 9, Time_Of_Day.new 4 5 6]

            t3 = my_table.replace (Dictionary.from_vector [[1, Date_Time.new 2021 1 1 1 1 1], [2, Date_Time.new 2022 2 2 2 2 2], [3, Date_Time.new 2023 3 3 3 3 3]]) "X" allow_unmatched_rows=False . sort "rowid"
            t3.at "X" . value_type . should_be_a (Value_Type.Date_Time ...)
