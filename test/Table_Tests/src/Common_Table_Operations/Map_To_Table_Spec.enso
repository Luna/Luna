from Standard.Base import all
import Standard.Base.Errors.Common.Assertion_Error
import Standard.Base.Errors.Empty_Error.Empty_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import Value_Type

from Standard.Database.DB_Table import MAX_LITERAL_ELEMENT_COUNT

from Standard.Test import all

from project.Common_Table_Operations.Util import run_default_backend

main = run_default_backend add_specs

type Data
    Value ~dummy_table

    setup table_builder =
        Data.Value (table_builder [['x', [1]]])

add_specs suite_builder setup =
    prefix = setup.prefix
    suite_builder.group prefix+"Table.make_table_from_dictionary/vectors" group_builder->
        data = Data.setup setup.table_builder
        group_builder.specify "should be able to create a literal table with one row" <|
            vecs = [[0], [3.5], ['ABC']]
            t = data.dummy_table.make_table_from_vectors vecs ['x', 'y', 'z']
            t.at 'x' . to_vector . should_equal [0]
            t.at 'y' . to_vector . should_equal [3.5]
            t.at 'z' . to_vector . should_equal ['ABC']

            setup.expect_integer_type <|  t.at 'x'
            t.at 'y' . value_type . should_be_a (Value_Type.Float ...)
            t.at 'z' . value_type . should_be_a (Value_Type.Char ...)

        group_builder.specify "should be able to create a literal table with three rows" <|
            vecs = [[0, 1, 2], [3, 4, 5], ['a', 'b', 'c']]
            t = data.dummy_table.make_table_from_vectors vecs ['x', 'y', 'z'] . read . order_by 'x'
            t.at 'x' . to_vector . should_equal [0, 1, 2]
            t.at 'y' . to_vector . should_equal [3, 4, 5]
            t.at 'z' . to_vector . should_equal ['a', 'b', 'c']

        if setup.is_database then
            group_builder.specify "should not be able to create a literal table with empty columns (db backend)" <|
                data.dummy_table.make_table_from_vectors [[], [], []] ['x', 'y', 'z'] . read . should_fail_with Illegal_Argument

        if setup.is_database.not then
            group_builder.specify "should be able to create a literal table with empty columns (in-mem backend)" <|
                t = data.dummy_table.make_table_from_vectors [[], [], []] ['x', 'y', 'z']
                t.row_count . should_equal 0

        group_builder.specify "should not be able to create a literal table with no columns" <|
            data.dummy_table.make_table_from_vectors [] [] . read . should_fail_with Illegal_Argument

        group_builder.specify "should fail if columns are unequal length" <|
                vecs = [[0, 1, 2], [3, 5], [6, 7, 8]]
                data.dummy_table.make_table_from_vectors vecs ['x', 'y', 'z'] . read . should_fail_with Illegal_Argument
                vecs2 = [[], [3, 4, 5], [6, 7, 8]]
                data.dummy_table.make_table_from_vectors vecs2 ['x', 'y', 'z'] . read . should_fail_with Illegal_Argument

        if setup.test_selection.date_time then
            group_builder.specify "should be able to create a table of date-time values" <|
                vecs = [[Date.new 2021 01 02], [Time_Of_Day.new 12 35 4], [Date_Time.new 2020 04 02 18 55], ['2001-01-01'], ['01:01:01']]
                t = data.dummy_table.make_table_from_vectors vecs ['date', 'time', 'datetime', 'date-like-text', 'time-like-text']
                m = t.read
                m.at 'date' . to_vector . should_equal [Date.new 2021 01 02]
                m.at 'time' . to_vector . should_equal [Time_Of_Day.new 12 35 4]
                m.at 'date-like-text' . to_vector . should_equal ['2001-01-01']
                m.at 'time-like-text' . to_vector . should_equal ['01:01:01']

                t.at 'date' . value_type . should_equal Value_Type.Date
                t.at 'time' . value_type . should_equal Value_Type.Time
                t.at 'datetime' . value_type . should_be_a (Value_Type.Date_Time ...)
                t.at 'date-like-text' . value_type . should_be_a (Value_Type.Char ...)
                t.at 'time-like-text' . value_type . should_be_a (Value_Type.Char ...)

                # The types should be preserved after an 'identity' operation:
                new_cols = ['date', 'time', 'datetime', 'date-like-text', 'time-like-text'].map name->
                    c = t.at name
                    (c == c).iif c c . rename name
                t2 = new_cols.fold t acc-> c-> acc.set c set_mode=..Update
                t2.at 'date' . value_type . should_equal Value_Type.Date
                t2.at 'time' . value_type . should_equal Value_Type.Time
                t2.at 'datetime' . value_type . should_be_a (Value_Type.Date_Time ...)
                t2.at 'date-like-text' . value_type . should_be_a (Value_Type.Char ...)
                t2.at 'time-like-text' . value_type . should_be_a (Value_Type.Char ...)

                m2 = t2.read
                m2.at 'date' . to_vector . should_equal [Date.new 2021 01 02]
                m2.at 'time' . to_vector . should_equal [Time_Of_Day.new 12 35 4]
                m2.at 'date-like-text' . to_vector . should_equal ['2001-01-01']
                m2.at 'time-like-text' . to_vector . should_equal ['01:01:01']

        group_builder.specify "should be able to create a literal table from a dictionary" <|
            map = Dictionary.from_vector [['x', 1], ['y', 2], ['z', 3]]
            t = data.dummy_table.make_table_from_dictionary map 'k' 'v' . sort 'v'
            t.at 'k' . to_vector . should_equal ['x', 'y', 'z']
            t.at 'v' . to_vector . should_equal [1, 2, 3]

        if setup.is_database then
            group_builder.specify "should not be able to create a literal table from an empty dictionary" <|
                map = Dictionary.empty
                data.dummy_table.make_table_from_dictionary map 'k' 'v' . should_fail_with Illegal_Argument

        if setup.is_database.not then
            group_builder.specify "should be able to create a literal table from an empty dictionary" <|
                map = Dictionary.empty
                t = data.dummy_table.make_table_from_dictionary map 'k' 'v'
                t.row_count . should_equal 0

        if setup.is_database then
            group_builder.specify "should respect the maximum size" <|
                cols = ['x', 'y', 'z']

                ok_col_length = MAX_LITERAL_ELEMENT_COUNT.div 3
                ok_vecs = 0.up_to 3 . map (_-> 0.up_to ok_col_length . to_vector)
                ok_result = data.dummy_table.make_table_from_vectors ok_vecs cols
                ok_result.read.row_count . should_equal ok_col_length

                too_large_col_length = ok_col_length + 1
                too_large_vecs = 0.up_to 3 . map (_-> 0.up_to too_large_col_length . to_vector)
                data.dummy_table.make_table_from_vectors too_large_vecs cols . should_fail_with Illegal_Argument
