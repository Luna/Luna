from Standard.Base import all

import Standard.Database.DB_Table.DB_Table
import Standard.Database.DB_Column.DB_Column
from Standard.Table import Column, Table

from Standard.Test import all

polyglot java import org.enso.base_test_helpers.FileSystemHelper

Table.should_equal : Any -> Integer -> Any
Table.should_equal self expected frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    Panic.catch Any (self.should_equal_impl expected loc) error->
        Test.fail error.payload 

Column.should_equal : Any -> Integer -> Any
Column.should_equal self expected frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    Panic.catch Any (self.should_equal_impl expected loc) error->
        Test.fail error.payload

## PRIVATE
Table.should_equal_impl self expected loc =
    case expected of
        _ : Table ->
            Panic.catch Any (self.columns.zip expected.columns a-> e->(a.should_equal_impl e)) error->
                msg = 'Tables differ at '+loc+'.\nActual:\n' + self.display + '\nExpected:\n' + expected.display + '\n' + error.payload
                Panic.throw msg
        _ -> Panic.throw "Got a Table, but expected a "+expected.to_display_text+(display_loc loc)+'.'
## PRIVATE
Column.should_equal_impl self expected loc='' =
    case expected of
        _ : Column ->
            if self.name != expected.name then
                Panic.throw "Expected column name "+expected.name+", but got "+self.name+(display_loc loc)+'.'
            if self.length != expected.length then
                Panic.throw "Expected column length "+expected.length.to_text+", but got "+self.length.to_text+(display_loc loc)+'.'
            if self.value_type != expected.value_type then
                Panic.throw "Expected column type "+expected.value_type.to_text+", but got "+self.value_type.to_text+(display_loc loc)+'.'
            self.zip expected a-> e->
                if a != e then
                    if (a.is_a Number && e.is_a Number && a.is_nan && e.is_nan).not then
                        self.report_fail expected loc
        _ -> Panic.throw "Got a Column, but expected a "+expected.to_display_text+(display_loc loc)+'.'


Column.report_fail self expected loc =
    indexed = self.zip (0.up_to self.length) a-> i-> Pair.new a i
    indexed.zip expected a-> e->
        if a.first != e then
            if (a.first.is_a Number && e.is_a Number && a.first.is_nan && e.is_nan).not then
                Panic.throw "Column: "+self.name+" differs at row "+a.second.to_text+'.\n\t  Actual  : '+a.first.to_text+'\n\t  Expected: '+e.to_text+'\n\t'+(display_loc loc)+'.'

display_loc loc:Text =
    if loc.is_empty then '' else
        ' (at '+loc+')'

DB_Table.should_equal : DB_Table -> Integer -> Any
DB_Table.should_equal self expected frames_to_skip=0 =
    t0 = self.read
    t1 = expected.read
    t0 . should_equal t1 frames_to_skip

DB_Column.should_equal : DB_Column -> Integer -> Any
DB_Column.should_equal self expected frames_to_skip=0 =
    t0 = self.read
    t1 = expected.read
    t0 . should_equal t1 frames_to_skip

normalize_lines string line_separator=Line_Ending_Style.Unix.to_text newline_at_end=True =
    case newline_at_end of
        True -> string.lines.join line_separator suffix=line_separator
        False -> string.lines.join line_separator

set_writable file writable =
    path = file.absolute.path
    FileSystemHelper.setWritable path writable
