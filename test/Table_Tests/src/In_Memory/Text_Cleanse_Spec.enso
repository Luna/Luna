from Standard.Base import all

import project.Util
from project.Util import all

import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Test.Extensions

from Standard.Table import Column, Table, Value_Type, Auto, Bits
from Standard.Table.Errors import Invalid_Value_Type, Invalid_Column_Names
from Standard.Table.Text_Cleanse import all

from Standard.Test import all

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter


add_specs suite_builder =
    suite_builder.group "Column Text Cleanse" group_builder->
        test_col = Column.from_vector "Test" ["  It was", "the best  ", "of  times", "  it was  the  worst  of  times  "]
        group_builder.specify "should remove leading whitespace" <|
            expected_col = Column.from_vector "Test" ["It was", "the best  ", "of  times", "it was  the  worst  of  times  "]
            res = test_col.text_cleanse [Text_Cleanse.Leading_Whitespace]
            res.should_equal expected_col
        group_builder.specify "should remove trailing whitespace" <|
            expected_col = Column.from_vector "Test" ["  It was", "the best", "of  times", "  it was  the  worst  of  times"]
            res = test_col.text_cleanse [Text_Cleanse.Trailing_Whitespace]
            res.should_equal expected_col
        group_builder.specify "should remove duplicate whitespace" <|
            expected_col = Column.from_vector "Test" [" It was", "the best ", "of times", " it was the worst of times "]
            res = test_col.text_cleanse [Text_Cleanse.Duplicate_Whitespace]
            res.should_equal expected_col
        group_builder.specify "should remove leading and trailing whitespace" <|
            expected_col = Column.from_vector "Test" ["It was", "the best", "of  times", "it was  the  worst  of  times"]
            res = test_col.text_cleanse [Text_Cleanse.Leading_Whitespace, Text_Cleanse.Trailing_Whitespace]
            res.should_equal expected_col
        group_builder.specify "should remove all whitespace" <|
            expected_col = Column.from_vector "Test" ["Itwas", "thebest", "oftimes", "itwastheworstoftimes"]
            res = test_col.text_cleanse [Text_Cleanse.All_Whitespace]
            res.should_equal expected_col
        test_col_with_nums = Column.from_vector "Test" ["1It was", "the best2", "3of  times4", " 1984 it was  the  worst  of  times  72"]
        group_builder.specify "should remove leading numbers" <|
            expected_col = Column.from_vector "Test" ["It was", "the best2", "of  times4", " 1984 it was  the  worst  of  times  72"]
            res = test_col_with_nums.text_cleanse [Text_Cleanse.Leading_Numbers]
            res.should_equal expected_col
        group_builder.specify "should remove trailing numbers" <|
            expected_col = Column.from_vector "Test" ["1It was", "the best", "3of  times", " 1984 it was  the  worst  of  times  "]
            res = test_col_with_nums.text_cleanse [Text_Cleanse.Trailing_Numbers]
            res.should_equal expected_col
    suite_builder.group "Text Cleanse" group_builder->
        input = "  It was the best  of  times  it was  the  worst  of  times  "
        group_builder.specify "should remove leading whitespace" <|
            expected = "It was the best  of  times  it was  the  worst  of  times  "
            res = input.cleanse [Text_Cleanse.Leading_Whitespace]
            res.should_equal expected
        group_builder.specify "should remove trailing whitespace" <|
            expected = "  It was the best  of  times  it was  the  worst  of  times"
            res = input.cleanse [Text_Cleanse.Trailing_Whitespace]
            res.should_equal expected
        group_builder.specify "should remove duplicate whitespace" <|
            expected = " It was the best of times it was the worst of times "
            res = input.cleanse [Text_Cleanse.Duplicate_Whitespace]
            res.should_equal expected
        group_builder.specify "should remove leading and trailing whitespace" <|
            expected = "It was the best  of  times  it was  the  worst  of  times"
            res = input.cleanse [Text_Cleanse.Leading_Whitespace, Text_Cleanse.Trailing_Whitespace]
            res.should_equal expected
        group_builder.specify "should remove all whitespace" <|
            expected = "Itwasthebestoftimesitwastheworstoftimes"
            res = input.cleanse [Text_Cleanse.All_Whitespace]
            res.should_equal expected
        input2 = "1922  It was the best  of  times  it was  the  worst  of  times  1804"
        group_builder.specify "should remove leading numbers" <|
            expected = "  It was the best  of  times  it was  the  worst  of  times  1804"
            res = input2.cleanse [Text_Cleanse.Leading_Numbers]
            res.should_equal expected
        group_builder.specify "should remove trailing numbers" <|
            expected = "1922  It was the best  of  times  it was  the  worst  of  times  "
            res = input2.cleanse [Text_Cleanse.Trailing_Numbers]
            res.should_equal expected
    suite_builder.group "Table Text Cleanse" group_builder->
        flight = ["Flight", [" BA0123", "BA0123 ", "  SG0456  ", "BA  0123", " S G 0 4 5 6 "]]
        passenger = ["Passenger", ["   Albert Einstein", "Marie Curie   ", "   Isaac Newton   ", "Stephen   Hawking", " A d a Lovelace "]]
        ticket_price = ["Ticket Price", [101, 576, 73, 112, 74]]
        table = Table.new [flight, passenger, ticket_price]
        group_builder.specify "should remove leading whitespace" <|
            clean_flight = ["Flight", ["BA0123", "BA0123 ", "SG0456  ", "BA  0123", "S G 0 4 5 6 "]]
            clean_passenger = ["Passenger", ["Albert Einstein", "Marie Curie   ", "Isaac Newton   ", "Stephen   Hawking", "A d a Lovelace "]]
            expected_table = Table.new [clean_flight, clean_passenger, ticket_price]
            res = table.text_cleanse [Text_Cleanse.Leading_Whitespace] ["Flight", "Passenger"]
            res.should_equal expected_table

