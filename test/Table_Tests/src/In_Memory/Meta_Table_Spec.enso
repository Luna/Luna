from Standard.Base import all
import Standard.Base.Error.Common.Type_Error
import Standard.Base.Error.Illegal_Argument.Illegal_Argument
import Standard.Base.Error.Incomparable_Values.Incomparable_Values

from Standard.Table import Table, Column, Sort_Column, Column_Selector, Sort_Column_Selector, Aggregate_Column
import Standard.Table.Main as Table_Module
from Standard.Table.Data.Aggregate_Column.Aggregate_Column import all hiding First, Last
from Standard.Table.Data.Table import Empty_Error
from Standard.Table.Data.Storage import Storage
import Standard.Table.Data.Value_Type.Value_Type
from Standard.Table.Errors import Invalid_Output_Column_Names, Duplicate_Output_Column_Names, No_Input_Columns_Selected, Missing_Input_Columns, No_Such_Column, Floating_Point_Grouping, Invalid_Value_Type

import Standard.Visualization

from Standard.Database import Database, SQLite, In_Memory

from Standard.Test import Test, Test_Suite, Problems
import Standard.Test.Extensions

import project.Common_Table_Operations
from project.Util import all

spec =
    Test.group "Meta.get_annotation for table at selector" <|
        Test.specify "find bools and texts" <|
            bools = ["bools", [False, False, True, True, False]]
            texts = ["texts", ["foo", "foo", "bar", "baz", "spam"]]
            table = Table.new [bools, texts]
            dynamic_drop_down = Meta.get_annotation table "at" "selector"
            [ "bools", "texts" ] . should_equal dynamic_drop_down

        Test.specify "find bools and two texts" <|
            bools = ["bools", [False, False, True]]
            texts1 = ["texts1", ["foo", "bar", "baz"]]
            texts2 = ["texts2", ["baz", "quux", "spam"]]
            table = Table.new [bools, texts1, texts2]
            dynamic_drop_down = Meta.get_annotation table "at" "selector"
            [ "bools", "texts1", "texts2" ] . should_equal dynamic_drop_down

main = Test_Suite.run_main spec
