from Standard.Base import all

import Standard.Base.Data.Locale.Locale
import Standard.Base.Data.Time.Date.Date
import Standard.Base.Data.Time.Date_Time.Date_Time
import Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Test.Extensions

from Standard.Table import Column, Value_Type
from Standard.Table.Errors import Invalid_Value_Type
from Standard.Test import Test, Test_Suite, Problems
from project.Util import all

spec =
    Test.group "Date Column.format, with format string" <|
        Test.specify "Date column" <|
            input = Column.from_vector "values" [Date.new 2020 12 21, Date.new 2023 4 25]
            expected = Column.from_vector "values" ["20201221", "20230425"]
            actual = input.format "yyyyMMdd"
            actual . should_equal expected

        Test.specify "Date with locale" <|
            input = Column.from_vector "values" [Date.new 2020 6 21, Date.new 2023 4 25]
            expected_default = Column.from_vector "values" ["21. Jun 2020", "25. Apr 2023"]
            expected_gb = Column.from_vector "values" ["21. Jun 2020", "25. Apr 2023"]
            expected_fr = Column.from_vector "values" ["21. juin 2020", "25. avril 2023"]
            input.format "d. MMMM yyyy" . should_equal expected_default
            input.format "d. MMMM yyyy" (Locale.default) . should_equal expected_default
            input.format "d. MMMM yyyy" (Locale.new "gb") . should_equal expected_gb
            input.format "d. MMMM yyyy" (Locale.new "fr") . should_equal expected_fr

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [Date.new 2020 6 21, Date.new 2023 4 25]
            expected = Column.from_vector "values" [Nothing, Nothing]
            input.format "DDDDD" . should_fail_with Illegal_Argument

    Test.group "Date Column.format, with format Column" <|
        Test.specify "Date column" <|
            input = Column.from_vector "values" [Date.new 2020 12 21, Date.new 2023 4 25]
            formats = Column.from_vector "formats" ["yyyyMMdd", "dd-MM-yyyy"]
            expected = Column.from_vector "values" ["20201221", "25-04-2023"]
            actual = input.format formats
            actual . should_equal expected

        Test.specify "Date with locale" <|
            input = Column.from_vector "values" [Date.new 2020 6 21, Date.new 2023 4 25]
            formats = Column.from_vector "formats" ["d. MMMM yyyy", "d-MMMM-yyyy"]
            expected = Column.from_vector "values" ["21. juin 2020", "25-avril-2023"]
            input.format formats (Locale.new "fr") . should_equal expected

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [Date.new 2020 6 21, Date.new 2023 4 25, Date.new 2023 4 26]
            formats = Column.from_vector "formats" ["yyyyMMdd", "DDDDD", "FFF"]
            expected = Column.from_vector "values" ['20200621', Nothing, Nothing]
            input.format formats . should_fail_with Illegal_Argument

        Test.specify "Bad format column type" <|
            input = Column.from_vector "values" [Date.new 2020 6 21, Date.new 2023 4 25, Date.new 2023 4 26]
            formats = Column.from_vector "formats" [3, 4, 5]
            input.format formats . should_fail_with Invalid_Value_Type

        Test.specify "Max # of errors" <|
            input = Column.from_vector "values" (Vector.new 20 (_-> Date.new 2020 6 21))
            formats = Column.from_vector "formats" (Vector.new 20 _-> "DDDDD")
            expected = Column.from_vector "values" (Vector.new 20 _-> Nothing)
            input.format formats . should_fail_with Illegal_Argument

        Test.specify "column length mismatch" <|
            input = Column.from_vector "values" [Date.new 2020 6 21, Date.new 2023 4 25]
            formats = Column.from_vector "formats" ["yyyyMMdd", "DDDDD", "w"]
            input.format formats . should_fail_with Illegal_Argument

    Test.group "Date_Time Column.format, with format string" <|
        Test.specify "Date_Time column" <|
            input = Column.from_vector "values" [Date_Time.new 2020 12 21 8 10 20, Date_Time.new 2023 4 25 14 25 2]
            expected = Column.from_vector "values" ["20201221 08.10.20", "20230425 14.25.02"]
            actual = input.format "yyyyMMdd HH.mm.ss"
            actual . should_equal expected

        Test.specify "Date_Time with locale" <|
            input = Column.from_vector "values" [Date_Time.new 2020 6 21 8 10 20, Date_Time.new 2023 4 25 14 25 2]
            expected_default = Column.from_vector "values" ["21. Jun 2020 08.10.20", "25. Apr 2023 14.25.02"]
            expected_gb = Column.from_vector "values" ["21. Jun 2020 08.10.20", "25. Apr 2023 14.25.02"]
            expected_fr = Column.from_vector "values" ["21. juin 2020 08.10.20", "25. avril 2023 14.25.02"]
            input.format "d. MMMM yyyy HH.mm.ss" . should_equal expected_default
            input.format "d. MMMM yyyy HH.mm.ss" (Locale.default) . should_equal expected_default
            input.format "d. MMMM yyyy HH.mm.ss" (Locale.new "gb") . should_equal expected_gb
            input.format "d. MMMM yyyy HH.mm.ss" (Locale.new "fr") . should_equal expected_fr

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [Date_Time.new 2020 6 21 8 10 20, Date_Time.new 2023 4 25 14 25 2]
            expected = Column.from_vector "values" [Nothing, Nothing]
            input.format "DDDDD" . should_fail_with Illegal_Argument

    Test.group "Date_Time Column.format, with format Column" <|
        Test.specify "Date_Time column" <|
            input = Column.from_vector "values" [Date_Time.new 2020 6 21 8 10 20, Date_Time.new 2023 4 25 14 25 2]
            formats = Column.from_vector "formats" ["yyyyMMdd HH.mm.ss", "dd-MM-yyyy HH.mm.ss"]
            expected = Column.from_vector "values" ["20200621 08.10.20", "25-04-2023 14.25.02"]
            actual = input.format formats
            actual . should_equal expected

        Test.specify "Date_Time with locale" <|
            input = Column.from_vector "values" [Date_Time.new 2020 6 21 8 10 20, Date_Time.new 2023 4 25 14 25 2]
            formats = Column.from_vector "formats" ["d. MMMM yyyy HH.mm.ss", "d-MMMM-yyyy HH.mm.ss"]
            expected = Column.from_vector "values" ["21. juin 2020 08.10.20", "25-avril-2023 14.25.02"]
            input.format formats (Locale.new "fr") . should_equal expected

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [Date_Time.new 2020 6 21 8 10 20, Date_Time.new 2023 4 25 14 25 2, Date_Time.new 2023 4 26 3 4 5]
            formats = Column.from_vector "formats" ["yyyyMMdd HH.mm.ss", "DDDDD", "FFF"]
            expected = Column.from_vector "values" ['20200621 08.10.20', Nothing, Nothing]
            input.format formats . should_fail_with Illegal_Argument

        Test.specify "Bad format column type" <|
            input = Column.from_vector "values" [Date_Time.new 2020 6 21 8 10 20, Date_Time.new 2023 4 25 14 25 2]
            formats = Column.from_vector "formats" [3, 4, 5]
            input.format formats . should_fail_with Invalid_Value_Type

        Test.specify "Max # of errors" <|
            input = Column.from_vector "values" (Vector.new 20 (_-> Date_Time.new 2020 6 21 8 10 20))
            formats = Column.from_vector "formats" (Vector.new 20 _-> "DDDDD")
            expected = Column.from_vector "values" (Vector.new 20 _-> Nothing)
            input.format formats . should_fail_with Illegal_Argument

        Test.specify "column length mismatch" <|
            input = Column.from_vector "values" [Date_Time.new 2020 6 21 8 10 20, Date_Time.new 2023 4 25 14 25 2]
            formats = Column.from_vector "formats" ["yyyyMMdd", "DDDDD", "w"]
            input.format formats . should_fail_with Illegal_Argument

    Test.group "Time_Of_Day Column.format, with format string" <|
        Test.specify "Time_Of_Day column" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2]
            expected = Column.from_vector "values" ["08.10.20", "14.25.02"]
            actual = input.format "HH.mm.ss"
            actual . should_equal expected

        Test.specify "Time_Of_Day with locale" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2]
            # Note that the results are all the same.
            expected = Column.from_vector "values" ["08.10.20", "14.25.02"]
            input.format "HH.mm.ss" . should_equal expected
            input.format "HH.mm.ss" (Locale.default) . should_equal expected
            input.format "HH.mm.ss" (Locale.new "gb") . should_equal expected

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2]
            expected = Column.from_vector "values" [Nothing, Nothing]
            input.format "DDDDD" . should_fail_with Illegal_Argument

    Test.group "Time_Of_Day Column.format, with format Column" <|
        Test.specify "Time_Of_Day column" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2]
            formats = Column.from_vector "formats" ["HH.mm.ss", "ss mm HH"]
            expected = Column.from_vector "values" ["08.10.20", "02 25 14"]
            actual = input.format formats
            actual . should_equal expected

        Test.specify "Time_Of_Day with locale" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2]
            formats = Column.from_vector "formats" ["HH.mm.ss", "ss mm HH"]
            expected = Column.from_vector "values" ["08.10.20", "02 25 14"]
            input.format formats (Locale.new "fr") . should_equal expected

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2, Time_Of_Day.new 3 4 5]
            formats = Column.from_vector "formats" ["HH.mm.ss", "DDDDD", "FFF"]
            expected = Column.from_vector "values" ['08.10.20', Nothing, Nothing]
            input.format formats . should_fail_with Illegal_Argument

        Test.specify "Bad format column type" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2]
            formats = Column.from_vector "formats" [3, 4, 5]
            input.format formats . should_fail_with Invalid_Value_Type

        Test.specify "Max # of errors" <|
            input = Column.from_vector "values" (Vector.new 20 (_-> Time_Of_Day.new 8 10 20))
            formats = Column.from_vector "formats" (Vector.new 20 _-> "DDDDD")
            expected = Column.from_vector "values" (Vector.new 20 _-> Nothing)
            input.format formats . should_fail_with Illegal_Argument

        Test.specify "column length mismatch" <|
            input = Column.from_vector "values" [Time_Of_Day.new 8 10 20, Time_Of_Day.new 14 25 2]
            formats = Column.from_vector "formats" ["yyyyMMdd", "DDDDD", "w"]
            input.format formats . should_fail_with Illegal_Argument

    Test.group "Boolean Column.format, with format string" <|
        Test.specify "Boolean column" <|
            input = Column.from_vector "values" [True, False]
            expected = Column.from_vector "values" ["true", "false"]
            actual = input.format "true|false"
            actual . should_equal expected

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [True, False]
            Column.from_vector "values" [Nothing, Nothing]
            input.format "x|y|z" . should_fail_with Illegal_Argument

    Test.group "Boolean Column.format, with format Column" <|
        Test.specify "Time_Of_Day column" <|
            input = Column.from_vector "values" [True, False, True, False]
            formats = Column.from_vector "formats" ["True|False", "True|False", "troo|valz", "troo|valz"]
            expected = Column.from_vector "values" ["True", "False", "troo", "valz"]
            actual = input.format formats
            actual . should_equal expected

        Test.specify "Bad format" <|
            input = Column.from_vector "values" [True, False]
            formats = Column.from_vector "formats" ["True|False", "xyzzy"]
            expected = Column.from_vector "values" ['True', Nothing]
            input.format formats . should_fail_with Illegal_Argument

main = Test_Suite.run_main spec
