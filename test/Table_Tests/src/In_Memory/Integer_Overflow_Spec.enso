from Standard.Base import all

import Standard.Table.Data.Type.Value_Type.Bits
from Standard.Table import all
from Standard.Table.Errors import Arithmetic_Overflow, Conversion_Failure, Unsupported_Operation, Invalid_Value_Type, No_Common_Type, Loss_Of_Integer_Precision

from Standard.Test import Test, Test_Suite, Problems
import Standard.Test.Extensions

from project.Util import all

polyglot java import java.lang.Byte as Java_Byte
polyglot java import java.lang.Short as Java_Short
polyglot java import java.lang.Integer as Java_Integer
polyglot java import java.lang.Long as Java_Long

main = Test_Suite.run_main spec

spec =
    Test.group "[In-Memory] Column operation Integer Overflow handling" <|
        Test.specify "64-bit integer column overflow" <|
            min_value = Java_Long.MIN_VALUE
            max_value = Java_Long.MAX_VALUE
            value_type = Value_Type.Integer Bits.Bits_64
            t = Table.new [["X", [0, 1, max_value, 0]], ["Y", [0, -1, min_value, 0]], ["U", [1, 1, 1, 1]]]
            x = t.at "X" . cast value_type
            y = t.at "Y" . cast value_type
            u = t.at "U" . cast value_type

            # No overflow
            c1 = x - 1
            c1.to_vector . should_equal [-1, 0, max_value-1, -1]
            c1.value_type . should_equal value_type
            Problems.assume_no_problems c1

            # Overflow
            c2 = x + 1
            c2.to_vector . should_equal [1, 2, Nothing, 1]
            c2.value_type . should_equal value_type
            w2 = Problems.expect_only_warning Arithmetic_Overflow c2
            w2.affected_rows_count . should_equal 1
            w2.to_display_text . should_contain "1 rows (e.g. operation "+max_value.to_text+" + 1) encountered integer overflow"

            # Power operator actually makes a floating point result, so it is not affected by overflow.
            c3 = x^x
            c3.value_type . should_equal Value_Type.Float
            Problems.assume_no_problems c3

            # Overflow the other way round
            c4 = y - 1
            c4.to_vector . should_equal [-1, -2, Nothing, -1]
            c4.value_type . should_equal value_type
            w4 = Problems.expect_only_warning Arithmetic_Overflow c4
            w4.affected_rows_count . should_equal 1
            w4.to_display_text . should_contain "1 rows (e.g. operation "+min_value.to_text+" - 1) encountered integer overflow"

            c5 = x * 2
            c5.to_vector . should_equal [0, 2, Nothing, 0]
            c5.value_type . should_equal value_type
            Problems.expect_only_warning Arithmetic_Overflow c5

            ## The division operator can overflow in one situation - MIN_VALUE / -1;
               that is because the min value has larger magnitude than the max value - e.g. -128 vs 127.
               But it does not happen because our `/` operator converts to Float!
            c6 = y / (-1)
            c6.to_vector . should_equal [0, 1, -min_value, 0]
            c6.value_type . should_equal Value_Type.Float
            Problems.assume_no_problems c6

            # Now some more tests on column-column operations.
            c7 = x + u
            c7.to_vector . should_equal [1, 2, Nothing, 1]
            c7.value_type . should_equal value_type
            Problems.expect_only_warning Arithmetic_Overflow c7

            c8 = x - u
            c8.to_vector . should_equal [-1, 0, max_value-1, -1]
            c8.value_type . should_equal value_type
            Problems.assume_no_problems c8

            c9 = y - u
            c9.to_vector . should_equal [-1, -2, Nothing, -1]
            c9.value_type . should_equal value_type
            Problems.expect_only_warning Arithmetic_Overflow c9

            c10 = y * (u+u)
            c10.to_vector . should_equal [0, -2, Nothing, 0]
            c10.value_type . should_equal value_type
            Problems.expect_only_warning Arithmetic_Overflow c10

        test_no_overflow value_type max_value min_value = Test.specify "operations on "+value_type.to_display_text+" will not overflow, because the result type is always 64-bit integer column" <|
            t = Table.new [["X", [0, 1, max_value, 0]], ["Y", [0, -1, min_value, 0]], ["U", [1, 1, 1, 1]]]
            x = t.at "X" . cast value_type
            y = t.at "Y" . cast value_type
            u = t.at "U" . cast value_type

            c1 = x+1
            c1.to_vector . should_equal [1, 2, max_value+1, 1]
            c1.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c1
            c1_casted = c1.cast value_type
            c1_casted.to_vector . should_equal [1, 2, Nothing, 1]
            Problems.expect_only_warning Conversion_Failure c1_casted

            c2 = y-1
            c2.to_vector . should_equal [-1, -2, min_value-1, -1]
            c2.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c2
            c2.cast value_type . to_vector . should_equal [-1, -2, Nothing, -1]

            c3 = x*y
            c3.to_vector . should_equal [0, -1, min_value*max_value, 0]
            c3.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c3
            c3.cast value_type . to_vector . should_equal [0, -1, Nothing, 0]

            ## There is no risk of overflow in modulus, but for consistency we always return int-64.
               We may adapt this in the future.
            c4 = y%2
            c4.to_vector . should_equal [0, -1, 0, 0]
            c4.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c4
            c4.cast value_type . to_vector . should_equal [0, -1, 0, 0]

            c5 = x+u
            c5.to_vector . should_equal [1, 2, max_value+1, 1]
            c5.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c5
            c5.cast value_type . to_vector . should_equal [1, 2, Nothing, 1]

            c6 = y-u
            c6.to_vector . should_equal [-1, -2, min_value-1, -1]
            c6.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c6
            c6.cast value_type . to_vector . should_equal [-1, -2, Nothing, -1]

        test_no_overflow Value_Type.Byte Java_Byte.MAX_VALUE Java_Byte.MIN_VALUE
        test_no_overflow (Value_Type.Integer Bits.Bits_16) Java_Short.MAX_VALUE Java_Short.MIN_VALUE
        test_no_overflow (Value_Type.Integer Bits.Bits_32) Java_Integer.MAX_VALUE Java_Integer.MIN_VALUE

        Test.specify "mixed operations" <|
            t = Table.new [["X", [Java_Short.MAX_VALUE]], ["Y", [1]]]
            x = t.at "X" . cast (Value_Type.Integer Bits.Bits_16)
            y = t.at "Y" . cast Value_Type.Byte

            c1 = x-y
            Problems.assume_no_problems c1

            # The resulting value type is always 64-bit integer.
            c2 = x+y
            c2.to_vector . should_equal [32768]
            c2.value_type . should_equal (Value_Type.Integer Bits.Bits_64)

            # The scalar also gets its value type, and it can make the result wider.
            big_scalar = Java_Integer.MAX_VALUE + 1
            c3 = y + big_scalar
            c3.to_vector . should_equal [big_scalar + 1]
            c3.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c3

            medium_scalar = Java_Short.MAX_VALUE + 1
            c4 = y + medium_scalar
            c4.to_vector . should_equal [medium_scalar + 1]
            c4.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c4

            c5 = x%y
            c5.to_vector . should_equal [0]
            c5.value_type . should_equal (Value_Type.Integer Bits.Bits_64)
            Problems.assume_no_problems c5

            (x%2).value_type . should_equal (Value_Type.Integer Bits.Bits_64)

    Test.group "[In-Memory] Handling of Big Integer values" <|
        Test.specify "should warn when creating a numeric-only column with big integer values" <|
            c0 = Column.from_vector "X" [Java_Long.MAX_VALUE, 0, 1]
            Problems.assume_no_problems c0
            c0.value_type . should_equal (Value_Type.Integer Bits.Bits_64)

            c1 = Column.from_vector "X" [Java_Long.MAX_VALUE, 2^70, 100]
            w1 = Problems.expect_only_warning Unsupported_Operation c1
            w1.to_display_text.should_contain "Big integer arithmetic is currently not supported"
            w1.to_display_text.should_contain "You can cast to Value_Type.Integer which will replace the big integer values with Nothing"
            c1.value_type . should_be_a (Value_Type.Decimal ...)

            c2 = c1.remove_warnings.cast (Value_Type.Integer Bits.Bits_64)
            c2.to_vector . should_equal [Java_Long.MAX_VALUE, Nothing, 100]
            Problems.expect_only_warning Conversion_Failure c2

            t0 = Table.new [["X", [Java_Long.MAX_VALUE, 0, 1]]]
            Problems.assume_no_problems t0
            t0.at "X" . value_type . should_equal (Value_Type.Integer Bits.Bits_64)

            t1 = Table.new [["X", [Java_Long.MAX_VALUE, 2^70, 100]]]
            w2 = Problems.expect_only_warning Unsupported_Operation t1
            w2.to_display_text.should_contain "bit integer"
            t1.at "X" . value_type . should_be_a (Value_Type.Decimal ...)

        Test.specify "should fail if a big integer is provided for an Integer 64-bit column" <|
            c1 = Column.from_vector "X" [Java_Long.MAX_VALUE, 2^70, 100] value_type=Value_Type.Integer
            c1.should_fail_with Invalid_Value_Type
            c1.catch.to_display_text . should_contain "Decimal"

        Test.specify "will not warn if the created mixed column contains other values as well" <|
            c1 = Column.from_vector "X" [Java_Long.MAX_VALUE, 2^70, "abc"]
            Problems.assume_no_problems c1
            c1.value_type . should_equal Value_Type.Mixed

        Test.specify "should allow to create a Float column from a big integer, but warn about Loss_Of_Integer_Precision" <|
            # 2^70 is not exactly representable as a Float.
            (2^70 + 0.0).truncate . should_not_equal (2^70)

            c1 = Column.from_vector "X" [1, 2^70, 1.5]
            Problems.expect_only_warning Loss_Of_Integer_Precision c1
            c1.value_type . should_equal Value_Type.Float

            # A number around ~2^100 that _can_ be exactly represented as float.
            x = (2^100 + 0.0).truncate
            c2 = Column.from_vector "X" [x, 1.5]
            # So there is no warning, as no real precision loss here.
            Problems.assume_no_problems c2
            c2.value_type . should_equal Value_Type.Float
            # This will be an inexact equality, based on float rounding.
            c2.to_vector . should_equal [x, 1.5]

            c3 = Column.from_vector "X" [2^70, 1]
            Problems.expect_only_warning Unsupported_Operation c3
            c3.value_type . should_be_a (Value_Type.Decimal ...)
            c4 = c3.remove_warnings.cast Value_Type.Float
            c4.to_vector . should_equal [2^70, 1]
            Problems.expect_only_warning Loss_Of_Integer_Precision c4

        Test.specify "should warn if a mapping operation yields a numeric column with big integers" <|
            c = Column.from_vector "X" [1, 2, 3]

            f1 x = if x == 2 then 2^70 else x
            c1 = c.map f1
            c1.to_vector . should_equal [1, 2^70, 3]
            Problems.expect_only_warning Unsupported_Operation c1
            c1.value_type . should_be_a (Value_Type.Decimal ...)

            f2 x = case x of
                2 -> 2^100
                3 -> "foobar"
                _ -> x
            c2 = c.map f2
            c2.to_vector . should_equal [1, 2^100, "foobar"]
            # But no warning if the operation yields other types of values as well.
            Problems.assume_no_problems c2
            c2.value_type . should_equal Value_Type.Mixed

        Test.specify "will return a helpful error when a big integer is provided as an argument to an operation" <|
            c = Column.from_vector "X" [1, 2, Nothing, 3]
            x = 2^70

            r1 = c + x
            r1.should_fail_with Unsupported_Operation
            r1.catch.to_display_text . should_contain "Big integer arithmetic is not supported"

            (c - x) . should_fail_with Unsupported_Operation
            (c * x) . should_fail_with Unsupported_Operation
            (c / x) . should_fail_with Unsupported_Operation
            (c % x) . should_fail_with Unsupported_Operation
            (c ^ x) . should_fail_with Unsupported_Operation
            (c == x) . to_vector . should_equal [False, False, Nothing, False]
            (c < x) . should_fail_with Unsupported_Operation
            (c >= x) . should_fail_with Unsupported_Operation

            c.min x . should_fail_with Unsupported_Operation
            c.max x . should_fail_with Unsupported_Operation

            c.fill_nothing x . should_fail_with No_Common_Type
