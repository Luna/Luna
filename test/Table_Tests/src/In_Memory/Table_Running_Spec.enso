from Standard.Base import all
from Standard.Table import Column, Table
from Standard.Test import all
from Standard.Table.Errors import all
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from project.Util import all

type Data
    #   | Flight | Passenger | Ticket Price
    #---+--------+-----------+--------------
    # 0 | BA0123 | A         | 100.5
    # 1 | BA0123 | B         | 575.99
    # 2 | SG0456 | A         | 73.23
    # 3 | BA0123 | C         | 112.34
    # 4 | SG0456 | E         | 73.77
    Value ~table

    setup =
        make_table =
            flight = ["Flight", ["BA0123", "BA0123", "SG0456", "BA0123", "SG0456"]]
            passenger = ["Passenger", ["A", "B", "A", "C", "E"]]
            ticket_price = ["Ticket Price", [100.50, 575.99, 73.23, 112.34, 73.77]]

            Table.new [flight, passenger, ticket_price]
        Data.Value make_table

add_specs suite_builder =
    suite_builder.group "running count" group_builder->
        data = Data.setup
        group_builder.specify "Defaults add running count of first column" <|
            result = data.table.running
            expected_column = Column.from_vector "Running Count of Flight" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | Running Count of Flight
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 3
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Not setting the as name gives default name based on of column" <|
            result = data.table.running Statistic.Count "Passenger"
            expected_column = Column.from_vector "Running Count of Passenger" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | Running Count of Passenger
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 3
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can set the as name" <|
            result = data.table.running Statistic.Count "Passenger" "My Custom Name"
            expected_column = Column.from_vector "My Custom Name" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | My Custom Name
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 3
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running count per group" <|
            result = data.table.running Statistic.Count "Passenger" "Passenger num per flight" ["Flight"]
            expected_column = Column.from_vector "Passenger num per flight" [1, 2, 1, 3, 2]
            #   | Flight | Passenger | Ticket Price | Passenger num per flight
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | 73.23        | 1
            # 3 | BA0123 | C         | 112.34       | 3
            # 4 | SG0456 | E         | 73.77        | 2
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running count per group based on order by" <|
            result = data.table.running Statistic.Count "Passenger" "Ranked ticket cost per pass" ["Passenger"] ["Ticket Price"]
            expected_column = Column.from_vector "Ranked ticket cost per pass" [2, 1, 1, 1, 1]
            #   | Flight | Passenger | Ticket Price | Ranked ticket cost per pass
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 2
            # 1 | BA0123 | B         | 575.99       | 1
            # 2 | SG0456 | A         | 73.23        | 1
            # 3 | BA0123 | C         | 112.34       | 1
            # 4 | SG0456 | E         | 73.77        | 1
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can provide running count based on order by without grouping" <|
            result = data.table.running Statistic.Count "Passenger" "Ranked ticket cost" [] ["Ticket Price"]
            expected_column = Column.from_vector "Ranked ticket cost" [3, 5, 1, 4, 2]
            #   | Flight | Passenger | Ticket Price | Ranked ticket cost
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 3
            # 1 | BA0123 | B         | 575.99       | 5
            # 2 | SG0456 | A         | 73.23        | 1
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 2
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
    suite_builder.group "running sum" group_builder->
        data = Data.setup
        group_builder.specify "Not setting the as name gives default name based on of column" <|
            result = data.table.running Statistic.Sum "Ticket Price"
            expected_column = Column.from_vector "Running Sum of Ticket Price" [100.5, 676.49, 749.72, 862.0600000000001, 935.83]
            #   | Flight | Passenger | Ticket Price | Running Sum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | 73.23        | 749.72
            # 3 | BA0123 | C         | 112.34       | 862.06
            # 4 | SG0456 | E         | 73.77        | 935.83
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running sum per group" <|
            result = data.table.running Statistic.Sum "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 676.49, 73.23, 788.83, 147]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | 73.23        | 73.23
            # 3 | BA0123 | C         | 112.34       | 788.83
            # 4 | SG0456 | E         | 73.77        | 147
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can group by and provide running sum per group based on order by" <|
            result = data.table.running Statistic.Sum "Ticket Price" "Sum ticket cost per pass" ["Passenger"] ["Ticket Price"]
            expected_column = Column.from_vector "Sum ticket cost per pass" [173.73000000000002, 575.99, 73.23, 112.34, 73.77]
            #   | Flight | Passenger | Ticket Price | Sum ticket cost per pass
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 173.73
            # 1 | BA0123 | B         | 575.99       | 575.99
            # 2 | SG0456 | A         | 73.23        | 73.23
            # 3 | BA0123 | C         | 112.34       | 112.34
            # 4 | SG0456 | E         | 73.77        | 73.77
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Can provide running sum based on order by without grouping" <|
            result = data.table.running Statistic.Sum "Ticket Price" "Sum ticket cost" [] ["Ticket Price"]
            expected_column = Column.from_vector "Sum ticket cost" [247.5, 935.83, 73.23, 359.84000000000003, 147]
            #   | Flight | Passenger | Ticket Price | Ranked ticket cost
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 3
            # 1 | BA0123 | B         | 575.99       | 5
            # 2 | SG0456 | A         | 73.23        | 1
            # 3 | BA0123 | C         | 112.34       | 4
            # 4 | SG0456 | E         | 73.77        | 2
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
    suite_builder.group "running mean" group_builder->
        data = Data.setup
        group_builder.specify "Not setting the as name gives default name based on of column" <|
            result = data.table.running Statistic.Mean "Ticket Price"
            expected_column = Column.from_vector "Running Mean of Ticket Price" [100.5, 338.245, 249.90666666666667, 215.51500000000001, 187.166]
            #   | Flight | Passenger | Ticket Price | Running Mean of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 338.245
            # 2 | SG0456 | A         | 73.23        | 249.90666666666667
            # 3 | BA0123 | C         | 112.34       | 215.51500000000001
            # 4 | SG0456 | E         | 73.77        | 187.166
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
    suite_builder.group "running max" group_builder->
        data = Data.setup
        group_builder.specify "Not setting the as name gives default name based on of column" <|
            result = data.table.running Statistic.Maximum "Ticket Price"
            expected_column = Column.from_vector "Running Maximum of Ticket Price" [100.5, 575.99, 575.99, 575.99, 575.99]
            #   | Flight | Passenger | Ticket Price | Running Maximum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 575.99
            # 2 | SG0456 | A         | 73.23        | 575.99
            # 3 | BA0123 | C         | 112.34       | 575.99
            # 4 | SG0456 | E         | 73.77        | 575.99
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
    suite_builder.group "running min" group_builder->
        data = Data.setup
        group_builder.specify "Not setting the as name gives default name based on of column" <|
            result = data.table.running Statistic.Minimum "Ticket Price"
            expected_column = Column.from_vector "Running Minimum of Ticket Price" [100.5, 100.5, 73.23, 73.23, 73.23]
            #   | Flight | Passenger | Ticket Price | Running Minimum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 100.5
            # 2 | SG0456 | A         | 73.23        | 73.23
            # 3 | BA0123 | C         | 112.34       | 73.23
            # 4 | SG0456 | E         | 73.77        | 73.23
            expected_table = data.table.zip expected_column
            result.should_equal expected_table
    suite_builder.group "nothing handling" group_builder->
        #   | Flight | Passenger | Ticket Price
        #---+--------+-----------+--------------
        # 0 | BA0123 | A         | 100.5
        # 1 | BA0123 | B         | 575.99
        # 2 | SG0456 | A         | nothing
        # 3 | BA0123 | C         | nothing
        # 4 | SG0456 | E         | 73.77
        flight = ["Flight", ["BA0123", "BA0123", "SG0456", "BA0123", "SG0456"]]
        passenger = ["Passenger", ["A", "B", "A", "C", "E"]]
        ticket_price = ["Ticket Price", [100.50, 575.99, Nothing, Nothing, 73.77]]
        table = Table.new [flight, passenger, ticket_price]
        group_builder.specify "Running count doesn't care about nothing values" <|
            result = table.running Statistic.Count "Passenger"
            expected_column = Column.from_vector "Running Count of Passenger" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | Running Count of Passenger
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | nothing      | 3
            # 3 | BA0123 | C         | nothing      | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = table.zip expected_column
            result.should_equal expected_table
            warnings = Problems.get_attached_warnings result
            warnings.not_empty . should_be_false
        group_builder.specify "Running sum works ignores nothing values and warns" <|
            result = table.running Statistic.Sum "Ticket Price"
            expected_column = Column.from_vector "Running Sum of Ticket Price" [100.5, 676.49, 676.49, 676.49, 750.26]
            #   | Flight | Passenger | Ticket Price | Running Sum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | Nothing      | 676.49
            # 3 | BA0123 | C         | Nothing      | 676.49
            # 4 | SG0456 | E         | 73.77        | 750.26
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_Nothing_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running sum works ignores nothing values and warnings can be hushed" <|
            result = table.running Statistic.Sum "Ticket Price" on_problems=..Ignore
            expected_column = Column.from_vector "Running Sum of Ticket Price" [100.5, 676.49, 676.49, 676.49, 750.26]
            #   | Flight | Passenger | Ticket Price | Running Sum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | Nothing      | 676.49
            # 3 | BA0123 | C         | Nothing      | 676.49
            # 4 | SG0456 | E         | 73.77        | 750.26
            expected_table = table.zip expected_column
            result.should_equal expected_table
            warnings = Problems.get_attached_warnings result
            warnings.not_empty . should_be_false
        group_builder.specify "Running min ignores nothing values and works with grouping and warns" <|
            result = table.running Statistic.Minimum "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 100.5, Nothing, 100.5, 73.77]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 100.5
            # 2 | SG0456 | A         | Nothing      | Nothing
            # 3 | BA0123 | C         | Nothing      | 100.5
            # 4 | SG0456 | E         | 73.77        | 73.77
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_Nothing_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running max ignores nothing values and works with grouping and warns" <|
            result = table.running Statistic.Maximum "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 575.99, Nothing, 575.99, 73.77]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 575.99
            # 2 | SG0456 | A         | Nothing      | Nothing
            # 3 | BA0123 | C         | Nothing      | 575.99
            # 4 | SG0456 | E         | 73.77        | 73.77
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_Nothing_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running mean ignores nothing values and warns" <|
            result = table.running Statistic.Mean "Ticket Price" "Running"
            expected_column = Column.from_vector "Running" [100.5, 338.245, 338.245, 338.245, 250.08666666666667]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 338.245
            # 2 | SG0456 | A         | Nothing      | 338.245
            # 3 | BA0123 | C         | Nothing      | 338.245
            # 4 | SG0456 | E         | 73.77        | 250.08666666666667
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_Nothing_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running mean ignores nothing values and works when first value is Nothing and warns" <|
            result = table.running Statistic.Mean "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 338.245, Nothing, 338.245, 73.77]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 338.245
            # 2 | SG0456 | A         | Nothing      | Nothing
            # 3 | BA0123 | C         | Nothing      | 338.245
            # 4 | SG0456 | E         | 73.77        | 73.77
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_Nothing_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
    suite_builder.group "NaN handling" group_builder->
        #   | Flight | Passenger | Ticket Price
        #---+--------+-----------+--------------
        # 0 | BA0123 | A         | 100.5
        # 1 | BA0123 | B         | 575.99
        # 2 | SG0456 | A         | NaN
        # 3 | BA0123 | C         | NaN
        # 4 | SG0456 | E         | 73.77
        flight = ["Flight", ["BA0123", "BA0123", "SG0456", "BA0123", "SG0456"]]
        passenger = ["Passenger", ["A", "B", "A", "C", "E"]]
        ticket_price = ["Ticket Price", [100.50, 575.99, Number.nan, Number.nan, 73.77]]
        table = Table.new [flight, passenger, ticket_price]
        group_builder.specify "Running count doesn't care about NaN values" <|
            result = table.running Statistic.Count "Passenger"
            expected_column = Column.from_vector "Running Count of Passenger" [1, 2, 3, 4, 5]
            #   | Flight | Passenger | Ticket Price | Running Count of Passenger
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 1
            # 1 | BA0123 | B         | 575.99       | 2
            # 2 | SG0456 | A         | nothing      | 3
            # 3 | BA0123 | C         | nothing      | 4
            # 4 | SG0456 | E         | 73.77        | 5
            expected_table = table.zip expected_column
            result.should_equal expected_table
            warnings = Problems.get_attached_warnings result
            warnings.not_empty . should_be_false
        group_builder.specify "Running sum works ignores NaN values and warns" <|
            result = table.running Statistic.Sum "Ticket Price"
            expected_column = Column.from_vector "Running Sum of Ticket Price" [100.5, 676.49, 676.49, 676.49, 750.26]
            #   | Flight | Passenger | Ticket Price | Running Sum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | NaN          | 676.49
            # 3 | BA0123 | C         | NaN          | 676.49
            # 4 | SG0456 | E         | 73.77        | 750.26
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_NaN_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running sum works ignores NaN values and warnings can be hushed" <|
            result = table.running Statistic.Sum "Ticket Price" on_problems=..Ignore
            expected_column = Column.from_vector "Running Sum of Ticket Price" [100.5, 676.49, 676.49, 676.49, 750.26]
            #   | Flight | Passenger | Ticket Price | Running Sum of Ticket Price
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 676.49
            # 2 | SG0456 | A         | NaN          | 676.49
            # 3 | BA0123 | C         | NaN          | 676.49
            # 4 | SG0456 | E         | 73.77        | 750.26
            expected_table = table.zip expected_column
            result.should_equal expected_table
            warnings = Problems.get_attached_warnings result
            warnings.not_empty . should_be_false
        group_builder.specify "Running min ignores NaN values and works with grouping and warns" <|
            result = table.running Statistic.Minimum "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 100.5, Number.nan, 100.5, 73.77]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 100.5
            # 2 | SG0456 | A         | NaN          | NaN
            # 3 | BA0123 | C         | NaN          | 100.5
            # 4 | SG0456 | E         | 73.77        | 73.77
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_NaN_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running max ignores NaN values and works with grouping and warns" <|
            result = table.running Statistic.Maximum "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 575.99, Number.nan, 575.99, 73.77]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 575.99
            # 2 | SG0456 | A         | NaN          | NaN
            # 3 | BA0123 | C         | NaN          | 575.99
            # 4 | SG0456 | E         | 73.77        | 73.77
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_NaN_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running mean ignores NaN values and warns" <|
            result = table.running Statistic.Mean "Ticket Price" "Running"
            expected_column = Column.from_vector "Running" [100.5, 338.245, 338.245, 338.245, 250.08666666666667]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 338.245
            # 2 | SG0456 | A         | NaN          | 338.245
            # 3 | BA0123 | C         | NaN          | 338.245
            # 4 | SG0456 | E         | 73.77        | 250.08666666666667
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_NaN_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
        group_builder.specify "Running mean ignores NaN values and works when first value is NaN and warns" <|
            result = table.running Statistic.Mean "Ticket Price" "Running" ["Flight"]
            expected_column = Column.from_vector "Running" [100.5, 338.245, Number.nan, 338.245, 73.77]
            #   | Flight | Passenger | Ticket Price | Running
            #---+--------+-----------+--------------+-------------------------
            # 0 | BA0123 | A         | 100.5        | 100.5
            # 1 | BA0123 | B         | 575.99       | 338.245
            # 2 | SG0456 | A         | NaN          | NaN
            # 3 | BA0123 | C         | NaN          | 338.245
            # 4 | SG0456 | E         | 73.77        | 73.77
            expected_table = table.zip expected_column
            result.should_equal expected_table
            w = Problems.expect_warning Ignored_NaN_Values result
            w.column.should_equal "Ticket Price"
            w.rows.should_equal [2, 3]
    suite_builder.group "different types" group_builder->
        #   | Flight | Passenger | Ticket Price
        #---+--------+-----------+--------------
        # 0 | BA0123 | A         | 1
        # 1 | BA0123 | B         | 2
        # 2 | SG0456 | A         | 3
        # 3 | BA0123 | C         | 4
        # 4 | SG0456 | E         | 5
        flight = ["Flight", ["BA0123", "BA0123", "SG0456", "BA0123", "SG0456"]]
        passenger = ["Passenger", ["A", "B", "A", "C", "E"]]
        ticket_price = ["Ticket Price", [1, 2, 3, 4, 5]]
        table = Table.new [flight, passenger, ticket_price]
        group_builder.specify "Running sum works over an integer column" <|
            result = table.running Statistic.Sum "Ticket Price"
            expected_column = Column.from_vector "Running Sum of Ticket Price" [1.0, 3.0, 6.0, 10.0, 15.0]
            #   | Flight | Passenger | Ticket Price | Running Sum of Ticket Price
            #---+--------+-----------+--------------+------------------------------
            # 0 | BA0123 | A         | 1            | 1.0
            # 1 | BA0123 | B         | 2            | 3.0
            # 2 | SG0456 | A         | 3            | 6.0
            # 3 | BA0123 | C         | 4            | 10.0
            # 4 | SG0456 | E         | 5            | 15.0
            expected_table = table.zip expected_column
            result.should_equal expected_table
        group_builder.specify "Running sum does not work over a string column" <|
            (table.running Statistic.Sum "Passenger").should_fail_with Invalid_Value_Type
    suite_builder.group "Unsupported statistics" group_builder->
        data = Data.setup
        group_builder.specify "RSquared is not supported" <|
            (data.table.running (Statistic.R_Squared [1, 2 ,3]) "Ticket Price").should_fail_with Illegal_Argument
        group_builder.specify "Covariance is not supported" <|
            (data.table.running (Statistic.Covariance []) "Ticket Price").should_fail_with Illegal_Argument
        group_builder.specify "Pearson is not supported" <|
            (data.table.running (Statistic.Pearson []) "Ticket Price").should_fail_with Illegal_Argument
        group_builder.specify "Spearman is not supported" <|
            (data.table.running (Statistic.Spearman []) "Ticket Price").should_fail_with Illegal_Argument

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter

