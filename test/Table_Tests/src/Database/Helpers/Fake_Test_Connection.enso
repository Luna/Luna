from Standard.Base import all

from Standard.Database import SQL_Query, Raw_SQL, Table_Name
import Standard.Table.Data.Table as Materialized_Table
import Standard.Database.Data.Table as Database_Table
from Standard.Database.Data.SQL import Statement, SQL_Type
import Standard.Database.Internal.IR

type Fake_Test_Connection
    # type Fake_Test_Connection_Data (tables : Map Text (Vector [Text, SQL_Type])) (dialect : Text)
    Fake_Test_Connection_Data tables dialect

    ## UNSTABLE

       Query the database, returning an object that can be used to retrieve create queries for that table.

       Arguments:
       - name: name of the table to access
    query : Text | SQL_Query -> Text -> Database_Table
    query self query _="" = case query of
        Text ->
            columns = self.tables.get query
            Database_Table.make_table self query columns (IR.context_for_table query)
        Raw_SQL _ ->
            Error.throw (Illegal_Argument_Error "Cannot query a fake connection with raw SQL")
        Table_Name name ->
            columns = self.tables.get name
            Database_Table.make_table self name columns (IR.context_for_table name)

    ## PRIVATE
    close : Nothing
    close self = Nothing

    ## PRIVATE
    explain_query_plan : Statement -> Text
    explain_query_plan self _ =
        Error.throw "Materialization not supported on fake connection."

    ## PRIVATE
    execute_query : Text | Statement -> Materialized_Table
    execute_query self _ =
        Error.throw "Materialization not supported on fake connection."

    ## PRIVATE
    execute_update : Text | Statement -> Integer
    execute_update self _ =
        Error.throw "Materialization not supported on fake connection."

## PRIVATE
make dialect tables =
    Fake_Test_Connection_Data tables dialect
