from Standard.Base import all
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Database import all
import Standard.Database.Internal.Table_Naming_Helper.Table_Naming_Helper

from Standard.Test import all
import Standard.Test.Suite.Suite_Builder

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter

type Mock_Connection
    Value existing_tables

    table_exists self table_name = self.existing_tables.contains table_name

type Table_Always_Exists_Connection
    Value
    table_exists self _ = True

add_specs suite_builder =
    suite_builder.group "Table_Naming_Helper" group_builder->
        group_builder.specify "should generate unique short table names" <|
            mock_connection = Mock_Connection.Value ["enso-table-0"]
            table_naming_helper = Table_Naming_Helper.new_unchecked mock_connection

            table_naming_helper.generate_unique_short_table_name . should_equal "enso-table-1"
            table_naming_helper.generate_unique_short_table_name . should_equal "enso-table-2"
            table_naming_helper.generate_unique_short_table_name . should_equal "enso-table-3"

        group_builder.specify "should generate unique short table names with a specified prefix" <|
            mock_connection = Mock_Connection.Value ["asdf0", "asdf1"]
            table_naming_helper = Table_Naming_Helper.new_unchecked mock_connection

            table_naming_helper.generate_unique_short_table_name "asdf" . should_equal "asdf2"
            table_naming_helper.generate_unique_short_table_name "asdf" . should_equal "asdf3"
            table_naming_helper.generate_unique_short_table_name "asdf" . should_equal "asdf4"

        group_builder.specify "should fail if it cannot find a unique short table name" <|
            mock_connection = Table_Always_Exists_Connection.Value
            table_naming_helper = Table_Naming_Helper.new_unchecked mock_connection
            table_naming_helper.generate_unique_short_table_name . should_fail_with Illegal_State
