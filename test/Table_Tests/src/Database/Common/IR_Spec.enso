from Standard.Base import all
import Standard.Base.Runtime.Ref.Ref

from Standard.Table import Table

from Standard.Database import all
import Standard.Database.Internal.IR.Query.Query

from Standard.Test import all
import Standard.Test.Suite.Suite_Builder

import project.Database.Helpers.Name_Generator

upload connection prefix data temporary=True =
    name = Name_Generator.random_name prefix
    table = data.select_into_database_table connection name temporary=temporary primary_key=Nothing
    table


drop_table connection name =
    Panic.catch Any (connection.drop_table name) caught_panic->
        IO.println <| "Failed to drop table: " + name + " because of: " + caught_panic.payload.to_display_text


type Data
    Value ~data

    connection self = self.data.at 0
    t1 self = self.data.at 1

    setup ~connection = Data.Value <|
        t1 = upload connection "T1" (Table.new [["a", [1.1, 4.7, -1.7, -4.1]]])
        [connection, t1]

    teardown self =
        drop_table self.connection self.t1.name

count_nodes col =
    ref = Ref.new 0
    counter n =
        ref.modify (_ + 1)
        n
    col.to_table.to_select_query . traverse counter
    ref.get

rebuild col =
    col.to_table.to_select_query . traverse (x->x) . at col.name

add_specs (suite_builder : Suite_Builder) (prefix : Text) default_connection =

    suite_builder.group (prefix + "IR Traversal") group_builder->
        data = Data.setup default_connection

        group_builder.teardown <|
            data.teardown

        group_builder.specify "should be able to traverse a Query to reconstruct it" <|
            col = data.t1 . at "a"
            a = col.round_float 0 False * col.round_float 0 use_bankers=True
            a_query = a.to_table.to_select_query
            a_query.traverse (x->x) . should_equal a_query

        group_builder.specify "should be able to traverse a Query to count nodes" <|
            col = data.t1 . at "a"
            a = col.round_float 0 False * col.round_float 0 use_bankers=True
            a_sub = (a . rename "p" . to_table . as_subquery . at "p")
            b = a_sub * a_sub
            b_sub = (b . rename "p" . to_table . as_subquery . at "p")
            c = b_sub * b_sub

            count_nodes a . should_be_a Integer
            count_nodes b . should_be_a Integer
            count_nodes c . should_be_a Integer

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder "[SQLite]" (Database.connect (SQLite.In_Memory))
    suite.run_with_filter filter
