from Standard.Base import all
import Standard.Base.Runtime.Ref.Ref

from Standard.Database import all
import Standard.Database.Internal.IR.Query.Query

from Standard.Test import all
import Standard.Test.Suite.Suite_Builder

upload connection prefix data temporary=True =
    name = Name_Generator.random_name prefix
    table = data.select_into_database_table connection name temporary=temporary primary_key=Nothing
    table


drop_table connection name =
    Panic.catch Any (connection.drop_table name) caught_panic->
        IO.println <| "Failed to drop table: " + name + " because of: " + caught_panic.payload.to_display_text


type Basic_Data
    Value ~data

    connection self = self.data.at 0
    t1 self = self.data.at 1

    setup ~connection = Basic_Data.Value <|
        big_size = 1000
        t1 = upload connection "T1" (Table.new [["a", [1, 4]]])
        [connection, t1]

    teardown self =
        drop_table self.connection self.t1.name

count_nodes table =
    ref = Ref.new 0
    counter n =
        ref.modify (x-> x+1)
        n
    table.to_select_query . traverse counter
    ref.get

## Adds tests for IR transformations.

   Arguments:
   - create_connection_fn: A function that creates an appropriate Connection to the database backend.
add_specs (suite_builder : Suite_Builder) (prefix : Text) (create_connection_fn : (Nothing -> Any)) default_connection =

    suite_builder.group (prefix + "IR Traversal") group_builder->
        data = Basic_Data.setup default_connection.get

        group_builder.teardown <|
            data.teardown

        group_builder.specify "should be able to traverse a Query" <|
            t = data.t1
            IO.println (count_nodes t)
            IO.println (count_nodes (t * t))
            big =
                a = t.round_float * t.round_float use_bankers=True
                b = a + a . as_subquery
                c = b + b . as_subquery
                c
            IO.println (count_nodes big)
