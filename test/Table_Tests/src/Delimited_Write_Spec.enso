from Standard.Base import all
import Standard.Base.Error.Problem_Behavior
from Standard.Base.Data.Text.Encoding as Encoding_Module import Encoding, Encoding_Error

import Standard.Table
import Standard.Table.Data.Column
from Standard.Table.Error import all

import Standard.Table.Io.File_Read
from Standard.Table.Io.File_Format import Delimited
from Standard.Table.Data.Data_Formatter as Data_Formatter_Module import Data_Formatter
import Standard.Table.Io.Quote_Style

import Standard.Test
import Standard.Test.Problems

import project.Util

spec =
    Test.group "Delimited File Writing" <|
        Test.specify "should correctly write a simple table" <|
            table = Table.new [["A", [1,2,3]], ["B", [1.0,1.5,2.2]], ["C", ["x","y","z"]]]
            file = (Enso_Project.data / "transient" / "written.csv")
            file.delete_if_exists
            table.write file
            expected_text = """
                A,B,C
                1,1.0,x
                2,1.5,y
                3,2.2,z
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify 'should quote values that contain the delimiter or quotes, in the [,""] variant' <|
            data_formatter = Data_Formatter decimal_point=","
            table = Table.new [['The Column "Name"', ["foo","'bar'",'"baz"', 'one, two, three']], ["Hello, Column?", [1.0, 1000000.5, 2.2, -1.5]]]
            file = (Enso_Project.data / "transient" / "quotes1.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited "," value_formatter=data_formatter)
            expected_text = """
                "The Column ""Name""","Hello, Column?"
                foo,"1,0"
                'bar',"1000000,5"
                """baz""","2,2"
                "one, two, three","-1,5"
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify 'should quote values that contain the delimiter or quotes, in the [;\\\"] variant' <|
            data_formatter = Data_Formatter thousand_separator="'"
            table = Table.new [['"A"', ["foo",'!"baz" ', 'one, two, three', "a;b; c ", "a\b"]], ["B", [1000000.5, 1000.0, 0.0, -1.2, Nothing]]]
            file = (Enso_Project.data / "transient" / "quotes1.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited ";" value_formatter=data_formatter . with_quotes quote='"' quote_escape='\\')
            expected_text = """
                "\"A\"";B
                foo;1'000'000.5
                "!\"baz\" ";1'000.0
                one, two, three;0.0
                "a;b; c ";-1.2
                "a\\b";
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify "should quote values that contain the delimiter or quotes, in the [\t''] variant" <|
            data_formatter = Data_Formatter thousand_separator="'"
            table = Table.new [['"A"', [Nothing,"The 'thing'.", 'one, "two", three', 'a\tb']], ["B\C", [1000000.5, 1000.0, Nothing, -1.2]]]
            file = (Enso_Project.data / "transient" / "quotes1.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited '\t' value_formatter=data_formatter . with_quotes quote='\'' quote_escape='\'')
            expected_text = '''
                "A"\tB\\C
                \t'1''000''000.5'
                'The ''thing''.'\t'1''000.0'
                one, "two", three\t
                'a\tb'\t-1.2
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify "should correctly distinguish empty text from a missing value" <|
            table = Table.new [["A", [1,Nothing,3]], ["B", [Nothing,"","abc"]]]
            file = (Enso_Project.data / "transient" / "empty_vs_null.csv")
            file.delete_if_exists
            table.write file
            expected_text = """
                A,B
                1,
                ,""
                3,abc
            text = File.read_text file
            text.should_equal expected_text+'\n'

        Test.specify "should correctly handle alternative encodings" pending="TODO: will be implemented in the next PR" <|
            table = Table.new [["ąęćś", [0]], ["ß", ["żółw 🐢"]]]
            file = (Enso_Project.data / "transient" / "utf16.csv")
            file.delete_if_exists
            table.write file (File_Format.Delimited "," encoding=Encoding.utf_16_be)
            expected_text = """
                ąęćś,ß
                0,żółw 🐢
            text = File.read_text file encoding=Encoding.utf_16_be
            text.should_equal expected_text+'\n'

        Test.specify "should correctly handle encoding errors" pending="TODO: will be implemented in the next PR" <|
            table = Table.new [["A", [0, 1]], ["B", ["słówka", "🐢"]]]
            file = (Enso_Project.data / "transient" / "ascii.csv")
            file.delete_if_exists
            result = table.write file (File_Format.Delimited "," encoding=Encoding.ascii)
            expected_text = """
                A,B
                0,s??wka
                1,?
            text = File.read_text file encoding=Encoding.ascii
            text.should_equal expected_text+'\n'
            result . should_equal Nothing
            Warning.get_all result . map .value . should_equal [Encoding_Error "Encoding issues at 7, 8, 15."]

main = Test.Suite.run_main here.spec
