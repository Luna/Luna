from Standard.Base import all

import Standard.Table.Data.Table
from Standard.Table.Data.Aggregate_Column import all

import Standard.Test

spec = Test.group "Aggregate Columns" <|
    simple_table = Table.new [["count", [1, 2, Nothing, 3]], ["is_valid", [True, False, True, False]], ["float", [1, 2.1, 3.4, 5.6]], ["text", ["A", "", Nothing, "B"]]]
    text_col = simple_table.at "text"
    float_col = simple_table.at "float"
    empty_table  = Table.new [["count", []], ["is_valid", []], ["text", []]]

    test_name = "Test Column"

    test_aggregator table col expected_name expected_result epsilon=False =
        col.column_name table . should_equal expected_name

        acc = col.make_aggregator table
        folded_value = 0.up_to table.row_count . fold col.initial_value acc
        result = col.evaluate folded_value

        if epsilon != False then (result.should_equal expected_result epsilon=epsilon) else
            result.should_equal expected_result

    Test.specify "should be able to count a set" <|
        test_aggregator simple_table (Count Nothing) "Count" simple_table.row_count
        test_aggregator simple_table (Count test_name) test_name simple_table.row_count
        test_aggregator empty_table (Count test_name) test_name empty_table.row_count

    Test.specify "should be able to count missing values in a set" <|
        test_aggregator simple_table (Count_Nothing 0) "Count Nothing count" 1
        test_aggregator simple_table (Count_Nothing 0 test_name) test_name 1
        test_aggregator simple_table (Count_Nothing "text" test_name) test_name 1
        test_aggregator simple_table (Count_Nothing text_col test_name) test_name 1
        test_aggregator empty_table (Count_Nothing 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to count non missing values in a set" <|
        test_aggregator simple_table (Count_Not_Nothing 0) "Count Not Nothing count" 3
        test_aggregator simple_table (Count_Not_Nothing 0 test_name) test_name 3
        test_aggregator simple_table (Count_Not_Nothing "text" test_name) test_name 3
        test_aggregator simple_table (Count_Not_Nothing text_col test_name) test_name 3
        test_aggregator empty_table (Count_Not_Nothing 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to count empties in a set of Texts" <|
        test_aggregator simple_table (Count_Empty -1) "Count Empty text" 2
        test_aggregator simple_table (Count_Empty -1 test_name) test_name 2
        test_aggregator simple_table (Count_Empty "text" test_name) test_name 2
        test_aggregator simple_table (Count_Empty text_col test_name) test_name 2
        test_aggregator empty_table (Count_Empty 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to count non empties in a set of Texts" <|
        test_aggregator simple_table (Count_Not_Empty -1) "Count Not Empty text" 2
        test_aggregator simple_table (Count_Not_Empty -1 test_name) test_name 2
        test_aggregator simple_table (Count_Not_Empty "text" test_name) test_name 2
        test_aggregator simple_table (Count_Not_Empty text_col test_name) test_name 2
        test_aggregator empty_table (Count_Not_Empty 0 test_name) test_name empty_table.row_count

    Test.specify "should be able to total a set of values" <|
        test_aggregator simple_table (Sum -2) "Sum float" 12.1
        test_aggregator simple_table (Sum -2 test_name) test_name 12.1
        test_aggregator simple_table (Sum "float" test_name) test_name 12.1
        test_aggregator simple_table (Sum float_col test_name) test_name 12.1
        test_aggregator empty_table (Sum 0 test_name) test_name 0

    Test.specify "should be able to total a set of values" <|
        test_aggregator simple_table (Sum -2) "Sum float" 12.1 0.000001
        test_aggregator simple_table (Sum -2 test_name) test_name 12.1 0.000001
        test_aggregator simple_table (Sum "float" test_name) test_name 12.1 0.000001
        test_aggregator simple_table (Sum float_col test_name) test_name 12.1 0.000001
        test_aggregator empty_table (Sum 0 test_name) test_name 0 0.000001

main = Test.Suite.run_main here.spec
