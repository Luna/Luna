from Standard.Base import all

import Standard.Table.Internal.Unique_Name_Strategy.Unique_Name_Strategy

from Standard.Test import Test, Test_Suite
import Standard.Test.Extensions

spec =
    Test.group 'Unique_Name_Strategy Helper' <|
        Test.specify 'should change an empty name to "Column"' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_valid_name "" . should_equal "Column"
            strategy.invalid_names.length . should_equal 1

        Test.specify 'should change Nothing to "Column"' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_valid_name Nothing . should_equal "Column"
            strategy.invalid_names.length . should_equal 1

        Test.specify 'should not rename unique names' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_unique "A" . should_equal "A"
            strategy.make_unique "B" . should_equal "B"
            strategy.make_unique "C" . should_equal "C"
            strategy.renames.length . should_equal 0
            strategy.invalid_names.length . should_equal 0

        Test.specify 'should rename duplicates names' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_unique "A" . should_equal "A"
            strategy.make_unique "A" . should_equal "A_1"
            strategy.make_unique "A" . should_equal "A_2"
            strategy.renames.length . should_equal 2
            strategy.invalid_names.length . should_equal 0

        Test.specify 'should preserve existing suffix' <|
            strategy = Unique_Name_Strategy.new
            strategy.make_unique "A" . should_equal "A"
            strategy.make_unique "A_1" . should_equal "A_1"
            strategy.make_unique "A" . should_equal "A_2"
            strategy.make_unique "A_1" . should_equal "A_1_1"
            strategy.renames.length . should_equal 2
            strategy.invalid_names.length . should_equal 0

        Test.specify 'should work as in examples' <|
             strategy = Unique_Name_Strategy.new
             strategy.make_valid_name "" . should_equal "Column"
             strategy.make_valid_name 1 . should_equal "1"
             strategy.make_valid_name "Hello" . should_equal "Hello"

             unique_name_strategy = Unique_Name_Strategy.new
             unique_names = ["A","B","A",""] . map unique_name_strategy.make_unique
             duplicates = unique_name_strategy.renames
             invalid = unique_name_strategy.invalid_names
             duplicates.should_equal ["A"]
             invalid.should_equal [""]

             strategy_1 = Unique_Name_Strategy.new
             strategy_1.make_unique "A" . should_equal "A"
             strategy_1.make_unique "A" . should_equal "A_1"

    Test.group "Unique_Name_Strategy.combine_with_prefix" <|
        Test.specify "should work as in examples" <|
             first = ["A", "B", "second_A"]
             second = ["A", "B", "second_A_1", "C"]
             unique_second = Unique_Name_Strategy.combine_with_prefix first second "second_"
             unique_second . should_equal ["second_A_2", "second_B", "second_A_1", "C"]

main = Test_Suite.run_main spec
