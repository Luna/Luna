from Standard.Base import all

import Standard.Geo.Geo_Json
import Standard.Geo.Geo_Json.Internal
import Standard.Table.Data.Table
import Standard.Test

spec =
    Test.group "GeoJSON" <|
        geo_json = Json.parse <| '''
            {
              "type": "FeatureCollection",
              "features": [
                { "type": "Feature", "properties": { "Prop1": 1, "Prop2": "value2"}, "geometry": { "type": "Point", "coordinates": [ -118.58, 34.19 ] } },
                { "type": "Feature", "properties": { "Prop1": 1, "Prop3": 3}, "geometry": { "type": "Point", "coordinates": [ 10.11, 4.88, 19 ] } }
              ]
            }
        Test.specify "should be created from a GeoJSON document" <|
            geo_table = geo_json.to_table
            geo_table.is_a Table.Table . should_be_true
            geo_table.at "Prop1" . to_vector . should_equal [1, 1]
            geo_table.at "Prop2" . to_vector . should_equal ['value2', Nothing]
            geo_table.at "Prop3" . to_vector . should_equal [Nothing, 3]
            geo_table.at "longitude" . to_vector . should_equal [-118.58, 10.11]
            geo_table.at "latitude" . to_vector . should_equal [34.19, 4.88]
            geo_table.at "elevation" . to_vector . should_equal [Nothing, 19]
            geo_table.at "Prop4" . should_fail_with Table.No_Such_Column_Error

        Test.specify "should be created from a GeoJSON array of features" <|
            geo_table = geo_json.get "features" . to_table
            geo_table.is_a Table.Table . should_be_true
            geo_table.at "Prop1" . to_vector . should_equal [1, 1]
            geo_table.at "Prop2" . to_vector . should_equal ['value2', Nothing]
            geo_table.at "Prop3" . to_vector . should_equal [Nothing, 3]
            geo_table.at "longitude" . to_vector . should_equal [-118.58, 10.11]
            geo_table.at "latitude" . to_vector . should_equal [34.19, 4.88]
            geo_table.at "elevation" . to_vector . should_equal [Nothing, 19]
            geo_table.at "Prop4" . should_fail_with Table.No_Such_Column_Error

        Test.specify "should return error when created from invalid GeoJSON document" <|
            invalid_json = Json.parse <| '''
                {
                  "features": {}
                }
            invalid_json.to_table . should_fail_with Nothing

        Test.specify "should skip unsupported GeoJSON rows" <|
            unsupported_json = Json.parse <| '''
                {
                  "type": "FeatureCollection",
                  "features": [
                    { "properties": { "Prop1": 1, "Prop2": "value2"}, "geometry": { "type": "Point", "coordinates": [ 0.0, 0.0 ] } },
                    { "type": "Feature", "properties": {}, "geometry": { "type": "Polygon", "coordinates": [ 0.1, 1.0 ] } }
                  ]
                }
            unsupported_json.to_table.to_json . should_equal (Table.new [] . to_json)
