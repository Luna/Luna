from Standard.Base import all

import Standard.Examples

from Standard.Test import all


# While we're lacking the ability to run the documentation examples
# automatically (#1706), these tests at least check that each of the examples
# executes without an error resulting.

add_specs suite_builder = suite_builder.group "Examples" group_builder->
    group_builder.specify "should allow construction of Example_Error_Type" <|
        val = Examples.Example_Error_Type.Error "Oh, no! Something went wrong!"
        val.should_be_a Examples.Example_Error_Type.Error

    group_builder.specify "should allow getting the examples data directory" <|
        dir = Examples.data_dir
        dir.exists.should_be_true

    group_builder.specify "should allow getting an example CSV file" <|
        Examples.csv.exists.should_be_true

    group_builder.specify "should allow getting an example XLS file" <|
        Examples.xls.exists.should_be_true

    group_builder.specify "should allow getting an example XLSX file" <|
        Examples.xlsx.exists.should_be_true

    group_builder.specify "should provide access to the CSV path" <|
        (Examples.csv_path.length > 0) . should_be_true

    group_builder.specify "should provide access to a scratch file location" <|
        # It is deleted every time it is requested.
        Examples.scratch_file.exists.should_be_false

    group_builder.specify "should provide access to a simple duration" <|
        Examples.duration

    group_builder.specify "should provide some basic JSON text" <|
        Json.parse Examples.json_text

    group_builder.specify "should provide some basic JSON" <|
        Examples.json

    group_builder.specify "should provide a JSON object" <|
        Examples.json_object

    group_builder.specify "should provide a basic cons list" <|
        Examples.list.length . should_equal 3

    group_builder.specify "should provide a basic KV map" <|
        Examples.map.size . should_equal 3

    group_builder.specify "should provide a type with no methods" <|
        Examples.No_Methods.should_be_a Examples.No_Methods

    group_builder.specify "should provide a no method error value" <|
        Examples.no_such_method

    group_builder.specify "should provide a dummy error type" <|
        Examples.My_Error.Error

    group_builder.specify "should provide a method that throws an error" <|
        Examples.throw_error.should_fail_with Examples.My_Error

    group_builder.specify "should provide a method that throws a panic" <|
        Test.expect_panic_with Examples.throw_panic Examples.My_Error

    group_builder.specify "should provide a URL for some geo data" <|
        (Examples.geo_data_url.length > 0) . should_be_true

    group_builder.specify "should provide an HTTP response" <|
        Examples.get_response

    group_builder.specify "should provide a response containing geo data" <|
        Examples.get_geo_data

    group_builder.specify "should provide an example URI" <|
        Examples.uri

    group_builder.specify "should provide an image file" <|
        Examples.image_file

    group_builder.specify "should provide an image" <|
        Examples.image

    group_builder.specify "should provide a matrix" <|
        Examples.matrix

    group_builder.specify "should provide a silly function" <|
        Examples.add_1_to 4 . should_equal 5

    group_builder.specify "should provide a boolean" <|
        Examples.get_boolean

    group_builder.specify "should provide a simple json table" <|
        Examples.simple_table_json
        Examples.simple_table_json_headers

    group_builder.specify "should provide some geo_json" <|
        Examples.geo_json

    group_builder.specify "should provide various table columns" <|
        Examples.integer_column
        Examples.decimal_column
        Examples.bool_column_1
        Examples.bool_column_2
        Examples.text_column_1
        Examples.text_column_2

    group_builder.specify "should provide various example tables" <|
        Examples.inventory_table
        Examples.popularity_table
        Examples.transactions_table

    group_builder.specify "should provide an example of a regex match" <|
        match = Examples.match
        match.groups.length . should_equal 5
        match.named_groups.size . should_equal 2

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter

