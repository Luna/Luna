from Standard.Base import all
import Standard.Base.Errors.Common.Incomparable_Values
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Test import all

import Standard.Base.Internal.Extra_Imports.ObjectComparator
import Standard.Base.Internal.Extra_Imports.CompareException

# === Test Resources ===

type Ord
    Value number

# The comparison is reverted, i.e., `x < y` gives result for `y.number < x.number`.
type Ord_Comparator
    compare x:Ord y:Ord =
        Ordering.compare x.number y.number
    hash x =
        Ordering.hash x.number

Comparable.from (that:Ord) = Comparable.new that Ord_Comparator

type No_Ord
    Value number

type No_Ord_Comparator
    compare x y =
        _ = [x, y]
        Nothing

    hash x =
        _ = x
        0

Comparable.from (that:No_Ord) = Comparable.new that No_Ord_Comparator

type Attach_Warning
    Value (n : Integer)
    Value2 (n : Integer)

type Attach_Warning_Comparator
    compare (x : Attach_Warning) (y : Attach_Warning) =
        r = Ordering.compare x.n y.n
        Warning.attach (Illegal_Argument.Error "warning") r

    hash x:Attach_Warning = Ordering.hash x.n

Comparable.from (that : Attach_Warning) = Comparable.new that Attach_Warning_Comparator

# Tests

add_specs suite_builder = suite_builder.group "Object Comparator" group_builder->
    handle_comp_exc = Panic.catch CompareException handler=(exc -> Error.throw (Incomparable_Values.Error exc.payload.getLeftOperand exc.payload.getRightOperand))
    default_comparator a b = handle_comp_exc <| ObjectComparator.DEFAULT.compare a b
    case_insensitive a b = handle_comp_exc <| ObjectComparator.new False Locale.default.java_locale . compare a b

    group_builder.specify "can compare numbers" <|
        ((default_comparator 1 2) < 0) . should_equal True
        ((default_comparator 1 1.2) < 0) . should_equal True
        ((default_comparator 1 1) == 0) . should_equal True

    group_builder.specify "can compare booleans" <|
        ((default_comparator True False) > 0) . should_equal True
        ((default_comparator True True) == 0) . should_equal True
        ((default_comparator False False) == 0) . should_equal True

    group_builder.specify "can compare Nothing and it ends up as lowest value" <|
        ((default_comparator 1 Nothing) > 0) . should_equal True
        ((default_comparator Nothing 1.235) < 0) . should_equal True
        ((default_comparator True Nothing) > 0) . should_equal True
        ((default_comparator Nothing False) < 0) . should_equal True
        ((default_comparator "A" Nothing) > 0) . should_equal True
        ((default_comparator Nothing "ZSA") < 0) . should_equal True
        ((default_comparator Nothing Nothing) == 0) . should_equal True

    group_builder.specify "can compare Text with Enso standard defaults" <|
        ((default_comparator "A" "a") < 0) . should_equal True
        ((default_comparator "ABBA" "ABBA") == 0) . should_equal True
        ((default_comparator '\u00E9' '\u0065\u{301}') == 0) . should_equal True

    group_builder.specify "can compare Text with case-insensitive comparisons" <|
        ((case_insensitive "A" "a") == 0) . should_equal True
        ((case_insensitive "ABBA" "abba") == 0) . should_equal True
        ((case_insensitive '\u00E9' '\u0065\u{301}') == 0) . should_equal True

    group_builder.specify "can compare custom types" <|
        ((default_comparator (Ord.Value 1) (Ord.Value 0)) < 0) . should_equal False
        ((default_comparator (Ord.Value 1) (Ord.Value 0)) > 0) . should_equal True
        ((default_comparator (Ord.Value 1) (Ord.Value 1)) == 0) . should_equal True

    group_builder.specify "should fail gracefully for incomparable items" <|
        (default_comparator 1 True) . should_fail_with Incomparable_Values
        (default_comparator (No_Ord.Value 1) (No_Ord.Value 2)).should_fail_with Incomparable_Values

    group_builder.specify "warnings attached to the return value of .compare should not affect the boolean value of the comparison operator" <|
        ((Attach_Warning.Value 1) < (Attach_Warning.Value 2)) . should_be_true
        ((Attach_Warning.Value 1) == (Attach_Warning.Value 1)) . should_be_true
        ((Attach_Warning.Value 1) == (Attach_Warning.Value2 1)) . should_be_true

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter

