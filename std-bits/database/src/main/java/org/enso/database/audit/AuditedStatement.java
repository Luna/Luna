package org.enso.database.audit;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

abstract class AuditedStatement implements Statement {
  private final Statement underlying;

  AuditedStatement(Statement underlying) {
    this.underlying = underlying;
  }

  protected abstract void auditQuery(String operationType, String sql);

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    auditQuery("query", sql);
    return underlying.executeQuery(sql);
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    auditQuery("update", sql);
    return underlying.executeUpdate(sql);
  }

  @Override
  public void close() throws SQLException {
    underlying.close();
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    return underlying.getMaxFieldSize();
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    underlying.setMaxFieldSize(max);
  }

  @Override
  public int getMaxRows() throws SQLException {
    return underlying.getMaxRows();
  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    underlying.setMaxRows(max);
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    underlying.setEscapeProcessing(enable);
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    return underlying.getQueryTimeout();
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    underlying.setQueryTimeout(seconds);
  }

  @Override
  public void cancel() throws SQLException {
    underlying.cancel();
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return underlying.getWarnings();
  }

  @Override
  public void clearWarnings() throws SQLException {
    underlying.clearWarnings();
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    underlying.setCursorName(name);
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    auditQuery("execute", sql);
    return underlying.execute(sql);
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    return underlying.getResultSet();
  }

  @Override
  public int getUpdateCount() throws SQLException {
    return underlying.getUpdateCount();
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    return underlying.getMoreResults();
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    underlying.setFetchDirection(direction);
  }

  @Override
  public int getFetchDirection() throws SQLException {
    return underlying.getFetchDirection();
  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    underlying.setFetchDirection(rows);
  }

  @Override
  public int getFetchSize() throws SQLException {
    return underlying.getFetchSize();
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return underlying.getResultSetConcurrency();
  }

  @Override
  public int getResultSetType() throws SQLException {
    return underlying.getResultSetType();
  }

  StringBuilder currentBatch = new StringBuilder();

  @Override
  public void addBatch(String sql) throws SQLException {
    if (!currentBatch.isEmpty()) {
      currentBatch.append("; ");
    }
    currentBatch.append(sql);
    underlying.addBatch(sql);
  }

  @Override
  public void clearBatch() throws SQLException {
    currentBatch = new StringBuilder();
    underlying.clearBatch();
  }

  @Override
  public int[] executeBatch() throws SQLException {
    auditQuery("executeBatch", currentBatch.toString());
    currentBatch = new StringBuilder();
    return underlying.executeBatch();
  }

  @Override
  public Connection getConnection() throws SQLException {
    throw new IllegalStateException("`getConnection` cannot be called on AuditedStatement");
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return underlying.getMoreResults(current);
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return underlying.getGeneratedKeys();
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    auditQuery("update", sql);
    return underlying.executeUpdate(sql, autoGeneratedKeys);
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    auditQuery("update", sql);
    return underlying.executeUpdate(sql, columnIndexes);
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    auditQuery("update", sql);
    return underlying.executeUpdate(sql, columnNames);
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    auditQuery("execute", sql);
    return underlying.execute(sql, autoGeneratedKeys);
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    auditQuery("execute", sql);
    return underlying.execute(sql, columnIndexes);
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    auditQuery("execute", sql);
    return underlying.execute(sql, columnNames);
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return underlying.getResultSetHoldability();
  }

  @Override
  public boolean isClosed() throws SQLException {
    return underlying.isClosed();
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    underlying.setPoolable(poolable);
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return underlying.isPoolable();
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    underlying.closeOnCompletion();
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return underlying.isCloseOnCompletion();
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    return underlying.unwrap(iface);
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return underlying.isWrapperFor(iface);
  }
}
