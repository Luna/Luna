package org.enso.interpreter.dsl.test;

import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.List;
import java.util.function.Supplier;
import org.enso.interpreter.EnsoLanguage;
import org.enso.interpreter.runtime.EnsoContext;
import org.enso.interpreter.runtime.callable.function.Function;
import org.junit.Test;

/**
 * All exceptions thrown from methods from classes generated by {@link org.enso.interpreter.dsl.MethodProcessor}
 * should be converted either to a dataflow error or to a {@link org.enso.interpreter.runtime.error.PanicException panic}.
 */
public class ThrowableCatchTest {
  static List<Supplier<Throwable>> exceptionSuppliers =
      List.of(
          () -> new RuntimeException("First exception"),
          () -> new AssertionError("Assertion error"),
          () -> new IllegalStateException("Illegal state"),
          CustomException::new,
          CustomError::new
      );

  private static class CustomException extends Exception { }

  private static class CustomError extends Error { }

  @Test
  public void testNoThrowableLeaksFromBuiltinMethods() {
    var func = ThrowBuiltinMethodGen.makeFunction(EnsoLanguage.get(null));
    var funcCallTarget = func.getCallTarget();
    var emptyState = EnsoContext.get(null).emptyState();
    for (long exceptionSupplierIdx = 0; exceptionSupplierIdx < exceptionSuppliers.size(); exceptionSupplierIdx++) {
      Object[] args = Function.ArgumentsHelper.buildArguments(func, null, emptyState, new Object[]{exceptionSupplierIdx});
      Object result = null;
      try {
        result = funcCallTarget.call(args);
      } catch (Throwable t) {
        fail("Should not throw any exceptions: " + t.getMessage());
      }
      assertNull(result);
    }
  }
}
