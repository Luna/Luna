import Std.Base
import Std.System


## A class representing time (and date).
class Time:
    Time
    TimeVal Int TimeInterval

    ## Gets the current time. Usage: `Time.now`.
    def now: primGetCurrentTime

    ## Gets time of day in form of a tuple: (hour, minute, seconds).
    def timeOfDay: case self of
        TimeVal _ ti: primTimeOfDay ti

    ## Gets the beginning of the current day.
    ## If called on February 14th at 4:00, it will return February 14th 0:00
    def beginningOfDay: case Time.now of
        TimeVal days _: TimeVal days (TimeInterval 0)

    ## Gets the end of the current day.
    ## If called on February 14th at 4:00, it will return February 15th 0:00
    def endOfDay: case Time.now of
        TimeVal days _: TimeVal (days+1) (TimeInterval 0)

    ## Gets the time of year in form of a tuple: (year, month, day)
    def timeOfYear: case self of
        TimeVal days _: primTimeOfYear days

    ## Creates a `Time` object from its parameters: the year, month and day.
    def fromTimeOfYear y m d:
        TimeVal (primFromTimeOfYear y m d) (TimeInterval 0)

    ## Gets the `Time` representing the first day of the current month.
    def beginningOfMonth: case Time.now of
        TimeVal days _: case primTimeOfYear days of
            (y, m, d): Time.fromTimeOfYear y m 1

    ## Gets the `Time` representing the last day of the current month.
    def endOfMonth: case Time.now of
        TimeVal days _: case primTimeOfYear days of
            (y, m, d): Time.fromTimeOfYear y m (primMonthLength y m)

    ## Gets the `Time` representing the first day (January 1st) of the current year.
    def beginningOfYear: case Time.now of
        TimeVal days _: case primTimeOfYear days of
            (y, m, d): Time.fromTimeOfYear y 1 1

    ## Gets the `Time` representing the last day (December 31st) of the current year.
    def endOfYear: case Time.now of
        TimeVal days _: case primTimeOfYear days of
            (y, m, d): Time.fromTimeOfYear y 12 31

    ## Calculate difference between to time values.
    def diff other: primDiffTimes self other

    ## Add a `TimeInterval` to this `Time`.
    def add interval: case self of
        TimeVal days diff: TimeVal days (diff.add interval)

    ## Subtract a `TimeInterval` from this `Time`.
    def sub interval: case self of
        TimeVal days diff: TimeVal days (diff.sub interval)

    ## Does this and the `other` `Time` point to the same time?
    def == other: primTimesEq self other

    ## Is this `Time` earlier than the `other`?
    def < other:
        d = self.diff other
        d.toInt.< 0

    ## Is this `Time` later than the `other`?
    def > other:
        d = self.diff other
        d.toInt.> 0

    ## Default format for `Time`: YYYY-MM-DD.HH:MM:SS.
    def defaultFormat: "%FT%T"

    ## Tries to parse `Time` from `Text` using the specified format.
    ## Returns `Just time` if successful and `Nothing` otherwise.
    ## In most cases, you can use `safeParse`, which uses the default format.
    ## If a custom format is needed, please see:
    ## https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime
    def safeParseFmt fmt str: primParseTime fmt str

    ## Try to parse `Time` from `Text` assuming the default format of date and time.
    ## Returns `Just time` if successful, `Nothing` otherwise.
    def safeParse str: Time.safeParseFmt Time.defaultFormat str

    ## Parse `Time` from `Text` using the supplied format.
    ## Returns a `Time` object and throws an error if unable to parse the time.
    ## In most cases, you can use `parse`, which uses the default format.
    ## If a custom format is needed, please see:
    ## https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime
    def parseFmt fmt str: case Time.safeParseFmt fmt str of
        Just t:  t
        Nothing: throw ("Couldn't parse Time with the given format (" + fmt + ")")

    ## Parse `Time` from `Text`.
    ## Returns a `Time` object and throws an error if unable to parse the time.
    def parse str: Time.parseFmt Time.defaultFormat str

    ## Formats a `Time` according to the specifier supplied (converting to `Text`).
    ## If a custom format is needed, please see:
    ## https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime
    def format fmt: primFormatTime fmt self

    ## Converts a `Time` to `Text` using the default format (YYYY-MM-DD.HH:MM:SS).
    def toText: self.format Time.defaultFormat

    def shortRep: self.toText

    ## Parses a `Time` from a number representing the standard epoch.
    def fromEpoch e: case Time.safeParseFmt "%s" e.toText of
        Just t: t
        Nothing: throw "Couldn't parse Time from epoch."

    ## Converts a `Time` to an epoch.
    def toEpoch: self.format "%s"

## A class representing time intervals, that is: a difference between two times.
## Can be converted to different time resolutions like seconds, miliseconds and microseconds.
## Internally the time interval is stored with picosecond resolution.
## The main purpose of this class is to make working with time intuitive:
## using the helper methods you can write things like:
## ```
## 5.seconds.ago
## 10.minutes.fromNow
## 15.seconds.before someTime
## 20.minutes.after someTime
## ```
class TimeInterval:
    TimeInterval Int

    def shortRep: self.toText

    def toInt: case self of
        TimeInterval d: d

    ## Return a real representing the number of picoseconds in this `TimeInterval`.
    def toReal: self.toInt.toReal

    ## Return the number of seconds in this interval.
    def toSeconds: self.toInt / 1000000000000

    ## Return the number of miliseconds in this interval.
    def toMiliseconds: self.toInt / 1000000000

    ## Return the number of microseconds in this interval.
    def toMicroseconds: self.toInt / 1000000

    def toText: (self.toReal./ 1000000000.0).toText + "ms"

    def add other: TimeInterval (self.toInt + other.toInt)

    def sub other: TimeInterval (self.toInt - other.toInt)

    ## Subtract this `TimeInterval` from a given `Time`, hence
    ## returning a point in time `before` the given `Time`.
    def before time: time.sub self

    ## Add this `TimeInterval` to a given `Time`, hence
    ## returning a point in time some `TimeInterval` `from` the given `Time`.
    def from time: time.add self

    ## Return this `TimeInterval` before now (so some amount of time ago).
    def ago: self.before Time.now

    ## Return this `TimeInterval` after now (so some amount of time from now).
    def fromNow: self.from Time.now

    ## Are this and the `other` `TimeIntervals` the same?
    def == other: self.toInt.== other.toInt

    def < other: self.toInt.< (other.toInt)

    def > other: self.toInt.> (other.toInt)

    def + other: self.add other

    def - other: self.sub other
