import Std.Base


class HttpMethod:
    POST
    GET
    PUT
    DELETE

    def toText: case self of
        POST:   "POST"
        GET:    "GET"
        PUT:    "PUT"
        DELETE: "DELETE"


class OAuth2Data:
    clientId            :: Int
    clientSecret        :: Text
    authorizeEndpoint   :: Text
    accessTokenEndpoint :: Text
    callback            :: Maybe Text

    def toText:
        "OAuth2Data {\n" +
        "    clientId            = " + self.clientId.toText            + ",\n" +
        "    clientSecret        = " + self.clientSecret               + ",\n" +
        "    authorizeEndpoint   = " + self.authorizeEndpoint          + ",\n" +
        "    accessTokenEndpoint = " + self.accessTokenEndpoint.toText + ",\n" +
        "    callback            = " + self.callback.toText            + "\n"  +
        "}"


class OAuth2Token:
    accessToken  :: Text
    refreshToken :: Maybe Text
    expiresIn    :: Maybe Int
    tokenType    :: Maybe Text
    idToken      :: Maybe Text

    def toText:
        "OAuth2Token {\n" +
        "    accessToken  = " + self.accessToken         + ",\n" +
        "    refreshToken = " + self.refreshToken.toText + ",\n" +
        "    expiresIn    = " + self.expiresIn.toText    + ",\n" +
        "    tokenType    = " + self.tokenType.toText    + ",\n" +
        "    idToken      = " + self.idToken.toText      + "\n"  +
        "}"


class HttpSimpleBody:
    values :: List (Tuple2 Text Text)

    def toText: "HttpSimpleBody { values = " + self.values.toText " }"

    def toBinary: primRenderQuery values

    def addValue key val: HttpSimpleBody (Prepend (key, val) self.values)


class OAuth2:
    def postRequest oauth2data token body:
        uri  = oauth2Data.accessTokenEndpoint
        user = oauth2Data.clientId
        pass = oauth2Data.clientSecret
        Http.post uri body . setAuth user pass . perform

    def fetchAccessToken oauth2Data token:
        body = HttpSimpleBody [
           ("code", token),
           ("redirect_uri", oauth2Data.callback),
           ("grant_type", "authorization_code")
        ]
        OAuth2.postRequest oauth2Data token body

    def refreshAccessToken oauth2Data token:
        body = HttpSimpleBody [
            ("grant_type", "refresh_token"),
            ("refresh_token", token)
        ]
        OAuth2.postRequest oauth2Data token body


class HttpResponse:
    responseCode :: Int
    getChunk     :: Binary

    def toText:
        "HttpResponse { responseCode = " + self.responseCode + " }"

    def stream: streamFrom self.getChunk

    def body:
        chunks = self.stream.takeWhile (_.equals "".toBinary . not)
        chunks.fold "".toBinary (+)

    def text: self.body.toText

    def json: parseJSON self.body.toText


class HttpRequest:
    uri     :: Text
    method  :: HttpMethod
    headers :: Map Text Text
    auth    :: Maybe (Tuple2 Text Text)
    params  :: List (Tuple2 Text (Maybe Text))
    body    :: Binary

    def toText:
        "HttpRequest {\n" +
        "    uri =     "  + self.uri            + ",\n" +
        "    method =  "  + self.method.toText  + ",\n" +
        "    headers = "  + self.headers.toText + ",\n" +
        "    params =  "  + self.params.toText  + ",\n" +
        "    body =    "  + self.body.toText    + "\n"  +
        "}"

    def setMethod m: case self of
        HttpRequest uri method headers auth params body: HttpRequest uri m headers auth params body

    def setBody b: case self of
        HttpRequest uri method headers auth params body: HttpRequest uri method headers auth params b

    def setUri u: case self of
        HttpRequest uri method headers auth params body: HttpRequest u method headers auth params body

    def addHeader key val: case self of
        HttpRequest uri method headers auth params body: HttpRequest uri method (headers.insert key val) auth params body

    def setAuth username password: case self of
        HttpRequest uri method headers auth params body: HttpRequest uri method headers (Just (username, password)) params body

    def setParam key val: case self of
        HttpRequest uri method headers auth params body: HttpRequest uri method headers auth (Prepend (key, val) params) body

    def setOAuth2Token token:
        self . addHeader "User-Agent"    "hoauth2"
             . addHeader "Accept"        "application/json"
             . addHeader "Authorization" ("Bearer " + token)

    def perform: primPerformHttp self.uri (self.method.toText) (self.headers.toList) self.auth self.params self.body


def defaultHttpRequest uri:
    HttpRequest uri GET Map.empty Nothing Empty "".toBinary


class Http:
    Http

    def get uri:
        defaultHttpRequest uri

    def post uri body:
        defaultHttpRequest uri . setMethod POST . setBody body

    def put uri body:
        defaultHttpRequest uri . setMethod PUT . setBody body

    def delete uri:
        defaultHttpRequest uri . setMethod DELETE

    def getBinary uri:
        Http.get uri . perform . body

    def getJSON uri:
        Http.get uri . perform . json
