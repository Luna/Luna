import Std.Base


class HttpMethod:
    POST
    GET
    PUT
    DELETE

    def toText: case self of
        POST:   "POST"
        GET:    "GET"
        PUT:    "PUT"
        DELETE: "DELETE"


class OAuth2Data:
    clientId            :: Text
    clientSecret        :: Text
    authorizeEndpoint   :: Text
    accessTokenEndpoint :: Text
    callback            :: Maybe Text

    def toText:
        "OAuth2Data {\n" +
        "    clientId            = " + self.clientId                   + ",\n" +
        "    clientSecret        = " + self.clientSecret               + ",\n" +
        "    authorizeEndpoint   = " + self.authorizeEndpoint          + ",\n" +
        "    accessTokenEndpoint = " + self.accessTokenEndpoint.toText + ",\n" +
        "    callback            = " + self.callback.toText            + "\n"  +
        "}"


class HttpSimpleBody:
    values :: List (Tuple2 Text Text)

    def toText: "HttpSimpleBody { values = " + self.values.toText " }"

    def toBinary: primRenderQuery self.values

    def addValue key val: HttpSimpleBody (Prepend (key, val) self.values)

def emptyHttpBody: HttpSimpleBody Empty


class OAuth2:
    def postRequest oauth2Data body:
        uri  = oauth2Data.accessTokenEndpoint
        user = oauth2Data.clientId
        pass = oauth2Data.clientSecret
        Http.post uri body . setBasicAuth user pass . setSecure . addHeader "Content-Type" "application/x-www-form-urlencoded" . perform

    def fetchAccessToken oauth2Data:
        body = HttpSimpleBody [("grant_type", "client_credentials")]
        OAuth2.postRequest oauth2Data body . json . lookupText "access_token"


class HttpResponse:
    responseCode :: Int
    getChunk     :: Binary

    def toText:
        "HttpResponse { responseCode = " + self.responseCode + " }"

    def stream: streamFrom self.getChunk

    def body:
        chunks = self.stream.takeWhile (_.equals "".toBinary . not)
        chunks.fold "".toBinary (+)

    def text: self.body.toText

    def json: parseJSON self.body.toText


class HttpRequest:
    uri     :: Text
    method  :: HttpMethod
    secure  :: Bool
    headers :: Map Text Text
    auth    :: Maybe (Tuple2 Text Text)
    params  :: List (Tuple2 Text (Maybe Text))
    body    :: Binary

    def toText:
        "HttpRequest {\n" +
        "    uri =     "  + self.uri            + ",\n" +
        "    method =  "  + self.method.toText  + ",\n" +
        "    headers = "  + self.headers.toText + ",\n" +
        "    params =  "  + self.params.toText  + ",\n" +
        "    body =    "  + self.body.toText    + "\n"  +
        "}"

    def setMethod m: case self of
        HttpRequest uri method secure headers auth params body:
            HttpRequest uri m secure headers auth params body

    def setBody b: case self of
        HttpRequest uri method secure headers auth params body:
            HttpRequest uri method secure headers auth params b.toBinary

    def setUri u: case self of
        HttpRequest uri method secure headers auth params body:
            HttpRequest u method secure headers auth params body

    def addHeader key val: case self of
        HttpRequest uri method secure headers auth params body:
            HttpRequest uri method secure (headers.insert key val) auth params body

    def setBasicAuth username password: case self of
        HttpRequest uri method secure headers auth params body:
            HttpRequest uri method secure headers (Just (username, password)) params body

    def setParam key val: case self of
        HttpRequest uri method secure headers auth params body:
            HttpRequest uri method secure headers auth (Prepend (key, val) params) body

    def setOAuth2Token tkn:
        self . addHeader "User-Agent" "hoauth2" . addHeader "Accept" "application/json" . addHeader "Authorization" ("Bearer " + tkn)

    def setSecure: case self of
        HttpRequest uri method secure headers auth params body:
            HttpRequest uri method True headers auth params body

    def perform: case self of
        HttpRequest uri method secure headers auth params body:
            primPerformHttp uri method.toText secure headers.toList auth params body


def defaultHttpRequest uri:
    HttpRequest uri GET False Map.empty Nothing Empty "".toBinary


class Http:
    Http

    def get uri:
        defaultHttpRequest uri

    def post uri body:
        defaultHttpRequest uri . setMethod POST . setBody body

    def put uri body:
        defaultHttpRequest uri . setMethod PUT . setBody body

    def delete uri:
        defaultHttpRequest uri . setMethod DELETE

    def getBinary uri:
        Http.get uri . perform . body

    def getJSON uri:
        Http.get uri . perform . json
