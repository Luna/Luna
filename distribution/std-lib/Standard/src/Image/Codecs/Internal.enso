from Standard.Base import all
import Standard.Image.Codecs

polyglot java import org.opencv.core.MatOfInt
polyglot java import org.opencv.imgcodecs.Imgcodecs

## PRIVATE
read_flag_to_integer flag = case flag of
    Codecs.Read_Alpha_Channel -> Imgcodecs.IMREAD_UNCHANGED
    Codecs.Read_Grayscale -> Imgcodecs.IMREAD_GRAYSCALE
    Codecs.Read_Gdal -> Imgcodecs.IMREAD_LOAD_GDAL

## PRIVATE
write_flag_to_vector flag = case flag of
    Codecs.Write_Jpeg_Quality value -> [Imgcodecs.IMWRITE_JPEG_QUALITY, value]
    Codecs.Write_Jpeg_Progressive -> [Imgcodecs.IMWRITE_JPEG_PROGRESSIVE, 1]
    Codecs.Write_Jpeg_Optimize -> [Imgcodecs.IMWRITE_JPEG_OPTIMIZE, 1]
    Codecs.Write_Jpeg_Luma_Quality value -> [Imgcodecs.IMWRITE_JPEG_LUMA_QUALITY, value]
    Codecs.Write_Jpeg_Chroma_Quality value -> [Imgcodecs.IMWRITE_JPEG_CHROMA_QUALITY, value]
    Codecs.Write_Png_Compression value -> [Imgcodecs.IMWRITE_PNG_COMPRESSION, value]
    Codecs.Write_Webp_Quality value -> [Imgcodecs.IMWRITE_WEBP_QUALITY, value]

## PRIVATE
write_flags_to_mat flags =
    MatOfInt.new (flags.flat_map here.write_flag_to_vector . to_array)
