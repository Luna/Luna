from Standard.Base import all

import Standard.Base.System.File
import Standard.Image.Codecs
import Standard.Image.Data.Histogram
import Standard.Image.Data.Image.Internal
import Standard.Image.Data.Matrix

polyglot java import org.enso.image.data.Image as Java_Image

type Image

    ## The image data type.

       The image is represented with a matrix of rows x columns. Each
       pixel is represented with a vector of 1 to 4 values (channels).
       Pixel values are normalized in a range [0.0 .. 1.0].
    type Image opencv_mat

    ## Return the number of image rows.
    rows : Integer
    rows = this.opencv_mat.rows

    ## Return the number of image columns.
    columns : Integer
    columns = this.opencv_mat.cols

    ## Return the number of image channels.
    channels : Integer
    channels = this.opencv_mat.channels

    ## Get the pixel value indexed by row and column.
    get : Integer -> Integer -> Vector ! Matrix.Index_Out_Of_Bounds_Error
    get row column =
        if (row < 0) || (row >= this.rows) then Error.throw (Matrix.Index_Out_Of_Bounds_Error row) else
            if (column < 0) || (column >= this.columns) then Error.throw (Matrix.Index_Out_Of_Bounds_Error column) else
                arr = Java_Image.get this.opencv_mat row column
                Vector.Vector arr

    ## Calculates the per-element sum of an image and a scalar.

       > Example
         Add the constant to an image. Operation will add 0.1 to each channel of the image.
             image + 0.1

       > Example
         Add 0.1 to the first channel of the image.
             image + [0.1] == image + [0.1, 0, 0]
    + : (Number | Vector) -> Image
    + value = Internal.core_op this.opencv_mat value (Java_Image.add _ _ _)

    ## Calculates the per-element difference between an image and a scalar.

       > Example
         Subtract 0.5 from each channel of the image.
             image - 0.5

       > Example
         Subtract 0.5 from second channel of the image.
             image - [0, 0.5] == image - [0, 0.5, 0, 0]
    - : (Number | Vector) -> Image
    - value = Internal.core_op this.opencv_mat value (Java_Image.subtract _ _ _)

    ## Calculates the per-element product of an image and a scalar.

       > Example
         Multiply each channel of the image by 2.
             image * 2

       > Example
         Multiply first channel of the image by 2, and second channel by 4.
             image * [2, 4, 1, 1]

       > Example
         Multiply first channel of the image by 2, and zero the rest of the channels.
             image * [2]
    * : (Number | Vector) -> Image
    * value = Internal.core_op this.opencv_mat value (Java_Image.multiply _ _ _)

    ## Performs per-element division of an image and a scalar.

       > Example
         Divide each channel of the image by 2.
             image / 2

       > Example
         Divide first channel of the image by 2, and second channel by 4.
             image / [2, 4, 1, 1]

       > Example
         Divide first channel of the image by 2, and zero the rest of the channels.
             image / [2]
    / : (Number | Vector) -> Image
    / value = Internal.core_op this.opencv_mat value (Java_Image.divide _ _ _)

    ## Check the equality of two images.

       ? Implementation Note
         Two images considered equal when they have the same number of rows,
         columns and channels, and have the same pixel values.

         The image represented internally as a byte array, and if two images
         have the same dimensions, equality checks that underlying byte arrays
         are equal as well.
    == : Image -> Boolean
    == that = Java_Image.is_equals this.opencv_mat that.opencv_mat

    ## Convert the image to a vector.
    to_vector : Vector
    to_vector =
        arr = Java_Image.to_vector this.opencv_mat
        Vector.Vector arr

    ## Convert the image to Json.
    to_json : Json
    to_json =
        base64 = Java_Image.to_base64 this.opencv_mat
        Json.from_pairs [["mediaType", "image/png"], ["base64", base64]]

    ## Create a histogram for the specified channel.
    histogram : Integer -> Histogram
    histogram channel = Histogram.calculate this channel

    ## Write the image to a file.

       > Example
         Write the image with applying png compression.
             image.write path

       > Example
         Write the image with applying png compression.
             Codecs.write path (Codecs.Write_Png_Compression 9)

       > Example
         Write the image with applying several flags.
             Codecs.write path [Codecs.Write_Jpeg_Quality 40, Codecs.Write_Jpeg_Progressive]
    write : (Text | File) -> (Write_Flag | Vector) -> Nothing ! File.Io_Error
    write location flags=[] =
        Codecs.write location this flags

## Create an image from the array of values.

   The function expects the array of normalized values in a range of [0.0 .. 1.0].

   > Example
     Create an image from the vector.
         Image.from_vector [0, 0, 0, 0, 0, 0] rows=2 channels=1
from_vector : Vector -> Integer -> Integer -> Image
from_vector data rows=1 channels=1 =
    Image (Java_Image.from_vector data.to_array rows channels)
