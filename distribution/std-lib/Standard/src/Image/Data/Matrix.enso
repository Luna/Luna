from Standard.Base import all
import Standard.Image.Data.Histogram
import Standard.Image.Data.Image
import Standard.Image.Data.Matrix.Internal

polyglot java import org.enso.image.data.Matrix as Java_Matrix

type Index_Out_Of_Bounds_Error index

type Matrix

    type Matrix opencv_mat

    rows : Integer
    rows = this.opencv_mat.rows

    columns : Integer
    columns = this.opencv_mat.cols

    channels : Integer
    channels = this.opencv_mat.channels

    copy : Matrix
    copy = Matrix this.opencv_mat.clone

    get : Integer -> Integer -> Vector ! Index_Out_Of_Bounds_Error
    get row column =
        if (row < 0) || (row >= this.rows) then Error.throw (Index_Out_Of_Bounds_Error row) else
            if (column < 0) || (column >= this.columns) then Error.throw (Index_Out_Of_Bounds_Error column) else
                arr = Java_Matrix.get this.opencv_mat row column
                Vector.Vector arr

    reshape : Integer -> Integer -> Matrix
    reshape rows channels=Nothing =
        case channels of
            Nothing -> Matrix (this.opencv_mat.reshape this.channels rows)
            _ -> Matrix (this.opencv_mat.reshape channels rows)

    ## Calculates the per-element sum of two matrices or a matrix and a scalar.
    + : (Number | Matrix | Vector) -> Matrix
    + value = Internal.core_op this.opencv_mat value (Java_Matrix.add _ _ _)

    ## Calculates the per-element difference of two matrices or of a matrix and a scalar.
    - : (Number | Matrix | Vector) -> Matrix
    - value = Internal.core_op this.opencv_mat value (Java_Matrix.subtract _ _ _)

    ## Calculates the per-element product of two matrices or a matrix and a scalar.
    * : (Number | Matrix | Vector) -> Matrix
    * value = Internal.core_op this.opencv_mat value (Java_Matrix.multiply _ _ _)

    ## Performs per-element division of two matrices or a matrix and a scalar.
    / : (Number | Matrix | Vector) -> Matrix
    / value = Internal.core_op this.opencv_mat value (Java_Matrix.divide _ _ _)

    == : Matrix -> Boolean
    == that = Java_Matrix.is_equals this.opencv_mat that.opencv_mat

    ## Convert this matrix to an image.
    to_image : Image.Image
    to_image = Image.Image (Image.from_vector this.to_vector this.rows this.channels)

    ## Get the elemets of this matrix as a vector.
    to_vector : Vector
    to_vector =
        arr = Java_Matrix.to_vector this.opencv_mat
        Vector.Vector arr

    ## Convert this matrix to Json.
    to_json : Json
    to_json = Json.String this.opencv_mat.to_text

zeros : Integer -> Integer -> Integer -> Matrix
zeros rows columns channels=1 =
    Matrix (Java_Matrix.zeros rows columns channels)

ones : Integer -> Integer -> Integer -> Matrix
ones rows columns channels=1 =
    Matrix (Java_Matrix.ones rows columns channels)

eye : Integer -> Integer -> Integer -> Matrix
eye rows columns channels=1 =
    Matrix (Java_Matrix.eye rows columns channels)

from_vector : Vector -> Integer -> Integer -> Matrix
from_vector values rows=1 channels=1 =
    Matrix (Java_Matrix.from_vector values.to_array channels rows)
