from Standard.Base import all

## PRIVATE
    Get key-value pairs of a feature array.
Json.Array.get_rows -> Vector
Json.Array.get_rows = case this of
    Json.Array features ->
        features.map .get_row

## PRIVATE
    Get key-value pairs of a feature object.
Json.Object.get_row : Map
Json.Object.get_row = case this of
    Json.Object object ->
        object_type = object.get_or_else "type" Nothing
        if object_type == "Feature".to_json then this.get_feature_row else Map.empty

## PRIVATE
    Get key-value pairs of a feature object.
Json.Object.get_feature_row : Map
Json.Object.get_feature_row =
    properties_row = this.get "properties" . get_properties_row
    geometry_row = this.get "geometry" . get_geometry_row
    geometry_row.fold_with_key properties_row acc-> k-> v->
        acc.insert k v

## PRIVATE
   Get column key-value pairs of a feature's "properties" object.
Json.Object.get_properties_row : Map
Json.Object.get_properties_row = case this of
    Json.Object properties -> properties.map p-> case p of
        Json.Object _ -> Nothing
        _ -> p.unwrap

## PRIVATE
   Get column key-value pairs of a feature's "geometry" object.
Json.Object.get_geometry_row : Map
Json.Object.get_geometry_row = case this of
    Json.Object fields ->
          geometry_type = fields.get_or_else "type" Nothing
          if geometry_type == "Point".to_json then this.get_point_row else Map.empty

## PRIVATE
    Get column key-value pairs of a "Point" geometry object.
Json.Object.get_point_row : Map
Json.Object.get_point_row =
    fields = ["longitude", "latitude", "elevation"]
    coordinates = this.get "coordinates" . unwrap
    Map.from_vector (fields.zip coordinates)
