from Base import all

## PRIVATE
execute : Vector -> (Any -> Any) -> (Any -> Any -> Ordering) -> Sort_Order -> Vector
execute vec on by order =
    ## Prepare the destination array that will underlie the vector. We do not
       want to sort in place on the original vector, as `sort` is not intended
       to be mutable.
    new_vec_arr = Array.new vec.length
    vec.to_array.copy 0 new_vec_arr 0 vec.length

    ## As we want to account for both custom projections and custom comparisons
       we need to construct a comparator for internal use that does both.

       As Java does not use Enso's notion of comparison, we instead need to map
       our notion to Java's notion.
    comp_ascending l r  = (by (on l) (on r)).to_java
    comp_descending l r = (by (on r) (on l)).to_java
    compare = if order == Sort_Order.Ascending then comp_ascending else comp_descending

    new_vec_arr.sort compare

    Vector.Vector new_vec_arr
