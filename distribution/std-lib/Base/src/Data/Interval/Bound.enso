from Base import all

## A type representing an interval bound over any orderable type.

   An orderable type is one that
type Bound
    ## A bound that includes `n`.
    type Inclusive n

    ## A bound that excludes `n`.
    type Exclusive n

    ## Compares two bounds for equality.
    == : Any -> Boolean
    == that = case this of
        Inclusive n_1 -> case that of
            Inclusive n_2 -> n_1 == n_2
            _ -> False
        Exclusive n_1 -> case that of
            Exclusive n_2 -> n_1 == n_2
            _ -> False

    ## Compares two bounds to see if `this` is less than `that`.

       Where the bound is the same, Exclusive bounds order less than Inclusive
       ones.
    < : Bound -> Boolean
    < that = case this of
        Inclusive n_1 -> case that of
            Inclusive n_2 -> n_1 < n_2
            Exclusive n_2 -> n_1 < n_2
        Exclusive n_1 -> case that of
            Inclusive n_2 -> n_1 <= n_2
            Exclusive n_2 -> n_1 < n_2

    ## Compares two bounds to see if `this` is less than or equal to `that`.

       Where the bound is the same, Exclusive bounds order less than Inclusive
       ones.
    <= : Bound -> Boolean
    <= that = (this < that) || (this == that)

    ## Compares two bounds to see if `this` is greather than `that`.

       Where the bound is the same, Inclusive bounds order greater than
       Exclusive ones.
    > : Bound -> Boolean
    > that = case this of
        Inclusive n_1 -> case that of
            Inclusive n_2 -> n_1 > n_2
            Exclusive n_2 -> n_1 >= n_2
        Exclusive n_1 -> case that of
            Inclusive n_2 -> n_1 > n_2
            Exclusive n_2 -> n_1 > n_2

    ## Compares two bounds to see if `this` is greater than or equal to `that`.

       Where the bound is the same, Inclusive bounds order greater than
       Exclusive ones.
    >= : Bound -> Boolean
    >= that = (this > that) || (this == that)

