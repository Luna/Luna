from Base import all
import Base.Data.Json
import Base.Net.Proxy
import Base.Net.Uri
import Base.Net.Http.Auth
import Base.Net.Http.Form
import Base.Net.Http.Header
import Base.Net.Http.Request
import Base.Net.Http.Request.Body as Request_Body
import Base.Net.Http.Response
import Base.Net.Http.Version
import Base.System.File
import Base.Time.Duration
import Base.Time.Time

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.net.InetSocketAddress
polyglot java import java.net.ProxySelector
polyglot java import java.net.URI
polyglot java import java.net.http.HttpClient
polyglot java import java.net.http.HttpRequest
polyglot java import java.net.http.HttpResponse
polyglot java import org.enso.base.Http_Utils

type Http

    type Http timeout auth follow_redirects proxy version

    ## Send an OPTIONS request.

       > Example
         Send an OPTIONS request.
             Http.new.options "http://httpbin.org"
    options : To_Uri -> Vector -> Response
    options addr (headers = []) =
        req = Request.options addr headers
        this.request req

    ## Send a GET request.

       > Example
         Send a GET request.
             Http.new.get "http://httpbin.org/get"

       > Example
         Authenticated GET request (note the use of TLS).
             http = Http.new (auth = Auth.Basic_Auth "user" "pass")
             http.get "https://httpbin.org/basic-auth/user/pass"

       > Example
         Download a file.
             out_file = File.new "/tmp/out.bin"
             res = Http.new.get "http://httpbin.org/bytes/1024"
             res.body.to_file out_file
    get : To_Uri -> Vector -> Response
    get addr (headers = []) =
        req = Request.get addr headers
        this.request req

    ## Send a HEAD request.

       > Example
         Send a HEAD request.
             res = Http.new.head "http://httpbin.org"
             IO.println res.headers
    head : To_Uri -> Vector -> Response
    head addr (headers = []) =
        req = Request.head addr headers
        this.request req

    ## Send a POST request.
    post : To_Uri -> Request_Body -> Vector -> Respoonse
    post addr body (headers = []) =
        req = Request.post addr body headers
        this.request req

    ## Send a POST request with the form. By default it will be encoded as
       "application/x-www-form-urlencoded". To encode the form as
       "multipart/form-data" add the appropriate header.

       > Example
         Send a POST request with form.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             Http.new.post_form "http://httpbin.org/post" form

       > Example
         Send a POST request with form encoded as "multipart/form-data".
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             Http.new.post_form "http://httpbin.org/post" form [Header.multipart_form_data]

       > Example
         Configure http client and send a POST request.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             http = Http.new (timeout = 30.seconds)
             http.post_form "http://httpbin.org/post" form
    post_form : To_Uri -> To_Form -> Vector -> Response
    post_form addr parts (headers = []) =
        new_headers = [Header.application_x_www_form_urlencoded]
        req = Request.post addr (Request_Body.Form parts.to_form) new_headers . with_headers headers
        this.request req

    ## Send a POST request with body with content-type "application/json".

       > Example
         Send a POST request with json data.
             json = Json.parse <| '''
                 {"key":"val"}
             Http.new.post_json "http://httpbin.org/post" json
    post_json : To_Uri -> Json -> Vector -> Response
    post_json addr body_json (headers = []) =
        new_headers = [Header.application_json]
        req = Request.post addr (Request_Body.Json body_json) headers . with_headers new_headers
        this.request req

    ## Send a PUT request.
    put : To_Uri -> Request_Body -> Vector -> Respoonse
    put addr body (headers = []) =
        req = Request.put addr body headers
        this.request req

    ## Send a PUT request with body with content-type "application/json".

       > Example
         Send a PUT request with json data.
             json = Json.parse <| '''
                 {"key":"val"}
             Http.new.put_json "http://httpbin.org/put" json
    put_json : To_Uri -> Json -> Vector -> Response
    put_json addr body_json (headers = []) =
        new_headers = [Header.application_json]
        req = Request.put addr (Request_Body.Json body_json) headers . with_headers new_headers
        this.request req

    ## Create a DELETE request.

       > Example
         Send a DELETE request.
             Http.new.delete "http://httpbin.org/delete"
    delete : To_Uri -> Vector -> Response
    delete addr (headers = []) =
        req = Request.delete addr headers
        this.request req

    ## Create a request

       > Example
         Send a GET request with headers.
             req = Request.new Method.GET "http://httpbin.org/get" . with_header "X-Trace-Id" "00000"
             res = Http.new.request req
             res.body

       > Example
         Open a connection and send a POST request with form.
             req = Request.post "http://httpbin.org/post" . with_form [Form.text_field "key" "value"] . with_header "X-Trace-Id" "123456789"
             res = http.new.request req
             res.code

       > Example
         Send a POST request with urlencoded form data.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             req = Request.post "http://httpbin.org/post" . with_form form
             Http.new.request req

       > Example
         Send a POST request with form encoded as "multipart/form-data".
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             req = Request.post "http://httpbin.org/post" . with_form form . with_headers [Header.multipart_form_data]
             Http.new.post req

       > Example
         Configure http client and send a POST request with form.
             form = [Form.text_field "name" "John Doe"]
             req = Request.new Method.POST "http://httpbin.org/post" . with_form form
             http = Http.new (timeout = 30.seconds) (proxy = Proxy.new "proxy.example.com:80")
             http.request req
    request : Request -> Response
    request req =
        body_publishers = Polyglot.get_member HttpRequest "BodyPublishers"
        builder = HttpRequest.newBuilder []
        # set uri
        builder.uri [req.uri.internal_uri]
        # prepare headers and body
        req_with_body = case req.body of
            Request_Body.Empty ->
                Pair req (body_publishers.noBody [])
            Request_Body.Text text ->
                builder.header [Header.text_plain.name, Header.text_plain.value]
                Pair req (body_publishers.ofString [text])
            Request_Body.Json json ->
                builder.header [Header.application_json.name, Header.application_json.value]
                Pair req (body_publishers.ofString [json.to_text])
            Request_Body.Form form ->
                add_multipart form =
                    body_builder = Http_Utils.multipart_body_builder []
                    form.parts.map part-> case part.value of
                        Form.Part_Text text -> body_builder.add_part_text [part.key, text]
                        Form.Part_File file -> body_builder.add_part_file [part.key, file.path]
                    boundary = body_builder.get_boundary []
                    Pair (req.with_headers [Header.multipart_form_data boundary]) (body_builder.build [])
                add_urlencoded form =
                    body_builder = Http_Utils.urlencoded_body_builder []
                    form.parts.map part-> case part.value of
                        Form.Part_Text text -> body_builder.add_part_text [part.key, text]
                        Form.Part_File file -> body_builder.add_part_file [part.key, file.path]
                    Pair req (body_builder.build [])
                if req.headers.contains Header.multipart_form_data then add_multipart form else
                    add_urlencoded form
        case req_with_body of
            Pair req body ->
                # set method and body
                builder.method [req.method.to_text, body]
                # set headers
                req.headers.map h-> builder.header [h.name, h.value]
        http_request = builder.build []
        body_handler = Polyglot.get_member HttpResponse "BodyHandlers" . ofByteArray []
        Response.response (this.internal_http_client.send [http_request, body_handler])

    ## PRIVATE

       Build an HTTP client.
    internal_http_client : HttpClient
    internal_http_client =
        builder = HttpClient.newBuilder []
        # timeout
        if this.timeout.is_date then Error.throw (Time.time_error "Connection timeout does not support date intervals") else builder.connectTimeout [this.timeout.internal_duration]
        # auth
        case this.auth of
            Auth.Basic_Auth user pass -> builder.authenticator [Http_Utils.basic_authenticator [user, pass]]
            Auth.None -> Unit
        # redirect
        redirect = Polyglot.get_member HttpClient "Redirect"
        redirect_policy = case this.follow_redirects of
            True -> case this.auth of
                Auth.None -> Polyglot.get_member redirect "ALWAYS"
                _ -> Polyglot.get_member redirect "NORMAL"
            False -> Polyglot.get_member redirect "NEVER"
        builder.followRedirects [redirect_policy]
        # proxy
        case this.proxy of
            Proxy.Proxy_Addr proxy_host proxy_port ->
                proxy_selector = ProxySelector.of [InetSocketAddress.new [proxy_host, proxy_port].to_array]
                Polyglot.invoke builder "proxy" [proxy_selector].to_array
            Proxy.System ->
                proxy_selector = ProxySelector.getDefault []
                Polyglot.invoke builder "proxy" [proxy_selector].to_array
            Proxy.None ->
                Unit
        # version
        http_client_version = Polyglot.get_member HttpClient "Version"
        case this.version of
            Version.Http_1_1 ->
                Polyglot.invoke builder "version" [http_client_version.valueOf ["HTTP_1_1"]].to_array
            Version.Http_2 ->
                Polyglot.invoke builder "version" [http_client_version.valueOf ["HTTP_2"]].to_array
        # build http client
        builder.build []

## Create a new instance of HTTP client.

   > Example
     Create an HTTP client with default settings.
         Http.new

   > Example
     Create an HTTP client with extended timeout.
         Http.new timeout=30.seconds

   > Example
     Create an HTTP client with extended timeout and proxy settings.
         Http.new (timeout = 30.seconds) (proxy = Proxy.new "example.com" 8080)
new : Duration -> Auth -> Boolean -> Proxy -> Http
new (timeout = 10.seconds) (auth = Auth.None) (follow_redirects = True) (proxy = Proxy.System) (version = Version.Http_1_1) =
    Http timeout auth follow_redirects proxy version
