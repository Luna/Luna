from Base import all
import Base.Net.Proxy
import Base.Net.Uri
import Base.Net.Http.Auth
import Base.Net.Http.Request
import Base.Net.Http.Request.Body as Request_Body
import Base.Net.Http.Response
import Base.Time.Duration
import Base.Time.Time

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.net.InetSocketAddress
polyglot java import java.net.ProxySelector
polyglot java import java.net.URI
polyglot java import java.net.http.HttpClient
polyglot java import java.net.http.HttpRequest
polyglot java import java.net.http.HttpResponse
polyglot java import org.enso.base.Http_Utils

type Http

    type Http internal_http_client

    # Methods

    ## Send an OPTIONS request.
    options : Uri.To_Uri -> Response

    ## Send a GET request.

       > Example
         Send a GET request.
             Http.new . get "http://httpbin.org/get"

       > Example
         Authenticated GET request.
             http = Http.new . with_basic_auth "user" "pass"
             http.get "https://httpbin.org/basic-auth/user/pass"
    get : To_Uri -> Vector -> Response
    get addr (headers = []) =
        builder = HttpRequest.newBuilder [] . uri [addr.to_uri.internal_uri]
        headers.map h-> builder.header [h.name, h.value]
        req = builder.build []
        body_handler = Polyglot.get_member HttpResponse "BodyHandlers" . ofByteArray []
        res = this.internal_http_client.send [req, body_handler]
        Response.response res

    ## Send a HEAD request
    head : Uri.To_Uri -> Response

    ## Send a POST request with form encoded as
       "application/x-www-form-urlencoded".

       > Example
         Send a POST request with form.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             Http.new.post_form "http://httpbin.org/post" form

       > Example
         Configure http client and send a POST request.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             http = Http.new . with_basic_auth "user" "pass"
             http.post_form "http://httpbin.org/post" form
    post_form : Uri.To_Uri -> Form.To_Form -> Response

    ## Send a POST request with body encoded as "application/json".

       > Example
         Send a POST request with json data.
             Http.new.post_json "http://httpbin.org/post" "{\"key\": \"val\"}"
    post_json : Uri.To_Uri -> Any -> Response

    ## Send a PUT request with body encoded as "application/json".

       > Example
         Send a PUT request with json data.
             Http.new.put_json "http://httpbin.org/post" "{\"key\": \"val\"}"
    put_json : Uri.To_Uri -> Any -> Response

    ## Create a DELETE request.
    delete : Uri.To_Uri -> Response

    ## Create a TRACE request.
    trace : Uri.To_Uri -> Response

    ## Create a CONECT request.
    connect : Uri.To_Uri -> Response

    ## Create a request

       > Example
         Send a GET request with headers.
             req = Request.new Method.GET "http://httpbin.org/get" . with_header "X-Trace-Id" "00000"
             Http.new . request req

       > Example
         Open a connection and send a POST request.
                 req = Request.post "http://httpbin.org/post" . with_body [Request.Part "key" "value"] . with_header "X-Trace-Id" "123456789"
                 res = http.new.request req
                 res.code

       > Example
         Send a POST request with urlencoded form data.
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             req = Request.post "http://httpbin.org/post" . with_form form
             Http.new.request req

       > Example
         Send a POST request with form encoded as "multipart/form-data".
             form = [Form.text_field "name" "John Doe", Form.file_field "license.txt" (Enso_Project.root / "LICENSE")]
             req = Request.post "http://httpbin.org/post" . with_form form . with_headers [Header.multipart_form_data]
             Http.new.post req

       > Example
         Configure http client and send a POST request with form.
             form = [Form.text_field "name" "John Doe"]
             req = Request.new Method.POST "http://httpbin.org/post" . with_form form
             http = Http.new (timeout = 30.seconds) (proxy = Proxy.new "proxy.example.com:80")
             http.request req
    request : Request -> Response

    # Settings

    ## Get connection timeout settng.
    timeout : Duration

    ## Get authentication settings.
    auth : Auth

    ## Get follow_redirects setting.
    follow_redirects : Boolean

    ## Get proxy setting.
    proxy : Proxy

    # Builder

    ## Set basic_auth setting.

       > Example
         Create client with basic_auth setting.
             Http.new . with_basic_auth "user" "pass"
    with_basic_auth : Text -> Text -> Http

    ## Set connection timeout.
    with_timeout : Duration -> Config

    ## Set follow_redirects setting.
    with_follow_redirects : Boolean -> Config

    ## Set proxy setting.
    with_proxy : Proxy -> Config

new : Duration -> Auth -> Boolean -> Proxy -> Http
new (timeout = 10.seconds) (auth = Auth.None) (follow_redirects = True) (proxy_addr = Proxy.System) =
    builder = HttpClient.newBuilder []
    # timeout
    if timeout.is_date then Error.throw Time.time_error "Connection timeout does not support date intervals" else builder.connectTimeout [timeout.internal_duration]
    # auth
    case auth of
        Auth.Basic_Auth user pass -> builder.authenticator(Http_Utils.basic_authenticator [user, pass])
        Auth.None -> Unit
    # redirect
    redirect = Polyglot.get_member HttpClient "Redirect"
    redirect_policy = case follow_redirects of
        True -> case auth of
            Auth.None -> Polyglot.get_member redirect "ALWAYS"
            _ -> Polyglot.get_member redirect "NORMAL"
        False -> Polyglot.get_member redirect "NEVER"
    builder.followRedirects [redirect_policy]
    # proxy
    case proxy_addr of
        Proxy.Proxy_Addr proxy_host proxy_port ->
            proxy_selector = ProxySelector.of [InetSocketAddress.new [proxy_host, proxy_port].to_array]
            builder.proxy [proxy_selector]
        Proxy.System ->
            proxy_selector = ProxySelector.getDefault []
            builder.proxy [proxy_selector]
        Proxy.None ->
            Unit

    Http (builder.build [])
