from Base import all
import Base.Time.Local_Date
import Base.Time.Local_Time
import Base.Time.Local_Date_Time
import Base.Time.Zone_Offset

polyglot java import java.time.Instant
polyglot java import java.time.OffsetDateTime
polyglot java import java.time.ZoneOffset

## `Offset_Date_Time` is an immutable representation of a date-time with an
   offset. This class stores all date and time fields, to a precision of
   nanoseconds, as well as the offset from UTC/Greenwich. For example, the value
   "2nd October 2007 at 13:45:30.123456789 +02:00" can be stored in an
   `Offset_Date_Time`.

   `Offset_Date_Time`, `Zoned_Date_Time` and `Instant` all store an instant on
   the time-line to nanosecond precision. `Instant` is the simplest, simply
   representing the instant. `Offset_Date_Time` adds to the instant the offset
   from UTC/Greenwich, which allows the local date-time to be
   obtained. `Zoned_Date_Time` adds full time-zone rules.

type Offset_Date_Time internal_offset_date_time

## Return the internal temporal object.
Offset_Date_Time.internal_temporal : Temporal
Offset_Date_Time.internal_temporal = this.internal_offset_date_time

## Gets the `Local_Date` part of this date-time.
Offset_Date_Time.to_local_date : Local_Date
Offset_Date_Time.to_local_date = Local_Date.local_date (this . internal_offset_date_time . toLocalDate [])

## Gets the `Local_Time` part of this date-time.
Offset_Date_Time.to_local_time : Local_Time
Offset_Date_Time.to_local_time = Local_Time.local_time (this . internal_offset_date_time . toLocalTime [])

## Gets the `Local_Date_Time` part of this date-time.
Offset_Date_Time.to_local_date_time : Local_Date_Time
Offset_Date_Time.to_local_date_time = Local_Date_Time.local_date_time (this . internal_offset_date_time . toLocalDateTime [])

## Return the number of seconds from Unix epoch.
Offset_Date_Time.to_epoch_second : Integer
Offset_Date_Time.to_epoch_second = this . internal_offset_date_time . toEpochSecond []
## Obtains an instance of `Offset_Date_Time` from a text string such as
   2007-12-03T10:15:30+01:00.

   The string must represent a valid date-time and is parsed using the ISO-8601
   extended offset date-time format. The format consists of:

   - The ISO local date time.
   - The offset ID. If the offset has seconds then they will be handled even
     though this is not part of the ISO-8601 standard. The offset parsing is
     lenient, which allows the minutes and seconds to be optional. Parsing is
     case insensitive.

   > Example
     Parse offset date time in UTC time zone.
         Offset_Date_Time.parse "2007-12-03T10:15:30Z"

   > Example
     Parse offset date time in -1h time zone.
         Offset_Date_Time.parse "2007-12-03T10:15:30-01:00"
parse : Text -> Offset_Date_Time
parse fmt = Offset_Date_Time (OffsetDateTime.parse [fmt])

## Obtains the current date-time from the system clock in the default time-zone.
now : Offset_Date_Time
now = Offset_Date_Time (OffsetDateTime.now [])

## Obtains an instance of `OffsetDateTime` from an `Instant` and `ZoneOffset`.

   > Example
     Get offset date time now in the -03:00 time zone.
         Offset_Date_Time.of_instant Instant.now (ZoneOffset.new -3)
of_instant : Instant -> Zone_Offset -> Zoned_Date_Time
of_instant instant offset = instant.at_offset offset

## Obtains an instance of `Offset_Date_Time` from a year, month, day, hour, minute,
   second, nanosecond and offset.

   The day must be valid for the year and month, otherwise an exception will be
   thrown.

   - month - the month-of-year to represent, from 1 (January) to 12 (December)
   - dayOfMonth - the day-of-month to represent, from 1 to 31
   - hour - the hour-of-day to represent, from 0 to 23
   - minute - the minute-of-hour to represent, from 0 to 59
   - second - the second-of-minute to represent, from 0 to 59
   - nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
   - offset - the zone offset, not null

   > Example
     Create a new offset date time at Unix epoch.
         Offset_Date_Time.new

   > Example
     Get the offset date time of 21th December 1992 at 16:30 UTC time.
         Offset_Date_Time.new 1992 12 21 16 30
new : Number -> Number -> Number -> Number -> Number -> Number -> Number -> Zone_Offset -> Offset_Date_Time
new (year = 1970) (month = 1) (day = 1) (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) (offset = Zone_Offset.utc) =
    Offset_Date_Time (OffsetDateTime.of [year, month, day, hour, minute, second, nanosecond, offset.internal_zone_offset])
