from Base import all
import Base.Time
import Base.Time.Date
import Base.Time.Duration
import Base.Time.Zone

polyglot java import java.time.Instant
polyglot java import java.time.LocalTime

type Time_Of_Day

    ## `Time_Of_Day` is an immutable date-time object that represents a time,
       often viewed as hour-minute-second. Time is represented to nanosecond
       precision. For example, the value "13:45.30.123456789" can be stored in a
       `Time_Of_Day`.
    type Time_Of_Day internal_local_time

    ## Get the hour of day field.
    get_hour : Integer
    get_hour = this . internal_local_time . getHour []

    ## Get the minute of hour field.
    get_minute : Integer
    get_minute = this . internal_local_time . getMinute []

    ## Get the second of minute field.
    get_second : Integer
    get_second = this . internal_local_time . getSecond []

    ## Get the nanosecond of second field.
    get_nano : Integer
    get_nano = this . internal_local_time . getNano []

    ## Get the nanosecond of second field.
    get_nanosecond : Integer
    get_nanosecond = this.get_nano

    ## Extracts the time as the number of seconds, from 0 to 24 * 60 * 60 - 1.
    to_seconds : Integer
    to_seconds = this . internal_local_time . toSecondOfDay []

    ## Combine this time of day with a date to create a point in time.
    to_time : Date -> Zone -> Time
    to_time date (zone = Zone.system) = Time.time (this . internal_local_time . atDate [date.internal_local_date] . atZone [zone.internal_zone_id])
    ## Add specified amount of time to this instant.

       > Example
         Add 15 minutes to a local time.
             Time_Of_Day.new.plus 15.minutes
    plus : Duration -> Time_Of_Day
    plus amount = if amount.is_date then Error.throw (Time.Error "Time_Of_Day does not support date intervals") else Time_Of_Day (this . internal_local_time . plus [amount.interval_duration])

    ## Subtract specified amount of time to this instant.

       > Example
         Subtract 3 hours from a local time.
             Time_Of_Day.new.minus 3.hours
    minus : Duration -> Time_Of_Day
    minus amount = if amount.is_date then Error.throw (Time.Error "Time_Of_Day does not support date intervals") else Time_Of_Day (this . internal_local_time . minus [amount.interval_duration])

## Obtains an instance of `LocalTime` from a text string such as 10:15.

   The string must represent a valid time and is parsed using the ISO-8601
   extended local time format. The format consists of:

   - Two digits for the hour-of-day. This is pre-padded by zero to ensure two
     digits.
   - A colon
   - Two digits for the minute-of-hour. This is pre-padded by zero to ensure two
     digits.
   - If the second-of-minute is not available then the format is complete.
   - A colon
   - Two digits for the second-of-minute. This is pre-padded by zero to ensure
     two digits.
   - If the nano-of-second is zero or not available then the format is complete.
   - A decimal point
   - One to nine digits for the nano-of-second. As many digits will be output as
     required.

   > Example
     Get the time 15:05:30.
         Time_Of_Day.parse "15:05:30"
parse : Text -> Time_Of_Day
parse text = Time_Of_Day (LocalTime.parse [text])

## Obtains the current time from the system clock in the default time-zone.
now : Time_Of_Day
now = Time_Of_Day (LocalTime.now [])

## Obtains an instance of `Time_Of_Day` from an hour, minute, second and nanosecond.

   - hour - the hour-of-day to represent, from 0 to 23
   - minute - the minute-of-hour to represent, from 0 to 59
   - second - the second-of-minute to represent, from 0 to 59
   - nanosecond - the nano-of-second to represent, from 0 to 999,999,999

   > Example
     Create a new local time at Unix epoch.
         Time_Of_Day.new

   > Example
     Get the local time at 9:30.
         Time_Of_Day.new 9 30
new : Integer -> Integer -> Integer -> Integer -> Time_Of_Day
new (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) =
    Time_Of_Day (LocalTime.of [hour, minute, second, nanosecond])
