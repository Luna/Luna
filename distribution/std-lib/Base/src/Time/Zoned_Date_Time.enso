## `ZonedDateTime` is an immutable representation of a date-time with a
   time-zone. This class stores all date and time fields, to a precision of
   nanoseconds, and a time-zone, with a zone offset used to handle ambiguous
   local date-times. For example, the value "2nd October 2007 at
   13:45.30.123456789 +02:00 in the Europe/Paris time-zone" can be stored in a
   `ZonedDateTime`.

   This class handles conversion from the local time-line of `LocalDateTime` to
   the instant time-line of Instant. The difference between the two time-lines
   is the offset from UTC/Greenwich, represented by a `ZoneOffset`.

from Base import all
import Base.Time.Zone_Id

polyglot java import java.time.Instant
polyglot java import java.time.ZonedDateTime
polyglot java import java.time.ZoneId


## Obtains an instance of `ZonedDateTime` from a text string such as
   2007-12-03T10:15:30+01:00[Europe/Paris].

   The string must represent a valid date-time and is parsed using the ISO-8601
   extended offset date-time format to add the time-zone. The section in square
   brackets is not part of the ISO-8601 standard. The format consists of:

   - The ISO offset date time.
   - If the zone ID is not available or is a `ZoneOffset` then the format is
     complete.
   - An open square bracket '['.
   - The zone ID. This is not part of the ISO-8601 standard. Parsing is case
     sensitive.
   - A close square bracket ']'.

   > Example
     Parse New York time.
         Zoned_Date_Time.parse "2020-10-01T04:11:12-04:00"

   > Example
     Parse New York time with optional time zone in square brackets.
         Zoned_Date_Time.parse "2020-10-01T04:11:12-04:00[America/New_York]"

   > Example
     Parse New York time with nanoseconds.
         Zoned_Date_Time.parse "2020-10-01T04:11:12.177528-04:00"
parse : Text -> ZonedDateTime
parse fmt = ZonedDateTime.parse [fmt]

## Obtains the current date-time from the system clock in the default time-zone.
now : ZonedDateTime
now = ZonedDateTime.now []

## Obtains an instance of `ZonedDateTime` from an instant and zone ID.
of_instant : Instant -> ZoneId -> ZonedDateTime
of_instant instant zone_id = instant.atZone [zone_id]

## Obtains an instance of `ZonedDateTime` from a year, month, day, hour, minute,
   second, nanosecond and time-zone.

   The day must be valid for the year and month, otherwise an exception will be
   thrown.

   - month - the month-of-year to represent, from 1 (January) to 12 (December)
   - day - the day-of-month to represent, from 1 to 31
   - hour - the hour-of-day to represent, from 0 to 23
   - minute - the minute-of-hour to represent, from 0 to 59
   - second - the second-of-minute to represent, from 0 to 59
   - nanosecond - the nano-of-second to represent, from 0 to 999,999,999
   - zone - the time-zone

   > Example
     Create a new zoned date time at Unix epoch.
         Zoned_Date_Time.new

   > Example
     Get the 5 August 1986 at midnight UTC.
         Zoned_Date_Time.new 1986 8 5
new : Number -> Number -> Number -> Number -> Number -> Number -> Number -> ZoneId -> ZonedDateTime
new (year = 1970) (month = 1) (day = 1) (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) (offset = Zone_Id.utc) =
    ZonedDateTime.of [year, month, day, hour, minute, second, nanosecond, offset]
