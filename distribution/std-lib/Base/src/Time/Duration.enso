from Base import all
import Base.Time.Time

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.Period as Java_Period

type Duration

    type Duration interval_period interval_duration

    plus : Duration -> Duration
    plus other = Duration (this.interval_period . plus [other.interval_period]) (this.interval_duration . plus [other.interval_duration])

    minus : Duration -> Duration
    minus other = Duration (this.interval_period . minus [other.interval_period]) (this.interval_duration . minus [other.interval_duration])

    get_nanos : Integer
    get_nanos = this.interval_duration . toNanosPart []

    get_millis : Integer
    get_millis = this.interval_duration . toMillisPart []

    get_seconds : Integer
    get_seconds = this.interval_duration . toSecondsPart []

    get_minutes : Integer
    get_minutes = this.interval_duration . toMinutesPart []

    get_hours : Integer
    get_hours = this.interval_duration . toHours []

    get_days : Integer
    get_days = this.interval_period . getDays []

    get_months : Integer
    get_months = this.interval_period . getMonths []

    get_years : Integer
    get_years = this.interval_period . getYears []

    to_vector = [this.get_years, this.get_months, this.get_days, this.get_hours, this.get_minutes, this.get_seconds, this.get_nanos]

    is_date : Boolean
    is_date = (not this.get_years==0) || (not this.get_months==0) || (not this.get_days==0)

    is_time : Boolean
    is_time = (not this.get_hours==0) || (not this.get_minutes==0) || (not this.get_seconds==0) || (not this.get_nanos==0)

    is_empty : Boolean
    is_empty = (not this.is_date) && (not this.is_time)

## Duration in nanoseconds.
Integer.nano : Duration
Integer.nano = Duration (Java_Period.ofDays [0]) (Java_Duration.ofNanos [this])

## Duration in nanoseconds.
Integer.nanos : Duration
Integer.nanos = this.nano

## Duration in nanoseconds.
Integer.nanosecond : Duration
Integer.nanosecond = this.nano

## Duration in nanoseconds.
Integer.nanoseconds : Duration
Integer.nanoseconds = this.nano

## Duration in milliseconds.
Integer.milli : Duration
Integer.milli = Duration (Java_Period.ofDays [0]) (Java_Duration.ofMillis [this])

## Duration in milliseconds.
Integer.millis : Duration
Integer.millis = this.milli

## Duration in milliseconds.
Integer.millisecond : Duration
Integer.millisecond = this.milli

## Duration in milliseconds.
Integer.milliseconds : Duration
Integer.milliseconds = thils.milli

Integer.second : Duration
Integer.second = Duration (Java_Period.ofDays [0]) (Java_Duration.ofSeconds [this])

Integer.seconds : Duration
Integer.seconds = this.second

Integer.minute : Duration
Integer.minute = Duration (Java_Period.ofDays [0]) (Java_Duration.ofMinutes [this])

Integer.minutes : Duration
Integer.minutes = this.minute

Integer.hour : Duration
Integer.hour = Duration (Java_Period.ofDays [0]) (Java_Duration.ofHours [this])

Integer.hours : Duration
Integer.hours = this.hour

Integer.day : Duration
Integer.day = Duration (Java_Period.ofDays [this]) (Java_Duration.ofSeconds [0])

Integer.days : Duration
Integer.days = this.day

Integer.month : Duration
Integer.month = Duration (Java_Period.ofMonths [this]) (Java_Duration.ofSeconds [0])

Integer.months : Duration
Integer.months = this.month

Integer.year : Duration
Integer.year = Duration (Java_Period.ofYears [this]) (Java_Duration.ofSeconds [0])

Integer.years : Duration
Integer.years = this.year

## Obtain an interval representing the duration between two temporal objects.

   > Example
     An hour interval between two points in time.
         Duration.between Time.now Time.now
between : Time -> Time -> Duration
between start_inclusive end_exclusive =
   Duration (Java_Period.ofDays [0]) (Java_Duration.between [start_inclusive.internal_zoned_date_time, end_exclusive.internal_zoned_date_time])
