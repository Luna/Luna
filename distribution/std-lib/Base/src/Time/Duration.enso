from Base import all
import Base.Time.Duration.Extensions
import Base.Time.Temporal

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.temporal.TemporalAmount

from Base.Time.Duration.Extensions export all hiding Java_Duration

## This class models a quantity or amount of time in terms of seconds
   and nanoseconds.

   It can be accessed using other duration-based units, such as minutes and
   hours. In addition, the DAYS unit can be used and is treated as exactly equal
   to 24 hours, thus ignoring daylight savings effects. See `Period` for the
   date-based equivalent to this class.
type Duration internal_duration

## Return the internal temporal amount.
Duration.internal_temporal_amount : TemporalAmount
Duration.internal_temporal_amount = this . internal_duration

## Gets the number of seconds in this duration.
Duration.to_seconds : Integer
Duration.to_seconds = this . internal_duration . toSeconds []

## Gets the number of minutes in this duration.
Duration.to_minutes : Integer
Duration.to_minutes = this . internal_duration . toMinutes []

## Gets the number of hours in this duration.
Duration.to_hours : Integer
Duration.to_hours = this . internal_duration . toHours []

## Gets the number of days in this duration.
Duration.to_days : Integer
Duration.to_days = this . internal_duration . toDays []

## Add specified amount of time to this duration.

   > Example
     Add 1 minute to an hour.
         1.hour.plus 1.minute
Duration.plus : Duration -> Duration
Duration.plus other = Duration (this . internal_duration . plus [other.internal_duration])

## Add specified amount of time to this duration.

   > Example
     Subtract 1 second from a minute.
         1.minute.minus 1.second
Duration.minus : Duration -> Duration
Duration.minus other = Duration (this . internal_duration . minus [other.internal_duration])

## Obtains a `Duration` from a text string such as PnDTnHnMn.nS.

   This will parse a textual representation of a duration, including the string
   produced by `to_text`. The formats accepted are based on the ISO-8601
   duration format PnDTnHnMn.nS with days considered to be exactly 24 hours.

   > Example
     Duration of 20.345 seconds.
         Duration.parse "PT20.345S"

   > Example
     Duration of 15 minutes.
         Duration.parse "PT15M"

   > Example
     Duration of 10 hours.
         Duration.parse "PT10H"

   > Example
     Duration of 2 days.
         Duration.parse "P2D"

   > Example
     Duration of 2 days, 3 hours and 4 minutes.
         Duration.parse "P2DT3H4M"

   > Example
     Duration of -6 hours and +3 minutes.
         Duration.parse "PT-6H3M"

   > Example
     Duration of -6 hours and -3 minutes.
         Duration.parse "-PT6H3M"

   > Example
     Duration of +6 hours and -3 minutes.
         Duration.parse "-PT-6H+3M"
parse : Text -> Duration
parse text = Duration (Java_Duration.parse [text])

## Obtains a Duration representing the duration between two temporal objects.

   > Example
     Duration in hour between two local times.
         Duration.between (Local_Time.new 0) (Local_Time.new 1)
between : Temporal -> Temporal -> Duration
between start_inclusive end_exclusive =
   Duration (Java_Duration.between [start_inclusive.internal_temporal, end_exclusive.internal_temporal])
