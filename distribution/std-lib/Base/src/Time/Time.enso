from Base import all
import Base.Time.Date
import Base.Time.Duration
import Base.Time.Time_Of_Day
import Base.Time.Zone

polyglot java import java.time.ZonedDateTime
polyglot java import java.time.format.DateTimeFormatter
polyglot java import org.enso.base.Time_Utils

## Error produced while working with time.
type Error error_message

type Time

    ## A date-time with a time-zone in the ISO-8601 calendar system, such as
       "2007-12-03T10:15:30+01:00 Europe/Paris".

       Time is a representation of a date-time with a time-zone. This class
       stores all date and time fields, to a precision of nanoseconds, and a
       time-zone, with a zone offset used to handle ambiguous local
       date-times.

       For example, the value "2nd October 2007 at 13:45.30.123456789 +02:00 in
       the Europe/Paris time-zone" can be stored as Time.
    type Time internal_zoned_date_time

    ## Get the year field.
    get_year : Integer
    get_year = this . internal_zoned_date_time . getYear []

    ## Get the month of year field from 1 to 12.
    get_month : Integer
    get_month = this . internal_zoned_date_time . getMonthValue []

    ## Get the day of month field.
    get_day : Integer
    get_day = this . internal_zoned_date_time . getDayOfMonth []

    ## Get the hour of day field.
    get_hour : Integer
    get_hour = this . internal_zoned_date_time . getHour []

    ## Get the minute of hour field.
    get_minute : Integer
    get_minute = this . internal_zoned_date_time . getMinute []

    ## Get the second of minute field
    get_second : Integer
    get_second = this . internal_zoned_date_time . getSecond []

    ## Get the nano-of-second field.
    get_nano : Integer
    get_nano = this . internal_zoned_date_time . getNano []

    ## Get the nano-of-second field.
    get_nanosecond : Integer
    get_nanosecond = this . get_nano

    ## Get the timezone.
    get_zone : Zone
    get_zone = Zone.zone (this . internal_zoned_date_time . getZone [])

    ## Return the number of seconds from the Unix epoch.
    to_epoch_second : Integer
    to_epoch_second = this . internal_zoned_date_time . toEpochSecond []

    ## Return the number of milliseconds from the Unix epoch.
    to_epoch_milli : Integer
    to_epoch_milli = this . internal_zoned_date_time . toInstant [] . toEpochMilli []

    ## Convert this point in time to time of day.
    to_time_of_day : Time_Of_Day
    to_time_of_day = Time_Of_Day.time_of_day (this . internal_zoned_date_time . toLocalTime [])

    ## Convert this point in time to date.
    to_date : Date
    to_date = Date.date (this . internal_zoned_date_time . toLocalDate [])

    ## Convert the time instant to a provided timezone.

       > Example
         Convert time instance to -04:00 time zone.
             Time.new 2020 . at_zone (Zone.new -4)
    at_zone : Zone -> Time
    at_zone zone = Time (this.internal_zoned_date_time . withZoneSameInstant [zone.internal_zone_id])

    ## Add specified amount of time to this instant.

       > Example
         Add 1 hour to a zoned date time.
             Time.new 2020 . plus 1.hour

       > Example
         Add 15 years and 3 hours to a zoned date time.
             Time.new 2020 . plus 15.years . plus 3.hours
    plus : Duration -> Time
    plus amount = Time (this . internal_zoned_date_time . plus [amount.interval_period] . plus [amount.interval_duration])

    ## Subtract specified amount of time to this instant.

       > Example
         Subtract 10 days from a zoned date time.
             Time.new 2020 . minus 10.days

       > Example
         Subtract 1 year and 9 months from a zoned date time.
             Time.new 2020 . minus 1.year . minus 9.months
    minus : Duration -> Time
    minus amount = Time (this . internal_zoned_date_time . minus [amount.interval_period] . minus [amount.interval_duration])

    ## Format this time using the default formatter.
    to_text : Text
    to_text = Time_Utils.default_time_formatter [] . format [this.internal_zoned_date_time]

    ## Format this time using formatter string.
    format : Text -> Text
    format pattern = DateTimeFormatter.ofPattern [pattern] . format [this.internal_zoned_date_time]

## Obtains an instance of `Time` from a text string such as
   2007-12-03T10:15:30Z.

   The string must represent a valid date-time and is parsed using the ISO-8601
   extended offset date-time format to add the timezone. The section in square
   brackets is not part of the ISO-8601 standard. The format consists of:

   - The ISO offset date time.
   - If the zone ID is not available or is a zone offset then the format is
     complete.
   - An open square bracket '['.
   - The zone ID. This is not part of the ISO-8601 standard. Parsing is case
     sensitive.
   - A close square bracket ']'.

   > Example
     Parse UTC time.
         Time.parse "2020-10-01T04:11:12Z"

   > Example
     Parse UTC-04:00 time.
         Time.parse "2020-10-01T04:11:12-04:00"

   > Example
     Parse UTC-04:00 time specifying New York time zone.
         Time.parse "2020-10-01T04:11:12-04:00[America/New_York]"

   > Example
     Parse UTC-04:00 time with nanoseconds.
         Time.parse "2020-10-01T04:11:12.177528-04:00"
parse : Text -> Time
parse text = Time (Time_Utils.parse_time [text])

## Obtains the current date-time from the system clock in the default time-zone.
now : Time
now = Time (ZonedDateTime.now [])

## Obtains an instance of `Time` from a year, month, day, hour, minute,
   second, nanosecond and timezone.

   The day must be valid for the year and month, otherwise an exception will be
   thrown.

   - month - the month-of-year to represent, from 1 (January) to 12 (December)
   - day - the day-of-month to represent, from 1 to 31
   - hour - the hour-of-day to represent, from 0 to 23
   - minute - the minute-of-hour to represent, from 0 to 59
   - second - the second-of-minute to represent, from 0 to 59
   - nanosecond - the nano-of-second to represent, from 0 to 999,999,999
   - zone - the timezone

   > Example
     Create a new zoned date time at Unix epoch.
         Time.new 1970 (zone = Zone.utc)

   > Example
     Get the 5 August 1986 at midnight.
         Time.new 1986 8 5
new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Zone -> Time
new year (month = 1) (day = 1) (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) (zone = Zone.system) =
    Time (ZonedDateTime.of [year, month, day, hour, minute, second, nanosecond, zone.internal_zone_id])
