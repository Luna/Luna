from Base import all
import Base.Time.Zone_Offset

polyglot java import java.time.Instant
polyglot java import java.time.LocalTime
polyglot java import java.time.ZoneOffset
polyglot java import java.time.temporal.Temporal

## `Local_Time` is an immutable date-time object that represents a time, often
   viewed as hour-minute-second. Time is represented to nanosecond
   precision. For example, the value "13:45.30.123456789" can be stored in a
   `LocalTime`.

   This class does not store or represent a date or time-zone. Instead, it is a
   description of the local time as seen on a wall clock. It cannot represent an
   instant on the time-line without additional information such as an offset or
   time-zone

type Local_Time internal_local_time

## Return the internal temporal object.
Local_Time.internal_temporal : Temporal
Local_Time.internal_temporal = this.internal_local_time

## Get the hour of day field.
Local_Time.get_hour : Integer
Local_Time.get_hour = this . internal_local_time . getHour []

## Get the minute of hour field.
Local_Time.get_minute : Integer
Local_Time.get_minute = this . internal_local_time . getMinute []

## Get the second of minute field
Local_Time.get_second : Integer
Local_Time.get_second = this . internal_local_time . getSecond []

## Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.
Local_Time.to_second_of_day : Integer
Local_Time.to_second_of_day = this . internal_local_time . toSecondOfDay []

## Obtains an instance of `LocalTime` from a text string such as 10:15.

   The string must represent a valid time and is parsed using the ISO-8601
   extended local time format. The format consists of:

   - Two digits for the hour-of-day. This is pre-padded by zero to ensure two
     digits.
   - A colon
   - Two digits for the minute-of-hour. This is pre-padded by zero to ensure two
     digits.
   - If the second-of-minute is not available then the format is complete.
   - A colon
   - Two digits for the second-of-minute. This is pre-padded by zero to ensure
     two digits.
   - If the nano-of-second is zero or not available then the format is complete.
   - A decimal point
   - One to nine digits for the nano-of-second. As many digits will be output as
     required.

   > Example
     Get the time 15:05:30.
         Local_Time.parse "15:05:30"
parse : Text -> Local_Time
parse text = Local_Time (LocalTime.parse [text])

## Obtains the current time from the system clock in the default time-zone.
now : Local_Time
now = Local_Time (LocalTime.now [])

## Obtains an instance of LocalTime from an Instant and zone offset.

  > Example
    Get local time now in the UTC time zone.
       Local_Time.of_instant Instant.now Zone_Offset.utc
of_instant : Instant -> Zone_Offset -> Local_Time
of_instant instant offset =
    offset_time = instant.at_offset offset
    local_time = offset_time.to_local_time
    local_time

## Obtains an instance of `Local_Time` from an hour, minute, second and nanosecond.

   - hour - the hour-of-day to represent, from 0 to 23
   - minute - the minute-of-hour to represent, from 0 to 59
   - second - the second-of-minute to represent, from 0 to 59
   - nanosecond - the nano-of-second to represent, from 0 to 999,999,999

   > Example
     Create a new local time at Unix epoch.
         Local_Time.new

   > Example
     Get the local time at 9:30.
         Local_Time.new 9 30
new : Number -> Number -> Number -> Number -> Local_Time
new (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) =
    Local_Time (LocalTime.of [hour, minute, second, nanosecond])
