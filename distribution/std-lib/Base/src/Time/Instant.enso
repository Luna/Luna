## An instantaneous point on the time-line. This class models a single
   instantaneous point on the time-line. This might be used to record event
   time-stamps in the application.

from Base import all
import Base.Time.Offset_Date_Time
import Base.Time.Duration
import Base.Time.Zoned_Date_Time
import Base.Time.Zone_Offset
import Base.Time.Zone_Id

polyglot java import java.time.temporal.Temporal
polyglot java import java.time.Instant as Java_Instant
polyglot java import java.time.OffsetDateTime
polyglot java import java.time.ZoneOffset

type Instant internal_instant

## Return the internal temporal object.
Instant.internal_temporal : Temporal
Instant.internal_temporal = this.internal_instant

## Return the number of milliseconds from the Unix epoch.
Instant.to_epoch_milli : Integer
Instant.to_epoch_milli = this . internal_instant . toEpochMilli []

## Add specified amount of time to this instant.
Instant.plus : Duration -> Instant
Instant.plus amount = Instant (this . internal_instant . plus [amount.internal_duration])

## Subtract specified amount of time to this instant.
Instant.minus : Duration -> Instant
Instant.minus amount = Instant (this . internal_instant . minus [amount.internal_duration])

## Combines this instant with an offset to create an `Offset_Date_Time`.

   > Example
     Convert the instant to UTC+3 `Offset_Date_Time`
         Instant.at_offset (Zone_Offset.new 3)
Instant.at_offset : Zone_Offset -> Offset_Date_Time
Instant.at_offset offset = Offset_Date_Time.offset_date_time (this . internal_instant . atOffset [offset.internal_zone_offset])

## Combines this instant with a time-zone to create a `Zoned_Date_Time`.
Instant.at_zone : Zone_Id -> Zoned_Date_Time
Instant.at_zone zone = Zoned_Date_Time.zoned_date_time (this . internal_instant . atZone [zone.internal_zone_id])

## Obtains an instance of `Instant` from a text string in ISO-8601 format.

   > Example
     Create an Instant from an ISO formatted string.
         parse "2011-12-03T10:15:30Z"
parse : Text -> Instant
parse text = Instant (Java_Instant.parse [text])

## Obtains the current instant from the system clock.
now : Instant
now = Instant (Java_Instant.now [])

## Obtains an instance of `Instant` using milliseconds from the Unix epoch.
of_epoch_milli : Integer -> Instant
of_epoch_milli epoch_millis = Instant (Java_Instant.ofEpochMilli [epoch_millis])

## Obtains an instance of `Instant` using seconds from the Unix epoch.
of_epoch_second : Integer -> Instant
of_epoch_second epoch_seconds = Instant (Java_Instant.ofEpochSecond [epoch_seconds])

## Obtains an instance of `Instant` from a year, month, day, hour, minute,
   second, nanosecond and offset.

   > Example
     Create a new instant at Unix epoch.
         Instant.new

   > Example
     Create a new instant of 3rd December 2011 at midnight UTC.
         Instant.new 2011 12 03
new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Zone_Offset -> Instant
new (year = 1970) (month = 1) (day = 1) (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) (offset = Zone_Offset.utc) =
    offset_time = OffsetDateTime.of [year, month, day, hour, minute, second, nanosecond, offset.internal_zone_offset]
    instant = Instant (offset_time.toInstant [])
    instant
