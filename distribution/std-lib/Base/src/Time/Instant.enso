from Base import all
import Base.Time.Interval
import Base.Time.Zone_Id

polyglot java import java.time.Instant as Java_Instant
polyglot java import java.time.ZonedDateTime

type Instant

    type Instant internal_instant

    ## Get the year field.
    get_year : Integer
    get_year = this . internal_instant . getYear []

    ## Get the month of year field from 1 to 12.
    get_month : Integer
    get_month = this . internal_instant . getMonthValue []

    ## Get the day of month field.
    get_day : Integer
    get_day = this . internal_instant . getDayOfMonth []

    ## Get the hour of day field.
    get_hour : Integer
    get_hour = this . internal_instant . getHour []

    ## Get the minute of hour field.
    get_minute : Integer
    get_minute = this . internal_instant . getMinute []

    ## Get the second of minute field
    get_second : Integer
    get_second = this . internal_instant . getSecond []

    ## Gets the nano-of-second field.
    get_nano : Integer
    get_nano = this . internal_instant . getNano []

    ## Gets the nano-of-second field.
    get_nanosecond : Integer
    get_nanosecond = this . get_nano

    ## Return the number of seconds from the Unix epoch.
    to_epoch_second : Integer
    to_epoch_second = this . internal_instant . toEpochSecond []

    ## Return the number of milliseconds from the Unix epoch.
    to_epoch_milli : Integer
    to_epoch_milli = this . internal_instant . toInstant [] . toEpochMilli []

    ## Add specified amount of time to this instant.

       > Example
         Add 1 hour to a zoned date time.
             Instant.new.plus 1.hour

       > Example
         Add 15 years and 3 hours to a zoned date time.
             Instant.new . plus 15.years . plus 3.hours
    plus : Interval -> Instant
    plus amount = Instant (this . internal_instant . plus [amount.interval_period] . plus [amount.interval_duration])

    ## Subtract specified amount of time to this instant.

       > Example
         Subtract 10 days from a zoned date time.
             Instant.new.minus 10.days

       > Example
         Subtract 1 year and 9 months from a zoned date time.
             Instant.new.minus 1.year . minus 9.months
    minus : Interval -> Instant
    minus amount = Instant (this . internal_instant . minus [amount.interval_period] . minus [amount.interval_duration])

## Obtains an instance of `Instant` from a text string such as
   2007-12-03T10:15:30Z.

   The string must represent a valid date-time and is parsed using the ISO-8601
   extended offset date-time format to add the time-zone. The section in square
   brackets is not part of the ISO-8601 standard. The format consists of:

   - The ISO offset date time.
   - If the zone ID is not available or is a zone offset then the format is
     complete.
   - An open square bracket '['.
   - The zone ID. This is not part of the ISO-8601 standard. Parsing is case
     sensitive.
   - A close square bracket ']'.

   > Example
     Parse UTC time.
         Instant.parse "2020-10-01T04:11:12Z"

   > Example
     Parse UTC-04:00 time.
         Instant.parse "2020-10-01T04:11:12-04:00"

   > Example
     Parse UTC-04:00 time specifying New York time zone.
         Instant.parse "2020-10-01T04:11:12-04:00[America/New_York]"

   > Example
     Parse UTC-04:00 time with nanoseconds.
         Instant.parse "2020-10-01T04:11:12.177528-04:00"
parse : Text -> Instant
parse text = Instant (ZonedDateTime.parse [text])

## Obtains the current date-time from the system clock in the default time-zone.
now : Instant
now = Instant (Java_Instant.now [] . atZone [Zone_Id.utc . internal_zone_id])

## Obtains an instance of `Instant` from a year, month, day, hour, minute,
   second, nanosecond and time-zone.

   The day must be valid for the year and month, otherwise an exception will be
   thrown.

   - month - the month-of-year to represent, from 1 (January) to 12 (December)
   - day - the day-of-month to represent, from 1 to 31
   - hour - the hour-of-day to represent, from 0 to 23
   - minute - the minute-of-hour to represent, from 0 to 59
   - second - the second-of-minute to represent, from 0 to 59
   - nanosecond - the nano-of-second to represent, from 0 to 999,999,999
   - zone - the time-zone

   > Example
     Create a new zoned date time at Unix epoch.
         Instant.new

   > Example
     Get the 5 August 1986 at midnight UTC.
         Instant.new 1986 8 5
new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Zone_Id -> Instant
new (year = 1970) (month = 1) (day = 1) (hour = 0) (minute = 0) (second = 0) (nanosecond = 0) (offset = Zone_Id.utc) =
    Instant (ZonedDateTime.of [year, month, day, hour, minute, second, nanosecond, offset.internal_zone_id])
