from Base import all
import Base.Time.Time
import Base.Time.Duration
import Base.Time.Time_Of_Day
import Base.Time.Zone

polyglot java import java.time.Instant
polyglot java import java.time.LocalDate
polyglot java import java.time.format.DateTimeFormatter
polyglot java import org.enso.base.Time_Utils

type Date

    ## `Date` represents a date, often viewed as year-month-day. For example,
       the value "2nd October 2007" can be stored in a `Date`.

       This class does not store or represent a time or timezone. Instead, it
       is a description of the date, as used for birthdays. It cannot represent
       an instant on the time-line without additional information such as an
       offset or timezone.
    type Date internal_local_date

    ## Get the year field.
    year : Integer
    year = this . internal_local_date . getYear []

    ## Get the month of year field from 1 to 12.
    month : Integer
    month = this . internal_local_date . getMonthValue []

    ## Get the day of month field.
    day : Integer
    day = this . internal_local_date . getDayOfMonth []

    ## Combine this date with time of day to create a point in time.

       > Example
         Convert this date to midnight UTC time.
             Day.new 2020 2 3 . to_time Time_Of_Day.new Zone.utc
    to_time : Time_Of_Day -> Zone -> Time
    to_time daytime (zone = Zone.system) = Time.time (this . internal_local_date . atTime [daytime.internal_local_time] . atZone [zone.internal_zone_id])

    ## Add specified amount of time to this instant.

       > Example
         Add 100 years to a local date.
             Date.new 2020 . plus 100.years
    plus : Duration -> Date
    plus amount = if amount.is_time then Error.throw (Time.Error "Date does not support time intervals") else Date (this . internal_local_date . plus [amount.interval_period])

    ## Add specified amount of time to this instant.

       > Example
         Add 6 months to a local date.
             Date.new 2020 + 6.months
    + : Duration -> Date
    + amount = this.plus amount

    ## Subtract specified amount of time to this instant.

       > Example
         Subtract 1 month from a local date.
             Date.new 2020 . minus 1.month
    minus : Duration -> Date
    minus amount = if amount.is_time then Error.throw (Time.Error "Date does not support time intervals") else Date (this . internal_local_date . minus [amount.interval_period])

    ## Subtract specified amount of time to this instant.

       > Example
         Subtract 7 days from a local date.
             Date.new 2020 - 7.days
    - : Duration -> Date
    - amount = this.minus amount

    ## Format this date using the default formatter.
    to_text : Text
    to_text = Time_Utils.default_date_formatter [] . format [this.internal_local_date]

    ## Format this date using formatter string.
    format : Text -> Text
    format pattern = DateTimeFormatter.ofPattern [pattern] . format [this.internal_local_date]

## Obtains an instance of `Date` from a text string such as 2007-12-03.

   The string must represent a valid date and is parsed using the ISO-8601
   extended local date format. The format consists of:

   - Four digits or more for the year. Years in the range 0000 to 9999
     will be pre-padded by zero to ensure four digits. Years outside
     that range will have a prefixed positive or negative symbol.

   - A dash
   - Two digits for the month-of-year. This is pre-padded by zero to ensure two
     digits.
   - A dash
   - Two digits for the day-of-month. This is pre-padded by zero to ensure two
     digits.

   > Example
     Parse the date of 23rd December 2020.
         Date.parse "2020-12-23"
parse : Text -> Date
parse fmt = Date (LocalDate.parse [fmt])

## Obtains the current date from the system clock in the system timezone.
now : Date
now = Date (LocalDate.now [])

## Alias for `now`.
today : Date
today = here.now

## Obtains an instance of `Date` from a year, month and day.

   The day must be valid for the year and month, otherwise an exception will be
   thrown.

   - month - the month-of-year to represent, from 1 (January) to 12 (December)
   - day - the day-of-month to represent, from 1 to 31

   > Example
     Create a new local date at Unix epoch.
         Date.new 1970

   > Example
     Get the local date of 5th August 1986.
         Date.new 1986 8 5
new : Integer -> Integer -> Integer -> Date
new year (month = 1) (day = 1) =
    Date (LocalDate.of [year, month, day])
