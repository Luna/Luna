from Base import all
import Base.System.File.Open_Option

export Base.System.File.Open_Option

close_stream : Any -> Unit
close_stream stream =
    stream.close []
    Unit

type Output_Stream
    type Output_Stream stream_resource

    write_bytes : Vector -> Unit
    write_bytes contents = Managed_Resource.with this.stream_resource java_stream->
        java_stream.write [contents.to_array]
        java_stream.flush []
        Unit

    close : Unit
    close = Managed_Resource.finalize this.stream_resource

type Input_Stream
    type Input_Stream stream_resource

    read_all_bytes : Vector
    read_all_bytes = Managed_Resource.with this.stream_resource java_stream->
        Vector.from_polyglot_array (java_stream.readAllBytes [])

    read_n_bytes : Integer -> Vector
    read_n_bytes n = Managed_Resource.with this.stream_resource java_stream->
        bytes = java_stream.readNBytes [n]
        Vector.from_polyglot_array bytes

    close : Unit
    close = Managed_Resource.finalize this.stream_resource

type File
    type File prim_file

    new_input_stream open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = this.prim_file.newInputStream [opts]
        resource = Managed_Resource.register stream here.close_stream
        Input_Stream resource

    new_output_stream open_options =
        opts = open_options . map (_.to_java) . to_array
        stream = this.prim_file.newOutputStream [opts]
        resource = Managed_Resource.register stream here.close_stream
        Output_Stream resource

    with_output_stream open_options action =
        Resource.bracket (this.new_output_stream open_options) (_.close) action

    with_input_stream open_options action =
        Resource.bracket (this.new_input_stream open_options) (_.close) action

    read_bytes : Vector
    read_bytes =
        opts = [Open_Option.Read]
        bytes = this.with_input_stream opts (_.read_all_bytes)
        bytes

    read : Text
    read =
        bytes = this.read_bytes
        Text.from_utf_8 bytes

    append_bytes : Vector -> Unit
    append_bytes contents =
        opts = [Open_Option.Append, Open_Option.Create]
        this.with_output_stream opts (_.write_bytes contents)

    append : Text -> Unit
    append contents = this.append_bytes contents.utf_8

    write_bytes : Vector -> Unit
    write_bytes contents =
        opts = [Open_Option.Write, Open_Option.Create, Open_Option.Truncate_Existing]
        this.with_output_stream opts (_.write_bytes contents)
        Unit

    write : Text -> Unit
    write contents = this.write_bytes contents.utf_8

new : Text -> File
new path = File (Prim_Io.get_file path)
