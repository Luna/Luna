from Base import all
polyglot java import java.lang.Math
polyglot java import java.lang.String

## Computes the inverse of the sine function

   Selects a value in the -pi/2 through pi/2 range.
Number.asin = Math.asin [this.to_decimal]

## Computes the inverse of the cosine function.

   Selects a value in the -pi/2 through pi/2 range.
Number.acos = Math.acos [this.to_decimal]

## Computes the inverse of the tangent function.

   Selects a value in the -pi/2 through pi/2 range.
Number.atan = Math.atan [this.to_decimal]

## Computes the argument (angle) in the conversion from cartesian
   to polar coordinates.

   The returned angle is in the -pi through pi range.
Number.atan_2 y = Math.atan2 [this.to_decimal, y.to_decimal]

## Computes the sine function.
Number.sin = Math.sin [this.to_decimal]

## Computes the cosine function.
Number.cos = Math.cos [this.to_decimal]

## Computes the tangent function.
Number.tan = Math.tan [this.to_decimal]

## Computes the hyperbolic sine function.
Number.sinh = Math.sinh [this.to_decimal]

## Computes the hyperbolic cosine function.
Number.cosh = Math.cosh [this.to_decimal]

## Computes the hyperbolic tangent function.
Number.tanh = Math.tanh [this.to_decimal]

## Computes the exponential function.
Number.exp = Math.exp [this.to_decimal]

## Computes the natural logarithm function.
Number.ln = Math.log [this.to_decimal]

## Computes the square root of `this`.
Number.sqrt = Math.sqrt [this.to_decimal]

## Computes the `base`-log of `this`.
Number.log base = this.ln / base.ln

## Converts a decimal value to a string, using the Java string formatting
   syntax.

   TODO this should expose a more-user friendly API in the future.
Decimal.format fmt = String.format [fmt, this]

## Creates a new right-exclusive range of integers from `this` to `n`.
Integer.upto n = Range this n

## Checks equality of numbers, using an `epsilon` value.

   Returns `True` when `this` and `that` are at mose `epsilon` apart.
Number.equals that epsilon = (this - that).abs <= epsilon
