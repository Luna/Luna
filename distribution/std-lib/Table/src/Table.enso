from Base import all
import Table.Io.Csv

polyglot java import java.util.Random

type Table
    type Table java_table

    display show_rows=10 =
        cols = Vector (this.java_table.getColumns [])
        col_names = cols.map (_.getName [])
        col_vals = cols.map (_.getColumn [])
        num_rows = this.java_table.nrows []
        display_rows = min num_rows show_rows
        rows = Vector.new display_rows row_num->
            col_vals.map col->
                if col.isNa [row_num] then "NA" else here.get_item_string col row_num
        table = here.print_table col_names rows
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    to_json =
        col_jsons = Vector (this.java_table.getColumns []) . map here.column_to_json
        cols_json = Json.Array col_jsons
        fields = Map.singleton "columns" cols_json
        Json.Object fields

## PRIVATE

   Keep this in sync with `org.enso.table.data.Column.Type.LONG`
column_type_long = 1

## PRIVATE

   Keep this in sync with `org.enso.table.data.Column.Type.DOUBLE`
column_type_double = 2

## PRIVATE

   Keep this in sync with `org.enso.table.data.Column.Type.STRING`
column_type_string = 3

string_storage_to_json storage =
    Vector.new (storage.size []) ix->
        if col.isNa [ix] then Json.Null else
            Json.String (col.getItem [ix])

numeric_storage_to_json storage =
    Vector.new (storage.size []) ix->
        if col.isNa [ix] then Json.Null else
            Json.Number (col.getItem [ix])

column_to_json col =
    name = col.getName []
    storage = col.getColumn []
    storage_type = storage.getType []
    storage_jsons = if storage_type == Column_Type_String then here.string_storage_to_json storage else
        here.numeric_storage_to_json storage
    fields = Map.singleton "name" (Json.String name) . insert "data" (Json.Array storage_jsons)
    Json.Object fields


get_item_string column ix =
    tp = column.getType []
    if tp == Column_Type_String then column.getItem [ix] else
        column.getItem [ix] . to_text

pad txt len =
    true_len = txt.characters.length
    txt + (" ".repeat (len - true_len))

print_table header rows =
    content_lengths = Vector.new header.length i->
        max_row = 0.upto rows.length . fold 0 a-> j-> max a (rows.at j . at i . characters . length)
        max max_row (header.at i . characters . length)
    header_line = zip header content_lengths here.pad . join ' | '
    divider = content_lengths . map (l -> "-".repeat l+2) . join '+'
    row_lines = rows.map r->
        x = zip r content_lengths here.pad . join ' | '
        " " + x
    ([" " + header_line, divider] + row_lines).join '\n'

