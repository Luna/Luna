from Base import all
import Table.Io.Csv
import Table.Data.Column

polyglot java import org.enso.table.data.table.Table as Java_Table

## Represents a column-oriented table data structure.
type Table
    type Table java_table

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    display : Integer -> Text
    display show_rows=10 =
        cols = Vector (this.java_table.getColumns [])
        col_names = cols.map (_.getName [])
        col_vals = cols.map (_.getStorage [])
        num_rows = this.java_table.nrows []
        display_rows = min num_rows show_rows
        rows = Vector.new display_rows row_num->
            col_vals.map col->
                if col.isNa [row_num] then "NA" else Column.get_item_string col row_num
        table = here.print_table col_names rows
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    print show_rows=10 =
        IO.println (this.display show_rows)

    ## Converts this table to a JSON structure.
    to_json : Json
    to_json =
        col_jsons = this.columns.map to_json
        cols_json = Json.Array col_jsons
        fields = Map.singleton "columns" cols_json
        Json.Object fields

    at name = Column (this.java_table.getColumnByName [name])

    where indexes =
        Table (this.java_table.mask [indexes.java_column, False])

    set name column =
        Table (this.java_table.addOrReplaceColumn [column.rename name . java_column])

    columns =
        Vector.Vector (this.java_table.getColumns []) . map Column

from_columns cols = Table (Java_Table.new [cols.to_array].to_array)

## PRIVATE
pad txt len =
    true_len = txt.characters.length
    txt + (" ".repeat (len - true_len))

## PRIVATE
print_table header rows =
    content_lengths = Vector.new header.length i->
        max_row = 0.up_to rows.length . fold 0 a-> j-> max a (rows.at j . at i . characters . length)
        max max_row (header.at i . characters . length)
    header_line = zip header content_lengths here.pad . join ' | '
    divider = content_lengths . map (l -> "-".repeat l+2) . join '+'
    row_lines = rows.map r->
        x = zip r content_lengths here.pad . join ' | '
        " " + x
    ([" " + header_line, divider] + row_lines).join '\n'
