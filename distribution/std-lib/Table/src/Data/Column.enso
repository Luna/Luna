from Base import all
import Table.Data.Table

polyglot java import org.enso.table.data.table.Column as Java_Column

type Column
    type Column java_column

    display : Integer -> Text
    display show_rows=10 =
        java_col = this.java_column
        col_name = java_col.getName []
        storage = java_col.getStorage []
        num_rows = java_col.getSize []
        display_rows = min num_rows show_rows
        items = Vector.new display_rows num->
            [if storage.isNa [num] then "NA" else here.get_item_string storage num]
        table = Table.print_table [col_name] items
        if num_rows - display_rows <= 0 then table else
            missing = '\n\u2026 and ' + (num_rows - display_rows).to_text + ' hidden rows.'
            table + missing

    print show_rows=10 =
        IO.println (this.display show_rows)

    == other =
        here.run_vectorized_op this "==" (== other) other

    != other = (this == other).not

    not =
        storage = this.java_column.getStorage []
        name = this.java_column.getName []
        Column (Java_Column.new [name, storage.not []].to_array)

    map function =
        storage = this.java_column.getStorage []
        new_st = storage.map [function]
        col = Java_Column.new ["Result", new_st].to_array
        Column col

    rename name = Column (this.java_column.rename [name])

    name = this.java_column.getName []

    length = this.java_column . getSize []

    at index =
        storage = this.java_column.getStorage []
        if storage.isNa [index] then Nothing else
            storage.getItem [index]

    to_vector = Vector.new this.length this.at

    storage_type =
        tp = this.java_column.getStorage [] . getType []
        if tp == Storage_Type_String then Text else
            if tp == Storage_Type_Long then Integer else
                if tp == Storage_Type_Double then Decimal else
                    if tp == Storage_Type_Bool then Boolean else
                        Any

    to_json =
        col = this.java_column
        name = col.getName []
        storage = col.getStorage []
        json_factory = case this.storage_type of
            Text -> Json.String
            Integer -> Json.Number
            Decimal -> Json.Number
            Boolean -> Json.Boolean
            _ -> to_json
        storage_json = Json.Array (here.storage_to_json storage json_factory)
        fields = Map.singleton "name" (Json.String name) . insert "data" storage_json
        Json.Object fields

from_vector name items = Column (Java_Column.fromItems [name, items.to_array])

run_vectorized_op column java_op_name fallback_method operand =
    storage = column.java_column.getStorage []
    rs = if storage.isOpVectorized [java_op_name] then storage.runVectorizedOp [java_op_name, operand] else
        storage.map [fallback_method]
    Column (Java_Column.new ["Result", rs].to_array)


## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.LONG`
storage_type_long = 1

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.DOUBLE`
storage_type_double = 2

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.STRING`
storage_type_string = 3

## PRIVATE

   Keep this in sync with `org.enso.table.data.Storage.Type.BOOL`
storage_type_bool = 4

storage_to_json storage factory =
    Vector.new (storage.size []) ix->
        if storage.isNa [ix] then Json.Null else
            factory (storage.getItem [ix])

## PRIVATE
get_item_string column ix =
    tp = column.getType []
    if tp == Storage_Type_String then column.getItem [ix] else
        column.getItem [ix] . to_text

