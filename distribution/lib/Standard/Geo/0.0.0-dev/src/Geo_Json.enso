from Standard.Base import all

from Standard.Table import Table
import Standard.Table.Errors.Invalid_JSON_Format

## PRIVATE

   A type of GeoJSON object.
type Object_Type

    ## PRIVATE

       A Geo JSON feature.
    Feature

    ## PRIVATE

       A Geo JSON feature collection.
    Feature_Collection

    ## PRIVATE

       Convert GeoJSON object type to Text.
    to_text : Text
    to_text self = case self of
        Object_Type.Feature -> "Feature"
        Object_Type.Feature_Collection -> "FeatureCollection"

## PRIVATE

   Get key-value pairs of a Feature GeoJSON object.
Json.get_feature_row : Map
Json.get_feature_row self =
    properties_row = self.get "properties" . get_properties_row
    geometry_row = self.get "geometry" . get_geometry_row
    geometry_row.fold_with_key properties_row acc-> k-> v->
        acc.insert k v

## PRIVATE

   Get column key-value pairs of a feature's "properties" object.
get_properties_row : Map
get_properties_row value = case value of
    Json.Object properties -> properties.map p-> case p of
        Json.Object _ -> Nothing.to_json
        _ -> p

## PRIVATE
   Get column key-value pairs of a feature's "geometry" object.
get_geometry_row : JS_Object | Nothing
get_geometry_row value = case value of
    _ : JS_Object ->
        geometry_type = value.get "type"
        if geometry_type == "Point" then get_point_row value else Nothing

## PRIVATE
   Get column key-value pairs of a "Point" geometry object.
get_point_row : JS_Object -> Vector
get_point_row value =
    fields = ["longitude", "latitude", "elevation"]
    case value.get "coordinates" of
        vector : Vector -> field.zip vector
        _ -> []

Json.geo_json_to_table : Vector -> Table
Json.geo_json_to_table self fields=Nothing = case self of
    Json.Array items ->
        rows = items.map item->
            case item of
                Json.Object _ ->
                    if item.get "type" != Object_Type.Feature.to_text then Vector.fill fields.length Nothing else
                        row = item.get_feature_row
                        fields.map n-> row.get n . unwrap . catch Any (_ -> Nothing)
                _ -> Vector.fill fields.length Nothing
        cols = fields.map_with_index i-> n->
            [n, rows.map (_.at i)]
        Table.new cols
    _ : JS_Object ->
        if self.get "type" != Object_Type.Feature_Collection.to_text then Error.throw (Invalid_JSON_Format.Error self "not being a feature collection") else
            case self.get "features" of
                Json.Array items ->
                    feature_rows = items.map .get_feature_row
                    column_names = case fields of
                        Nothing ->
                            column_names_row = feature_rows.fold Map.empty acc-> row->
                                row.fold_with_key acc a-> k-> _->
                                    a.insert k 0
                            column_names_row.keys
                        _ -> fields
                    rows = feature_rows.map row->
                        column_names.map n-> row.get n . unwrap . catch Any (_ -> Nothing)
                    cols = column_names.map_with_index i-> n->
                        [n, rows.map (_.at i)]
                    Table.new cols
                _ -> Error.throw (Invalid_JSON_Format.Error self "not having the 'features' key.")
