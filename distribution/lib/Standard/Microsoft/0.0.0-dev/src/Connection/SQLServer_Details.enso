from Standard.Base import all
import Standard.Base.Data.Numbers.Number_Parse_Error
import Standard.Base.Errors.Common.Missing_Argument
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Metadata.Widget.Text_Input

import Standard.Database.Connection.Connection_Options.Connection_Options
import Standard.Database.Connection.Credentials.Credentials
import Standard.Database.Internal.Data_Link_Setup.Data_Link_Setup

import project.SQLServer_Connection.SQLServer_Connection

type SQLServer_Details
    ## Connect to a SQLServer database.

       Arguments:
       - host: The name of the server to connect to.
       - credentials: The credentials to use for the connection.
       - port: The port to connect to (defaults to 1433).
       - database: The name of the database to connect to.
    @host (Text_Input display=..Always)
    @credentials Credentials.default_widget
    SQLServer (host:Text=(Missing_Argument.throw "host")) (credentials:Credentials=(Missing_Argument.throw "credentials")) port:Integer=1433 database:Text="master"

    ## PRIVATE
       Attempt to resolve the constructor.
    resolve : Function -> SQLServer_Details | Nothing
    resolve constructor =
        Panic.catch Type_Error (constructor:SQLServer_Details) _->Nothing

    ## PRIVATE
       Build the Connection resource.

       Arguments:
       - options: Overrides for the connection properties.
    connect : Connection_Options -> Boolean -> SQLServer_Connection
    connect self options (allow_data_links : Boolean = True) =
        data_link_setup = if allow_data_links then Data_Link_Setup.Available (create_data_link_structure self) else
            Data_Link_Setup.already_a_data_link
        properties = options.merge self.jdbc_properties
        make_new database =
            SQLServer_Details.SQLServer self.host self.credentials self.port (database.if_nothing self.database) . connect options

        SQLServer_Connection.create self.jdbc_url properties make_new data_link_setup

    ## PRIVATE
       Provides the jdbc url for the connection.
    jdbc_url : Text
    jdbc_url self =
        'jdbc:sqlserver://' + self.host + ':' + self.port.to_text

    ## PRIVATE
       Provides the properties for the connection.
    jdbc_properties : Vector (Pair Text Text)
    jdbc_properties self =
        account = [Pair.new 'encrypt' 'false']
        database = [Pair.new 'databaseName' self.database]
        credentials = [Pair.new 'user' self.credentials.username, Pair.new 'password' self.credentials.password]
        send_time_as_datetime = [Pair.new 'sendTimeAsDatetime' 'false']
        account + database + credentials + send_time_as_datetime

## PRIVATE
private create_data_link_structure details:SQLServer_Details data_link_location:Enso_File -> JS_Object =
    credentials_json = Data_Link_Setup.save_credentials_for_data_link data_link_location details.credentials
    JS_Object.from_pairs <|
        header = [["type", "SQLServer_Connection"], ["libraryName", "Standard.Microsoft"]]
        connection_part = [["host", details.host], ["port", details.port], ["database_name", details.database]]
        credential_part = [["credentials", credentials_json]]
        header + connection_part + credential_part
