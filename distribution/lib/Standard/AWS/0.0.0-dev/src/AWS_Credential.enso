from Standard.Base import all
from Standard.Base.Enso_Cloud.Enso_Secret import as_hideable_value
from Standard.Base.Metadata import make_single_choice, Widget

polyglot java import org.enso.aws.AwsCredential
polyglot java import org.enso.aws.ProfileReader

type AWS_Credential
    ## Access AWS using the default credential method.
    Default

    ## Access using IAM via an AWS profile.

       Arguments:
       - profile: AWS profile name (if empty uses default).
    @profile (make_single_choice AWS_Credential.profile_names)
    Profile profile:Text='default'

    ## Access using IAM via an AWS access key ID and secret access key.

       Arguments:
       - access_key_id: AWS access key ID.
       - secret_access_key: AWS secret access key.
    Key access_key_id:Text|Enso_Secret secret_access_key:Text|Enso_Secret

    ## Get a list of the available profiles
    profile_names : Vector Text
    profile_names = Vector.from_polyglot_array <|
        ProfileReader.INSTANCE.getProfiles

    ## PRIVATE
    as_java : AWS_Credential | Nothing -> AwsCredential
    as_java (credential : AWS_Credential | Nothing) = case credential of
        AWS_Credential.Default -> AwsCredential.Default.new
        AWS_Credential.Profile profile -> AwsCredential.Profile.new profile
        AWS_Credential.Key access_key_id secret_access_key ->
            AwsCredential.Key.new (as_hideable_value access_key_id) (as_hideable_value secret_access_key)
        Nothing -> AwsCredential.Default.new
