import project.Any.Any
from project.Data.Boolean import Boolean, True, False
import project.Data.Numbers.Integer
import project.Data.Text.Prim_Text_Helper
import project.Data.Text.Regex.Pattern_2.Pattern_2
import project.Data.Text.Text
from project.Error.Common import Compile_Error, Syntax_Error
import project.Error.Illegal_Argument.Illegal_Argument
import project.Nothing.Nothing
import project.Panic.Panic

polyglot java import java.util.regex.Pattern as Java_Pattern

compile : Text -> Boolean | Nothing -> Pattern_2 ! (Compile_Error | Illegal_Argument | Syntax_Error)
compile self expression case_insensitive=Nothing =
    #all_options = options + self.engine_opts
    #options_bitmask = from_enso_options all_options
    options_string = if case_insensitive == True then "usgi" else "usg"

    maybe_regex_object = Panic.recover Any <|
        Prim_Text_Helper.compile_regex expression options_string

    internal_regex_object = maybe_regex_object.map_error case _ of
        # err : PatternSyntaxException -> Syntax_Error.Error ("The regex could not be compiled: " + err.getMessage)
        other -> other

    Pattern_2.Value internal_regex_object

## ADVANCED

   Escape the special characters in `expression` such that the result is a
   valid literal pattern for the original string.

   Arguments:
   - expression: The expression to escape metacharacters in.

   > Example
     Turn a literal string into a regex that matches that string exactly.

         import Standard.Base.Data.Text.Regex.Engine.Default as Default_Engine
         import Standard.Base.Data.Text.Regex.Regex_Option.Regex_Option

         example_escape =
             literal_string = "\!\.|abcde"
             engine = Default_Engine.new
             engine.escape literal_string
escape : Text -> Text
escape self expression = Java_Pattern.quote expression

## An error that is emitted when there is no such group in the match for the
   provided `id`.

   Arguments:
   - id: The identifier of the group that was asked for but does not exist.
type No_Such_Group
    Error (id : Text | Integer)

    ## PRIVATE

       Provides a human-readable representation of the `No_Such_Group`.
    to_display_text : Text
    to_display_text self = case self.id of
        _ : Integer -> "No group exists with the index " + self.id.to_text + "."
        _ : Text -> "No group exists with the name " + self.id + "."
