import project.Any.Any
#import project.Data.Boolean.Boolean
from project.Data.Boolean import Boolean, True, False
import project.Data.Map.Map
import project.Data.Numbers.Integer
import project.Data.Range.Extensions
import project.Data.Range.Range
import project.Data.Text.Span.Span
import project.Data.Text.Span.Utf_16_Span
import project.Data.Text.Regex.Match_2.Match_2
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Nothing.Nothing
polyglot java import org.enso.base.Text_Utils

type Pattern_2
    ## internal_regex_object : RegexObject (Truffle)
       (See https://github.com/oracle/graal/blob/master/regex/docs/README.md)
    Value (internal_regex_object : Any)

    # start_iterator

    matches : Text -> Boolean
    matches self input =
        m = self.internal_regex_object.exec input 0
        m . isMatch && m.getEnd 0 == input.length

    match_all : Text -> Vector Match_2
    match_all self input =
        builder = Vector.new_builder
        it = Match_Iterator.new self input
        go it = case it.next of
            Match_Iterator_Value.Next _ match next_it ->
                builder.append match
                go next_it
            Match_Iterator_Value.Last _ -> Nothing
        go it
        builder.to_vector

    match : Text -> Match_2 | Nothing
    match self input =
        it = Match_Iterator.new self input
        case it.next of
            Match_Iterator_Value.Next _ match _ -> match
            Match_Iterator_Value.Last _ -> Nothing

    to_text_debug : Text -> Vector Text
    to_text_debug self input =
        Match_Iterator.new self input . to_text_debug

type Match_Iterator
    new : Pattern_2 -> Text -> Match_Iterator
    new pattern input = Match_Iterator.Value pattern input 0

    Value (pattern : Pattern_2) (input : Text) (cursor : Integer)

    next : Match_Iterator_Value
    next self =
        regex_result = self.pattern.internal_regex_object.exec self.input self.cursor
        case regex_result.isMatch of
            False ->
                filler_range = Range.new self.cursor (Text_Utils.char_length self.input)
                filler_span = (Utf_16_Span.Value filler_range self.input).to_grapheme_span
                Match_Iterator_Value.Last filler_span
            True ->
                match_start = regex_result.getStart 0
                filler_range = Range.new self.cursor match_start
                filler_span = (Utf_16_Span.Value filler_range self.input).to_grapheme_span
                match = Match_2.Value regex_result self.input
                next_cursor = match.end 0
                next_iterator = Match_Iterator.Value self.pattern self.input next_cursor
                Match_Iterator_Value.Next filler_span match next_iterator

    to_text_debug : Vector Text
    to_text_debug self =
        vb = Vector.new_builder
        go it = case it.next of
            Match_Iterator_Value.Next filler match next_it ->
                vb.append ('\"' + filler.text + '\"')
                vb.append ("/" + (match.span 0).text + "/")
                go next_it
            Match_Iterator_Value.Last filler ->
                vb.append ('\"' + filler.text + '\"')
        go self
        vb.to_vector

type Match_Iterator_Value
  Next (filler : Span) (match : Match_2) (next_iterator : Match_Iterator)
  Last (filler : Span)
