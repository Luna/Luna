from Standard.Base import all

## PRIVATE
type Named_Pattern
    ## Matches one or more whitespace characters at the beginning of a string.
    Leading_Whitespace

    ## Matches one or more whitespace characters at the end of a string.
    Trailing_Whitespace

    ## Matches one or more whitespace characters that are preceded by another whitespace character.
    Duplicate_Whitespace

    ## Matches one or more whitespace characters anywhere in a string.
    All_Whitespace

    ## Matches one or more newline characters.
    Newlines

    ## Matches one or more digits at the beginning of a string.
    Leading_Numbers

    ## Matches one or more digits at the end of a string.
    Trailing_Numbers

    ## Matches any character that is not in the ASCII range (0x00-0x7F).
    Non_ASCII

    ## Matches a tab character.
    Tabs

    ## Matches any single alphabetic character (both lowercase and uppercase).
    Letters

    ## Matches any single digit.
    Numbers

    ## Matches any single punctuation character from the set: comma, period, exclamation mark, question mark, colon, semicolon, single quote, double quote, parenthesis.
    Punctuation

    ## Matches any single character that is not an alphabetic character, digit, or whitespace.
    Symbols

    ## PRIVATE
    regex_pattern self = case self of
        Named_Pattern.Leading_Whitespace -> "^\s+"
        Named_Pattern.Trailing_Whitespace -> "\s+$"
        Named_Pattern.Duplicate_Whitespace -> "(?<=\s)\s+"
        Named_Pattern.All_Whitespace -> "\s+"
        Named_Pattern.Newlines -> "(?:\r\n?|\n)"
        Named_Pattern.Leading_Numbers -> "^\d+"
        Named_Pattern.Trailing_Numbers -> "\d+$"
        Named_Pattern.Non_ASCII -> "[^\x00-\x7F]"
        Named_Pattern.Tabs -> "\t"
        Named_Pattern.Letters -> "[a-zA-Z]"
        Named_Pattern.Numbers -> "\d"
        Named_Pattern.Punctuation -> '[,.!?():;\'\"]'
        Named_Pattern.Symbols -> "[^a-zA-Z\d\s]"

## PRIVATE
Regex.from (that:Named_Pattern) = Regex.compile that.regex_pattern
