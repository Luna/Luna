from Standard.Base import all
from Standard.Base.Data.Text.Extensions import Index_Out_Of_Bounds_Error

polyglot java import com.ibm.icu.text.BreakIterator

## Type defining a substring of a Text
type Text_Sub_Range
    ## Select the first `count` characters.
       Select an empty string if `count` is less than or equal to 0.
       Select the entire string if `count` is greater than the length of the input.
    type First (count : Integer = 1)

    ## Select the last `count` characters.
       Select an empty string if `count` is less than or equal to 0.
       Select the entire string if `count` is greater than the length of the input.
    type Last (count : Integer = 1)

    ## Select characters until the first instance of `delimiter`.
       Select the entire string if the input does not contain `delimiter`.
    type Before (delimiter : Text)

    ## Select characters until the last instance of `delimiter`.
       Select the entire string if the input does not contain `delimiter`.
    type Before_Last (delimiter : Text)

    ## Select characters after the first instance of `delimiter`.
       Select the entire string if the input does not contain `delimiter`.
    type After (delimiter : Text)

    ## Select characters after the last instance of `delimiter`.
       Select the entire string if the input does not contain `delimiter`.
    type After_Last (delimiter : Text)

    ## Select characters while the predicate returns `True`.
    type While (predicate : (Text -> Boolean))

    ## Select characters while the predicate returns `False`.
    type Until (predicate : (Text->Boolean))

    ## PRIVATE
       Evaluates the Text_Sub_Range returning the underlying char array indices
    get_indices : Text -> Pair
    get_indices text =
        len = Runtime.lazy (text.length)
        case this of
            First n ->
                m = if n < 0 then (n + len.value) else n
                if (0.up_to len.value . contains m) then (Pair 0 m) else
                    Error.throw (Index_Out_Of_Bounds_Error n len.value)
            _ -> Panic.throw "Not implemented yet"
