from Standard.Base import all

type Named_Pattern
   Duplicate_Whitespace
   Leading_Whitespace
   Trailing_Whitespace
   All_Whitespace
   Leading_Numbers
   Trailing_Numbers
   Non_ASCII
   Tabs
   Letters
   Numbers
   Punctuation
   Symbols

   ## PRIVATE
   regex_pattern self = case self of
      Named_Pattern.Leading_Whitespace -> "^\s+"
      Named_Pattern.Trailing_Whitespace -> "\s+$"
      Named_Pattern.Duplicate_Whitespace -> "(?<=\s)\s+"
      Named_Pattern.All_Whitespace -> "\s+"
      Named_Pattern.Leading_Numbers -> "^\d+"
      Named_Pattern.Trailing_Numbers -> "\d+$"
      Named_Pattern.Non_ASCII -> "[^\x00-\x7F]"
      Named_Pattern.Tabs -> "\t"
      Named_Pattern.Letters -> "[a-zA-Z]"
      Named_Pattern.Numbers -> "\d"
      Named_Pattern.Punctuation -> '[,.!?():;\'\"]'
      Named_Pattern.Symbols -> "[^a-zA-Z\d\s]"

## Defines a Text_Cleanse operation
type Text_Cleanse
   Value named_pattern:Named_Pattern
   
   ## Apply the cleanse operation to the text.
   apply self input:Cleansable_Text -> Any =
      input.replace self.named_pattern.regex_pattern ""

## PRIVATE 
   Defines the interface for cleansable object.
type Cleansable_Text
   Value replace



