import project.Data.Numbers.Integer
import project.Data.Text.Text
import project.Error.Error
import project.Errors.File_Error.File_Error
import project.IO
import project.Panic.Panic
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.Input_Stream.Input_Stream

polyglot java import java.io.StringReader
polyglot java import javax.xml.parsers.DocumentBuilderFactory
polyglot java import javax.xml.parsers.DocumentBuilder
polyglot java import org.w3c.dom.Document
polyglot java import org.w3c.dom.Element
polyglot java import org.xml.sax.InputSource
polyglot java import org.xml.sax.SAXException
polyglot java import org.xml.sax.SAXParseException

type XML_Document
    ## Read an XML document from a file.

       Arguments:
       - file: the `File` to read the XML document from.

       If there is an error reading the file, `File_Error` is thrown.

       If there is a parsing error, `XML_Error.Parse_Error` is thrown.

       > Example
         Read an XML document in 'doc.xml'.

             file = enso_project.data / "doc.xml"
             doc = XML_Document.from_file test_file
    from_file : File -> XML_Document ! XML_Error | File_Error
    from_file file =
        File_Error.handle_java_exceptions file <| XML_Error.handle_java_exceptions <|
            file.with_input_stream [File_Access.Read] XML_Document.from_stream

    ## Read an XML document from an input stream.

       Arguments:
       - input_stream: the input streadm to read the XML document from.

       If there is a parsing error, `XML_Error.Parse_Error` is thrown.

       > Example
         Read an XML document from an input_stream.

             input_stream = get_input_stream
             doc = XML_Document.from_stream input_stream
    from_stream : Input_Stream -> XML_Document ! XML_Error
    from_stream input_stream =
        XML_Error.handle_java_exceptions <|
           input_stream.with_java_stream java_stream->
               document_builder_factory = DocumentBuilderFactory.newInstance
               document_builder = document_builder_factory.newDocumentBuilder
               XML_Document.Value (document_builder.parse java_stream)

    from_string : Text -> XML_Document ! XML_Error
    from_string xml_string =
        XML_Error.handle_java_exceptions <|
            string_reader = StringReader.new xml_string
            input_source = InputSource.new string_reader
            document_builder_factory = DocumentBuilderFactory.newInstance
            document_builder = document_builder_factory.newDocumentBuilder
            XML_Document.Value (document_builder.parse input_source)

    ## PRIVATE
    Value (java_document:Document)

    root_element : XML_Element
    root_element self =
        java_element = self.java_document.getDocumentElement
        self.java_document.getDocumentElement.normalize
        XML_Element.Value java_element

##
    type XML_Format
        # Implements the File_Format interface, using XML_Document.from_file
        # Include mime type (with encoding??) and from_stream

type XML_Element
    ## Gets the tag of an xml element.

       Example:
           XML_Document.from_string '<foo>hello</foo>' . root_element . at 0 . tag
           # => "foo"
    name : Text
    name self = self.java_element.getNodeName

    ## PRIVATE
    Value (java_element:Element)

    ## Gets a map of the attributes of an xml element.

       Example:
           XML_Document.from_string '<foo bar="one">hello</foo>' . at 0 . attributes
           # => Map.from_vector [["bar", "one"]]
    #attributes : Map Text Text

    ##

        ## Gets the child nodes of an xml element.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . children
               # => [XML_Document.from_string "<baz>hello</baz>"]
        children : Vector XML_Element

        ## Gets the non-markup contents of the element.

           Example:
               XML_Document.from_string '<foo>hello</foo>' . at 0 . tag
               # => "hello"
        text : Text

        ## Gets the raw XML of the element (including tag, attributes and contents).
        outer_xml : Text

        ## Gets the raw XML contents of the element.
        inner_xml : Text

        ## Gets a child or attribute of an xml element. ("@foo" for attributes")
           Integer is child index.
           Text should support XPath.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . at 0
               # => XML_Document.from_string "<baz>hello</baz>"
        at : Text | Integer -> XML_Element | Text ! Key_Not_Found

        ## Gets a child of an xml element.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . at 0
               # => XML_Document.from_string "<baz>hello</baz>"
        get : Text | Integer -> Any -> XML_Element

        ## Gets the number children of an xml element.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . num_children
               # => 1
        length : Integer

        ## Gets elements matching a given tag name

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . get_elements_by_tag_name "baz"
               # => [XML_Document.from_string "<baz>hello</baz>"]
        get_elements_by_tag_name : Text -> Vector XML_Element

type XML_Error
    # An error that indicates that the XML data could not be parsed.

      Arguments:
      - line_number: the line on which the parse failed.
      - column_number: the column at which the parse failed.
    Parse_Error (line_number : Integer) (column_number : Integer)

    Other (error : Text)

    ## PRIVATE
       Convert the XML_Error to a human-readable format.
    to_display_text : Text
    to_display_text self = case self of
        XML_Error.Parse_Error line_number column_number -> "The XML could not be parsed at line " + line_number.to_text + ", column " + column_number.to_text
        XML_Error.Other error -> error

    ## PRIVATE

       Utility method for running an action with Java exceptions mapping.
    handle_java_exceptions ~action =
        Panic.catch SAXException action caught_panic->
            XML_Error.wrap_sax_exception caught_panic.payload

    ## PRIVATE

       Converts a Java `SAXException` into its Enso counterpart.
    wrap_sax_exception sax_exception = case sax_exception of
        _ : SAXParseException -> Error.throw (XML_Error.Parse_Error sax_exception.getLineNumber sax_exception.getColumnNumber)
        _ -> Error.throw (XML_Error.Other "A SAXException has occurred: "+sax_exception.to_text)
