import project.Errors.File_Error.File_Error
import project.IO
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.Input_Stream.Input_Stream
import project.Data.Text.Text

polyglot java import javax.xml.parsers.DocumentBuilderFactory
polyglot java import javax.xml.parsers.DocumentBuilder
polyglot java import org.w3c.dom.Document
polyglot java import org.w3c.dom.Element

type XML_Document
    read_file : File -> XML_Document ! File_Error
    read_file file =
        file.with_input_stream [File_Access.Read] XML_Document.read_stream

    read_stream : Input_Stream -> XML_Document ! File_Error
    read_stream input_stream =
        input_stream.with_java_stream java_stream->
            document_builder_factory = DocumentBuilderFactory.newInstance
            document_builder = document_builder_factory.newDocumentBuilder
            XML_Document.Value (document_builder.parse java_stream)

    ## PRIVATE
    Value (java_document:Document)

    ##
        ## Static methods
        from_file : Text -> XML_Document ! XML_Parse_Error
        from_string : Text -> XML_Document ! XML_Parse_Error

    root_element : XML_Element
    root_element self =
        java_element = self.java_document.getDocumentElement
        IO.println 'BBB'
        IO.println self
        IO.println self.java_document
        IO.println self.java_document.getDocumentElement
        self.java_document.getDocumentElement.normalize
        IO.println self
        IO.println self.java_document
        IO.println self.java_document.getDocumentElement
        XML_Element.Value java_element

##
    type XML_Format
        # Implements the File_Format interface, using XML_Document.from_file
        # Include mime type (with encoding??) and from_stream

type XML_Element
    ## Gets the tag of an xml element.

       Example:
           XML_Document.from_string '<foo>hello</foo>' . root_element . at 0 . tag
           # => "foo"
    name : Text
    name self = self.java_element.getNodeName

    ## PRIVATE
    Value (java_element:Element)

    ##

        ## Gets a map of the attributes of an xml element.

           Example:
               XML_Document.from_string '<foo bar="one">hello</foo>' . at 0 . attributes
               # => Map.from_vector [["bar", "one"]]
        attributes : Map Text Text

        ## Gets the child nodes of an xml element.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . children
               # => [XML_Document.from_string "<baz>hello</baz>"]
        children : Vector XML_Element

        ## Gets the non-markup contents of the element.

           Example:
               XML_Document.from_string '<foo>hello</foo>' . at 0 . tag
               # => "hello"
        text : Text

        ## Gets the raw XML of the element (including tag, attributes and contents).
        outer_xml : Text

        ## Gets the raw XML contents of the element.
        inner_xml : Text

        ## Gets a child or attribute of an xml element. ("@foo" for attributes")
           Integer is child index.
           Text should support XPath.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . at 0
               # => XML_Document.from_string "<baz>hello</baz>"
        at : Text | Integer -> XML_Element | Text ! Key_Not_Found

        ## Gets a child of an xml element.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . at 0
               # => XML_Document.from_string "<baz>hello</baz>"
        get : Text | Integer -> Any -> XML_Element

        ## Gets the number children of an xml element.

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . at 0 . num_children
               # => 1
        length : Integer

        ## Gets elements matching a given tag name

           Example:
               XML_Document.from_string '<foo><baz>hello</baz></foo>' . get_elements_by_tag_name "baz"
               # => [XML_Document.from_string "<baz>hello</baz>"]
        get_elements_by_tag_name : Text -> Vector XML_Element
