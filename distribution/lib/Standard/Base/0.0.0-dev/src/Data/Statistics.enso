from Standard.Base import all

from Standard.Base.Data.Model.Fit_Error as Fit_Error_Module import Fit_Error

polyglot java import org.enso.base.statistics.SingleValue
polyglot java import org.enso.base.statistics.Regression
polyglot java import org.enso.base.statistics.Multivariate

from Standard.Base.Data.Model.Fit_Error as Fit_Error_Module export Fit_Error

type Statistic
    ## PRIVATE
       Convert the Enso Statistic into Java equivalent
    to_java : SingleValue
    to_java = case this of
        Sum -> SingleValue.SUM
        Mean -> SingleValue.MEAN
        Variance p -> if p then SingleValue.VARIANCE_POPULATION else SingleValue.VARIANCE
        Standard_Deviation p -> if p then SingleValue.STANDARD_DEVIATION_POPULATION else SingleValue.STANDARD_DEVIATION
        Skew p -> if p then SingleValue.SKEW_POPULATION else SingleValue.SKEW
        _ -> Nothing

    ## Count the number of non-Nothing values
    type Count

    ## The minimum value
    type Minimum

    ## The maximum value
    type Maximum

    ## Sum the non-Nothing values
    type Sum

    ## The sample mean of the values
    type Mean

    ## The variance of the values
       Arguments:
       - population: specifies if data is a sample or the population
    type Variance (population:Boolean=False)

    ## The standard deviation of the values
       Arguments:
       - population: specifies if data is a sample or the population
    type Standard_Deviation (population:Boolean=False)

    ## The skew of the values
       Arguments:
       - population: specifies if data is a sample or the population
    type Skew (population:Boolean=False)

## Compute a set of statistics on a vector like object

   Arguments:
   - data: Vector like object which has a `to_array` method.
   - statistics: Set of statistics to calculate.
compute : Any -> [Statistics] -> [Pair Statistics Number]
compute data statistics=[Count, Sum] =
    java_stats = statistics.map .to_java . to_array
    stats_array = SingleValue.compute data.to_array java_stats
    statistics.map_with_index idx->stat->(Pair stat (stats_array.at idx))

## Given a set of known y-values and a set of fitted values, compute the RÂ²
   (coefficient of determination) value.

   Arguments:
   - known: `Vector` of known values
   - fitted: `Vector` of fitted values
r_squared : [Number] -> [Number] -> Number
r_squared known fitted =
    Regression.rSquared known.to_array fitted.to_array

## Calculates a Pearson product-moment correlation matrix between the set of
   data
pearson_correlation : Vector [Number] -> Vector [Number]
pearson_correlation data =
    java_array = data.map .to_array . to_array
    matrix = Multivariate.pearsonCorrelation java_array
    Vector.new matrix.length i->(Vector.Vector (matrix.at i))

## Compute statistics on the vector
Vector.Vector.compute : [Statistic] -> [Number]
Vector.Vector.compute statistics=[Count, Sum] =
    here.compute this statistics
