import project.Any.Any
import project.Data.Array.Array
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Map.Map
import project.Data.Map.No_Value_For_Key
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Pair.Pair
import project.Data.Range.Extensions
import project.Data.Text.Extensions
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Error.Illegal_Argument.Illegal_Argument
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic

from project.Data.Boolean import Boolean, True, False

polyglot java import java.lang.Exception as JException

## Represents a JSON structure.
type Json
    ## Parse a Text value into JSON_Object or Enso Native
    parse : Text -> JSON_Object | Boolean | Number | Nothing | Text | Vector
    parse json =
        parsed = json_parse json
        make_enso parsed

    ## Serialize an Object to JSON
    stringify : Text
    stringify object =
        json_stringify object.to_json

    ## Creates a JSON_Object from a list of key-value pairs.
       Keys must be `Text` values.
    from_pairs : Vector -> JSON_Object
    from_pairs pairs =
        js_object = pairs.fold new_object current->pair->
            case pair.at 0 of
                _ : Text ->
                    set_value current (pair.at 0) (pair.at 1).to_json
                    current
                _ -> Error.throw (Illegal_Argument.Error "JSON_Object.from_pairs: key must be a Text value")
        JSON_Object.Value js_object

## UNSTABLE

   A failure indicating malformed text input into the JSON parser.

   Check the `message` field for detailed information on the specific failure.
type Json_Parse_Error
    Error message

    ## PRIVATE

       Converts the error to a display representation.
    to_display_text : Text
    to_display_text self =
        "Parse error in parsing JSON: " + self.message.to_text + "."

## UNSTABLE

   A failure indicating the inability to marshall a `Json` object into the
   specified format.
type Marshalling_Error

    ## UNSTABLE

       The `json` object could not be converted into `format`, due to a type
       mismatch.

       Arguments:
       - json: The JSON that could not be marshalled.
       - format: The type format that did not match.

       This can occur e.g. when trying to reinterpret a number as a `Text`, etc.
    Type_Mismatch json format

    ## UNSTABLE

       The `json` object could not be converted into `format`, due to a field
       missing in the `json` structure.

       Arguments:
       - json: The json that had a missing field.
       - field: The field name that was missing.
       - format: The type format that diud not match.

       This can occure when trying to reinterpret a JSON object into an atom,
       when the JSON does not contain all the fields required by the atom.
    Missing_Field json field format

    ## UNSTABLE

       Convert the marshalling error into a human-readable format.
    to_display_text : Text
    to_display_text self = case self of
        Marshalling_Error.Type_Mismatch json format ->
            json_text = Meta.get_simple_type_name json
            format_text = Meta.get_simple_type_name format
            "Type mismatch error: the json with type `" + json_text + "` did not match the format `" + format_text + "`."
        Marshalling_Error.Missing_Field _ field _ ->
            "Missing field in Json: the field `" + field.to_text "` was missing in the json."

type JSON_Object
    ## PRIVATE
    Value js_object

    ## Get a property from a JSON_Object
    get : Text -> Any -> JSON_Object | Boolean | Number | Nothing | Text | Vector
    get self ~other=Nothing key =
        if (has_property self.js_object key) . not then other else
            value = get_value self.js_object key
            make_enso value

    ## Get the keys of the object
    field_names : Vector
    field_names self =
        Vector.from_polyglot_array (get_property_names self.js_object)

    ## Gets the number of keys in the object
    length : Number
    length self =
        get_property_names self.js_object . length

    ## Convert the object to a Vector of Pairs
    to_vector : Vector
    to_vector self =
        keys = get_property_names self.js_object
        proxy = Array_Proxy.new keys.length (i-> Pair.new (keys.at i) (self.get (keys.at i)))
        Vector.from_polyglot_array proxy

    ## Convert the object to a JSON
    to_json : JSON_Object
    to_json self = self

    ## Convert to string
    to_text : Text
    to_text self = json_stringify self.js_object

make_enso js_object =
    case js_object of
        Nothing -> Nothing
        _ : Text -> js_object
        _ : Boolean -> js_object
        _ : Number -> js_object
        _ : Array ->
            proxy = Array_Proxy.new js_object.length (i-> make_enso (js_object.at i))
            Vector.from_polyglot_array proxy
        _ -> JSON_Object.Value js_object

foreign js new_object = """
    return {}

foreign js json_parse text = """
    return JSON.parse(text)

foreign js json_stringify js_object = """
    return JSON.stringify(js_object)

foreign js has_property js_object key = """
    return js_object.hasOwnProperty(key)

foreign js get_value object key = """
    return object[key]

foreign js set_value object key value = """
    object[key] = value

foreign js get_property_names object = """
    return Object.getOwnPropertyNames(object)
