from Standard.Base import all
import Standard.Base.System

polyglot java import java.time.Duration as Java_Duration
polyglot java import java.time.Period as Java_Period
polyglot java import org.enso.base.Time_Utils

## Create an interval representing the duration between two points in time.

   Arguments:
   - start_inclusive: The start time of the duration.
   - end_inclusive: The end time of the duration.
   - timezone_aware: Whether the duration between two given times should be
     aware of the timezone, that can be set for start or end times.

   > Example
     An hour interval between two points in time.

         from Standard.Base import Date_Time
         import Standard.Base.Data.Time.Duration

         example_between = Duration.between Date_Time.now (Date_Time.new 2010 10 20)
between : (Date|Date_Time) -> (Date|Date_Time) -> Boolean -> Duration
between start_inclusive end_exclusive timezone_aware=True =
    Duration.between_builtin start_inclusive end_exclusive timezone_aware

## Create a duration from time units.

   Arguments:
   - hours: hours
   - minutes: minutes
   - seconds: seconds
   - milliseconds: milliseconds
   - nanoseconds: nanoseconds

   > Example
     Duration of 2 hours.

         import Standard.Base.Data.Time.Duration

         example_duration = Duration.new hours=2
new : Integer -> Integer -> Integer -> Integer -> Integer -> Integer -> Duration
new hours=0 minutes=0 seconds=0 milliseconds=0 nanoseconds=0 =
    Duration.new_builtin hours minutes seconds milliseconds nanoseconds

## ADVANCED

   Time the evaluation of a function, return a Pair of Duration and Result

   Arguments:
   - function: Function to execute.
time_execution : Any -> Pair Duration Any
time_execution ~function =
    start = System.nano_time
    result = Runtime.no_inline function
    end = System.nano_time
    duration = new nanoseconds=(end - start)
    Pair_Data duration result


# TODO Dubious constructor export
from project.Data.Time.Duration.Duration import all
from project.Data.Time.Duration.Duration export all

@Builtin_Type
type Duration

    ## Add the specified amount of time to this duration.

       Arguments:
       - that: The duration to add to `self`.

       > Example
         Add 6 seconds to a duration of 3 minutes

             import Standard.Base.Data.Time.Duration

             example_add = 3.minutes + 6.seconds

       > Example
         Add 12 hours to a duration of a month.

             import Standard.Base.Data.Time.Duration

             example_add = 1.month + 12.hours
    + : Duration -> Duration
    + self that = self.plus_builtin that

    ## Subtract the specified amount of time from this duration.

       Arguments:
       - that: The duration to subtract from `self`.

       > Example
         Subtract 11 months from a duration of 3 years

             import Standard.Base.Data.Time.Duration

             example_subtract = 3.years - 11.months

       > Example
         Substract 30 minutes from a duration of 7 months.

             import Standard.Base.Data.Time.Duration

             example_subtract = 7.months - 30.minutes
    - : Duration -> Duration
    - self that = self.minus_builtin that

    ## Check two durations for equality.

       Arguments:
       - that: The duration to compare against `self`.

       > Examples
         Check if 60 seconds and 1 minute are equal.

             import Standard.Base.Data.Time.Duration

             example_eq = 60.seconds == 1.minute
    == : Duration -> Boolean
    == self that = self.equals_builtin that

    ## Compares `self` to `that` to produce an ordering.

       Arguments:
       - that: The other `Duration` to compare against.

       > Example
         Compare two durations for their ordering.

             import Standard.Base.Data.Time.Duration

             example_compare_to =
                 duration_1 = 1.hour
                 duration_2 = 60.minutes + 5.minutes
                 duration_1.compare_to duration_2
    compare_to : Duration -> Ordering
    compare_to self that = Ordering.from_sign (self.compare_to_builtin that)

    ## Get the portion of the duration expressed in nanoseconds.

       > Example
         Get the portion of the duration expressed in nanoseconds.

             import Standard.Examples

             example_nanos = Examples.duration.nanoseconds
    nanoseconds : Integer
    nanoseconds self = @Builtin_Method "Duration.nanoseconds"

    ## Get the portion of the duration expressed in milliseconds.

       > Example
         Get the portion of the duration expressed in milliseconds.

             import Standard.Examples

             example_millis = Examples.duration.milliseconds
    milliseconds : Integer
    milliseconds self = @Builtin_Method "Duration.milliseconds"

    ## Get the portion of the duration expressed in seconds.

       > Example
         Get the portion of the duration expressed in seconds.

             import Standard.Examples

             example_seconds = Examples.duration.seconds
    seconds : Integer
    seconds self = @Builtin_Method "Duration.seconds"

    ## Get the portion of the duration expressed in minutes.

       > Example
         Get the portion of the duration expressed in minutes.

             import Standard.Examples

             example_minutes = Examples.duration.minutes
    minutes : Integer
    minutes self = @Builtin_Method "Duration.minutes"

    ## Get the portion of the duration expressed in hours.

       > Example
         Get the portion of the duration expressed in hours.

             import Standard.Examples

             example_hours = Examples.duration.milliseconds
    hours : Integer
    hours self = @Builtin_Method "Duration.hours"

    ## Convert this duration to a Vector of hours, minutes, seconds, milliseconds
       and nanoseconds.

       > Example
         Convert a duration of one hour to a vector resulting in
         `[1, 60, 3600, 3600000, 3600000000000]`.

             import Standard.Base.Data.Time.Duration

             example_to_vec = 1.hour.to_vector

       > Example
         Convert duration of 800 nanoseconds to a vector returning
         `[0, 0, 0, 0, 0, 800]`

             import Standard.Base.Data.Time.Duration

             example_to_vec = 800.nanoseconds.to_vector
    to_vector : Vector.Vector Integer
    to_vector self = [self.hours, self.minutes, self.seconds, self.milliseconds, self.nanoseconds]

    ## A Duration to Json conversion.

       > Example
         Convert a duration of 10 seconds to Json.

             import Standard.Base.Data.Time.Duration

             example_to_json = 10.seconds.to_json
    to_json : Json.Object
    to_json self =
        b = Vector.new_builder
        b.append ["type", "Duration"]
        if self.hours==0 . not then b.append ["hours", self.hours]
        if self.minutes==0 . not then b.append ["minutes", self.minutes]
        if self.seconds==0 . not then b.append ["seconds", self.seconds]
        if self.milliseconds==0 . not then b.append ["milliseconds", self.milliseconds]
        if self.nanoseconds==0 . not then b.append ["nanoseconds", self.nanoseconds]
        Json.from_pairs b.to_vector

    ## Check if this duration represents an empty time-span.

       > Example
         Check if the duration of 10 seconds is empty.

             import Standard.Base.Data.Time.Duration

             example_is_empty = 10.seconds.is_empty
    is_empty : Boolean
    is_empty self = self.to_vector . all (==0)


## Create a duration of `self` nanoseconds.

   > Examples
     Create a duration of 1 nanosecond.

         import Standard.Base.Data.Time.Duration

         example_nano = 1.nanosecond
Integer.nanosecond : Duration
Integer.nanosecond self = new nanoseconds=self

## Create a duration of `self` nanoseconds.

   > Examples
     Create a duration of 20 nanoseconds.

         import Standard.Base.Data.Time.Duration

         example_nano = 20.nanoseconds
Integer.nanoseconds : Duration
Integer.nanoseconds self = self.nanosecond

## Create a duration of `self` milliseconds.

   > Example
     Create a duration of 1 millisecond.

         import Standard.Base.Data.Time.Duration

         example_milli = 1.millisecond
Integer.millisecond : Duration
Integer.millisecond self = new milliseconds=self

## Create a duration of `self` milliseconds.

   > Example
     Create a duration of 20 milliseconds.

         import Standard.Base.Data.Time.Duration

         example_milli = 20.milliseconds
Integer.milliseconds : Duration
Integer.milliseconds self = self.millisecond

## Create a duration of `self` seconds.

   > Example
     Create a duration of 1 second.

         import Standard.Base.Data.Time.Duration

         example_second = 1.second
Integer.second : Duration
Integer.second self = new seconds=self

## Create a duration of `self` seconds.

   > Example
     Create a duration of 20 seconds.

         import Standard.Base.Data.Time.Duration

         example_second = 20.seconds
Integer.seconds : Duration
Integer.seconds self = self.second

## Create a duration of `self` minutes.

   > Example
     Create a duration of 1 minute.

         import Standard.Base.Data.Time.Duration

         example_min = 1.minute
Integer.minute : Duration
Integer.minute self = new minutes=self

## Create a duration of `self` minutes.

   > Example
     Create a duration of 20 minutes.

         import Standard.Base.Data.Time.Duration

         example_min = 20.minutes
Integer.minutes : Duration
Integer.minutes self = self.minute

## Create a duration of `self` hours.

   > Example
     Create a duration of 1 hour.

         import Standard.Base.Data.Time.Duration

         example_hour = 1.hour
Integer.hour : Duration
Integer.hour self = new hours=self

## Create a duration of `self` hours.

   > Example
     Create a duration of 20 hours.

         import Standard.Base.Data.Time.Duration

         example_hour = 20.hours
Integer.hours : Duration
Integer.hours self = self.hour
