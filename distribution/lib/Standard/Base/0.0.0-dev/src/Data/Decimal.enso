import project.Any.Any
import project.Data.Numeric.Internal.Decimal_Internal
import project.Data.Numeric.Math_Context.Math_Context
import project.Data.Numeric.Rounding_Mode.Rounding_Mode
import project.Data.Text.Text
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Nothing.Nothing
import project.Panic.Panic
import project.Warning.Warning
from project.Data.Boolean import Boolean, False, True
from project.Data.Numbers import Float, Integer, Number, Number_Parse_Error
from project.Data.Numeric.Internal.Decimal_Internal import Decimal_Comparator
from project.Data.Ordering import Comparable, Ordering
from project.Errors.Common import Arithmetic_Error, Loss_Of_Numeric_Precision, Unsupported_Argument_Types

polyglot java import java.lang.ArithmeticException
polyglot java import java.lang.NumberFormatException
polyglot java import java.math.BigDecimal
polyglot java import org.enso.base.numeric.ConversionResult
polyglot java import org.enso.base.numeric.Decimal_Utils

## Decimal is the type of decimal (base-10-scaled) numbers in Enso. An Enso
   `Decimal` is a wrapper around a Java `BigDecimal`.

   `Decimal` values have more overhead than standard `Float` values, but they
   have the advantage of being able to precisely specify values such as `0.1`,
   which is important for certain kinds of calculations, such as currency.

   A `Decimal` value is represented internally by a Java `BigInteger` "unscaled
   value" and a "scale value". The numerical value of the `Decimal` is
   `(unscaledValue * 10^(-scale))`. Scale values are maintained automatically by
   the constructors and numerical operations.

   Scale values can allow distinctions between values that would be identical as
   `Float`s. For example, the following values have different internal
   representations:

       a = Decimal.new "2.0"
       b = Decimal.new "2.00"
       a == b
       # => True

   These two values have different internal representations, but they are still
   considered the same value by `==`.

   All of the constructors, and many of the operations, can take an additional
   `Math_Context` value, which can specify two things:

   - precision: the number of decimal digits to use to represent a value or
     result; results are rounded to this precision.
   - rounding_mode: the method to use for rounding. See `Rounding_Mode` for
     details about each rounding method.

   When a `Math_Context` value is used in an operation, and causes a loss of
   precision, a `Loss_Of_Numeric_Precision` warning is attached to the result.

   If no `Math_Context` value is supplied, the default is to make all operations
   exact. A `Math_Context` with a precision of `0` has the same effect.

   A `Decimal` can represent any `Float` precisely. However, some `Float`
   literals, such as `0.1`, cannot be represented exactly to infinite
   precision by a `Float`. For this reason, constructing a `Decimal` from
   a `Float` always attaches a `Loss_Of_Numeric_Precision` warning to the
   result. To avoid this problem, it is recommended to create `Decimal`s from
   fractional values by passing the value in as a `Text`, where possible and
   convenient.

   The `Decimal` class provides arithmetic operations `add`, `subtract`,
   `multiply`, and `divide`, which can take a `Math_Context` argument. You can
   also use the usual operators `+`, `-`, `*`, `/`, which are the same as the
   named methods, but which cannot take a `Math_Context`.

   In the case of `divide`, it is possible that the result will have a
   non-terminating deicmal expansion. If the operation did not specify a
   `Math_Context`, or specified an explicit `Math_Context` with infinite
   precision, then it is impossible to represent the result as requested, and an
   `Arithmetic_Error` will be thrown. In this case, the solution is to specify
   an explicit precision using a `Math_Context`.
type Decimal
    ## PRIVATE
    Value (big_decimal : BigDecimal)

    ## ICON number_input
       Construct a `Decimal` from a string or integer.

       Arguments:
       - x: The `Text`, `Integer`, or `Float` to construct a `Decimal` from.
       - mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.
         If a `Math_Context` is used, there is a possibility of a loss of
         precision.

       ? Number Format

         The textual format for a Decimal is defined at
         https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-.

       ! Error Conditions

         - If the `Text` argument is incorrectly formatted, a `Number_Parse_Error`
           is thrown.
         - If the construction of the Decimal results in a loss of precision, a
           `Loss_Of_Numeric_Precision` warning is attached. This can only happen
           if a `Math_Context` value is explicitly passed.

        ^ Example
          Create a `Decimal` from a string.

              c = Decimal.new "12.345"
    new : Text | Integer | Float -> Math_Context | Nothing -> Decimal ! Arithmetic_Error | Number_Parse_Error
    new (x : Text | Integer | Float) (mc : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error | Number_Parse_Error =
        handle_java_exception <|
            case x of
                _ : Text -> Decimal.parse x mc
                _ : Integer -> Decimal.from_integer x mc
                _ : Float -> Decimal.from_float x mc

    ## GROUP conversions
       ICON convert
       Construct a `Decimal` from a `Text`.

       Arguments:
       - s: The `Text` to construct a `Decimal` from.
       - mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.
         If a `Math_Context` is used, there is a possibility of a loss of
         precision.

       ? Number Format

         The textual format for a Decimal is defined at
         https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#BigDecimal-java.lang.String-.

       ! Error Conditions

         - If `s` is incorrectly formatted, a `Number_Parse_Error` is thrown.
         - If the construction of the Decimal results in a loss of precision, a
           `Loss_Of_Numeric_Precision` warning is attached. This can only happen
           if a `Math_Context` value is explicitly passed.

        ^ Example
          Create a `Decimal` from a string.

              d = Decimal.parse "12.345"
    parse : Text -> Math_Context | Nothing -> Decimal ! Arithmetic_Error | Number_Parse_Error
    parse (s : Text) (mc : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error | Number_Parse_Error =
        handle_java_exception <| handle_number_format_exception <|
            case mc of
                _ : Math_Context -> Decimal.Value <| handle_precision_loss s <| Decimal_Utils.fromString s mc.math_context
                _ : Nothing -> Decimal.Value (Decimal_Utils.fromString s)

    ## GROUP conversions
       ICON convert
       Construct a `Decimal` from an `Integer`.

       Arguments:
       - i: The `Integer` to construct a `Decimal` from.
       - mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.
         If a `Math_Context` is used, there is a possibility of a loss of
         precision.

       ! Error Conditions

         - If the construction of the Decimal results in a loss of precision, a
           `Loss_Of_Numeric_Precision` warning is attached. This can only happen
           if a `Math_Context` value is explicitly passed.

        ^ Example
          Create a `Decimal` from an integer.

              d = Decimal.from_integer 12
    from_integer : Integer -> Math_Context | Nothing -> Decimal ! Arithmetic_Error
    from_integer (i : Integer) (mc : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error =
        handle_java_exception <|
            case mc of
                _ : Math_Context -> Decimal.Value <| handle_precision_loss i <| Decimal_Utils.fromInteger i mc.math_context
                _ : Nothing -> Decimal.Value (Decimal_Utils.fromInteger i)

    ## GROUP conversions
       ICON convert
       Construct a `Decimal` from a `Float`.

       Arguments:
       - f: The `Float` to construct a `Decimal` from.
       - mc: The `Math_Context` to use to specify precision and `Rounding_Mode`.
         If a `Math_Context` is used, there is a possibility of a loss of
         precision.

       ? Precision Loss

         A `Decimal` can represent any `Float` precisely. However, some `Float`
         literals, such as `0.1`, cannot be represented exactly to infinite
         precision by a `Float`. For this reason, constructing a `Decimal` from
         a `Float` always attaches a `Loss_Of_Numeric_Precision` warning to the
         result.

       ! Error Conditions

         - A `Loss_Of_Numeric_Precision` warning is always attached when
           converting to `Decimal` from `Float`.
         - If `f` is NaN or +/-Inf, an Illegal_Argument error is thrown.

        ^ Example
          Create a `Decimal` from a float.

              d = Decimal.from_integer 12.345
    from_float : Float -> Math_Context | Nothing -> Decimal ! Arithmetic_Error | Illegal_Argument
    from_float (f : Float) (mc : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error | Illegal_Argument =
        is_exceptional = f.is_nan || f.is_infinite
        if is_exceptional then Error.throw (Illegal_Argument.Error "Cannot convert "+f.to_text+" to a Decimal") else
            handle_java_exception <| attach_loss_of_numeric_precision f <|
                case mc of
                    _ : Math_Context -> Decimal.Value <| handle_precision_loss f <| Decimal_Utils.fromFloat f mc.math_context
                    _ : Nothing -> Decimal.Value (Decimal_Utils.fromFloat f)

    ## ALIAS greater than
       GROUP Operators
       ICON operators
       Checks if this is greater than that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is greater than 7.

             Decimal.new 10 > 7
             # => True
    > : Decimal -> Boolean
    > self (that : Decimal) -> Boolean = Decimal_Comparator.compare self that == Ordering.Greater

    ## ALIAS greater than or equal
       GROUP Operators
       ICON operators
       Checks if this is greater than or equal to that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is greater than or equal to 7.

             Decimal.new 10 >= 7
             # => True
    >= : Decimal -> Boolean
    >= self (that : Decimal) -> Boolean =
        ordering = Decimal_Comparator.compare self that
        ordering == Ordering.Greater || ordering == Ordering.Equal

    ## ALIAS less than
       GROUP Operators
       ICON operators
       Checks if this is less than that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is less than 7.

             Decimal.new 10 < 7
             # => False
    < : Decimal -> Boolean
    < self (that : Decimal) -> Boolean = Decimal_Comparator.compare self that == Ordering.Less

    ## ALIAS less than or equal
       GROUP Operators
       ICON operators
       Checks if this is less than or equal to that.

       Arguments:
       - that: The number to compare this against.

       > Example
         Checking if 10 is less than or equal to 7.

             Decimal.new 10 <= 7
             # => False
    <= : Decimal -> Boolean
    <= self (that : Decimal) -> Boolean =
        ordering = Decimal_Comparator.compare self that
        ordering == Ordering.Less || ordering == Ordering.Equal

    ## ALIAS plus
       GROUP Operators
       ICON math
       Adds a `Decimal` to another `Decimal` or other kind of number. A
       `Math_Context` value can be specified to set the precision and
       `Rounding_Mode`.

       Arguments:
       - that: The number to add to this.
       - math_context: Used to optionally specify precision and `Rounding_Mode`.

       Arguments to `add` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Adding 10.22 and 20.33.

             a = Decimal.new "10.22"
             b = Decimal.new "20.33"
             c = a.add b
             # => Decimal.new 30.55

       > Example
         Adding 10.22 and 20.33, rounding to 3 digits of precision (1 decimal
         place).

             a = Decimal.new "10.22"
             b = Decimal.new "20.33"
             a.add b (Math_Context.new 3)
             # => Decimal.new 30.5
    add : Decimal -> Math_Context | Nothing -> Decimal ! Arithmetic_Error
    add self (that : Decimal) (math_context : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error =
        handle_java_exception <|
            case math_context of
                Nothing -> Decimal.Value (self.big_decimal.add that.big_decimal)
                _ -> Decimal.Value (self.big_decimal.add that.big_decimal math_context.math_context)

    ## ALIAS plus
       GROUP Operators
       ICON math
       Adds a `Decimal` to another `Decimal` or other kind of number.

       Arguments:
       - that: The number to add to this.

       Arguments to `+` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Adding 10.22 and 20.33.

             a = Decimal.new "10.22"
             b = Decimal.new "20.33"
             c = a + b
             # => Decimal.new 30.55
    + : Decimal -> Decimal
    + self (that : Decimal) = self.add that

    ## ALIAS minus
       GROUP Operators
       ICON math
       Subtract a `Decimal` or other kind of number from another `Decimal`, or
       subtract  a `Decimal` from another kind of number. A `Math_Context` value
       can be specified to set the precision and `Rounding_Mode`.

       Arguments:
       - that: The number to subtract from this.
       - math_context: Used to optionally specify precision and `Rounding_Mode`.

       Arguments to `subtract` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Subtracting 10.22 from 20.33.

             a = Decimal.new "20.33"
             b = Decimal.new "10.22"
             c = a.subtract b
             # => Decimal.new 10.11

       > Example
         Subtracting 10.22 from 20.33, rounding to 3 digits of precision (1
         decimal place).

             a = Decimal.new "20.33"
             b = Decimal.new "10.22"
             c = a.subtract b (Math_Context.new 3)
             # => Decimal.new 10.1
    subtract : Decimal -> Math_Context | Nothing -> Decimal ! Arithmetic_Error
    subtract self (that : Decimal) (math_context : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error =
        handle_java_exception <|
            case math_context of
                Nothing -> Decimal.Value (self.big_decimal.subtract that.big_decimal)
                _ -> Decimal.Value (self.big_decimal.subtract that.big_decimal math_context.math_context)

    ## ALIAS minus
       GROUP Operators
       ICON math
       Subtract a `Decimal` or other kind of number from another `Decimal`, or
       subtract  a `Decimal` from another kind of number.

       Arguments:
       - that: The number to subtract from this.

       Arguments to `-` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Subtracting 10.22 from 20.33.

             a = Decimal.new "20.33"
             b = Decimal.new "10.22"
             c = a - b
             # => Decimal.new 10.11
    - : Decimal -> Decimal
    - self (that : Decimal) = self.subtract that

    ## ALIAS times
       GROUP Operators
       ICON math
       Multiplies a `Decimal` by another `Decimal` or other kind of number. A
       `Math_Context` value can be specified to set the precision and
       `Rounding_Mode`.

       Arguments:
       - that: The number to multiply by this.
       - math_context: Used to optionally specify precision and `Rounding_Mode`.

       Arguments to `multiply` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Multiplying 10.22 and 20.33.

             a = Decimal.new "10.22"
             b = Decimal.new "20.33"
             c = a.multiply b
             # => Decimal.new 207.7726

       > Example
         Multiplying 10.22 and 20.33, rounding to 4 digits of precision (1
         decimal place).

             a = Decimal.new "10.22"
             b = Decimal.new "20.33"
             c = a.multiply b (Math_Context.new 4)
             # => Decimal.new 207.8
    multiply : Decimal -> Math_Context | Nothing -> Decimal ! Arithmetic_Error
    multiply self (that : Decimal) (math_context : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error =
        handle_java_exception <|
            case math_context of
                Nothing -> Decimal.Value (self.big_decimal.multiply that.big_decimal)
                _ -> Decimal.Value (self.big_decimal.multiply that.big_decimal math_context.math_context)

    ## ALIAS times
       GROUP Operators
       ICON math
       Multiplies a `Decimal` by another `Decimal` or other kind of number. 

       Arguments:
       - that: The number to multiply by this.

       Arguments to `*` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Multiplying 10.22 and 20.33.

             a = Decimal.new "10.22"
             b = Decimal.new "20.33"
             c = a * b
             # => Decimal.new 207.7726
    * : Decimal -> Decimal
    * self (that : Decimal) = self.multiply that

    ## GROUP Operators
       ICON math
       Divide a `Decimal` by another `Decimal` or other kind of number, or
       divide another kind of number by a `Decimal`. A `Math_Context` value can
       be specified to set the precision and `Rounding_Mode`.

       Arguments:
       - that: The number to divide by this.
       - math_context: Used to optionally specify precision and `Rounding_Mode`.

       Arguments to `divide` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       ! Error Conditions

         - If the precision specified in `math_context` is 0, or if
         `match_context` is unspecified, and the quotient has a non-terminating
         decimal expansion, an `Arithmetic_Error` is thrown.

       > Example
         Dividing 1065.9378 by 23.34.

             a = Decimal.new "1065.9378"
             b = Decimal.new "23.34"
             c = a.divide b
             # => Decimal.new 45.67

       > Example
         Dividing 1065.9378 by 23.34, rounding to 3 digits of precision (1
         decimal place).

            a = Decimal.new "1065.9378"
             b = Decimal.new "23.34"
             c = a.divide b (Math_Context.new 3)
             # => Decimal.new 45.7
    divide : Decimal -> Math_Context | Nothing -> Decimal ! Arithmetic_Error
    divide self (that : Decimal) (math_context : Math_Context | Nothing = Nothing) -> Decimal ! Arithmetic_Error =
        handle_java_exception <|
            case math_context of
                Nothing -> Decimal.Value (self.big_decimal.divide that.big_decimal)
                _ -> Decimal.Value (self.big_decimal.divide that.big_decimal math_context.math_context)

    ## GROUP Operators
       ICON math
       Divides a `Decimal` by another `Decimal` or other kind of number, or
       divides another kind of number by a `Decimal`.

       Arguments:
       - that: The number to divide by this.

       Arguments to `/` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Dividing 1065.9378 by 23.34.

             a = Decimal.new "1065.9378"
             b = Decimal.new "23.34"
             c = a / b
             # => Decimal.new 45.67
    / : Decimal -> Decimal
    / self (that : Decimal) = self.divide that

    ## ALIAS modulo, modulus
       GROUP Operators
       ICON math
       Computes the remainder when dividing this by that.

       Arguments:
       - that: The number to divide this by.

       Arguments to `remainder` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Computing the remainder when dividing 10 by 3 (which is 1).

             remainder = Decimal.new 10 . remainder 3
             # => 1
    remainder : Decimal -> Decimal -> Decimal
    remainder self (that : Decimal) =
        handle_java_exception <|
            Decimal.Value (self.big_decimal.remainder that.big_decimal)

    ## ALIAS modulo, modulus, remainder
       GROUP Operators
       ICON math
       Computes the remainder when dividing this by that.

       Arguments:
       - that: The number to divide this by.

       Arguments to `%` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       > Example
         Computing the remainder when dividing 10 by 3 (which is 1).

             remainder = Decimal.new 10 % 3
             # => 1
    % : Decimal -> Decimal -> Decimal
    % self (that : Decimal) = self.remainder that

    ## GROUP Math
       ICON math
       Computes the integer division of this by that.

       Arguments:
       - that: The number to divide this by.

       Integer division of Decimals rounds down to the nearest integer.

       Arguments to `div` will undergo automatic conversions such that you
       need not convert other numeric types to `Decimal` manually.

       ! Error Conditions

         - If `that` is 0, `div` throws an Arithmetic_Error.

       > Example
         Dividing 10 by 3 to get 3.

             Decimal.new "10" . div (Decimal.new "3")
             # => 3

       > Example
         Dividing 10.28 by 3.01 to get 3.

             Decimal.new "10.28" . div (Decimal.new "3.01")
             # => 3
    div : Decimal -> Decimal
    div self that:Decimal -> Decimal =
        handle_java_exception <|
            Decimal.Value (self.big_decimal.divideToIntegralValue that.big_decimal)

    ## ALIAS power
       GROUP Operators
       ICON math
       Compute the result of raising this to the positive integer power `exp`.

       Arguments:
       - exp: The exponent. Must be an integer in the range 0 through
         999999999 (inclusive).

       ! Error Conditions

         - If `exp` is outside the range 0 through
           999999999 (inclusive), `Arithmetic_Error` will be thrown.

       > Example
         Computing 2.25 to the fifth power.

             Decimal.new "2.25" . pow (Decimal.new "5")
             # => 57.6650390625
    pow : Integer -> Decimal
    pow self exp:Integer =
        ## If `exp` is an integer that does not fit in a Java Integer,
           UnsuppUnsupported_Argument_Types is raised, so we convert that to an
           Arithmetic_Error.
        handle_java_exception <| handle_unsupported_argument_types <|
            Decimal.Value (self.big_decimal.pow exp)

    ## ALIAS power
       GROUP Operators
       ICON math
       Compute the result of raising this to the positive integer power `exp`.

       Arguments:
       - exp: The exponent. Must be an integer in the range 0 through
         999999999 (inclusive).

       ! Error Conditions

         - If `exp` is outside the range 0 through
           999999999 (inclusive), `Arithmetic_Error` will be thrown.

       > Example
         Computing 2.25 to the fifth power.

             Decimal.new "2.25" ^ Decimal.new "5"
             # => 57.6650390625
    ^ : Integer -> Decimal
    ^ self exp:Integer = self.pow exp

    ## GROUP Operators
       ICON operators
       Compute the negation of this.

       > Example
         Negate 5.1 to get -5.1.

             5.1.negate
             # => Decimal.new -5.1
    negate : Decimal
    negate self = Decimal.Value self.big_decimal.negate

    ## PRIVATE
    precision : Integer
    precision self = self.big_decimal.precision

    ## PRIVATE
    scale : Integer
    scale self = self.big_decimal.scale

    ## PRIVATE
       TODO: This +0 is needed to allow internal representations to be compared.
    unscaled_value : Integer
    unscaled_value self = self.big_decimal.unscaledValue + 0

    ## PRIVATE
    internal_representation : [Integer]
    internal_representation self = [self.unscaled_value, self.precision, self.scale]

    ## PRIVATE
    to_text : Text
    to_text self = self.big_decimal.toString

    ## PRIVATE
    to_text_without_scientific_notation : Text
    to_text_without_scientific_notation  self = self.big_decimal.toPlainString

## PRIVATE
handle_number_format_exception ~action =
    Panic.catch NumberFormatException action caught_panic->
        Error.throw (Number_Parse_Error.Error caught_panic.payload.getMessage)

## PRIVATE
handle_precision_loss : Any -> ConversionResult -> Any
handle_precision_loss original_value conversion_result:ConversionResult -> Any =
    if conversion_result.hasPrecisionLoss.not then conversion_result.newValue else
        new_value = conversion_result.newValue
        Warning.attach (Loss_Of_Numeric_Precision.Warning original_value new_value) new_value

## PRIVATE
attach_loss_of_numeric_precision : Float -> Any -> Any
attach_loss_of_numeric_precision f value =
    Warning.attach (Loss_Of_Numeric_Precision.Warning f f) value

## PRIVATE
handle_java_exception ~action =
    Panic.catch ArithmeticException action caught_panic->
        Error.throw (Arithmetic_Error.Error caught_panic.payload.getMessage)

## PRIVATE
handle_unsupported_argument_types ~action =
    Panic.catch Unsupported_Argument_Types action _->
        Error.throw (Arithmetic_Error.Error "Exponent out of range 0..999999999 (inclusive)")

## PRIVATE
Comparable.from (_ : Decimal) = Decimal_Comparator

## PRIVATE
Comparable.from (_ : Number) = Decimal_Comparator

## PRIVATE
Decimal.from (that : Text) = Decimal.parse that

## PRIVATE
Decimal.from (that : Number) = Decimal.new that
