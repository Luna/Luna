from Standard.Base import all

polyglot java import org.enso.base.statistics.Regression
polyglot java import org.enso.base.statistics.FitError
polyglot java import java.lang.IllegalArgumentException

type Model
    ## Fit a line (y = A + Bx) to the data with an optional fixed intercept.
    type Linear (intercept:Number|Nothing=Nothing)

    ## Fit a logarithmic line (y = A + B log x) to the data.
    type Logarithmic

    ## Use Least Squares to fit a line to the data.
    fit : Vector -> Vector -> Model -> Fitted_Model ! Illegal_Argument_Error | Fit_Error
    fit known_xs known_ys model=Linear =
        report_illegal caught_panic = Error.throw (Illegal_Argument_Error caught_panic.payload.cause.getMessage)
        handle_illegal = Panic.catch IllegalArgumentException handler=report_illegal

        handle_illegal <| Fit_Error.handle_Java_exception <| case mode of
            Linear intercept ->
                fitted = if intercept.is_nothing then Regression.fit_linear known_xs.to_array known_ys.to_array else
                    Regression.fit_linear known_xs.to_array known_ys.to_array intercept
                Linear_Model fitted.slope fitted.intercept fitted.rSquared
            Logarithmic ->
                log_xs = log_series known_xs
                fitted = Regression.fit_linear log_xs.to_array known_ys.to_array
                Logarithmic_Model fitted.slope fitted.intercept fitted.rSquared
            _ -> Error.throw (Illegal_Argument_Error "Unsupported model")

type Fitted_Model
    type Linear_Model slope:Number intercept:Number r_squared:Number

    type Logarithmic_Model slope:Number intercept:Number r_squared:Number

    ## Use the model to predict a value.
    predict : Number -> Number
    predict x = case self of
        Linear_Model slope intercept _ -> slope * x + intercept
        Logarithmic_Model slope intercept _ -> slope * x.ln + intercept
            _ -> Error.throw (Illegal_Argument_Error "Unsupported model")

## PRIVATE

   Computes the log series as long as all values are positive.
log_series : Vector -> Vector ! Illegal_Argument_Error
log_series xs =
    error_throw p = Error.throw p
    ln_with_panic x = if x.is_nothing then Nothing else
        if x <= 0 then Panic.throw (Illegal_Argument_Error "Values must be positive.") else x.ln
    Panic.catch Illegal_Argument_Error handler=error_throw <| xs.map ln_with_panic

## PRIVATE

   An error thrown when the linear regression cannot be computed.

   Arguments:
   - message: The error message.
type Fit_Error message

## PRIVATE

   Converts the `Fit_Error` to a human-readable representation.
Fit_Error.to_display_text : Text
Fit_Error.to_display_text = "Could not fit the model: " + self.message.to_text

## PRIVATE
Fit_Error.handle_java_exception =
    throw_fit_error caught_panic =
        cause = caught_panic.payload.cause
        Error.throw (Fit_Error cause.getMessage)
    Panic.catch FitError handler=throw_fit_error
