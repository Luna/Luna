import project.Any.Any
import project.Data.Numbers.Integer
import project.Data.Filter_Condition.Filter_Condition
import project.Data.List.List
import project.Data.Ordering.Ordering
import project.Data.Pair.Pair
import project.Data.Range.Extensions
import project.Data.Range.Range
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Not_Found
import project.Errors.Common.Index_Out_Of_Bounds
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic

from project.Data.Boolean import Boolean, False
from project.Data.Index_Sub_Range import Index_Sub_Range

## The type of primitive mutable arrays.
@Builtin_Type
type Array
    ## Creates an array with length 0.

       > Example
         Create an empty array.

             Array.empty
    empty : Array
    empty = @Builtin_Method "Array.empty"

    ## Creates a new array of length size, with all elements uninitialized.

       Arguments:
       - size: The size of the array to create.

       > Example
         Create a new array of size 10.

             Array.new 10
    new : Integer -> Array
    new size = @Builtin_Method "Array.new"

    ## PRIVATE

       Create an array with one element provided.

       Arguments:
       - item_1: The one element in the array.
    new_1 : Any -> Array
    new_1 item_1 = @Builtin_Method "Array.new_1"

    ## PRIVATE

       Create an array with two elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
    new_2 : Any -> Any -> Array
    new_2 item_1 item_2 = @Builtin_Method "Array.new_2"

    ## PRIVATE

       Create an array with three elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
       - item_3: The third element.
    new_3 : Any -> Any -> Any -> Array
    new_3 item_1 item_2 item_3 = @Builtin_Method "Array.new_3"

    ## PRIVATE

       Create an array with four elements provided.

       Arguments:
       - item_1: The first element.
       - item_2: The second element.
       - item_3: The third element.
       - item_4: The fourth element.
    new_4 : Any -> Any -> Any -> Any -> Array
    new_4 item_1 item_2 item_3 item_4 = @Builtin_Method "Array.new_4"

    ## PRIVATE
       Copies from the source array, beginning at the specified position, to the
       specified position in the destination array.

       Arguments:
       - src: The source array.
       - source_index: The start position in the src array.
       - dest: The destination array.
       - dest_index: The start position in the that array.

       A subsequence of array elements are copied from the src array to the
       dest array. The number of components copied is equal to count. The
       components at positions source_index through source_index + count - 1
       in the src array are copied into positions dest_index through
       dest_index + count - 1, respectively, of the destination array.

       If the src and dest arguments refer to the same array, then the copy
       is performed as if the components at positions source_index through
       source_index + count - 1 are first copied to a temporary array with
       length count, and then the contents of the temporary array are copied
       into positions dest_index through dest_index + count - 1 of the
       destination array.

       > Example
         Copying elements from one array to another.

             Array.copy [1,2,3].to_array 0 (Vector.fill 3 0).to_array 0 3
    copy : Array -> Integer -> Array -> Integer -> Integer -> Nothing
    copy src source_index dest dest_index count = @Builtin_Method "Array.copy"

    ## Gets an element from the array at a specified index (0-based).

       Arguments:
       - index: The index to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the array, i.e. -1 will correspond to the last element.

       > Example
         Get the element at index 1.

             [1,2,3].to_array.at 1

       > Example
         Get the last element of an array.

             [1,2,3].to_array.at -1
    at : Integer -> Any ! Index_Out_Of_Bounds
    at self index = @Builtin_Method "Array.at"

    ## Gets the length of the array this.

       > Example
         Getting the length of an array.

             [1,2,3].to_array.length
    length : Integer
    length self = @Builtin_Method "Array.length"

    ## Sorts the Array.

      Arguments:
      - comparator: A comparison function that takes two elements and returns
        an Ordering that describes how the first element is ordered with
        respect to the second.

      > Example
        Getting a sorted array of numbers.

            [3,2,1].to_array.sort
    sort : (Any -> Any -> Ordering) -> Array
    sort self comparator=(Ordering.compare _ _) =
        self.sort_builtin comparator

    ## Identity.
       This method is implemented purely for completeness with the runtime's
       primitive array protocol.
    to_array : Array
    to_array self = @Builtin_Method "Array.to_array"

    #
    # For compatibility with Vector
    #

    take : (Index_Sub_Range | Range | Integer) -> Vector Any
    take self range=(Index_Sub_Range.First 1) = Vector.take self range

    drop : (Index_Sub_Range | Range | Integer) -> Vector Any
    drop self range=(Index_Sub_Range.First 1) = Vector.drop self range

    insert : Integer -> Any -> Vector ! Index_Out_Of_Bounds
    insert self at=self.length item=Nothing = Vector.insert self at item

    remove : Integer -> Array
    remove self at=-1 = Vector.remove self at

    first : Any ! Index_Out_Of_Bounds
    first self = self.at 0

    second : Any ! Index_Out_Of_Bounds
    second self = self.at 1

    last : Any ! Index_Out_Of_Bounds
    last self = self.at -1

    index_of : (Any | (Any -> Boolean)) -> Integer -> Integer | Nothing
    index_of self element start=0 = Vector.index_of self element start

    last_index_of : (Any | (Any -> Boolean)) -> Integer -> Integer | Nothing
    last_index_of self element start=-1 = Vector.last_index_of self element start

    is_empty : Boolean
    is_empty self = self.length == 0

    to_list : List
    to_list self = Vector.to_list self

    distinct : (Any -> Any) -> Vector Any
    distinct self (on = x->x) = Vector.distinct self on

    map : (Any -> Any) -> Vector Any
    map self function = Vector.map self function

    flat_map : (Any -> Vector Any) -> Vector Any
    flat_map self function = Vector.flat_map self function

    filter : (Filter_Condition | (Any -> Boolean)) -> Vector Any
    filter self filter = Vector.filter self filter

    flatten : Vector Any
    flatten self = Vector.flatten self

    short_display_text : Integer -> Text
    short_display_text self max_entries=10 = Vector.short_display_text self max_entries

    running_fold : Any -> (Any -> Any -> Any) -> Vector Any
    running_fold self init function = Vector.running_fold self init function

    fold : Any -> (Any -> Any -> Any) -> Any
    fold self init function = Vector.fold self init function

    fold_with_index : Any -> (Any -> Integer -> Any -> Any) -> Any
    fold_with_index self init function = Vector.fold_with_index self init function

    pad : Integer -> Any -> Vector Any
    pad self n elem = Vector.pad self n elem

    partition : (Any -> Boolean) -> Pair (Vector Any) (Vector Any)
    partition self predicate = Vector.partition self predicate

    partition_with_index : (Integer -> Any -> Boolean) -> Pair (Vector Any) (Vector Any)
    partition_with_index self predicate = Vector.partition_with_index self predicate

    map_with_index : (Integer -> Any -> Any) -> Vector Any
    map_with_index self function = Vector.map_with_index self function

    slice : Integer -> Integer -> Vector Any
    slice self start end = Vector.slice self start end

    find : (Any -> Boolean) -> Integer -> Any -> Any
    find self predicate start=0 ~if_missing=(Error.throw Not_Found) = Vector.find predicate start if_missing

    get : Integer -> Any -> Any
    get self index ~if_missing=Nothing = Vector.get self index if_missing

    not_empty : Boolean
    not_empty self = self.is_empty.not

    filter_with_index : (Integer -> Any -> Boolean) -> Vector Any
    filter_with_index self predicate = Vector.filter_with_index self predicate

    join : Text -> Text -> Text -> Text
    join self separator="" prefix="" suffix="" = Vector.join self separator prefix suffix

    to_text : Text
    to_text self = self.map .to_text . join ", " "[" "]"

    reduce : (Any -> Any -> Any) -> Any -> Any
    reduce self function ~if_empty=(Error.throw Vector.Empty_Error) = Vector.reduce self function if_empty

    any : (Any -> Boolean) -> Boolean
    any self predicate = Vector.any self predicate

    all : (Any -> Boolean) -> Boolean
    all self predicate = self . any (predicate >> .not) . not

    contains : Any -> Boolean
    contains self elem = self.any ix-> ix == elem

    zip : Vector Any -> (Any -> Any -> Any) -> Vector Any
    zip self that function=[_,_] = Vector.zip self that function

    to_vector : Vector
    to_vector self = Vector.from_polyglot_array self

    reverse : Vector Any
    reverse self = Vector.reverse self

    each : (Any -> Any) -> Nothing
    each self f = Vector.each self f

    each_with_index : (Integer -> Any -> Any) -> Nothing
    each_with_index self f = Vector.each_with_index self f

    + : Vector Any -> Vector Any
    + self that = Vector.+ self that
