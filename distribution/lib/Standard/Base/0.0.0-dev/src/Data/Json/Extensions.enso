import project.Any.Any
import project.Data.Array.Array
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Json.Json
import project.Data.Json.JSON_Object
import project.Data.Locale.Locale
import project.Data.Map.Map
import project.Data.Numbers.Number
import project.Data.Range.Extensions
import project.Data.Text.Extensions
import project.Data.Text.Text
import project.Data.Text.Text_Sub_Range.Text_Sub_Range
import project.Data.Vector.Vector
import project.Error.Error
import project.Meta
import project.Nothing.Nothing

from project.Data.Boolean import Boolean, True, False

## Converts the given value to a JSON serialized value.
Any.to_json_text : Text
Any.to_json_text self =
    Json.stringify self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JSON_Object.
Text.to_json : Text
Text.to_json self = self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JSON_Object.
Number.to_json : Number
Number.to_json self = self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JSON_Object.
Boolean.to_json : Boolean
Boolean.to_json self = self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JSON_Object.
Nothing.to_json : Nothing
Nothing.to_json self = self

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms and maps, the object is converted to a JSON_Object.
Array.to_json : Vector
Array.to_json self =
    proxy = Array_Proxy.new self.length i-> self.at i . to_json
    Vector.from_polyglot_array proxy

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JSON_Object.
Vector.to_json : Vector
Vector.to_json self =
    proxy = Array_Proxy.new self.length i-> self.at i . to_json
    Vector.from_polyglot_array proxy

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JSON_Object.
Any.to_json : JSON_Object
Any.to_json self =
    m = Meta.meta self
    case m of
        _ : Meta.Atom ->
            fs = m.fields
            cons = m.constructor
            field_names = cons.fields

            builder = Vector.new_builder field_names.length+2
            0.up_to field_names.length . map i-> builder.append [field_names.at i, fs.at i . to_json]
            builder.append ["type", Meta.get_qualified_type_name self]
            builder.append ["constructor", cons.name]
            Json.from_pairs builder.to_vector
        _ : Meta.Constructor ->
            type_name = Meta.get_qualified_type_name self . take (Text_Sub_Range.Before_Last ".")
            Json.from_pairs [["type", type_name], ["constructor", m.name]]
        _ -> Error.throw ("Cannot convert " + self.to_text + " to JSON")

## Converts the given value to a JSON serializable object.
   For Nothing, booleans, numbers and strings, this is the value itself.
   For arrays or vectors, the elements are converted recursively.
   For atoms, the object is converted to a JSON_Object.
Error.to_json : JSON_Object
Error.to_json self =
    caught = self.catch
    error_type = ["type", "Error"]
    error_content = ["content", caught.to_json]
    error_message = ["message", caught.to_display_text]
    Json.from_pairs [error_type, error_content, error_message]

## Converts the given value to a JSON serializable object.
   Custom serialization for Locale, serializes the language, country and variant.
Locale.to_json : JSON_Object
Locale.to_json self =
    b = Vector.new_builder 4
    b.append ["type", "Locale"]
    if self.language.is_nothing.not then b.append ["language", self.language]
    if self.country.is_nothing.not then b.append ["country", self.country]
    if self.variant.is_nothing.not then b.append ["variant", self.variant]
    Json.from_pairs b.to_vector

## Get the keys of the object
Nothing.get : Text -> Nothing
Nothing.get self key =
    _ = [key]
    Nothing

## Get the item at an index
Nothing.at : Integer -> Nothing
Nothing.at self key =
    _ = [key]
    Nothing
