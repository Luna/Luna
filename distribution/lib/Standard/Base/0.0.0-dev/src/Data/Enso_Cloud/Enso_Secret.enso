import project.Data.Enso_Cloud.Enso_File.Enso_File
import project.Data.Enso_Cloud.Utils
import project.Data.Json.JS_Object
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Nothing.Nothing
import project.Runtime.Context
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all

## PRIVATE
   Root address for Secrets API
secrets_api = Utils.cloud_root_uri + "secrets"

type Enso_Secret
    ## PRIVATE
    Value name:Text id:Text

    ## Create a new secret

       Arguments:
       - name: The name of the secret
       - value: The value of the secret
       - parent: The parent folder for the secret. If `Nothing` then will be
         created in the root folder.
    create : Text -> Text -> Enso_File | Nothing -> Enso_Secret
    create name:Text value:Text parent:(Enso_File|Nothing)=Nothing = if name == "" then Error.throw (Illegal_Argument.Error "Secret name cannot be empty") else
        if Context.Output.is_enabled.not then Error.throw () else
            auth_header = Utils.authorization_header
            auth_header.if_not_error <|
                body = JS_Object.from_pairs [["secretName", name], ["secretValue", value]]
                headers = if parent.is_nothing then [auth_header] else [auth_header, ["parent_id", Enso_File.id]]
                response = HTTP.post secrets_api body HTTP_Method.Post headers
                response.if_not_error <|
                    js_object = response.decode_as_json
                    js_object.into Enso_Secret

    ## Gets a list of all the secrets in the folder.

       Arguments:
       - folder: The folder to get the secrets from. If `Nothing` then will get
         the secrets from the root folder.
    list : Enso_File | Nothing -> Vector Enso_Secret
    list parent:(Enso_File|Nothing)=Nothing =
        auth_header = Utils.authorization_header
        auth_header.if_not_error <|
            headers = if parent.is_nothing then [auth_header] else [auth_header, ["parent_id", Enso_File.id]]
            response = HTTP.fetch secrets_api HTTP_Method.Get headers
            response.if_not_error <|
                js_object = response.decode_as_json
                secrets = js_object.get "secrets" []
                raw_secrets = secrets.map v-> v.into Enso_Secret
                raw_secrets.filter s-> (s.name.starts_with "connection-" == False)
