import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Function.Function
import project.Metadata.Display
import project.Metadata.Widget
import project.Panic.Panic
from project.Metadata.Choice import Option
from project.Metadata.Widget import Single_Choice

## A common interface that represents ways to return a list of files that have
   been read.
type Return_As
    ## PRIVATE
    Instance underlying

    ## PRIVATE
    to_text self -> Text = self.underlying.to_text

    ## PRIVATE
    to_display_text self -> Text = self.underlying.to_display_text

    ## PRIVATE
    make_return (input : Many_Files_List) (objects : Vector Any) =
        self.underlying.make_return input objects

    ## PRIVATE
    private _get_known_return_classes -> Vector =
        Vector.from_polyglot_array (ReadManyReturnSPI.get_types False)

    ## PRIVATE
       Resolve an unresolved constructor to the actual type.
    private resolve : Function -> Return_As
    private resolve value = case value of
        _ : Function ->
            types = _get_known_return_classes
            try_next idx =
                if idx >= types.length then Error.throw (Illegal_Argument.Error "Expected Return_As, but got a function.") else
                    resolved = (types.at idx).resolve value
                    if resolved.is_nothing then @Tail_Call try_next (idx + 1) else resolved
            try_next 0
        _ : Return_As -> value
        _ -> Panic.throw (Type_Error.Error Return_As value "Expected `return` to be a Return_As type, but got {got}.")

    ## PRIVATE
    default_widget : Widget
    default_widget =
        options = _get_known_return_classes.map .get_dropdown_options
        Single_Choice display=Display.Always values=options

## PRIVATE
type Return_As_Base
    ## Will return a Vector of objects that were loaded.
       The order of the returned Vector is the same as in the input.
    Vector

    ## PRIVATE
    get_dropdown_options : Vector Option
    get_dropdown_options = [Option "Vector" "..Vector"]

    ## PRIVATE
    make_return (input : Many_Files_List) (objects : Vector Any) =
        _ = input
        objects

## PRIVATE
Return_As.from (that : Return_As_Base) =
    Return_As.Instance that
