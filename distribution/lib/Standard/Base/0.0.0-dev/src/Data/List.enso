import project.Any.Any
import project.Data.Filter_Condition.Filter_Condition
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Common.Index_Out_Of_Bounds
import project.Error.Common.Not_Found
import project.Error.Error
import project.Function.Function
import project.Nothing.Nothing
import project.Meta

from project.Data.Boolean import Boolean, True, False

from project.Data.List.List import Nil, Cons

## The basic cons-list type.

   A cons-list allows storage of an arbitrary number of elements.

   Prepending to the list can be achieved by using the `Cons` constructor,
   while an empty list is represented by `Nil`.

   > Example
     A list containing the elements `1`, `2`, and `3`, in this order is:
         Cons 1 (Cons 2 (Cons 3 Nil))
## Cons lists.
type List

    ## The type that indicates the end of a cons list.
    Nil

    ## A cons cell for a cons list.

       Arguments:
       - x: The element at this position in the list.
       - xs: The rest of the list.
    Cons x xs

    ## Computes the number of elements in the list.
       Note: This is a linear operation requiring O(n) time.

       > Example
         Get the length of a two item list.

             import Standard.Examples

             example_length = Examples.list.length
    length : Number
    length self = self.fold 0 (acc -> _ -> acc + 1)

    ## Gets an element from the list at a specified index (0-based).
       Note: This is a linear operation requiring O(n) time.

       Arguments:
       - index: The location in the List to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the final item, i.e. -1 will correspond to the last element.

       > Example
         Get the second item by index.

             import Standard.Examples

             example_length = Examples.list.length
    at : Integer -> Any ! Index_Out_Of_Bounds
    at self index =
        self.get index (Error.throw (Index_Out_Of_Bounds.Error index self.length))

    ## Gets an element from the list at a specified index (0-based).
       If the index is invalid then `if_missing` is returned.
       Note: This is a linear operation requiring O(n) time.

       Arguments:
       - index: The location in the List to get the element from. The index is
         also allowed be negative, then the elements are indexed from the back
         of the final item, i.e. -1 will correspond to the last element.
       - if_missing: The value to return if the index is out of bounds.
    get : Integer -> Any -> Any
    get self index ~if_missing=Nothing = case index >= 0 of
        True ->
            loop index point = case point of
                Nil -> if_missing
                Cons x xs -> if index == 0 then x else @Tail_Call loop (index - 1) xs
            loop index self
        False ->
            loop current count point = case point of
                Nil -> if count == 0 then current.x else if_missing
                Cons _ xs ->
                    new_current = if count > 0 then current else current.xs
                    @Tail_Call loop new_current (0.max count-1) xs
            loop self -index self

    ## Combines all the elements of the list, by iteratively applying the
       passed function with next elements of the list.

       Arguments:
       - init: The initial value for the fold.
       - f: The binary function used to combine elements of the list.

       In general, the result of
           (Cons l0 <| Cons l1 <| ... <| Cons ln) . fold init f
       is the same as
           f (...(f (f init l0) l1)...) ln

       > Example
         In the following example, we'll compute the sum of all elements of a
         list.

             import Standard.Examples

             example_fold = Examples.list.fold 0 (+)
    fold : Any -> (Any -> Any -> Any) -> Any
    fold self init f =
        go acc list = case list of
            Nil -> acc
            Cons h t -> @Tail_Call go (f acc h) t
        res = go init self
        res

    ## Combines all the elements of a non-empty list using a binary operation.
       If the list is empty, it throws an `Empty_Error`.

       Arguments:
       - function: A binary operation that takes two items and combines them.

       > Example
         Compute the sum of all the elements in a list.

             import Standard.Examples

             example_fold = Examples.list.reduce (+)
    reduce : (Any -> Any -> Any) -> Any ! Empty_Error
    reduce self function = case self of
        Nil -> Error.throw Empty_Error
        Cons x xs -> xs.fold x function

    ## Checks whether any element of the list matches the given predicate.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       A predicate is a function that takes a list element and returns
       a Boolean value.

       > Example
         Check if any element of the list is larger than 5.

             import Standard.Examples

             example_any = Examples.list.any (> 5)
    any : (Any -> Boolean) -> Boolean
    any self predicate =
        go list = case list of
            Nil -> False
            Cons h t -> if predicate h then True else
                @Tail_Call go t
        res = go self
        res

    ## Checks whether a predicate holds for all elements in this list.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.

       > Example
         Check if all elements in the list are greater than zero.

             import Standard.Examples

             example_all = Examples.list.all (> 0)
    all : (Any -> Boolean) -> Boolean
    all self predicate = self . any (predicate >> .not) . not

    ## Checks whether this list contains a given value as an element.

       Arguments:
       - elem: The element to check if it is in the list.

       > Example
         Checking if the list contains the number 3.

             import Standard.Examples

             example_contains = Examples.list.contains 3
    contains : Any -> Boolean
    contains self elem = self.any ix-> ix == elem

    ## Checks if this list is empty.

       > Example
         Checking for emptiness.

             import Standard.Examples

             example_empty = Examples.list.is_empty
    is_empty : Boolean
    is_empty self = case self of
        Nil -> True
        Cons _ _ -> False

    ## Checks if the list is not empty.

       > Example
         Checking for emptiness.

             import Standard.Examples

             example_not_empty = Examples.list.not_empty
    not_empty : Boolean
    not_empty self = self.is_empty.not

    ## Selects all elements of this list which satisfy a condition.

       Arguments:
       - filter: The filter to apply to the list. It can either be an instance
         of `Filter_Condition` or a predicate taking a value and returning a
         boolean value indicating whether the corresponding element should be
         kept or not.

       > Example
         Selecting all elements that are less than 3.

             import Standard.Examples

             example_filter = Examples.list.filter (< 3)
             example_filter = Examples.list.filter (Filter_Condition.Less than=3)
    filter : (Filter_Condition | (Any -> Boolean)) -> Vector Any
    filter self filter = case filter of
        _ : Filter_Condition -> self.filter filter.to_predicate
        predicate : Function -> case self of
            Nil -> Nil
            Cons x xs -> if predicate x . not then @Tail_Call xs.filter filter else
                go list fill = case list of
                    Nil -> fill Nil
                    Cons h t -> if predicate h . not then @Tail_Call go t fill else
                        res = Meta.atom_with_hole (Cons h _)
                        fill res.value
                        @Tail_Call go t res.fill

                res = Meta.atom_with_hole (Cons x _)
                go xs res.fill
                res.value

    ## Applies a function to each element of the list, returning the list of
       results.

       Arguments:
       - f: The function to apply to each element of the list.

       > Example
         Add `1` to each element of the list:

             import Standard.Examples

             example_map = Examples.list.map +1
    map : (Any -> Any) -> List
    map self f = case self of
        Nil -> Nil
        Cons h t ->
            go : List -> Any -> (Any -> Any) -> Nothing
            go list fill = case list of
                Nil -> fill Nil
                Cons h t ->
                    v = f h
                    res = Meta.atom_with_hole (Cons v _)
                    fill res.value
                    @Tail_Call go t res.fill
            v = f h
            res = Meta.atom_with_hole (Cons v _)
            go t res.fill
            res.value

    ## Applies a function to each element of the list.

       Arguments:
       - f: The function to apply to each element of the list.

       Unlike `map`, this method does not return the individual results,
       therefore it is only useful for side-effecting computations.

       > Example
         Print each of the list elements to the standard output.

             import Standard.Examples

             example_each = Examples.list.each IO.println
    each : (Any -> Any) -> Nothing
    each self f =
        go list = case list of
            Nil -> Nothing
            Cons h t ->
                f h
                @Tail_Call go t
        go self
        Nothing

    ## Reverses the list, returning a list with the same elements, but in the
       opposite order.

       > Example
         Reversing a small list.

             import Standard.Examples

             example_reverse = Examples.list.reverse
    reverse : List
    reverse self = self.fold Nil (l -> el -> Cons el l)

    ## Creates a new list with the first `count` elements at the start of `self`
       removed.

       Arguments:
       - count: The number of elements to take drop the start of `self`.

       > Example
         Removing the first element from a list.

             import Standard.Examples

             example_drop_start = Examples.list.drop_start 1
    drop_start : Integer -> List
    drop_start self count = if count <= 0 then self else case self of
        Nil -> Nil
        Cons _ b -> b.drop_start count-1

    ## Creates a new list consisting of the first `count` elements at the start
       of `self`.

       Arguments:
       - count: The number of elements to take from the start of `self`.

       > Example
         Obtaining the first 2 elements of a list.

             import Standard.Examples

             example_take_start = Examples.list.take_start 2
    take_start : Integer -> List
    take_start self count = if count <= 0 then Nil else case self of
        Nil -> Nil
        Cons a b ->
            go c l fill = if c <= 0 then fill Nil else case l of
                Nil -> fill Nil
                Cons a b ->
                    res = Meta.atom_with_hole (Cons a _)
                    fill res.value
                    @Tail_Call go c-1 b res.fill
            res = Meta.atom_with_hole (Cons a _)
            go count-1 b res.fill
            res.value

    ## Get all elements from the list except the last.

       > Example
         Removing the last element of the list to give (Cons 1 Nil).

             import Standard.Examples

             example_init = Examples.list.init
    init : List ! Index_Out_Of_Bounds
    init self =
        case self of
            Nil -> Error.throw (Index_Out_Of_Bounds.Error 0 0)
            Cons _ Nil -> Nil
            Cons a b ->
                go l fill = case l of
                    Cons x xs -> case xs of
                        Nil -> fill Nil
                        Cons _ _ ->
                            res = Meta.atom_with_hole (Cons x _)
                            fill res.value
                            @Tail_Call go xs res.fill

                res = Meta.atom_with_hole (Cons a _)
                go b res.fill
                res.value

    ## Get the last element of the list.

       > Example
         Getting the final element of the list.

             import Standard.Examples

             example_last = Examples.list.last
    last : Any ! Index_Out_Of_Bounds
    last self = case self.fold Nothing (_ -> r -> r) of
        Nothing -> Error.throw (Index_Out_Of_Bounds.Error -1 0)
        a -> a

    ## Get the first element from the list.

       > Example
         Getting the first element in the list.

             import Standard.Examples

             example_first = Examples.list.first
    first : Any ! Index_Out_Of_Bounds
    first self = case self of
        Nil -> Error.throw (Index_Out_Of_Bounds.Error 0 0)
        Cons a _ -> a

    ## Get the second element from the list.

       > Example
         Getting the second element in the list.

             import Standard.Examples

             example_second = Examples.list.second
    second : Any ! Index_Out_Of_Bounds
    second self = case self of
        Nil -> Error.throw (Index_Out_Of_Bounds.Error 1 0)
        Cons _ a -> case a of
            Nil -> Error.throw (Index_Out_Of_Bounds.Error 1 1)
            Cons b _ -> b

    ## Get the first element from the list.

       > Example
         This returns 1.

             import Standard.Examples

             example_head = Examples.list.x
    head : Any ! Index_Out_Of_Bounds
    head self = self.first

    ## Get all elements from the list except the first.

       > Example
         This returns (Cons 2 Nil).

             import Standard.Examples

             example_tail = Examples.list.tail
    tail : List ! Index_Out_Of_Bounds
    tail self = case self of
        Nil -> Error.throw (Index_Out_Of_Bounds.Error 1 0)
        Cons _ b -> b

    ## UNSTABLE
       Convert this list to a vector with the same elements.
    to_vector : Vector
    to_vector self =
        builder = self.fold (Vector.new_builder self.length) builder-> elem->
            builder.append elem
        builder.to_vector

    ## Generates a human-readable text representation of the list.
    to_text : Text
    to_text self =
        go l t e = case l of
            Nil -> t + "Nil" + e
            Cons x xs -> @Tail_Call go xs (t + "(Cons " + x.to_text + " ") (")" + e)
        go self "" ""

    ## Returns the first element of the list that satisfies the predicate or
       if no elements of the vector satisfy the predicate, throws `Not_Found`.

       Arguments:
       - predicate: A function that takes a list element and returns a boolean
         value that says whether that value satisfies the conditions of the
         function.
       - start: The index to start searching from. If the index is negative, it
         is counted from the end of the vector.
       - if_missing: Value returned if no element satisfies the predicate.

       > Example
         Finding a first element of the list that is larger than 2.

             import Standard.Examples

             example_first = Examples.list.find (> 2)
    find : (Any -> Boolean) -> Integer -> Any -> Any
    find self predicate start=0 ~if_missing=(Error.throw Not_Found) = case start.signum of
        -1 ->
            start_node = find_start_node self start
            start_node.first.find predicate 0 if_missing
        _ ->
            loop current count = case count of
                0 -> case current of
                    Nil -> if_missing
                    Cons x xs -> if predicate x then x else @Tail_Call loop xs 0
                _ -> case current of
                    Nil -> Error.throw (Index_Out_Of_Bounds.Error start start-count)
                    Cons _ b -> @Tail_Call loop b count-1
            loop self start

    ## Returns the index of the element in the list.
       Returns Nothing if the element is not found.

       Arguments:
       - element: The element to search for or a predicate function to test for
         each element.
       - start: The index to start searching from. If the index is negative, it
         is counted from the end of the list.

       > Example
         Finding a first element of the vector that is larger than 3.

             [1, 2, 3, 4, 5].find (> 3)
    index_of : (Any | (Any -> Boolean)) -> Integer -> Integer | Nothing
    index_of self element start=0 = case start.signum of
        -1 ->
            start_node = find_start_node self start
            found = start_node.first.index_of element 0
            if found.is_nothing then Nothing else found+start_node.second
        _ ->
            predicate = if element.is_a Function then element else (==element)
            loop current count idx = case count of
                0 -> case current of
                    Nil -> Nothing
                    Cons x xs -> if predicate x then idx else @Tail_Call loop xs 0 idx+1
                _ -> case current of
                    Nil -> Error.throw (Index_Out_Of_Bounds.Error start start-count)
                    Cons _ b -> @Tail_Call loop b count-1 idx+1
            loop self start 0

## UNSTABLE

   An error representing that the list is empty.
type Empty_Error
    ## PRIVATE

       Pretty prints the empty error.
    to_display_text : Text
    to_display_text self = "The List is empty."

## PRIVATE
find_start_node list start =
    loop current count point idx = case point of
        Nil -> if count == 0 then [current, idx] else Error.throw (Index_Out_Of_Bounds.Error start -start-count)
        Cons _ xs ->
            new_current = if count > 0 then current else current.xs
            new_idx = if count > 0 then idx else idx+1
            @Tail_Call loop new_current (0.max count-1) xs new_idx
    loop list -start list 0
