import project.Data.Numbers.Integer
import project.Error.Common.Type_Error
import project.Error.Error
import project.Nothing

## Provides custom ordering, equality check and hash code for types that need it.

    The Enso runtime system offers default implementation of _equality_
    as well as capability to _compute hash code_ (for use in `Map`) automatically.
    The default implementation is sufficient for most of the programming activities.
    Especially when defining new type and its constructors, they get sensible
    implementation of both functions.

    Should there be a need to redefine the default implementation, here is a way:
    Define function `comparator` in your `type` and return pointer to
    another `type` that satisfies following definition:

    ```
    type Comparator T
        compare : T -> T -> (Ordering | Nothing)
        hash : T -> (Integer | Nothing)
    ```

    > Example
        Representation of _rational numbers_ as a pair of integers needs a
        special equality. Here is a way to define it:

        ```
        type Rational
            Fraction (numerator:Integer) (denominator:Integer)

            comparator self = Rational_Ordering
        ```

        The `comparator` definition overrides the extension function on
        `Any` defined by `Ordering` module and returns reference to following
        type:

        ```
        type Rational_Ordering
            compare self r1 r2 =
                v1 = r1.numerator * r2.denominator
                v2 = r2.numerator * r1.denominator
                if v1 < v2 then Ordering.Less else
                    if v1 > v2 then Ordering.Greater else
                        Ordering.Equal
            hash self r1 = 42 # or something better
        ```

        By defining the `Rational_Ordering` and making it available via
        `Rational.comparator` method all parts of the Enso system will use
        the custom `compare` and `hash` methods whenever equality or hash code
        is needed.

        The equality check of two objects:
        - verifies both objects share the same `comparator`
        - consults their `compare` method
        - if the result is `Ordering.Equal` the system also checks that both instances have the same `hash`
        - the `hash` code check may be done only from time to time to speed things up

type Comparable
    compare : Any -> Any -> (Ordering | Nothing)
    compare self x y = Nothing

    hash : Any -> (Integer | Nothing)
    hash self x = Nothing

Comparable.from (_:Any) = Nothing


## Types representing the ordering of values.

   These are intended to be returned from the `compare_to` function, that has a
   type as follows for a type `A`: `A.compare_to : A -> Ordering`.

   The result should be returned in terms of how `self` orders in comparison to
   `that`. So, if `self` is greater than `that`, you should return `Greater.`
@Builtin_Type
type Ordering
    ## A representation that the first value orders as less than the second.
    Less

    ## A representation that the first value orders as equal to the second.
    Equal

    ## A representation that the first value orders as greater than the second.
    Greater

    ## Converts the ordering to the signed notion of ordering based on integers.

       > Example
         Converting equal ordering to a signed number.

             import Standard.Base.Data.Ordering

             example_to_sign = Ordering.Equal.to_sign
    to_sign : Integer
    to_sign self = case self of
        Ordering.Less -> -1
        Ordering.Greater -> 1
        Ordering.Equal -> 0

    ## A lexicographical comparison.

    and_then : Ordering -> Ordering
    and_then self ~other = case self of
        Ordering.Less -> Ordering.Less
        Ordering.Equal -> other
        Ordering.Greater -> Ordering.Greater

    compare_to : Ordering -> Ordering
    compare_to self that = case that of
        _ : Ordering -> self.to_sign.compare_to that.to_sign
        _ -> Error.throw (Type_Error.Error Ordering that "that")

    ## Converts a sign-based representation of ordering to Enso's native ordering.

       Arguments:
       - sign: The number representing the relative ordering of two entities.

       > Example
         Convert the number 0 to an Enso ordering.

             Ordering.from_sign 0
    from_sign : Integer -> Ordering
    from_sign sign = if sign == 0 then Ordering.Equal else
        if sign > 0 then Ordering.Greater else Ordering.Less
