import project.Any.Any
import project.Data.Array.Array
import project.Data.Array_Proxy.Array_Proxy
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Runtime

## GROUP Selections
   Swaps the rows and columns of a matrix represented by a `Vector` of `Vector`s.

   ! Error Conditions

     - If the rowws (subvectors) do not all have the same length, an
     `Illegal_Argument` error is raised.

   > Example
     Transpose a `Vector` of `Vectors`.`

         matrix = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
         # +---+---+---+
         # | 0 | 1 | 2 |
         # +---+---+---+
         # | 3 | 4 | 5 |
         # +---+---+---+
         # | 6 | 7 | 8 |
         # +---+---+---+

         transposed = [[0, 3, 6], [1, 4, 7], [2, 5, 8]]
         # +---+---+---+
         # | 0 | 3 | 6 |
         # +---+---+---+
         # | 1 | 4 | 7 |
         # +---+---+---+
         # | 2 | 5 | 8 |
         # +---+---+---+

         matrix.transposed == transposed
         # => True
Vector.transpose : Vector (Vector Any) ! Illegal_Argument
Vector.transpose self =
    if self.is_empty then [] else
        length = self.length
        first_subvector_length = self.at 0 . length
        check_same_length self <|
            inner i  = Vector.from_polyglot_array (Array_Proxy.new length j-> ((self.at j).at i))
            proxy = Array_Proxy.new first_subvector_length inner
            Vector.from_polyglot_array proxy

## GROUP Selections
   Swaps the rows and columns of a matrix represented by an `Array` of `Array`s.

   ! Error Conditions

     - If the rowws (subvectors) do not all have the same length, an
     `Illegal_Argument` error is raised.

   > Example
     Transpose a `Array` of `Array`s.`

         "Hello, world!".reverse

         matrix = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
         # +---+---+---+
         # | 0 | 1 | 2 |
         # +---+---+---+
         # | 3 | 4 | 5 |
         # +---+---+---+
         # | 6 | 7 | 8 |
         # +---+---+---+

         transposed = [[0, 3, 6], [1, 4, 7], [2, 5, 8]]
         # +---+---+---+
         # | 0 | 3 | 6 |
         # +---+---+---+
         # | 1 | 4 | 7 |
         # +---+---+---+
         # | 2 | 5 | 8 |
         # +---+---+---+

         matrix.transposed == transposed
         # => True
Array.transpose : Array (Array Any) ! Illegal_Argument
Array.transpose self = Vector.transpose self

## PRIVATE
   Check that all vectors have the same length and return an informative message
   if they don't.

   Compares all vectors to the first one and reports the first one that differs.
check_same_length : Vector (Vector Any) -> Any -> Any ! Illegal_Argument
check_same_length vecs ~action =
    if vecs.is_empty then action else
        num_vecs = vecs.length
        len = vecs.at 0 . length
        go i = if i >= num_vecs then action else
            if vecs.at i . length == len then @Tail_Call go (i+1) else
                Error.throw (Illegal_Argument.Error "Transpose requires that all vectors be the same length. Vector #0 length is "+len.to_text+", Vector #"+i.to_text+" length is "+(vecs.at i . length).to_text)
        go 0
