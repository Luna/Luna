import project.Any.Any
import project.Data.Vector.No_Wrap
import project.Data.Vector.Vector
import project.Internal.Array_Like_Helpers

## PRIVATE
   ICON dataframe_map_column
   Applies a function to each element of the vector, returning the `Vector` of
   results. Unlike `Vector.map`, `map_no_wrap` does not wrap errors in
   `Map_Error`.

   Arguments:
   - function: A function that takes an element in the vector and returns
       some transformation of that element.

   > Example
       Add 1 to each element of the vector.

           [1, 2, 3] . map +1
Vector.map_no_wrap : (Any -> Any) -> Vector Any
Vector.map_no_wrap self function =
    Array_Like_Helpers.vector_from_function self.length (function << self.at) on_problems=No_Wrap.Value

## PRIVATE
   Applies a function to each element of the vector, returning the `Vector`
   that contains all results concatenated. Unlike `Vector.flat_map`,
   `flat_map_no_wrap` does not wrap errors in
   `Map_Error`.

   Arguments:
   - function: A function that takes an element in the vector, transforms
       it, and returns a `Vector`.

   > Example
       Replace each number `n` in the vector with itself repeated n times.

       [0, 1, 2] . flat_map (n -> Vector.fill n n)
Vector.flat_map_no_wrap : (Any -> Vector Any) -> Vector Any
Vector.flat_map_no_wrap self function =
    Vector.map_no_wrap self function . flatten

## PRIVATE
   Applies a function to each element of the vector, returning the `Vector`
   of results. Unlike `Vector.map_with_index`, `map_with_index_primitive` does
   not wrap errors in `Map_Error`.

   Arguments:
   - function: A function that takes an index and an item and calculates a
       new value for at that index.

   The function is called with both the element index as well as the
   element itself.

   > Example
       Sum numbers with their indices in a vector.

           [1, 2, 3].map_with_index (+)
Vector.map_with_index_primitive : (Any -> Any) -> Vector Any
Vector.map_with_index_primitive self function =
    Array_Like_Helpers.vector_from_function self.length (i-> function i (self.at i)) on_problems=No_Wrap.Value

## PRIVATE
   ALIAS combine, join by row position, merge
   GROUP Calculations
   ICON dataframes_join
   Performs a pair-wise operation passed in `function` on consecutive
   elements of `self` and `that`. Unlike `Vector.zip`, `zip_primitive` does
   not wrap errors in `Map_Error`.

   Arguments:
   - that: The vector to zip with `self`.
   - function: The function used to combine pairwise elements of `self` and
       `that`.

   The result of this function is a `Vector` of length being the shorter of
   `self` and `that`, containing results of calling `function`.

   > Example
       Calculate the pairwise sum of two vectors.

           [1, 2, 3].zip [4, 5, 6] (+)

   > Example
       When the `function` is not provided, it defaults to creating a pair
       of both elements.

           [1, 2, 3].zip [4, 5, 6] == [[1, 4], [2, 5], [3, 6]]
Vector.zip_primitive : Vector Any -> (Any -> Any -> Any) -> Vector Any
Vector.zip_primitive self that function=[_,_] =
    len = self.length.min that.length
    Array_Like_Helpers.vector_from_function len (i-> function (self.at i) (that.at i)) on_problems=No_Wrap.Value
