import project.Any.Any
import project.Data.Array.Array
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Runtime

## GROUP Selections
   Swaps the rows and columns of a matrix represented by a `Vector` of `Vectors`.`

   ! Error Conditions

     - If the rowws (subvectors) do not all have the same length, an
     `Illegal_Argument` error is raised.

   > Example
     Transpose a `Vector` of `Vectors`.`

         "Hello, world!".reverse

         matrix = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
         # +---+---+---+
         # | 0 | 1 | 2 |
         # +---+---+---+
         # | 3 | 4 | 5 |
         # +---+---+---+
         # | 6 | 7 | 8 |
         # +---+---+---+

         transposed = [[0, 3, 6], [1, 4, 7], [2, 5, 8]]
         # +---+---+---+
         # | 0 | 3 | 6 |
         # +---+---+---+
         # | 1 | 4 | 7 |
         # +---+---+---+
         # | 2 | 5 | 8 |
         # +---+---+---+

         matrix.transposed == transposed
         # => True
Vector.transpose : Vector (Vector Any) ! Illegal_Argument
Vector.transpose self =
    if self.is_empty then [] else
        length = self.length
        first_subvector_length = self.at 0 . length
        builders = Vector.new first_subvector_length (_-> Vector.new_builder length)
        result = self.map v->
            if v.length != first_subvector_length then Error.throw (Illegal_Argument.Error "Transpose requires that all rows be the same length") else
                v.map_with_index i-> x->
                    builders.at i . append x
        result.if_not_error <|
            builders.map .to_vector

Array.transpose : Vector (Vector Any) ! Illegal_Argument
Array.transpose self = Vector.transpose self
