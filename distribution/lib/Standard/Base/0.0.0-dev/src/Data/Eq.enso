import project.Meta
import project.IO
import project.Any.Any
import project.Error.Error
import project.Error.Incomparable_Values
from project.Data.Ordering import all
from project.Data.Numbers import all

from project.Data.Boolean import Boolean, True, False
from project.Data.Json import all
from project.Data.Range import all
from project.Error.Common import Error, dataflow_error_handler, Type_Error

# New version of Any.==
Any.=== : Any -> Any -> Boolean
Any.=== self that =
    eq_self = Comparable.from self
    eq_that = Comparable.from that
    if eq_self.is_a Incomparable then False else
        similar_type = eq_self == eq_that
        if similar_type.not then False else
            hash_self = eq_self.hash self
            hash_that = eq_that.hash that
            if hash_self != hash_that then False else
                case eq_self.is_ordered of
                    True -> eq_self.compare self that == Ordering.Equal
                    False -> eq_self.equals self that

Any.<== : Any -> Any -> Boolean
Any.<== self that =
    assert_ordered_comparators self that <|
        case (Comparable.from self).compare self that of
            Ordering.Less -> True
            Ordering.Equal -> True
            Ordering.Greater -> False


Any.>== : Any -> Any -> Boolean
Any.>== self that =
    assert_ordered_comparators self that <|
        case (Comparable.from self).compare self that of
            Ordering.Less -> False
            Ordering.Equal -> True
            Ordering.Greater -> True

## PRIVATE
   Checks if both comparators of the given objects are both of same type and ordered.
   If they are not of same type, a `Type_Error` is thrown.
   If the comparators are either `Incomparable`, or unordered, `False` is returned.
assert_ordered_comparators : Any -> Any -> (Any -> Any) -> Any
assert_ordered_comparators this that ~action =
    comp_this = Comparable.from this
    comp_that = Comparable.from that
    case Meta.type_of comp_this == Meta.type_of comp_that of
        False ->
            Error.throw Incomparable_Values
        True ->
            if comp_this.is_a Incomparable || comp_this.is_ordered.not then False else action
