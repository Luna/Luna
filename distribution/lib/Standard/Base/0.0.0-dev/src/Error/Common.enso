from Standard.Base import all
import Standard.Base.Data.Json

## Dataflow errors.
type Error

    ## A type representing dataflow errors.

       A dataflow error in Enso is one that behaves like a standard value, and
       hence represents erroneous states in a way that exists _within_ standard
       control flow.

       ? Dataflow Errors or Panics
         Whilst a Panic is useful for unrecoverable situations, most Enso APIs
         are designed to use dataflow errors instead. As they exist within the
         normal program control flow, they are able to be represented on the
         Enso graph.
    @Builtin_Type
    type Error

    ## Creates a new dataflow error containing the provided payload.

       Arguments:
       - payload: The contents of the dataflow error to be created.

       > Example
         Throw a dataflow error containing the text "Oops".

             Error.throw "Oops"
    throw : Any -> Error
    throw payload = @Builtin_Method "Error.throw"

    ## PRIVATE

       Executes the provided handler on a dataflow error, or executes as
       identity on a non-error value.

       Arguments:
       - handler: The function to call on this if it is an error value.
    catch_primitive : (Error -> Any) -> Any
    catch_primitive handler = @Builtin_Method "Error.catch_primitive"

    ## PRIVATE
       UNSTABLE

       Returns a textual representation of the stack trace attached to an error.
    get_stack_trace_text : Text
    get_stack_trace_text = @Builtin_Method "Error.get_stack_trace_text"

    ## Converts an error to a corresponding textual representation.

       > Example
         Converting a thrown error to text.

             Error.throw "foo" . to_text
    to_text : Text
    to_text = @Builtin_Method "Error.to_text"

    ## UNSTABLE

       Returns a human-readable text representing this error.
    to_display_text : Text
    to_display_text  = "Error: " + (this.catch .to_display_text)

    ## Executes the provided handler on a dataflow error, or returns a non-error
       value unchanged.

       Arguments:
       - handler: The function to call on this if it is an error value. By default
         this is identity.

       > Example
         Catching an erroneous value and getting the length of its message.

             import Standard.Examples

             example_catch =
                 Examples.throw_error.catch (err -> err.message.length)
    catch : (Error -> Any) -> Any
    catch (handler = x->x) = this.catch_primitive handler

    ## UNSTABLE

       Returns a display representation of the dataflow error on which it is called.

       > Example
         Displaying a dataflow error.

             import Standard.Examples

             example_display = Examples.throw_error.to_default_visualization_data
    to_default_visualization_data : Text
    to_default_visualization_data = this.catch .to_default_visualization_data

    ## UNSTABLE

       Returns a JSON representation of the dataflow error.

       > Example
         Converting a dataflow error to JSON.

             import Standard.Examples

             example_to_json = Examples.throw_error.to_json
    to_json : Json.Object
    to_json =
        error_type = ["type", "Error"]
        error_content = ["content", this.catch .to_json]
        error_message = ["message", this.catch .to_display_text]
        Json.from_pairs [error_type, error_content, error_message]

    ## Transforms an error.

       Arguments:
       - f: The function used to transform the error.

       If `this` is a non-error value it is returned unchanged. However, if `this`
       is an error, the error is transformed using the provided function

       > Example
         Transforming an error value.

             import Standard.Examples

             example_map_error =
                 map = Examples.map
                 map.get 10 . map_error (_ -> "The element 10 was not found.")
    map_error : (Error -> Error) -> Any
    map_error f = this.catch (x -> Error.throw (f x))

    ## ADVANCED
       UNSTABLE

       Returns the attached stack trace of the error.

       The ordering of the resulting vector is such that the top stack frame is the
       first element.
    stack_trace : Vector.Vector Stack_Trace_Element
    stack_trace =
        Panic.get_attached_stack_trace this

    ## Checks if `this` is an error.

       > Example
         Checking if the value 1 is an error.

             1.is_error
    is_error : Boolean
    is_error = True


type Illegal_State_Error

    ## UNSTABLE

       A generic error that indicates that a given operation cannot be performed
       in some specific conditions.

       Arguments:
       - message: the error message explaining why the operation cannot be
         performed.
       - cause: (optional) another error that is the cause of this one.
    type Illegal_State_Error message cause=Nothing

type Illegal_Argument_Error

    ## UNSTABLE

       A generic error that indicates that the provided argument is not valid
       for the operation.

       Arguments:
       - message: the error message explaining why the argument is illegal.
       - cause: (optional) another error that is the cause of this one.
    type Illegal_Argument_Error message cause=Nothing

## PRIVATE
   Wraps a dataflow error lifted to a panic, making possible to distinguish it
   from other panics.
type Wrapped_Dataflow_Error payload

## PRIVATE
   Throws the original error.
Wrapped_Dataflow_Error.unwrap = Error.throw this.payload
