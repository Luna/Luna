from Standard.Base import Any, Vector

## A function is any type that represents a not-yet evaluated computation.

   Methods are represented as functions with dynamic dispatch semantics on
   the this argument.
@Builtin_Type
type Function


## An identity function which returns the provided argument.

   identity : a -> a

   Arguments:
   - x: the value to return.

   > Example
     five = Function.identity 5 # returns number 5

identity : Any -> Any
identity x = x

## Flips the first two arguments of a function. Returns function that
   takes two arguments, but in opposite order.

   flip : (a -> b -> c) -> (b -> a -> c)

   Arguments:
   - f function that takes two arguments

   > Example
    IO.println <| Function.flip (+) "world" "hello" # Prints 'helloworld'

flip : (Any -> Any -> Any) -> (Any -> Any -> Any)
flip f = (x -> y -> f y x)


## Creates a function which drops its input and returns the provided value instead.
   The expression const a is the same as \_ -> a.

   const : a -> b -> a

   Arguments:
   - x constant value to return

   > Example
    IO.println <| [1, 2, 3].map (Function.const 7) # Prints '[7, 7, 7]'

const : Any -> Any -> Any
const x _ = x

## Converts a single-argument function accepting a pair of elements into a multi-argument one.

   curry : ([a, b] -> c) -> (a -> b -> c)

   Arguments:
   - f function accepting pair of values

curry : (Vector -> Any) -> (Any -> Any -> Any)
curry f = x -> y -> f [x, y]

## Converts a multi-argument function into a single-argument one accepting a pair of elements.

   uncurry : (a -> b -> c) -> ([a, b] -> c)

   Arguments:
   - f function accepting multiple arguments

uncurry : (Any -> Any -> Any) -> (Vector -> Any)
uncurry f = (pair -> f pair.head pair.second)
