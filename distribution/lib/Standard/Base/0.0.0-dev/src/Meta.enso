import project.Any.Any
import project.Data.Array.Array
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Text.Text
import project.Data.Time.Date.Date
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Duration.Duration
import project.Data.Time.Time_Of_Day.Time_Of_Day
import project.Data.Time.Time_Zone.Time_Zone
import project.Data.Vector.Vector
import project.Error.Error as Base_Error
import project.Errors.Common.Not_Found
import project.Function.Function
import project.Nothing.Nothing
import project.Polyglot.Java
import project.Internal.Meta_Helpers
from project.Data.Boolean import Boolean, False, True
from project.Runtime.Managed_Resource import Managed_Resource

type Type
    private Value value

    ## ADVANCED
       ICON metadata

       Returns a vector of `Meta.Constructor` for this type
    constructors : Vector Constructor
    constructors self =
        arr = Meta_Helpers.get_type_constructors_builtin self.value Meta.Constructor.Value
        Vector.from_polyglot_array arr

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns a vector of method names that can be invoked
       on instances of this type.
       ? Static Methods

         To obtain list of _static methods_ on a given type
         use `Meta.type_of`.

       > Example
         All instance methods to invoke on `Integer` as
         `(v:Integer) v.method_name...`:

             Meta.meta Integer . methods

       > Example
         All static methods to invoke on `Integer` as
         `Integer.method_name...`:

            Meta.meta (Meta.type_of Integer) . methods


    methods : Vector
    methods self =
        Vector.from_polyglot_array (Meta_Helpers.get_type_methods_builtin self.value)

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns the fully qualified name of the type.
    qualified_name : Text
    qualified_name self =
        c = self.value
        @Tail_Call Meta_Helpers.get_qualified_type_name_builtin c

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns the short name of the type.
    name : Text
    name self =
        c = self.value
        @Tail_Call Meta_Helpers.get_short_type_name_builtin c

    ## ADVANCED
       GROUP Metadata
       ICON find

       Finds type specified by fully qualified name. Searches
       all the types known to the system by transitive closure
       of import statements in executing modules.

       Arguments:
       - qualified_name: fully qualified name.
    find : Text -> Type ! Not_Found
    find qualified_name =
        raw = Meta_Helpers.find_type_by_qualified_name_builtin qualified_name
        case Meta.meta raw of
            t:Meta.Type -> t
            _ -> Base_Error.throw Not_Found

type Atom
    private Value impl

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Obtains the real atom value
    value self = self.impl

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns a vector of field values of the given atom.
    fields : Vector
    fields self = Vector.from_polyglot_array (Meta_Helpers.get_atom_fields_builtin self.value)

    ## ADVANCED
       ICON metadata

       Returns a constructor value of the given atom.
    constructor : Constructor
    constructor self =
        c = Meta_Helpers.get_atom_constructor_builtin self.impl ...
        Meta.Constructor.Value c...

type Constructor
    private Value impl

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Obtains the qualified accessor function of the constructor
    value : Function
    value self = self.impl...

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns a vector of field names defined by a constructor.
    fields self -> Vector Text =
        Vector.from_polyglot_array (Meta_Helpers.get_constructor_fields_builtin (self.impl...))

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns the name of a constructor.
    name self -> Text =
        Meta_Helpers.get_constructor_name_builtin (self.impl...)

    ## ADVANCED
       ICON braces

       Creates a new atom of the given constructor.

       Arguments:
       - fields: A vector of arguments to pass to the constructor when creating the
         new atom.
    new self fields:Vector|Array =
        @Tail_Call Meta_Helpers.new_atom_builtin (self.impl...) fields

    ## ADVANCED
       GROUP Metadata
       ICON metadata
       Returns the type that this constructor is a part of.
    declaring_type : Type
    declaring_type self =
        Type.Value (Meta_Helpers.get_constructor_declaring_type_builtin (self.value...))

type Primitive
    private Value impl

    ## ADVANCED
       GROUP Metadata
       ICON metadata
       Returns the (primitive) value wrapped by this type
    value self = self.impl

type Unresolved_Symbol
    private Value value

    ## PRIVATE
       ADVANCED

       Returns a new unresolved symbol with its name changed to the provided
       argument.

       Arguments:
       - new_name: The new name for the unresolved symbol.
    rename : Text -> Any
    rename self new_name =
        Meta_Helpers.create_unresolved_symbol_builtin new_name self.value

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns the name of an unresolved symbol.
    name : Text
    name self = @Tail_Call Meta_Helpers.get_unresolved_symbol_name_builtin self.value

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Starts building an instrumentation for a given node
    instrument : Instrumentor
    instrument self = Instrumentor.Value (Meta_Helpers.instrumentor_builtin "newBuilder" [ self.value ])

type Error
    private Value impl

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Obtains the actual value of the error
    value self = self.impl

type Polyglot
    private Value impl

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Obtains the actual polyglot value
    value self = self.impl

    ## ADVANCED
       GROUP Metadata
       ICON metadata

       Returns the language with which a polyglot value is associated.
    get_language : Language
    get_language self =
        lang_str = Meta_Helpers.get_polyglot_language_builtin self.impl
        if lang_str == "java" then Language.Java else Language.Unknown

## ADVANCED
   ICON metadata

   Checks whether `self` represents the same underlying reference as `value`.

   Arguments:
   - value_1: The first value.
   - value_2: The second value.
Any.is_same_object_as : Any -> Boolean
Any.is_same_object_as self value = is_same_object self value

## ADVANCED
   ICON metadata

   Checks if `self` is an instance of `typ`.

   Arguments:
   - typ: The type to check `self` against.
Any.is_a : Any -> Boolean
Any.is_a self typ = Meta_Helpers.is_a_builtin self typ

## ADVANCED
   ICON metadata

   Checks if `self` is an instance of `typ`.

   Arguments:
   - typ: The type to check `self` against.
Base_Error.is_a : Any -> Boolean
Base_Error.is_a self typ = typ==Any || typ==Base_Error

## PRIVATE

   Constructs a new atom with a "hole". Returns an object with `value` and
   `fill` properties. Value contains the created atom and `fill` holds a
   function to "fill the hole" later.

   There can be only one hole in the atom, i.e., only one field of the atom
   returned by the `value` method should be a hole. If this condition is
   violated, a Panic error with `Uninitialized_State` payload is thrown.

   Arguments:
   - factory: a function that takes the "hole" element and returns newly created atom

   > Example
     Create a Pair that has a hole in its first element.
         atom_with_hole = Meta.atom_with_hole (e-> Pair.Value e 2)
         atom_with_hole.value.first.to_text == "Meta.atom_with_hole"
         atom_with_hole.fill 1
         atom_with_hole.value.first.to_text == "1"
atom_with_hole : (Any -> Atom) -> Any
atom_with_hole factory = @Tail_Call Meta_Helpers.atom_with_hole_builtin factory

## PRIVATE
   ADVANCED

   Returns a meta-representation of a given runtime entity.

   Arguments:
   - value: The runtime entity to get the meta representation of.
meta : Any -> Atom | Constructor | Primitive | Polyglot | Unresolved_Symbol | Error
meta value = if Meta_Helpers.is_atom_builtin value then Atom.Value value else
    if Meta_Helpers.is_atom_constructor_builtin value then Constructor.Value value else
        if Meta_Helpers.is_polyglot_builtin value then Polyglot.Value value else
            if Meta_Helpers.is_unresolved_symbol_builtin value then Unresolved_Symbol.Value value else
                if Meta_Helpers.is_error_builtin value then Error.Value value.catch else
                    if Meta_Helpers.is_type_builtin value then Type.Value value.catch else
                        Primitive.Value value

## PRIVATE
   ADVANCED

   Checks whether two objects are represented by the same underlying reference.

   Arguments:
   - value_1: The first value.
   - value_2: The second value.
is_same_object : Any -> Any -> Boolean
is_same_object value_1 value_2 = @Tail_Call Meta_Helpers.is_same_object_builtin value_1 value_2

## PRIVATE
   ADVANCED

   Checks if `value` is an instance of `typ`.

   Arguments:
   - value: The value to check for being an instance of `typ`.
   - typ: The type to check `self` against.
is_a : Any -> Any -> Boolean
is_a value typ = @Tail_Call Meta_Helpers.is_a_builtin value typ

## PRIVATE
java_instance_check value typ =
    val_java = Meta_Helpers.get_polyglot_language_builtin value == "java"
    typ_java = Meta_Helpers.get_polyglot_language_builtin typ == "java"
    val_java && typ_java && Java.is_instance value typ

## PRIVATE
   ADVANCED

   Returns the type of the given value.

   Arguments:
   - value: The value to get the type of.
type_of : Any -> Any
type_of value = @Tail_Call Meta_Helpers.type_of_builtin value

## PRIVATE
   ADVANCED

   Given a type object, method name and a parameter name, return the associated annotation if it exists.

   Arguments:
   - target: The value or type to get the attribute from.
   - method: The symbol representing method or constructor to get the attribute for.
   - parameter_name: The name of the parameter to get the attribute for.
get_annotation : Any -> Any -> Text -> Any | Nothing
get_annotation target method parameter_name = @Tail_Call Meta_Helpers.get_annotation_builtin target method parameter_name

## PRIVATE
   Represents a polyglot language.
type Language
    ## PRIVATE
       ADVANCED

       The Java language.
    Java

    ## PRIVATE
       ADVANCED

       An unknown language.
    Unknown

## PRIVATE

   Checks if the provided value is an atom constructor.

   Arguments:
   - value: The value to check.
is_atom_constructor : Any -> Boolean
is_atom_constructor value = @Tail_Call Meta_Helpers.is_atom_constructor_builtin value

## PRIVATE

   Checks if the provided value is an atom.

   Arguments:
   - value: The value to check.
is_atom : Any -> Boolean
is_atom value = @Tail_Call Meta_Helpers.is_atom_builtin value

## PRIVATE

   Checks if the provided value is a runtime error.

   Arguments:
   - value: The value to check.
is_error : Any -> Boolean
is_error value = @Tail_Call Meta_Helpers.is_error_builtin value

## PRIVATE

   Checks if the provided value is a type.

   Arguments:
   - value: The value to check.
is_type : Any -> Boolean
is_type value = @Tail_Call Meta_Helpers.is_type_builtin value
## PRIVATE

   Checks if the provided value is a polyglot value.

   Arguments:
   - value: The value to check.
is_polyglot : Any -> Boolean
is_polyglot value = @Builtin_Method "Meta.is_polyglot"

## PRIVATE

   Returns a Text representing the source location of a stack frame above
   the call.

   Arguments:
   - skip_frames: how many frames on the stack to skip.

   If the function is called with 0 it will return the location of that call.
   Note that not only function calls, but also things like pattern matching add
   frames to the stack and there is no guarantee that the amount of frames that
   need to be skipped will not change between versions, so this method should be
   used carefully.
get_source_location : Integer -> Text
get_source_location skip_frames = Meta_Helpers.get_source_location_builtin skip_frames

## PRIVATE

   Displays the type of the provided value as text.

   Arguments:
   - value: The value for which to display the type.
get_simple_type_name : Any -> Text
get_simple_type_name value = @Tail_Call Meta_Helpers.get_simple_type_name_builtin value

## PRIVATE

   Returns the fully qualified type name of the given value.

   Arguments:
   - value: the value to get the type of.
get_qualified_type_name : Any -> Text
get_qualified_type_name value = @Tail_Call Meta_Helpers.get_qualified_type_name_builtin value

## PRIVATE
   ADVANCED

   Builder to create instrumentation for a function
type Instrumentor
    private Value impl

    ## PRIVATE
    uuid id:Text -> Any = Meta_Helpers.instrumentor_builtin "uuid" id

    ## PRIVATE
       ADVANCED

       Registers callback to be executed at the begining of node/expression
       execution. The callback `fn` gets UUID of the node/expression that is
       being executed and can return `Nothing` to continue regular execution
       or anything else to skip the execution and just return given value.

       Arguments:
       - fn: The callback function accepting UUID.
    on_enter self (fn : Text -> Any | Nothing) =
        new = Meta_Helpers.instrumentor_builtin "onEnter" [ self.impl, fn ]
        Instrumentor.Value new

    ## PRIVATE
       ADVANCED

       Registers callback to be executed when a node/expression evaluation
       is over. The callback `fn` gets UUID and the computed value (or value
       of `expression` if specified). Usually
       the value is _cached_ and returned from `on_enter` callback next time
       the same expression is evaluated.

       > Example
         Specify `expression` to _"inline evaluate"_ it.
            see_a_b uuid:Text ~result =
              if uuid == "expected-uuid" then
                IO.println "evalutated to "+result.to_text

            Meta.meta .fn . instrument . on_return fn=see_a_b expression="a+b" . activate

       Arguments:
       - fn: The callback function accepting UUID and computed value
       - expression: Expression to evaluate on_return - by default Nothing -
         e.g. to provide the return value of the function
    on_return self (fn : Text -> Any -> Nothing) expression:(Text | Nothing)=Nothing =
        new = Meta_Helpers.instrumentor_builtin "onReturn" [ self.impl, fn, expression ]
        Instrumentor.Value new

    ## PRIVATE
       ADVANCED

       Registers callback to be executed when a node/expression representing function is about to be called.
       The callback `fn` shall accept three arguments. The UUID to identify the expression, the function to be
       invoked and the arguments to pass to the function. The callback can return `Nothing`
       (in such case the function gets executed with provided arguments) or some other value,
       which is then returned instead of calling the function.

       Arguments:
       - fn: The callback function accepting UUID and function value
    on_call self (fn : Text -> Function -> Vector Any -> Any | Nothing) =
        new = Meta_Helpers.instrumentor_builtin "onCall" [ self.impl, fn ]
        Instrumentor.Value new

    ## PRIVATE
       ADVANCED

       Activates configured instrumentor. Returns managed resource to
       deactivate the instrumentor later.

       Arguments:
       - value: The value of the atom in the meta representation.
    activate self =
        finalize_instrumentor impl = Meta_Helpers.instrumentor_builtin "deactivate" [ impl ]
        create action = (Meta_Helpers.instrumentor_builtin action [ self.impl, finalize_instrumentor ]) : Managed_Resource
        create "activate"
