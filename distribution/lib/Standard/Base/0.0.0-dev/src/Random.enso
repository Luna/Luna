import project.Any.Any
import project.Data.Range.Range
import project.Data.Text.Text
import project.Data.Time.Date_Range.Date_Range
import project.Data.Map.Map
import project.Data.Set.Set
import project.Data.Vector.Vector
import project.IO
import project.Nothing.Nothing
import project.Runtime.Ref.Ref
import project.System
from project.Data.Boolean import Boolean, False, True
from project.Data.Numbers import Float, Integer

polyglot java import java.util.Random as Java_Random
polyglot java import org.enso.base.Random_Utils

type Random
    ## GROUP Random

       Create a new `Random_Generator` with the specified seed.

       Arguments:
       - seed: The seed used to initialze the `Random_Generator`.
    new_generator : Integer -> Random_Generator
    new_generator seed = Random_Generator.new seed

    ## GROUP Random

       Set the seed of the default `Random_Generator` instance.

       Arguments:
       - seed: The seed used to initialze the default `Random_Generator`.

       > Example
         Set the seed of the default `Random_Generator` to 42.

             import Standard.Base.Random.Random

             Random.set_seed 42
    set_seed : Integer -> Nothing
    set_seed seed = Random_Utils.seedRandomsSingleton seed

    ## GROUP Random
       Return a random `Boolean` using the default instance of
       `Random_Generator`.

       > Example
         Generate a random boolean using the default instance of
         `Random_Generator`.

             import Standard.Base.Random.Random

             b = Random.boolean
    boolean : Boolean
    boolean = Random.default_instance.boolean

    ##
        # Static versions of methods from Random_Generator.
        int low=0 high = Random.default_instance.int low high
        int_32 low=MIN_INT high=MIN_INT =
        # ...

    ## PRIVATE
       Return the default instance.
    default_instance : Random_Generator
    default_instance = Random_Generator.Value Random_Utils.getRandomSingleton

type Random_Generator
    ## PRIVATE
       Create a new rng with the given seed.
    new : Integer -> Random_Generator
    new seed = Random_Generator.Value (Java_Random.new seed)

    ## PRIVATE
    Value (java_random : Java_Random)

    ## GROUP Random

       Return a random `Boolean`.

       > Example
         Generate a random boolean.
             import Standard.Base.Random.Random

             rng = Random.new 42
             b = rng.boolean
    boolean : Boolean
    boolean self =
        IO.println 'BBB'
        IO.println self.java_random
        n = self.java_random.nextBoolean
        IO.println self.java_random
        n

    ##
        # Return a random `Integer`
        int low=0 high =
        int self ... =

        # Return a random 64-bit `Float`
        float low=0.0 high=1.0 =

        # Return a random 32-bit `Integer` from the entire 32-bit range
        int_32 low=MIN_INT high=MIN_INT =

        # Return a random 64-bit `Integer` from the entire 64-bit range
        int_64 low=MIN_LONG high=MIN_LONG =

        # Return a random `Float` from the entire double precision range range
        double_precision low=MIN_DOUBLE high=MIN_DOUBLE =

        # Return a random `Boolean`
        boolean : Boolean

        # Return a random Gaussian distribution float in the range 0..1
        gaussian : Float

        # Return a random `Integer` in the range 0..255
        byte : Integer

        # Return a random `Integer` from the range [0, n-1], sampled without replacement.
        index : Integer -> Integer -> Integer

        # Return a random `Integer` in the given `Range` (respects `step`)
        in_range : Range -> Integer

        # Return a random `Date` in the given `Date_Range`
        in_date_range : Date_Range -> Date

        # Return a random UUID
        uuid : Text

        # Generate a string by selecting a random character from each element of the list.
        # Previously `Faker.string_value`
        text_from_charsets : Vector (Text | Vector Text)

        ## Generate a string based on a pattern.
        (As seen in AlteryxAbacus.)
        Pattern language TBD.

        Example:
        rnd.text_from_pattern "AAaaa###" -> "BZdje533"
        text_from_pattern pattern : Text -> Text

        ## GROUP Standard.Base.Random
        Randomly converts some values to Nothing
        make_some_nothing : Any -> Float -> Any

        ## Return a random value from the given collection.
        If `with_replacement` is false, and `count` is equal to or greater than
        the size of the collection, a random permutation of the collection is returned.
        sample : Vector | Set | Map | Range -> Integer -> Boolean -> Any
        sample collection count with_replacement=True =

        permutation : Vector | Set | Map | Range -> Any
        permutation collection = Random.sample collection collection.length with_replacement=False

        # Return a list of random `Integers`
        ints count=1 low=0 high count=Nothing
        int_32s ...
        int_64s ...
        # etc.

## PRIVATE
   Returns a default seed to use for random number generation.

   The returned seed will likely differ between each call to this method.
get_default_seed : Integer
get_default_seed = System.nano_time