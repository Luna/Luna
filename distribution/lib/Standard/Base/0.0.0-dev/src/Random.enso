type Random
    # Default Random instance
    default_instance : Random

    # Set the seed of the default Random instance
    set_seed : Integer -> Nothing

    # Create a new Random with the specified seed
    new : Int -> Random

    # Static versions of methods from Random_Generator.
    rand_int low=0 high = Random.default_instance.rand_int low high
    rand_int_32 low=MIN_INT high=MIN_INT =
    # ...

type Random_Generator
    # Return a random `Integer`
    rand_int low=0 high =
    rand_int self ... =

    # Return a random 64-bit `Float`
    rand_float low=0.0 high=1.0 =

    # Return a random 32-bit `Integer` from the entire 32-bit range
    rand_int_32 low=MIN_INT high=MIN_INT =

    # Return a random 64-bit `Integer` from the entire 64-bit range
    rand_int_64 low=MIN_LONG high=MIN_LONG =

    # Return a random `Float` from the entire double precision range range
    rand_double_precision low=MIN_DOUBLE high=MIN_DOUBLE =

    # Return a random `Boolean`
    rand_boolean : Boolean

    # Return a random Gaussian distribution float in the range 0..1
    rand_gaussian : Float

    # Return a random `Integer` in the range 0..255
    rand_byte : Integer

    # Return a random `Integer` from the range [0, n-1], sampled without replacement.
    rand_index : Integer -> Integer -> Integer

    # Return a random `Integer` in the given `Range` (respects `step`)
    rand_in_range : Range -> Integer

    # Return a random `Date` in the given `Date_Range`
    rand_in_date_range : Date_Range -> DAte

    # Return a random UUID
    rand_uuid : Text

    # Generate a string by selecting a random character from each element of the list.
    # Previously `Faker.string_value`
    rand_text_from_charsets : Vector (Text | Vector Char)

    ## Generate a string based on a pattern.
       (As seen in AlteryxAbacus.)
       Pattern language TBD.

       Example:
       rnd.rand_text_from_pattern "AAaaa###" -> "BZdje533"
    rand_text_from_pattern pattern : Text -> Text

    ## GROUP Standard.Base.Random
       Randomly converts some values to Nothing
    make_some_nothing : Any -> Float -> Any

    ## Return a random value from the given collection.
       If `with_replacement` is false, and `count` is equal to or greater than
       the size of the collection, a random permutation of the collection is returned.
    rand_sample : Vector | Set | Map | Range -> Integer -> Boolean -> Any
    rand_sample collection count with_replacement=True =

    rand_permutation : Vector | Set | Map | Range -> Any
    rand_permutation collection = Random.rand_sample collection collection.length with_replacement=False

    # Return a list of random `Integers`
    rand_ints count=1 low=0 high count=Nothing
    rand_int_32s ...
    rand_int_64s ...
    # etc.