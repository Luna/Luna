import project.Any.Any
import project.Data.Range.Range
import project.Data.Text.Text
import project.Data.Time.Date.Date
import project.Data.Time.Date_Range.Date_Range
import project.Data.Time.Time_Of_Day.Time_Of_Day
import project.Data.Time.Time_Period.Time_Period
import project.Data.Map.Map
import project.Data.Set.Set
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.IO
import project.Nothing.Nothing
import project.Runtime.Ref.Ref
import project.System
from project.Data.Boolean import Boolean, False, True
from project.Data.Numbers import Float, Integer

polyglot java import java.lang.Integer as Java_Integer
polyglot java import java.util.Random as Java_Random
polyglot java import org.enso.base.Random_Utils

type Random
    ## PRIVATE
       GROUP Random

       Create a new `Random_Generator` with the specified seed.

       Arguments:
       - seed: The seed used to initialze the `Random_Generator`.
    new_generator : Integer -> Random_Generator
    new_generator seed = Random_Generator.new seed

    ## TEXT_ONLY
       GROUP Random

       Set the seed of the default `Random_Generator` instance.

       Arguments:
       - seed: The seed used to initialze the default `Random_Generator`.

       > Example
         Set the seed of the default `Random_Generator` to 42.

             import Standard.Base.Random.Random

             Random.set_seed 42
    set_seed : Integer -> Nothing
    set_seed seed = Random_Utils.seedRandomsSingleton seed

    ## GROUP Random
       Return a random `Integer` between `min` (inclusive) and `max`
       (exclusive).

       > Example
         Generate an integer between 1 and 10.

              import Standard.Base.Random.Random

              i = Random.integer 1 11
    integer : Integer -> Integer -> Integer
    integer min max = Random.default_instance.integer min max

    ## GROUP Random
       Return a random `Float` in the specified range.

       > Example
         Generate a float between 2.3 and 3.4.

              import Standard.Base.Random.Random

              i = Random.float 2.3 3.4
    float : Float -> Float -> Float
    float min=0.0 max=1.0 = Random.default_instance.float min max

    ## GROUP Random
       Return a random `Boolean` using the default instance of
       `Random_Generator`.

       > Example
         Generate a random boolean.

             import Standard.Base.Random.Random

             b = Random.boolean
    boolean : Boolean
    boolean = Random.default_instance.boolean

    ## GROUP Random
       Return a random Gaussian-distributed `Float` with mean 0.00 and standard
       deviation 1.0.

       > Example
         Generate an gaussian float.

              import Standard.Base.Random.Random

              f = Random.gaussian
    gaussian : Float -> Float -> Float
    gaussian = Random.default_instance.gaussian

    ## GROUP Random
       Return a `Date` within the specified `Date_Range`.

       > Example
         Generate a random date.

             import Standard.Base.Random.Random

             range = Date_Range.new (Date.new 2023 03 01) (Date.new 2023 10 15)
             d = Random.date range
    date : Date_Range -> Date
    date date_range = Random.default_instance.date date_range

    ## GROUP Random
       Return a `Time_Of_Day` between `start_time` and `end_time` (inclusive).

       The generated time is at a granularity of 1 second.

       Note: the time range end is inclusive because it is impossible to specify
       an end time after the last second of the day.

       > Example
         Generate a random time.

             import Standard.Base.Random.Random

             start = Time_Of_Day.new 8 12 15
             end = Time_Of_Day.new 9 40 2
             t = Random.time start end
    time : Time_Of_Day -> Time_Of_Day -> Time_Of_Day
    time start_time=(Time_Of_Day.new 0 0 0) end_time=(Time_Of_Day.new 23 59 59) =
        Random.default_instance.time start_time end_time

    ##
        # Return a random `Time_Of_Day` in the given range
        time : ? -> Date

        # Return a random UUID
        uuid : Text

        # Generate a string by selecting a random character from each element of the list.
        # Previously `Faker.string_value`
        text_from_charsets : Vector (Text | Vector Text)

        ## Return a random value from the given collection.
            If `with_replacement` is false, and `count` is equal to or greater than
            the size of the collection, a random permutation of the collection is returned.
        item : Vector -> Integer -> Boolean -> Any
        item v count with_replacement=True =

        permutation : Vector | Set | Map | Range -> Any
        permutation collection = Random.sample collection collection.length with_replacement=False

    ## PRIVATE
       Return the default instance.
    default_instance : Random_Generator
    default_instance = Random_Generator.Value Random_Utils.getRandomSingleton

# PRIVATE
type Random_Generator
    ## PRIVATE
       Create a new rng with the given seed.
    new : Integer -> Random_Generator
    new seed = Random_Generator.Value (Java_Random.new seed)

    ## PRIVATE
    Value (java_random : Java_Random)

    integer : Integer -> Integer -> Integer
    integer self min max =
        range = max - min
        if range >= Java_Integer.MAX_VALUE then Error.throw (Illegal_Argument.Error "Currently only integer ranges of up to 2^31-1 are supported.") else
          min + (self.java_random.nextInt range)

    float : Float -> Float -> Float
    float self min=0.0 max=1.0 =
        range = max - min
        (self.java_random.nextDouble * range) + min

    boolean : Boolean
    boolean self =
        self.java_random.nextBoolean

    gaussian : Float -> Float -> Float
    gaussian self = self.java_random.nextGaussian

    date : Date_Range -> Date
    date self date_range = date_range.at (self.integer 0 date_range.length)

    time : Time_Of_Day -> Time_Of_Day -> Time_Of_Day
    time self start_time=(Time_Of_Day.new 0 0 0) end_time=(Time_Of_Day.new 23 59 59) =
        ## The time range end is inclusive because it is impossible to specify
           an end time after the last second of the day.
        seconds = self.integer 0 (end_time.to_seconds - start_time.to_seconds + 1)
        start_time.date_add seconds Time_Period.Second

## PRIVATE
   Returns a default seed to use for random number generation.

   The returned seed will likely differ between each call to this method.
get_default_seed : Integer
get_default_seed = System.nano_time