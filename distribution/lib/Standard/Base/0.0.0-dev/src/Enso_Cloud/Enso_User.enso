import project.Enso_Cloud.Enso_File.Enso_Asset_Type
import project.Enso_Cloud.Enso_File.Enso_File
import project.Enso_Cloud.Utils
import project.Data.Json.JS_Object
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Nothing.Nothing
from project.Data.Boolean import Boolean, False, True
from project.Enso_Cloud.Public_Utils import get_required_field

type Enso_User
    ## PRIVATE
       Represents a user within Enso Cloud.

       Fields:
       - name: The user's name.
       - email: The user's email address.
       - id: The user's unique ID.
       - home: The user's home directory.
       - is_enabled: Whether the user is enabled.
    User name:Text email:Text id:Text home:Enso_File is_enabled:Boolean=True

    ## Fetch the current user.
    current : Enso_User
    current =
        json = Utils.http_request_as_json HTTP_Method.Get (Utils.cloud_root_uri + "users/me")
        Enso_User.from json

    ## Lists all known users.
    list : Vector Enso_User
    list =
        json = Utils.http_request_as_json HTTP_Method.Get (Utils.cloud_root_uri + "users")
        users = get_required_field "users" json
        users.map (user-> Enso_User.from user)

    ## Flushes all cloud caches.
       For example, it will flush cached secrets, ensuring that new values will
       be fetched the next time the secrets are accessed.
    flush_caches : Nothing
    flush_caches = Utils.flush_caches

## PRIVATE
Enso_User.from (that:JS_Object) =
    root_folder_id = get_required_field "rootDirectoryId" that
    root_folder = Enso_File.Value "" root_folder_id "" Enso_Asset_Type.Directory
    is_enabled = that.get "isEnabled" True
    Enso_User.User (get_required_field "name" that) (get_required_field "email" that) (get_required_field "id" that) root_folder is_enabled
