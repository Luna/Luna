import project.Any.Any
import project.Data.Json.JS_Object
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Enso_Cloud.Errors.Missing_Data_Link_Library
import project.Error.Error
import project.Errors.Common.No_Such_Conversion
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Illegal_State.Illegal_State
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Unimplemented.Unimplemented
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.File.Data_Link_Access.Data_Link_Access
import project.System.File_Format.Auto_Detect
import project.System.File_Format.Infer
import project.System.File_Format.JSON_Format
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.File_Format_Metadata.Content_Type_Metadata
import project.System.File.Generic.File_Like.File_Like
import project.System.File.Generic.Writable_File.Writable_File
import project.System.Input_Stream.Input_Stream
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Public_Utils import get_required_field

polyglot java import org.enso.base.enso_cloud.DataLinkSPI
polyglot java import org.enso.base.file_format.FileFormatSPI

## PRIVATE
   A file format for reading data links.
type Data_Link_Format
    ## PRIVATE
       Reads the raw configuration data of a data-link.
    read_config (file : File_Like) -> JS_Object =
        text = Data_Link_Format.read_raw_config file
        text.parse_json

    ## PRIVATE
       Writes a data-link configuration to a file.

       Arguments:
       - file: The file to write the configuration to.
       - config: The configuration to write to the file.
       - replace_existing: A flag specifying if the operation should replace an
         existing file. By default, the operation will fail if the file already
         exists.
       - skip_validation: A flag that allows to skip validation. By default,
         before writing the config we try to parse it to ensure that it
         represents a valid data-link. In some cases (e.g. testing), we may want
         to skip that.
    write_config (file : Writable_File) (config : JS_Object) (replace_existing : Boolean = False) (skip_validation : Boolean = False) =
        checked = if skip_validation.not then Data_Link_Format.validate_config config
        checked.if_not_error <|
            Data_Link_Format.write_raw_config file config.to_json replace_existing

    ## PRIVATE
         Reads the raw configuration data of a data-link, as plain text.

         This is should mostly be used for testing, `read_config` is preferred for normal use.

         Arguments:
         - file: The file to read the configuration from.
    read_raw_config (file : File_Like) -> Text =
        if is_data_link file . not then
            Panic.throw (Illegal_Argument.Error "Data_Link_Format should only be used for reading config of Data Links, but "+file.to_display_text+" is not a Data Link.")
        options = [File_Access.Read, Data_Link_Access.No_Follow]
        bytes = file.underlying.with_input_stream options input_stream->
            input_stream.read_all_bytes
        Text.from_bytes bytes data_link_encoding on_problems=Problem_Behavior.Report_Error

    ## PRIVATE
       Writes raw data as the data-link configuration.

       This is should mostly be used for testing, `write_config` is preferred for normal use.

       Arguments:
       - file: The file to write the configuration to.
       - raw_content: The raw data to write to the file.
       - replace_existing: A flag specifying if the operation should replace an
         existing file. By default, the operation will fail if the file already
         exists.
    write_raw_config (file : Writable_File) (raw_content : Text) (replace_existing : Boolean = False) =
        if is_data_link file . not then
            Panic.throw (Illegal_Argument.Error "Data_Link_Format should only be used for writing config to Data Links, but "+file.file.to_display_text+" is not a Data Link.")
        exist_options = if replace_existing then [File_Access.Create, File_Access.Truncate_Existing] else [File_Access.Create_New]
        options = exist_options + [File_Access.Write, Data_Link_Access.No_Follow]

        bytes = raw_content.bytes data_link_encoding on_problems=Problem_Behavior.Report_Error
        r = bytes.if_not_error <| file.with_output_stream options output_stream->
            output_stream.write_bytes bytes
        r.if_not_error file.file

    ## PRIVATE
       Checks if the config represents a valid data-link.

       If the library providing the data-link is not imported, this function
       will fail with `Missing_Data_Link_Library`, even if the config would be
       valid.
    validate_config (config : JS_Object) -> Nothing ! Missing_Data_Link_Library | Illegal_State =
        interpret_json_as_data_link config . if_not_error Nothing

## PRIVATE
   An interface for a data link description.
type Data_Link
    ## PRIVATE
       Reads a data link and interprets it using the provided format.
       If the format is `Auto_Detect` (default), a default format provided by the data link is used, if available.
    read self (format = Auto_Detect) (on_problems : Problem_Behavior = Problem_Behavior.Report_Error) -> Any =
        _ = [format, on_problems]
        Unimplemented.throw "This is an interface only."

## PRIVATE
   A type class representing a data link that can be opened as a stream.

   It requires the underlying data link to provide a `with_input_stream` method.
type Data_Link_With_Input_Stream
    ## PRIVATE
    Value underlying

    ## PRIVATE
       Opens the data pointed at by the data link as a raw stream.
    with_input_stream self (open_options : Vector) (action : Input_Stream -> Any) -> Any =
        self.underlying.with_input_stream open_options action

    ## PRIVATE
       Creates a `Data_Link_With_Input_Stream` from a data link instance, if
       that data link supports streaming. If it does not, an error is thrown.
    find data_link_instance (~if_not_supported = (Error.throw (Illegal_Argument.Error "The "+(data_link_name data_link_instance)+" cannot be opened as a stream."))) -> Data_Link_With_Input_Stream ! Illegal_Argument =
        handle_no_conversion _ =
            if_not_supported
        Panic.catch No_Such_Conversion (Data_Link_With_Input_Stream.from data_link_instance) handle_no_conversion

## PRIVATE
   All data-link config files should be saved with UTF-8 encoding.
data_link_encoding = Encoding.utf_8

## PRIVATE
data_link_content_type = "application/x-enso-datalink"

## PRIVATE
data_link_extension = ".datalink"

## PRIVATE
   Checks if the given file is a data-link.
is_data_link (file_metadata : File_Format_Metadata) -> Boolean =
    content_type_matches = case file_metadata.interpret_content_type of
        content_type : Content_Type_Metadata ->
            content_type.base_type == data_link_content_type
        _ -> False

    # If the content type matches, it is surely a data link.
    if content_type_matches then True else
        ## If the content type does not match, we check the extension even if _different content type was provided_.
           That is because many HTTP servers will not understand data links and may return a data link with
           a content type like `text/plain` or `application/json`. We still want to treat the file as a data link
           if its extension is correct.
        case file_metadata.guess_extension of
            extension : Text ->
                extension == data_link_extension
            Nothing -> False

## PRIVATE
interpret_json_as_data_link json =
    typ = get_required_field "type" json expected_type=Text
    case DataLinkSPI.findDataLinkType typ of
        Nothing ->
            library_name = get_required_field "libraryName" json expected_type=Text
            Error.throw (Missing_Data_Link_Library.Error library_name typ)
        data_link_type ->
            data_link_type.parse json

## PRIVATE
read_data_link (file : File_Like) format (on_problems : Problem_Behavior) =
    json = Data_Link_Format.read_config file
    data_link_instance = interpret_json_as_data_link json
    data_link_instance.read format on_problems

## PRIVATE
read_data_link_as_stream (file : File_Like) (open_options : Vector) (f : Input_Stream -> Any) =
    json = Data_Link_Format.read_config file
    data_link_instance = interpret_json_as_data_link json
    data_link_with_input_stream = Data_Link_With_Input_Stream.find data_link_instance
    data_link_with_input_stream.with_input_stream open_options f

## PRIVATE
write_data_link (file : File_Like) format (on_problems : Problem_Behavior) =
    _ = [file, format, on_problems]
    Unimplemented.throw "Writing data links is not yet supported."

## PRIVATE
write_data_link_as_stream (file : File_Like) (open_options : Vector) (f : Input_Stream -> Any) =
    _ = [file, open_options, f]
    Unimplemented.throw "Writing data links is not yet supported."

## PRIVATE
save_data_link_to_file data_link_instance (target_file : Writable_File) =
    data_link_with_input_stream = Data_Link_With_Input_Stream.find data_link_instance if_not_supported=(Error.throw (Illegal_Argument.Error "The "+(data_link_name data_link_instance)+" cannot be saved to a file."))
    data_link_with_input_stream.with_input_stream [File_Access.Read] input_stream->
        input_stream.write_to_file target_file

## PRIVATE
parse_secure_value json -> Text | Enso_Secret =
    case json of
        raw_text : Text -> raw_text
        _ : JS_Object ->
            case get_required_field "type" json expected_type=Text of
                "secret" ->
                    secret_path = get_required_field "secretPath" json expected_type=Text
                    Enso_Secret.get secret_path
                other -> Error.throw (Illegal_State.Error "Unexpected value inside of a data-link: "+other+".")
        _ -> Error.throw (Illegal_State.Error "Parsing a secure value failed. Expected either a string or an object representing a secret, but got "+(Meta.type_of json . to_display_text)+".")

## PRIVATE
parse_format (json : Any) -> Any ! Illegal_State = case json of
    Nothing -> Auto_Detect
    _ : JS_Object -> case get_required_field "subType" json of
        "default" -> Auto_Detect
        sub_type : Text ->
            format_type = FileFormatSPI.findFormatForDataLinkSubType sub_type
            if format_type.is_nothing then Error.throw (Illegal_State.Error "Unknown format inside of a datalink: "+sub_type+". Perhaps the library providing that format needs to be imported?") else
                format_type.from json
        other ->
            Error.throw (Illegal_State.Error "Expected `subType` to be a string, but got: "+other.to_display_text+".")
    other -> Error.throw (Illegal_State.Error "Unexpected value inside of a data-link `format` field: "+other.to_display_text+".")

## PRIVATE
   Returns a human readable name of the data link type, based on its type.
data_link_name data_link_instance =
    Meta.type_of data_link_instance . to_display_text . replace "_" " "
