import project.Any.Any
import project.Data.Json.JS_Object
import project.Data.Numbers.Integer
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Date_Time_Formatter.Date_Time_Formatter
import project.Data.Vector.Vector
import project.Enso_Cloud.Data_Link
import project.Enso_Cloud.Enso_User.Enso_User
import project.Enso_Cloud.Errors.Enso_Cloud_Error
import project.Enso_Cloud.Internal.Enso_Path.Enso_Path
import project.Enso_Cloud.Internal.Existing_Enso_Asset.Existing_Enso_Asset
import project.Enso_Cloud.Internal.Utils
import project.Error.Error
import project.Errors.Common.Not_Found
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Time_Error.Time_Error
import project.Errors.Unimplemented.Unimplemented
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Runtime
import project.Runtime.Context
import project.System.Environment
import project.System.File.Data_Link_Access.Data_Link_Access
import project.System.File.File_Access.File_Access
import project.System.File.Generic.File_Like.File_Like
import project.System.File.Generic.Writable_File.Writable_File
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.Input_Stream.Input_Stream
import project.System.Output_Stream.Output_Stream
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Public_Utils import get_required_field
from project.System.File_Format import Auto_Detect, Bytes, File_Format, Plain_Text_Format
from project.System.File.Generic.File_Write_Strategy import generic_copy
from project.System.File import find_extension_from_name

type Enso_File
    ## ICON data_input
       Resolves an `enso://` path and returns the corresponding `Enso_File`
       instance.

       Arguments:
       - path: The `enso://` path to a file or directory.

       ? Enso Cloud Paths

         The paths consist of the organization (user) name followed by a path to
         the file/directory delimited by `/`.
         For example `enso://my_org/some_dir/some-file.txt`.

       ! Work in progress - only existing resources

         Currently the API is only able to resolve paths to existing files or
         directories. This is a temporary limitation and it will be improved in
         the future, alongside with implementing the capabilities to write new
         files.
    new : Text -> Enso_File ! Not_Found
    new (path : Text) =
        Enso_File.Value (Enso_Path.parse path)

    ## PRIVATE
    Value (enso_path : Enso_Path)

    ## ICON folder
       Represents the root folder of the current users.
    root : Enso_File
    root = Enso_File.Value (Enso_Path.root_for Enso_User.current.organization_name)

    ## ICON folder
       Represents the current working directory.

       If the workflow is running on the Cloud, this will be the directory
       containing the current project.

       If the workflow is running locally, this will default to the root
       directory.
    current_working_directory : Enso_File
    current_working_directory =
        path = Environment.get "ENSO_PROJECT_DIRECTORY_PATH"
        if path.is_nothing then Enso_File.root else
            Enso_File.new path

    ## PRIVATE
    asset_type self -> Enso_Asset_Type =
        # TODO maybe we can short circuit if it ends with `.datalink` or `.secret`?
        Existing_Enso_Asset.get_asset_reference_for self . asset_type

    ## GROUP Metadata
       ICON metadata
       Checks if the folder or file exists
    exists : Boolean
    exists self =
        Existing_Enso_Asset.get_asset_reference_for self . is_error . not

    ## GROUP Metadata
       ICON metadata
       Gets the size of a file in bytes.
    size : Integer
    size self -> Integer =
        asset = Existing_Enso_Asset.get_asset_reference_for self
        if asset.is_regular_file.not then Error.throw (Illegal_Argument.Error "`size` can only be queried for regular files.") else
            metadata = asset.get_file_description |> get_required_field "metadata"
            get_required_field "size" metadata expected_type=Integer

    ## GROUP Metadata
       ICON metadata
       Gets the creation time of a file.
    creation_time : Date_Time
    creation_time self -> Date_Time =
        asset = Existing_Enso_Asset.get_asset_reference_for self
        if asset.is_directory then Unimplemented.throw "Enso_File.creation_time is not implemented yet for directories." else
            metadata = asset.get_file_description |> get_required_field "metadata"
            Date_Time.parse (get_required_field "created_at" metadata expected_type=Text) Date_Time_Formatter.iso_offset_date_time
                . catch Time_Error error-> Error.throw (Enso_Cloud_Error.Invalid_Response_Payload error)

    ## GROUP Metadata
       ICON metadata
       Gets the last modified time of a file.
    last_modified_time : Date_Time
    last_modified_time self =
        asset = Existing_Enso_Asset.get_asset_reference_for self
        if asset.is_directory then Unimplemented.throw "Enso_File.last_modified_time is not implemented yet for directories." else
            metadata = asset.get_file_description |> get_required_field "metadata"
            Date_Time.parse (get_required_field "modified_at" metadata expected_type=Text) Date_Time_Formatter.iso_offset_date_time
                . catch Time_Error error-> Error.throw (Enso_Cloud_Error.Invalid_Response_Payload error)

    ## GROUP Metadata
       ICON metadata
       Checks if this is a folder
    is_directory : Boolean
    is_directory self =
        Existing_Enso_Asset.get_asset_reference_for self . is_directory

    ## GROUP Metadata
       ICON metadata
       Checks if this is a regular file
    is_regular_file : Boolean
    is_regular_file self =
        Existing_Enso_Asset.get_asset_reference_for self . is_regular_file

    ## GROUP Metadata
       ICON folder
       Finds the parent Enso_File for this file.
    parent : Enso_File | Nothing
    parent self =
        if self.enso_path.is_root then Nothing else
            Enso_File.Value self.enso_path.parent

    ## GROUP Metadata
       ICON metadata
       Returns the path of this file.
    path self -> Text = self.enso_path.to_text

    ## GROUP Metadata
       ICON metadata
       Checks if `self` is a descendant of `other`.
    is_descendant_of self (other : Enso_File) -> Boolean =
        self.enso_path.is_descendant_of other.enso_path

    ## PRIVATE
       ADVANCED
       Creates a new output stream for this file and runs the specified action
       on it.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the output stream and returns some
         value. The value is returned from this method.
    with_output_stream : Vector File_Access -> (Output_Stream -> Any ! File_Error) -> Any ! File_Error
    with_output_stream self (open_options : Vector) action =
        _ = [open_options, action]
        Unimplemented.throw "Writing to Enso_Files is not currently implemented."

    ## PRIVATE
       ADVANCED
       Creates a new input stream for this file and runs the specified action
       on it.

       Arguments:
       - open_options: A vector of `File_Access` objects determining how to open
         the stream. These options set the access properties of the stream.
       - action: A function that operates on the input stream and returns some
         value. The value is returned from this method.

       The created stream is automatically closed when `action` returns (even
       if it returns exceptionally).
    with_input_stream : Vector File_Access -> (Input_Stream -> Any ! File_Error) -> Any ! File_Error | Illegal_Argument
    with_input_stream self (open_options : Vector) action =
        open_as_data_link = (open_options.contains Data_Link_Access.No_Follow . not) && (Data_Link.is_data_link self)
        if open_as_data_link then Data_Link.read_data_link_as_stream self open_options action else
            File_Access.ensure_only_allowed_options "with_input_stream" [File_Access.Read, Data_Link_Access.No_Follow] open_options <|
                asset = Existing_Enso_Asset.get_asset_reference_for self
                uri = case asset.asset_type of
                    Enso_Asset_Type.File -> asset.get_download_url
                    Enso_Asset_Type.Data_Link ->
                        Runtime.assert (open_options.contains Data_Link_Access.No_Follow)
                        asset.internal_uri
                    _ ->
                        Error.throw (Illegal_Argument.Error "Only files can be opened as a stream.")
                response = HTTP.fetch uri HTTP_Method.Get []
                response.if_not_error <| response.body.with_stream action

    ## ALIAS load, open
       GROUP Input
       ICON data_input
       Read a file using the specified file format

       Arguments:
       - format: A `File_Format` object used to read file into memory.
         If `Auto_Detect` is specified; the provided file determines the specific
         type and configures it appropriately. If there is no matching type then
         a `File_Error.Unsupported_Type` error is returned.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    @format File_Format.default_widget
    read : File_Format -> Problem_Behavior -> Any ! Illegal_Argument | File_Error
    read self format=Auto_Detect (on_problems=Problem_Behavior.Report_Warning) =
        asset = Existing_Enso_Asset.get_asset_reference_for self
        case asset.asset_type of
            Enso_Asset_Type.Project -> Error.throw (Illegal_Argument.Error "Projects cannot be read within Enso code. Open using the IDE.")
            Enso_Asset_Type.Secret -> Error.throw (Illegal_Argument.Error "Secrets cannot be read directly.")
            Enso_Asset_Type.Data_Link ->
                json = Utils.http_request_as_json HTTP_Method.Get asset.internal_uri
                datalink = Data_Link.interpret_json_as_data_link json
                datalink.read format on_problems
            Enso_Asset_Type.Directory -> if format == Auto_Detect then self.list else Error.throw (Illegal_Argument.Error "Directories can only be read using the Auto_Detect format.")
            Enso_Asset_Type.File -> File_Format.handle_format_missing_arguments format <|
                read_with_format effective_format =
                    metadata = File_Format_Metadata.from self
                    # TODO maybe avoid fetching asset id twice here? maybe move with_input_stream to asset? or helper?
                    self.with_input_stream [File_Access.Read] (stream-> effective_format.read_stream stream metadata)

                if format != Auto_Detect then read_with_format format else
                    real_format = Auto_Detect.get_reading_format self
                    if real_format == Nothing then Error.throw (File_Error.Unsupported_Type self) else
                        read_with_format real_format

    ## ALIAS load bytes, open bytes
       ICON data_input
       Reads all bytes in this file into a byte vector.
    read_bytes : Vector ! File_Error
    read_bytes self =
        self.read Bytes

    ## ALIAS load text, open text
       ICON data_input
       Reads the whole file into a `Text`, with specified encoding.

       Arguments:
       - encoding: The text encoding to decode the file with. Defaults to UTF-8.
       - on_problems: Specifies the behavior when a problem occurs during the
         function.
         By default, a warning is issued, but the operation proceeds.
         If set to `Report_Error`, the operation fails with a dataflow error.
         If set to `Ignore`, the operation proceeds without errors or warnings.
    @encoding Encoding.default_widget
    read_text : Encoding -> Problem_Behavior -> Text ! File_Error
    read_text self (encoding=Encoding.utf_8) (on_problems=Problem_Behavior.Report_Warning) =
        self.read (Plain_Text_Format.Plain_Text encoding) on_problems

    ## GROUP Metadata
       ICON metadata
       Returns the name of this file.
    name self -> Text =
        if self.enso_path.path_segments.is_empty then "" else
            self.enso_path.path_segments.last

    ## GROUP Metadata
       ICON metadata
       Returns the extension of the file.
    extension self -> Text =
        find_extension_from_name self.name

    ## GROUP Input
       ICON data_input
       Gets a list of assets within self.
    list : Vector Enso_File
    list self =
        # Remove secrets from the list - they are handled separately in `Enso_Secret.list`.
        assets = list_assets self . filter f-> f.asset_type != Enso_Asset_Type.Secret
        assets.map asset->
            # TODO we could cache the asset maybe? but for how long should we do that?
            Enso_File.Value (self.enso_path.resolve asset.name)

    ## UNSTABLE
       GROUP Output
       Creates a subdirectory in a specified directory.
    create_directory : Text -> Enso_File
    create_directory self (name : Text) =
        asset = Existing_Enso_Asset.get_asset_reference_for self
        if asset.is_directory.not then Error.throw (Illegal_Argument.Error "Only directories can contain subdirectories.") else
            parent_field = if self.is_current_user_root then [] else
                [["parentId", [asset.id]]]
            body = JS_Object.from_pairs [["title", name]]+parent_field
            response = Utils.http_request_as_json HTTP_Method.Post Utils.directory_api body
            # TODO we could cache the asset maybe? but for how long should we do that?
            created_asset = Existing_Enso_Asset.from_json response
            created_asset.if_not_error <|
                Enso_File.Value (self.enso_path.resolve name)

    ## UNSTABLE
       GROUP Output
       Deletes the file or directory.
    delete : Nothing
    delete self = if self.enso_path.is_root then Error.throw (Illegal_Argument.Error "The root directory cannot be deleted.") else
        asset = Existing_Enso_Asset.get_asset_reference_for self
        uri = URI.from asset.asset_uri . add_query_argument "force" "true"
        response = Utils.http_request HTTP_Method.Delete uri
        response.if_not_error Nothing

    ## ICON data_output
       Deletes the file if it had existed.
    delete_if_exists : Nothing
    delete_if_exists self =
        r = self.delete
        r.catch File_Error err-> case err of
            File_Error.Not_Found _ -> Nothing
            _ -> r

    ## ICON data_output
       Copies the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    copy_to : Writable_File -> Boolean -> Any ! File_Error
    copy_to self (destination : Writable_File) (replace_existing : Boolean = False) =
        generic_copy self destination.file replace_existing

    ## ICON data_output
       Moves the file to the specified destination.

       Arguments:
       - destination: the destination to move the file to.
       - replace_existing: specifies if the operation should proceed if the
         destination file already exists. Defaults to `False`.
    move_to : Writable_File -> Boolean -> Nothing ! File_Error
    move_to self (destination : Writable_File) (replace_existing : Boolean = False) =
        _ = [destination, replace_existing]
        Context.Output.if_enabled disabled_message="File moving is forbidden as the Output context is disabled." panic=False <|
            Unimplemented.throw "Enso_File.move_to is not implemented"

    ## GROUP Operators
       ICON folder
       Resolves a file or directory within this directory.
    / : Text -> Enso_File ! Not_Found
    / self (name : Text) -> Enso_File ! Not_Found =
        Enso_File.Value (self.enso_path.resolve name)

    ## PRIVATE
    is_current_user_root self -> Boolean =
        self.enso_path.is_root && self.enso_path.organization_name == Enso_User.current.organization_name

    ## PRIVATE
       Returns the text representation of the file descriptor.
    to_text : Text
    to_text self -> Text =
        "Enso_File "+self.path

## PRIVATE
list_assets (parent : Enso_File) -> Vector Existing_Enso_Asset =
    Existing_Enso_Asset.get_asset_reference_for parent . list_directory

type Enso_Asset_Type
    ## Represents an Enso project.
    Project

    ## Represents an file.
    File

    ## Represents a folder.
    Directory

    ## Represents a secret.
    Secret

    ## Represents a connection to another data source.
    Data_Link

## PRIVATE
Enso_Asset_Type.from (that:Text) = case that of
    "project" -> Enso_Asset_Type.Project
    "file" -> Enso_Asset_Type.File
    "directory" -> Enso_Asset_Type.Directory
    "secret" -> Enso_Asset_Type.Secret
    "connector" -> Enso_Asset_Type.Data_Link
    _ -> Error.throw (Illegal_Argument.Error "Invalid asset type: "+that.pretty+".")

## PRIVATE
File_Format_Metadata.from (that:Enso_File) =
    # TODO this is just a placeholder, until we implement the proper path
    path = Nothing
    case that.asset_type of
        Enso_Asset_Type.Data_Link ->
            File_Format_Metadata.Value path=path name=that.name content_type=Data_Link.data_link_content_type
        Enso_Asset_Type.Directory ->
            File_Format_Metadata.Value path=path name=that.name extension=(that.extension.catch _->Nothing)
        Enso_Asset_Type.File ->
            File_Format_Metadata.Value path=path name=that.name extension=(that.extension.catch _->Nothing)
        other_asset_type -> Error.throw (Illegal_Argument.Error "`File_Format_Metadata` is not available for: "+other_asset_type.to_text+".")

## PRIVATE
File_Like.from (that : Enso_File) = File_Like.Value that
