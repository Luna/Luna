private

import project.Data.Json.Invalid_JSON
import project.Data.Text.Text
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Date_Time_Formatter.Date_Time_Formatter
import project.Data.Time.Duration.Duration
import project.Enso_Cloud.Errors.Enso_Cloud_Error
import project.Enso_Cloud.Errors.Not_Logged_In
import project.Errors.Illegal_State.Illegal_State
import project.Errors.Time_Error.Time_Error
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Error.HTTP_Error
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code
import project.Network.HTTP.Request.Request
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.HTTP.Request_Error
import project.Network.HTTP.Response.Response
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Ref.Ref
import project.System.Environment
import project.System.File.File
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all

polyglot java import org.enso.base.enso_cloud.AuthenticationProvider

## PRIVATE
   Returns an access token for the current user, that should be valid for
   at least 2 more minutes.

   If the current token is expired or <2m from expiration, it will be refreshed
   and a new one will be returned. Because of that, this method may make network
   requests.
get_access_token : Text
get_access_token = AuthenticationProvider.getAccessToken

## PRIVATE
credentials_file : File
credentials_file = case Environment.get "ENSO_CLOUD_CREDENTIALS_FILE" of
    Nothing -> File.home / ".enso" / "credentials"
    path -> File.new path

## PRIVATE
type Authentication_Service
    ## PRIVATE
    Instance (auth_data : Ref Authentication_Data)

    ## PRIVATE
    get_access_token self -> Text =
        is_still_valid = self.auth_data.get.expire_at > (Date_Time.now + Duration.new minutes=2)
        if is_still_valid then self.auth_data.get.access_token else
            # The token has expired or will expire soon, so we need to refresh it.
            self.force_refresh
            self.auth_data.get.access_token

    ## PRIVATE
       Refreshes the access token using the refresh token, regardless of its freshness.
    force_refresh self -> Nothing =
        refresh_token_data = Refresh_Token_Data.read_from_credentials
        new_auth_data = refresh_token_data.fetch_new_access_token
        Panic.rethrow <| self.auth_data.put new_auth_data
        Nothing

    ## PRIVATE
    new -> Authentication_Service =
        initial_data = Authentication_Data.read_from_credentials
        Authentication_Service.Instance (Ref.new initial_data)

## PRIVATE
   The method called from Java that creates a new instance of the service, to be
   stored in the global state.
instantiate_authentication_service =
    # We rethrow any dataflow errors, because this is fed back to Java code that only understands exceptions (panics).
    Panic.rethrow <|
        Authentication_Service.new

## PRIVATE
type Authentication_Data
    ## PRIVATE
    Value access_token:Text expire_at:Date_Time

    ## PRIVATE
    read_from_credentials -> Authentication_Data =
        content = credentials_file.read_text
        as_json = content.parse_json.catch Invalid_JSON error->
            Panic.throw (Illegal_State.Error "Invalid credentials file format: "+error.to_display_text cause=error)
        get_field field_name =
            as_json.get field_name if_missing=(Panic.throw (Illegal_State.Error "Invalid credentials file format: missing field `"+field_name+"`."))
        token = get_field "access_token"
        expiration_date_string = get_field "expire_at"
        expiration_date = Date_Time.parse expiration_date_string format=Date_Time_Formatter.iso_zoned_date_time . catch Time_Error error->
            Panic.throw (Illegal_State.Error "Invalid credentials file format: invalid date format in `expire_at` field: "+error.to_display_text cause=error)
        Authentication_Data.Value access_token=token expire_at=expiration_date

## PRIVATE
type Refresh_Token_Data
    ## PRIVATE
    Value client_id:Text refresh_uri:Text refresh_token:Text

    ## PRIVATE
    read_from_credentials -> Refresh_Token_Data =
        content = credentials_file.read_text
        as_json = content.parse_json.catch Invalid_JSON error->
            Panic.throw (Illegal_State.Error "Token refresh failed due to invalid credentials file format: "+error.to_display_text cause=error)
        get_field field_name =
            as_json.get field_name if_missing=(Panic.throw (Illegal_State.Error "Token refresh failed due to invalid credentials file format: missing field `"+field_name+"`."))
        client_id = get_field "client_id"
        refresh_uri = get_field "refresh_uri"
        refresh_token = get_field "refresh_token"
        Refresh_Token_Data.Value client_id=client_id refresh_uri=refresh_uri refresh_token=refresh_token

    ## PRIVATE
    fetch_new_access_token self -> Authentication_Data =
        # TODO
        Authentication_Data.Value Nothing Nothing
