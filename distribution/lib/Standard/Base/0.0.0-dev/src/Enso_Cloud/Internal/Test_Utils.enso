import project.Data.Json.JS_Object
import project.Data.Text.Text
import project.Data.Time.Date_Time.Date_Time
import project.Data.Vector.Vector
import project.Enso_Cloud.Errors.Enso_Cloud_Error
import project.Enso_Cloud.Internal.Utils
import project.Error.Error
import project.Errors.Time_Error.Time_Error
import project.Network.HTTP.HTTP_Method.HTTP_Method
from project.Enso_Cloud.Public_Utils import get_optional_field, get_required_field

## PRIVATE
   Returns log events available in the current account.
   This method is only used for testing and should not be used in production.
get_audit_log_events -> Vector Audit_Log_Event =
    json = Utils.http_request_as_json HTTP_Method.Get Utils.cloud_root_uri+"log_events"
    events_json = get_required_field "events" json
    events_json.map Audit_Log_Event.from_json

## PRIVATE
type Audit_Log_Event
    ## PRIVATE
    Value organization_id:Text user_email:Text timestamp:Date_Time metadata:JS_Object message:Text project_id:Text

    ## PRIVATE
    from_json json =
        organization_id = get_required_field "organizationId" json expected_type=Text
        user_email = get_required_field "userEmail" json expected_type=Text
        timestamp_text = get_optional_field "timestamp" json expected_type=Text
        timestamp = timestamp_text.if_not_nothing <| Date_Time.parse timestamp_text . catch Time_Error error->
            Error.throw (Enso_Cloud_Error.Invalid_Response_Payload "Invalid timestamp format in audit log event: "+error.to_display_text)
        metadata = get_required_field "metadata" json
        message = get_required_field "message" json expected_type=Text
        project_id = get_optional_field "projectId" json expected_type=Text
        Audit_Log_Event.Value organization_id user_email timestamp metadata message project_id
