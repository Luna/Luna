private

import project.Data.Index_Sub_Range.Index_Sub_Range
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Enso_Cloud.Enso_File.Enso_File
import project.Enso_Cloud.Enso_User.Enso_User
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Unimplemented.Unimplemented
import project.Nothing.Nothing
from project.Data.Text.Extensions import all

## PRIVATE
   UNSTABLE
   This is a helper for handling `enso://` paths.
type Enso_Path
    ## PRIVATE
    Value (organization_name : Text) (path_segments : Vector Text)

    ## PRIVATE
    parse (path : Text) -> Enso_Path =
        prefix = "enso://"
        if path.starts_with prefix . not then Error.throw (Illegal_Argument.Error "Invalid path - it should start with `enso://`.") else
            raw_segments = path.drop prefix.length . split "/"
            if raw_segments.is_empty then Error.throw (Illegal_Argument.Error "Invalid path - it should contain at least one segment.") else
                organization_name = raw_segments.first
                segments = raw_segments.drop 1 . filter s-> s.is_empty.not
                Enso_Path.Value organization_name segments

    ## PRIVATE
    root_for (organization_name : Text) =
        Enso_Path.Value organization_name []

    ## PRIVATE
    is_root self -> Boolean =
        self.path_segments.is_empty

    ## PRIVATE
    parent self -> Enso_Path =
        if self.is_root then Error.throw (Illegal_Argument.Error "Cannot get parent of the root directory.") else
            Enso_Path.Value self.organization_name (self.path_segments.drop (Index_Sub_Range.Last 1)) self.asset_name

    ## PRIVATE
    resolve self (subpath : Text) -> Enso_Path =
        # TODO implement splitting on / as well as support for ..
        # try sharing the `normalize` code with S3_Path
        if subpath.contains "/" then Error.throw (Illegal_Argument.Error "Resolving sub-paths (/) is not implemented. Temporary workaround: use the `/` operator multiple times.") else
            Enso_Path.Value self.organization_name (self.path_segments.append subpath) self.asset_name

    ## PRIVATE
    to_text self -> Text =
        dir_part = "enso://" + self.organization_name + "/" + self.path_segments.join "/"
