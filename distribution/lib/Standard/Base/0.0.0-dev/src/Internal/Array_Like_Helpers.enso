import project.Any.Any
import project.Data.Array.Array
import project.Data.Maybe.Maybe
import project.Data.Numbers.Integer
import project.Data.Vector.Map_Error
import project.Data.Vector.Vector
import project.Errors.Common.Additional_Warnings
import project.Error.Error
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Nothing.Nothing
import project.Runtime.Ref.Ref
import project.Warning.Warning
from project.Data.Boolean import Boolean, False, True

## PRIVATE
new_array_proxy_builtin : Integer -> (Integer -> Any) -> Array
new_array_proxy_builtin length at = @Builtin_Method "Array_Like_Helpers.new_array_proxy_builtin"

## PRIVATE
new_vector_builder : Integer -> Any
new_vector_builder capacity = @Builtin_Method "Array_Like_Helpers.new_vector_builder"

## PRIVATE
length : (Array | Vector) -> Integer
length array_like = @Builtin_Method "Array_Like_Helpers.length"

## PRIVATE
at : (Array | Vector) -> Integer -> Any
at array_like index = @Builtin_Method "Array_Like_Helpers.at"

## PRIVATE
vector_to_array : (Vector | Array) -> Array
vector_to_array array_like = @Builtin_Method "Array_Like_Helpers.vector_to_array"

## PRIVATE
vector_from_function_primitive : Integer -> (Integer -> Any) -> Vector Any
vector_from_function_primitive length constructor = @Builtin_Method "Array_Like_Helpers.vector_from_function"

vector_from_function : Integer -> (Integer -> Any) -> Problem_Behavior -> Vector Any
vector_from_function length function on_problems=Problem_Behavior.Report_Error =
    max_warnings = 10
    num_errors = Ref.new 0
    wrapped_function i =
        result = function i
        case result.is_error of
            False ->
                if Warning.has_warnings result . not then result else
                    Warning.map_attached_warnings (w-> Maybe.Some (Map_Error.Error i w)) result
            True ->
                case on_problems of
                    Problem_Behavior.Ignore ->
                        Nothing
                    Problem_Behavior.Report_Error ->
                        result.catch_primitive caught->
                            Error.throw (Map_Error.Error i caught)
                    Problem_Behavior.Report_Warning ->
                        with_error_maybe = if num_errors.get >= max_warnings then Nothing else
                            result.catch_primitive caught->
                                Warning.attach (Map_Error.Error i caught) Nothing
                        num_errors.modify (_+1)
                        with_error_maybe
    results = vector_from_function_primitive length wrapped_function
    if num_errors.get <= max_warnings then results else
        err = Additional_Warnings.Error num_errors.get-max_warnings
        Warning.attach err results
