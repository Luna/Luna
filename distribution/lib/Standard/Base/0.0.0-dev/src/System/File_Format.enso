from Standard.Base import all
from Standard.Base.Error.Common import unimplemented

type File_Format
    ## Does the File_Format support reading from the file?
    matches : File -> Boolean
    matches _ = False

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read _ _ = unimplemented "This is an interface only."

type Auto_Detect
    ## PRIVATE
    get_format : Text -> (File_Format | Nothing)
    get_format self file =
         result = File_Format.types.find t->(t.matches file)
         if result.is_error then Nothing else result

    ## Does the File_Format support reading from the file?
    matches : File -> Boolean
    matches file = Auto_Detect.get_format file.extension != Nothing

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        reader = Auto_Detect.get_format file.extension
        if reader == Nothing then Error.throw (Unsupported_File_Type_Data "No File_Format supports '" + file.extension + "'") else
            reader.read file on_problems

type Plain_Text_Format
    Plain_Text (encoding:Encoding=Encoding.utf_8)

    matches : File -> Boolean
    matches file =
        case file.extension of
            ".txt" -> True
            ".log" -> True
            _ -> False

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        file.read_text self.encoding on_problems

type Bytes
    matches : File -> Boolean
    matches file =
        case file.extension of
            ".dat" -> True
            _ -> False

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        file.read_text self.encoding on_problems

type Unsupported_File_Type
    Unsupported_File_Type_Data (message:Text)
