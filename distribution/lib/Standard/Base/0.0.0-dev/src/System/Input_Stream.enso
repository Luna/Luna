import project.Any.Any
import project.Data.Array.Array
import project.Data.Numbers.Integer
import project.Data.Text.Encoding.Encoding
import project.Data.Vector.Vector
import project.Errors.Encoding_Error.Encoding_Error
import project.Errors.File_Error.File_Error
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Nothing.Nothing
import project.Runtime.Managed_Resource.Managed_Resource
import project.System.File.Advanced.Temporary_File.Temporary_File
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.File.Generic.Writable_File.Writable_File
import project.System.Advanced.Restartable_Input_Stream.Restartable_Input_Stream
from project.Data.Boolean import Boolean, False, True

polyglot java import java.io.BufferedInputStream
polyglot java import java.io.ByteArrayInputStream
polyglot java import java.io.InputStream as Java_Input_Stream
polyglot java import org.enso.base.encoding.Encoding_Utils
polyglot java import org.enso.base.encoding.ReportingStreamDecoder

## PRIVATE
   An input stream, allowing for interactive reading of contents.
type Input_Stream
    ## PRIVATE
       ADVANCED

       Given a Java InputStream, wraps as a Managed_Resource and returns a new
       Input_Stream.
    new : Java_Input_Stream -> Any -> (Nothing | File | Temporary_File | Vector | Array) -> Input_Stream
    new java_stream error_handler associated_source=Nothing =
        resource = Managed_Resource.register java_stream close_stream
        Input_Stream.Value resource error_handler associated_source

    ## PRIVATE
       ADVANCED
       Creates a new input stream from a vector of bytes.
    from_bytes bytes -> Input_Stream =
        raw_stream = ByteArrayInputStream.new bytes
        Input_Stream.new raw_stream (File_Error.handle_java_exceptions Nothing) bytes

    ## PRIVATE
       An input stream, allowing for interactive reading of contents.

       Arguments:
       - stream_resource: The internal resource that represents the underlying
         stream.
       - error_handler: An error handler for IOExceptions thrown when reading.
       - associated_source: The source associated with this stream, if any.
         It can be used to cheaply convert this stream into a `Restartable_Input_Stream`.
    private Value stream_resource error_handler (associated_source : Nothing | File | Temporary_File | Vector | Array)

    ## PRIVATE
       ADVANCED
       Reads all the bytes in this stream into a vector of bytes.
    read_all_bytes : Vector
    read_all_bytes self = self.stream_resource . with java_stream->
        self.error_handler <| Vector.from_polyglot_array java_stream.readAllBytes

    ## PRIVATE
       ADVANCED
       Reads up to the provided number of bytes from the stream.

       Makes a best-effort to read as many bytes as provided, however fewer
       bytes may be read, if end of stream is encountered.

       The length of the returned vector is the same as the number of bytes
       read.

       Arguments:
       - n: The number of bytes to read from the stream.
    read_n_bytes : Integer -> Vector
    read_n_bytes self n = self.stream_resource . with java_stream->
        self.error_handler <|
            bytes = java_stream.readNBytes n
            Vector.from_polyglot_array bytes

    ## PRIVATE
       ADVANCED
       Reads the next byte from the stream.

       The returned value is an integer in the range 0-255 representing the
       next byte of input, or -1 if end of stream is reached.
    read_byte : Integer
    read_byte self = self.stream_resource . with java_stream->
        self.error_handler <|
            java_stream.read

    ## PRIVATE
       ADVANCED
       Closes this stream.

       Even though Streams are closed automatically upon garbage collection, it
       is still advised to close streams manually if they are not used within
       a bracket pattern.
    close : Nothing
    close self = self.stream_resource . finalize

    ## PRIVATE
       Exposes operations on the underlying Java input stream.

       Useful when integrating with polyglot functions requiring an
       `InputStream` as an argument.

       Arguments:
       - f: Applies a function over the internal java stream.
    with_java_stream : (Java_Input_Stream -> Any) -> Any
    with_java_stream self f = self.stream_resource . with f

    ## PRIVATE
       Runs an action with a `ReportingStreamDecoder` decoding data from the
       input stream with the specified encoding.
    with_stream_decoder : Encoding -> Problem_Behavior -> (ReportingStreamDecoder -> Any) -> Any
    with_stream_decoder self encoding on_problems action = self.stream_resource . with java_stream->
        results = Encoding_Utils.with_stream_decoder java_stream encoding.to_java_charset_or_null action
        problems = Vector.from_polyglot_array results.problems . map decoding_problem->
            Encoding_Error.Error decoding_problem.message
        on_problems.attach_problems_after results.result problems

    ## PRIVATE
       Converts this stream into a restartable stream.
       The conversion tries to be efficient, avoiding reading the stream if it 
       is simply backed by a file or byte array.
       This stream is invalidated after the conversion.
    as_restartable_stream self -> Restartable_Input_Stream =
        Restartable_Input_Stream.make self

    ## PRIVATE
    is_peekable self -> Boolean =
        self.with_java_stream java_stream->
            java_stream.markSupported

    ## PRIVATE
       Converts this stream into a stream that can be peeked.
       This is useful when some application needs to look ahead in the stream,
       but then needs to pass it further with the same state.

       The peeked bytes are cached in memory, so this should only be used for
       small amounts of data. If more data has to be processed more than once,
       `as_restartable_stream` is preferred.

       The current stream may be invalidated after the conversion.
    as_peekable_stream self -> Input_Stream = if self.is_peekable then self else
        raw_java_stream = self.stream_resource.take
        buffered_stream = BufferedInputStream.new raw_java_stream
        Input_Stream.new buffered_stream self.error_handler self.associated_source

    ## PRIVATE
       Reads the contents of this stream into a given file.
    write_to_file self (file : Writable_File) =
        result = file.with_output_stream [File_Access.Create, File_Access.Truncate_Existing, File_Access.Write] output_stream->
            output_stream.write_stream self
        result.if_not_error file.file_for_return

## PRIVATE
   Utility method for closing primitive Java streams. Provided to avoid
   accidental scope capture with `Managed_Resource` finalizers.
close_stream : Any -> Nothing
close_stream stream =
    stream.close
    Nothing
