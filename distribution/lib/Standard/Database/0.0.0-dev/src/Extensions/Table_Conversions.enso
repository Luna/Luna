from Standard.Base import all

import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Common.Type_Error

import Standard.Table.Errors.No_Such_Column
import Standard.Table.Internal.Widget_Helpers

import project.Data.Table.Table
import project.Errors.Unsupported_Database_Operation

## GROUP Standard.Base.Conversions
   Expand a column of objects to a new set of columns.

    Arguments:
    - column: The column to expand.
    - fields: The set fields to expand. If `Nothing` then all fields are added.
    - prefix: Prefix to add to the column names. If `Nothing` then the column
      name is used.
@column Widget_Helpers.make_column_name_selector
Table.expand_column : Text | Integer -> Vector | Nothing -> Text | Table -> Table ! Type_Error
Table.expand_column self column fields=Nothing prefix=Nothing =
    _ = [column, fields, prefix]
    Error.throw (Unsupported_Database_Operation.Error "Table.expand_column is currently not implemented for the Database backend. You may download the table to memory using `.read` to use this feature.")

## GROUP Standard.Base.Conversions
   Expand aggregate values in a column to individual rows.

   Arguments:
   - column: The column to expand.
   - at_least_one_row: for an empty aggregate value, if `at_least_one_row` is
     true, a single row is output with `Nothing` for the aggregates column; if
     false, no row is output at all.

   For each value in the specified column, if it is an aggregate (`Vector`,
   `Range`, etc.), expand it to multiple rows, duplicating the values in the
   other columns.

   The following aggregate values are supported:
   - `Array`
   - `Vector`
   - `List`
   - `Range`
   - `Date_Range`

   Any other values are treated as non-aggregate values, and their rows are kept
   unchanged.

   In in-memory tables, it is permitted to mix values of different types.

   > Example
     Expand a column of integer `Vectors` to a column of `Integer`

     table = Table.new [["aaa", [1, 2]], ["bbb", [[30, 31], [40, 41]]]]
     result = table.expand_to_rows "bbb" .
     # => +---+----+
          |aaa|bbb |
          +---+----+
          | 1 | 30 |
          | 1 | 31 |
          | 2 | 40 |
          | 2 | 41 |
          +---+----+
@column Widget_Helpers.make_column_name_selector
Table.expand_to_rows : Text | Integer -> Boolean -> Table ! Type_Error | No_Such_Column | Index_Out_Of_Bounds
Table.expand_to_rows self column at_least_one_row=False =
    _ = [column, at_least_one_row]
    Error.throw (Unsupported_Database_Operation.Error "Table.expand_to_rows is currently not implemented for the Database backend. You may download the table to memory using `.read` to use this feature.")
