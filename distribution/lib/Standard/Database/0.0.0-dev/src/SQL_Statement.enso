from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.SQL.SQL_Fragment

## PRIVATE
type SQL_Statement
    ## PRIVATE

       Represents a built SQL statement.

       Arguments:
       - internal_fragments: A vector of SQL code fragments.

       The statement consists of SQL code with parameters and values that will be
       interpolated for these parameters.
    private Value (internal_fragments:(Vector SQL_Fragment))

    ## PRIVATE
       ADVANCED
       A vector of code fragments.

       Consists of two types of values:
       - SQL_Fragment.Code_Part, representing parts of raw SQL code and
       - SQL_Fragment.Interpolation, representing objects that will be
         interpolated in between the SQL code.
    fragments : Vector SQL_Fragment
    fragments self = self.internal_fragments

    ## PRIVATE
       ADVANCED
       UNSAFE
       This function returns a raw SQL string for the query, manually handling
       the interpolation that is normally handled by the database engine itself.

       It should be used EXTREMELY carefully - the returned SQL code should
       always be read by a human to ensure that it does what is expected before
       executing it in any REPLs or other database interfaces.

       It should NEVER be used in production code.
    unsafe_to_raw_sql : Text
    unsafe_to_raw_sql self =
        strings = self.internal_fragments . map <| case _ of
            SQL_Fragment.Code_Part code -> code
            SQL_Fragment.Interpolation obj -> case obj of
                Number -> obj.to_text
                Date_Time -> "'" + (obj.format "yyyy-MM-dd HH:mm:ss.f") + "'"
                Date -> "'" + (obj.format "yyyy-MM-dd") + "'"
                Time_Of_Day -> "'" + (obj.format "HH:mm:ss.f") + "'"
                _ -> "'" + obj.to_text.replace "'" "''" + "'"
        strings.join ""

    ## PRIVATE
       ADVANCED
       Returns a pair consisting of the SQL code with holes for values and
       a list for values that should be substituted.
    prepare self =
        to_code fragment = case fragment of
            SQL_Fragment.Code_Part code -> code
            SQL_Fragment.Interpolation _ -> "?"
        to_subst fragment = case fragment of
            SQL_Fragment.Code_Part _ -> []
            SQL_Fragment.Interpolation obj -> [obj]
        sql = self.fragments.map to_code . join ""
        substitutions = self.fragments.flat_map to_subst
        [sql, substitutions]

    ## PRIVATE
       Returns a JS_Object representation of the statement.
    to_js_object : JS_Object
    to_js_object self =
        self.serialize ensure_roundtrip=False

    ## PRIVATE
       Serializes this SQL statement to JSON.

       Arguments:
       - ensure_roundtrip: If true, interpolated objects will be checked if they
         can be deserialized back. If any object cannot make a round-trip, an
         error will be thrown. If false, no checks are performed.
    serialize self (ensure_roundtrip : Boolean) -> JS_Object ! Unable_To_Serialize_SQL_Statement = Panic.recover Unable_To_Serialize_SQL_Statement <|
        jsonify fragment = case fragment of
            SQL_Fragment.Code_Part code ->
                JS_Object.from_pairs [["sql_code", code]]
            SQL_Fragment.Interpolation obj ->
                obj_as_js = obj.to_js_object
                if ensure_roundtrip then
                    reconstructed = Json.parse (Json.stringify obj_as_js)
                    valid_roundtrip = reconstructed == obj
                    if valid_roundtrip.not then
                        Panic.throw (Unable_To_Serialize_SQL_Statement.Error obj)
                obj_as_js.if_not_error
                    JS_Object.from_pairs [["sql_interpolation", obj_as_js]]
        fragments = self.internal_fragments.map jsonify
        result = fragments.if_not_error <| JS_Object.from_pairs [["query", fragments]]
        result.if_not_error <|
            if ensure_roundtrip then
                Runtime.assert (SQL_Statement.deserialize result == self) "SQL_Fragment serialization does not round-trip as expected: "+result.to_display_text+" did not deserialize back."
            result

    ## PRIVATE
    deserialize (json : Text | JS_Object) -> SQL_Statement ! Illegal_Argument =
        parsed_json = case json of
            _ : JS_Object -> json
            _ : Text ->
                parsed = Json.parse json
                if parsed.is_a JS_Object then parsed else
                    Error.throw (Illegal_Argument.Error "Error parsing SQL_Statement: expected a JSON object, but got: "+parsed.to_display_text+".")
        fragments = parsed_json.get "query" if_missing=(Error.throw (Illegal_Argument.Error "Error parsing SQL_Statement: It should contain a `query` field. Fields were: "+parsed_json.field_names.to_display_text+"."))
        if fragments.is_a Vector . not then Error.throw (Illegal_Argument.Error "Error parsing SQL_Statement: The 'query' field should be an array, but got:"+fragments.to_display_text+".") else
            parse_fragment fragment = case fragment of
                _ : JS_Object ->
                    fields = fragment.field_names
                    if fields == ["sql_code"] then SQL_Fragment.Code_Part (fragment.get "sql_code") else
                        if fields == ["sql_interpolation"] then SQL_Fragment.Interpolation (fragment.get "sql_interpolation") else
                            Error.throw (Illegal_Argument.Error "Error parsing SQL_Statement: a fragment should contain exactly one field of either `sql_code` or `sql_interpolation`, but got: "+fragment.to_display_text+".")
                _ -> Error.throw (Illegal_Argument.Error "Error parsing SQL_Statement: expected `sql_code` or `sql_interpolation` object, but got:"+fragment.to_display_text+".")
            SQL_Statement.Value (fragments.map parse_fragment)

    ## PRIVATE
    to_text self -> Text =
        prepared = self.prepare
        "SQL_Statement " + prepared.first + " with values " + prepared.second.to_text

## PRIVATE
type Unable_To_Serialize_SQL_Statement
    ## PRIVATE
    Error obj

    ## PRIVATE
    to_display_text self =
        "Unable to serialize an SQL statement, because it contains an interpolated object [" + self.obj.to_display_text + " (" + (Meta.type_of self.obj).to_text + ")] that cannot be deserialized back."
