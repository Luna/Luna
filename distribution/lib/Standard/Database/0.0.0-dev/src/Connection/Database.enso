from Standard.Base import all
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice

import project.Connection.Connection.Connection
import project.Connection.Connection_Details.Connection_Details
import project.Connection.Connection_Options.Connection_Options
from project.Errors import SQL_Error

polyglot java import org.enso.database.DatabaseConnectionDetailsSPI

## GROUP Standard.Base.Input
   ICON data_input
   Tries to connect to the database.

   Arguments:
   - details: `Connection_Details` specifying the database to connect to.
   - options: Additional custom connection options for the JDBC connection.
@details connection_details_widget
@options Connection_Options.default_widget
connect : Connection_Details -> Connection_Options -> Connection ! SQL_Error
connect details options:Connection_Options=..Value = case details of
    _ : Function -> (resolve_constructor details) . connect options
    _ -> details.connect options

## PRIVATE
connection_details_widget : Widget
connection_details_widget =
    default_constructors = Vector.from_polyglot_array <|
        DatabaseConnectionDetailsSPI.get_default_constructors False
    choices = default_constructors.map pair->
        name = pair.first
        code = pair.second
        Option name code
    Single_Choice display=Display.Always values=choices

## PRIVATE
resolve_constructor : Function -> Any
resolve_constructor constructor =
    types = Vector.from_polyglot_array (DatabaseConnectionDetailsSPI.get_types False)
    try_next idx =
        if idx >= types.length then constructor else
            db_type = types.at idx
            resolved = db_type.resolve constructor
            if resolved.is_nothing then @Tail_Call try_next (idx + 1) else resolved
    try_next 0
