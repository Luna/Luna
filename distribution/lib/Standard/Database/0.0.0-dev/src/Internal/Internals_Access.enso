## We do not want to expose column internals to users, but we need to allow
   external libraries implementing additional database connectors to be able to
   access them.

   To alleviate that, we provide the `Internals_Access` module that exposes
   these internals.

   This module should never be imported by user code. It should only be used by
   providers of new database dialects.

from Standard.Base import all

import project.DB_Column.DB_Column
import project.DB_Table.DB_Table
import project.Internal.IR.Context.Context
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.SQL_Expression.SQL_Expression

## PRIVATE
column_expression (column : DB_Column | Internal_Column) -> SQL_Expression = column.expression

## PRIVATE
get_connection (thing : DB_Column | DB_Table) = thing.connection

## PRIVATE
get_context (thing : DB_Column | DB_Table) -> Context = thing.context

## PRIVATE
internal_columns (table : DB_Table) -> Vector Internal_Column = table.internal_columns
