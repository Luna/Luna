from Standard.Base import all
import Standard.Base.Runtime.Managed_Resource.Managed_Resource
import Standard.Base.Runtime.Ref.Ref

## PRIVATE
   A reference to a hidden table that keeps it alive.

   Once all references to a particular hidden table are garbage collected, the
   hidden table itself will be dropped.
type Hidden_Table_Reference
    Reference (parent_mapping : Ref (Map Text Integer)) (table_name : Text) (drop : Text -> Nothing)

## PRIVATE
   A registry that keeps track of temporary hidden tables.

   These tables will all be destroyed once the connection is closed, but to
   avoid creating too many, the registry tries to drop them more eagerly once
   they stop being needed.

   ! Concurrency

     Note that this code is run in GC threads and may run into concurrency
     issues. Currently, we have no synchronization primitives in Enso to prevent
     this. This is just a 'heuristic' helper that tries to limit the amount of
     dry-run tables living in a session, so the potential failures should not be
     fatal. Nonetheless, it may be worth to revise this once we get better
     concurrency support.

     The potential point of failure is the two places were we `get` and later
     `put` an updated `Ref`. These can happen concurrently and result in the
     mapping getting inconsistent.
type Hidden_Table_Registry
    ## PRIVATE
    Registry (mapping : Ref (Map Text Integer)) (drop : Text -> Nothing)

    ## PRIVATE
    get_reference : Text -> Managed_Resource
    get_reference self table_name =
        mapping = self.mapping.get
        ref_count = mapping.get table_name 0
        new_mapping = mapping.insert table_name ref_count+1
        self.mapping.put new_mapping

        reference = Hidden_Table_Reference.Reference self.mapping table_name self.drop
        Managed_Resource.register reference dispose_reference

    ## PRIVATE
    list_hidden_tables : Vector Text
    list_hidden_tables self =
        self.mapping.get.keys

## PRIVATE
new : Hidden_Table_Registry
new (drop : Text -> Nothing) =
    Hidden_Table_Registry.Registry (Ref.new Map.empty) drop

## PRIVATE
   Utility method for disposing of references. Provided to avoid accidental
   scope capture with `Managed_Resource` finalizers.
dispose_reference : Any -> Nothing
dispose_reference reference =
    mapping = reference.parent_mapping.get
    ref_count = mapping.get reference.table_name 0
    new_ref_count = ref_count-1
    updated_mapping = case new_ref_count <= 0 of
        True ->
            reference.drop reference.table_name
            mapping.remove reference.table_name
        False ->
            mapping.insert reference.table_name new_ref_count
    reference.parent_mapping.put updated_mapping
