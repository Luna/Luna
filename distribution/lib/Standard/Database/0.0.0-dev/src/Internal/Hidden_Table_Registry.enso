from Standard.Base import all
import Standard.Base.Runtime.Managed_Resource.Managed_Resource
import Standard.Base.Runtime.Ref.Ref

polyglot java import org.enso.database.dryrun.HiddenTableReferenceCounter

## PRIVATE
   A reference to a hidden table that keeps it alive.

   Once all references to a particular hidden table are garbage collected, the
   hidden table itself will be dropped.
type Hidden_Table_Reference
    Reference (parent : Hidden_Table_Registry) (table_name : Text)

## PRIVATE
   A registry that keeps track of temporary hidden tables.

   These tables will all be destroyed once the connection is closed, but to
   avoid creating too many, the registry tries to drop them more eagerly once
   they stop being needed.

   ! Concurrency

     Note that this code is run in GC threads and may run into concurrency
     issues. Currently, we have no synchronization primitives in Enso to prevent
     this. This is just a 'heuristic' helper that tries to limit the amount of
     dry-run tables living in a session, so the potential failures should not be
     fatal. Nonetheless, it may be worth to revise this once we get better
     concurrency support.

     The potential point of failure is the two places were we `get` and later
     `put` an updated `Ref`. These can happen concurrently and result in the
     mapping getting inconsistent.
type Hidden_Table_Registry
    ## PRIVATE
    Registry (reference_counter : HiddenTableReferenceCounter) (drop : Text -> Nothing)

    ## PRIVATE
    get_reference : Text -> Managed_Resource
    get_reference self table_name =
        self.reference_counter.increment table_name
        reference = Hidden_Table_Reference.Reference self table_name
        Managed_Resource.register reference dispose_reference

    ## PRIVATE
    list_hidden_tables : Vector Text
    list_hidden_tables self =
        self.mapping.get.keys

## PRIVATE
new : Hidden_Table_Registry
new (drop : Text -> Nothing) =
    Hidden_Table_Registry.Registry (HiddenTableReferenceCounter.new) drop

## PRIVATE
   Utility method for disposing of references. Provided to avoid accidental
   scope capture with `Managed_Resource` finalizers.
dispose_reference : Any -> Nothing
dispose_reference reference =
    registry = reference.parent
    new_count = registry.reference_counter.decrement reference.table_name
    if new_count <= 0 then
        registry.drop reference.table_name
