private

from Standard.Base import all
import Standard.Base.Enso_Cloud.Data_Link.Data_Link
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Runtime.Context
from Standard.Base.Enso_Cloud.Data_Link_Helpers import data_link_extension, secure_value_to_json

import project.Connection.Credentials.Credentials
import project.Connection.Postgres.Postgres
import project.Connection.SSL_Mode.SSL_Mode

## PRIVATE
type Postgres_Data_Link_Setup
    ## PRIVATE
    Available details:Postgres

    ## PRIVATE
    Unavailable cause:Text

    ## PRIVATE
    save_as_data_link self destination on_existing_file:Existing_File_Behavior = case self of
        Postgres_Data_Link_Setup.Available details -> Context.Output.if_enabled disabled_message="Saving a connection to data link requires the Output context." panic=False <|
            case destination of
                _ : Enso_File ->
                    replace_existing = case on_existing_file of
                        Existing_File_Behavior.Overwrite -> True
                        Existing_File_Behavior.Error -> False
                        _ -> Error.throw (Illegal_Argument.Error "Invalid value for `on_existing_file` parameter, only `Overwrite` and `Error` are supported here.")
                    exists_checked = if replace_existing.not && destination.exists then Error.throw (File_Error.Already_Exists destination)
                    exists_checked.if_not_error <|
                        credentials = prepare_credentials destination details
                        if (details.use_ssl != SSL_Mode.Prefer) || details.client_cert.is_nothing.not then Error.throw (Illegal_Argument.Error "Cannot save connection as Data Link: custom SSL settings are currently unsupported.") else
                            json = JS_Object.from_pairs <|
                                header = [["type", "Postgres_Connection"], ["libraryName", "Standard.Database"]]
                                connection_part = [["host", details.host], ["port", details.port], ["database_name", details.database]]
                                schema_part = if details.schema.not_empty then [["schema", details.schema]] else []
                                credential_part = if credentials.is_nothing.not then [["credentials", credentials]] else []
                                header + connection_part + schema_part + credential_part
                            Data_Link.write_config destination json replace_existing
                _ -> Error.throw (Illegal_Argument.Error "Currently a connection can only be saved as a Data Link into the Enso Cloud. Please provide an `Enso_File` as destination.")

        Postgres_Data_Link_Setup.Unavailable cause ->
            Error.throw (Illegal_Argument.Error "Cannot save connection as Data Link: "+cause)

## PRIVATE
prepare_credentials data_link_location:Enso_File details:Postgres -> JS_Object | Nothing =
    case details.credentials of
        Nothing -> Nothing
        credentials:Credentials ->
            # A plain text is automatically promoted to a secret.
            secret_password = case credentials.password of
                secret : Enso_Secret -> secret
                plain_text_password : Text ->
                    secret_location = data_link_location.parent.if_nothing Enso_File.root
                    location_name = if data_link_location.name.ends_with data_link_extension then data_link_location.name.drop (Index_Sub_Range.Last data_link_extension.length) else data_link_location.name

                    create_fresh_secret ix =
                        secret_name = location_name + "-password" + (if ix == 0 then "" else "-"+ix.to_text)
                        r = Enso_Secret.create secret_name plain_text_password secret_location
                        r.catch Illegal_Argument error->
                            if error.message.contains "already exists" then create_fresh_secret ix+1 else r

                    secret_location.if_not_error <| location_name.if_not_error <|
                        create_fresh_secret 0

            # But we keep the username as-is - if it was in plain text, it will stay in plain text.
            JS_Object.from_pairs [["username", secure_value_to_json credentials.username], ["password", secure_value_to_json secret_password]]
