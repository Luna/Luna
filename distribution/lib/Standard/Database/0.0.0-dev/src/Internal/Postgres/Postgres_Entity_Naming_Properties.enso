from Standard.Base import all
import Standard.Base.Errors.Encoding_Error.Encoding_Error
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Table.Errors import Name_Too_Long

import project.Internal.Common.Encoding_Limited_Naming_Properties.Encoding_Limited_Naming_Properties
import project.Internal.Connection.Entity_Naming_Properties.Entity_Naming_Properties
import project.Internal.JDBC_Connection.JDBC_Connection

## PRIVATE
   Creates a new instance of Entity_Naming_Properties for a given Postgres
   connection.

   It relies on the `jdbc_connection` to get the limits metadata and database
   encoding.
new : JDBC_Connection -> Entity_Naming_Properties
new jdbc_connection =
    server_encoding = get_pragma_value jdbc_connection "SHOW server_encoding"
    encoding = case server_encoding of
        "SQL_ASCII" ->
            client_encoding = get_pragma_value jdbc_connection "SHOW client_encoding"
            parse_postgres_encoding client_encoding
        _ ->
            parse_postgres_encoding server_encoding
    jdbc_connection.with_metadata metadata->
        table_limit = metadata.getMaxTableNameLength
        if table_limit == 0 then
            Panic.throw (Illegal_State.Error "Unexpected: The database server does not report the maximum table name length.")
        column_limit = metadata.getMaxColumnNameLength
        if column_limit == 0 then
            Panic.throw (Illegal_State.Error "Unexpected: The database server does not report the maximum column name length.")

        table_properties = Encoding_Limited_Naming_Properties.Instance encoding table_limit
        column_properties = Encoding_Limited_Naming_Properties.Instance encoding column_limit
        Entity_Naming_Properties.Value table_names=table_properties column_names=column_properties


## PRIVATE
get_pragma_value : JDBC_Connection -> Text -> Any
get_pragma_value jdbc_connection sql =
    table = jdbc_connection.raw_read_statement sql
    if table.row_count != 1 then
        Panic.throw (Illegal_State.Error "Unexpected amount of results to internal query: "+sql+"; expected 1 but got "+table.row_count.to_text+" rows.")
    if table.columns.length != 1 then
        Panic.throw (Illegal_State.Error "Unexpected amount of columns to internal query: "+sql+"; expected 1 but got "+table.columns.length.to_text+" columns.")
    table.at 0 . at 0

## PRIVATE
   Translates names of encodings from https://www.postgresql.org/docs/current/multibyte.html#CHARSET-TABLE into their Java counterprats.
parse_postgres_encoding : Text -> Encoding
parse_postgres_encoding encoding_name =
    # TODO [RW] edge cases - all encodings from https://www.postgresql.org/docs/current/multibyte.html#CHARSET-TABLE should work
    Encoding.from_name encoding_name
