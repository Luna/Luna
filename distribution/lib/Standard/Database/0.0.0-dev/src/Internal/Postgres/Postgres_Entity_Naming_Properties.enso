from Standard.Base import all
import Standard.Base.Errors.Encoding_Error.Encoding_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

import Standard.Table.Internal.Naming_Properties.Unlimited_Naming_Properties
from Standard.Table.Errors import Name_Too_Long

import project.Internal.Connection.Entity_Naming_Properties.Entity_Naming_Properties
import project.Internal.JDBC_Connection.JDBC_Connection

## PRIVATE
   Creates a new instance of Entity_Naming_Properties for a given Postgres
   connection.

   It relies on the `jdbc_connection` to get the limits metadata and database
   encoding.
new : JDBC_Connection -> Entity_Naming_Properties
new jdbc_connection =
    server_encoding = get_pragma_value jdbc_connection "SHOW server_encoding"
    encoding = case server_encoding of
        "SQL_ASCII" ->
            client_encoding = get_pragma_value jdbc_connection "SHOW client_encoding"
            parse_postgres_encoding client_encoding
        _ ->
            parse_postgres_encoding server_encoding
    jdbc_connection.with_metadata metadata->
        table_limit = metadata.getMaxTableNameLength
        if table_limit == 0 then
            Panic.throw (Illegal_State.Error "Unexpected: The database server does not report the maximum table name length.")
        column_limit = metadata.getMaxColumnNameLength
        if column_limit == 0 then
            Panic.throw (Illegal_State.Error "Unexpected: The database server does not report the maximum column name length.")

        table_properties = Encoding_Limited_Naming_Properties.Instance encoding table_limit
        column_properties = Encoding_Limited_Naming_Properties.Instance encoding column_limit
        Entity_Naming_Properties.Value table_names=table_properties column_names=column_properties


## PRIVATE
get_pragma_value : JDBC_Connection -> Text -> Any
get_pragma_value jdbc_connection sql =
    table = jdbc_connection.raw_read_statement sql
    if table.row_count != 1 then
        Panic.throw (Illegal_State.Error "Unexpected amount of results to internal query: "+sql+"; expected 1 but got "+table.row_count.to_text+" rows.")
    if table.columns.length != 1 then
        Panic.throw (Illegal_State.Error "Unexpected amount of columns to internal query: "+sql+"; expected 1 but got "+table.columns.length.to_text+" columns.")
    table.at 0 . at 0

## PRIVATE
   Translates names of encodings from https://www.postgresql.org/docs/current/multibyte.html#CHARSET-TABLE into their Java counterprats.
parse_postgres_encoding : Text -> Encoding
parse_postgres_encoding encoding_name =
    # TODO [RW] edge cases - all encodings from https://www.postgresql.org/docs/current/multibyte.html#CHARSET-TABLE should work
    Encoding.from_name encoding_name

## PRIVATE
   A `Naming_Properties` implementation which sets the size limit based on the
   size of a string encoded in a particular encoding, in bytes.
type Encoding_Limited_Naming_Properties
    ## PRIVATE
    Instance (encoding : Encoding) (limit : Integer)

    ## PRIVATE
    encoded_size : Text -> Integer
    encoded_size self name =
        r = name.bytes encoding=self.encoding on_problems=Problem_Behavior.Report_Error . length
        r.catch Encoding_Error error->
            Panic.throw (Illegal_Argument.Error "The name ["+name.to_display_text+"] contains characters that could not be encoded in the database server-size encoding "+self.encoding.to_display_text+"." cause=error)

    ## PRIVATE
    truncate : Text -> Integer -> Text
    truncate self name size =
        ## I assume that `self.encoded_size` is a homomorphism
           from text with concatenation to integers with addition.
        clusters = name.characters
        if clusters.is_empty then name else
            cluster_sizes = clusters.map self.encoded_size
            # We see how many clusters we can fit until we exceed the size.
            last_cluster_that_still_fits = cluster_sizes.running_fold 0 (+) . last_index_of (<= size)
            truncated = name.take (last_cluster_that_still_fits + 1)
            # Verify the assumption from above.
            truncated_length = self.encoded_size truncated
            if truncated_length > size then
                Panic.throw (Illegal_State.Error "Unexpected: The encoding size behaves unexpectedly. This is a bug in the Database library.")
            truncated

    ## PRIVATE
    size_limit : Integer | Nothing
    size_limit self = self.limit

    ## PRIVATE
    raise_name_too_long_error : Text -> Text -> Nothing ! Name_Too_Long
    raise_name_too_long_error self entity_kind name =
        grapheme_length = name.length
        encoded_length = self.encoded_size name
        extra_message = case grapheme_length == encoded_length of
            ## If we are using only simple characters that map 1-1 to the target
               encoding (e.g. ASCII), then we can ignore the complexity of
               different encodings in the message.
            True ->
                " The length limit is "+self.size_limit.to_text+", but the name was "+encoded_length.to_text+" characters long."
            ## But if the length mapping is not exact, we need to be clear to
               the user.
            False ->
                " The length limit is "+self.size_limit.to_text+" bytes, but the name, consisting of "+grapheme_length.to_text+" characters, took "+encoded_length.to_text+" bytes to encode in the database encoding ("+self.encoding.to_display_text+")."
        Error.throw (Name_Too_Long.Error entity_kind name extra_message)
