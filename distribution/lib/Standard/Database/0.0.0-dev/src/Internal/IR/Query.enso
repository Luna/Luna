from Standard.Base import all

import project.Internal.IR.Context.Context
import project.Internal.IR.Create_Column_Descriptor.Create_Column_Descriptor
import project.Internal.IR.SQL_Expression.SQL_Expression

## PRIVATE

   Describes a full SQL query.
type Query

    ## PRIVATE

       A Select SQL query.

       Arguments:
       - expressions: List of pairs specifying the columns to materialize; each
         is a pair whose first element is the name of the materialized column
         and the second element is the expression to compute. If `Nothing` is
         provided, all available columns will be selected.
       - context: The query context, see `Context` for more detail.
    Select (expressions : Nothing | Vector (Pair Text SQL_Expression)) (context : Context)

    ## PRIVATE

       An Insert SQL query that inserts a single row to the table.

       Arguments:
       - table_name: The name of the table to insert to.
       - pairs: A list of pairs consisting of a column name and and expression.
    Insert (table_name : Text) (pairs : Vector (Pair Text SQL_Expression))

    ## PRIVATE

       An SQL query that creates a new table.

       Arguments:
       - table_name: the name of the table.
       - columns: descriptions of table columns.
       - primary_key: a vector of names of primary key columns or `Nothing` if
         no primary key should be set. The column names are not checked, it is
         the responsibility of the caller to ensure that the columns in
         `primary_key` actually exist in `columns`, as otherwise the behavior is
         undefined (most likely will result in an `SQL_Error` once executed).
       - temporary: specifies if the table should be marked as temporary.
    Create_Table (table_name:Text) (columns : Vector Create_Column_Descriptor) (primary_key : Nothing | Vector Text) (temporary : Boolean)

    ## PRIVATE
       An SQL query that drops a table.

       Arguments:
       - table_name: the name of the table to drop.
       - if_exists: if `True`, an `IF EXISTS` clause will be added.
    Drop_Table (table_name:Text) (if_exists:Boolean)

    ## PRIVATE
       An SQL query that removes all rows from a table, but does not drop the
       table structure itself.

       Arguments:
       - table_name: the name of the table to truncate.
    Truncate_Table (table_name:Text)

    ## PRIVATE
       An INSERT INTO ... SELECT query that allows to insert results of a query
       into an existing table.

       Arguments:
       - table_name: the name of the table to insert to.
       - column_names: a vector of names of target table columns. If not all
         columns of the target table are provided, the remaining ones will be
         initialized with their default values.
       - select: the query whose results will be inserted into the target table.
         The columns in that query should correspond to the columns in specified
         in `column_names`, matching by position.
    Insert_From_Select (table_name:Text) (column_names : Vector Text) (select:Query)

    ## PRIVATE
       An SQL UPDATE query that updates rows in the target table with values
       from the source table when the key columns match. Target table rows that
       do not match the source are left unaffected.

       This will usually be a query of the form
       `UPDATE target SET c1=source.c1, ... FROM source WHERE target.key1=source.key1 AND ...`
       where `c1` comes from `column_names` and `key1` comes from `key_columns`.
    Update_From_Table (target_table_name:Text) (source_table_name:Text) (column_names : Vector Text) (key_columns : Vector Text)

    ## PRIVATE
       An SQL DELETE query that deletes from target table rows that are _not_
       present in the source table, based on the specified key columns.
       They key columns must be present under the same name in both tables.

       This will usually be a query of the form
       `DELETE FROM target WHERE (key_columns...) NOT EXISTS (SELECT 1 FROM source WHERE source.key_columns = target.key_columns)`.
    Delete_Unmatched_Rows (target_table_name:Text) (source_table_name:Text) (key_columns : Vector Text)

    ## PRIVATE
       An SQL DELETE query that deletes from target table rows that have a
       corresponding row in the source table, matching based on the specified
       key columns.

       They key columns must be present under the same name in both tables.

       This will usually be a query of the form
       `DELETE FROM target WHERE (key_columns...) EXISTS (SELECT 1 FROM source WHERE source.key_columns = target.key_columns)`.
    Delete_Matching_Rows (target_table_name:Text) (source_table_name:Text) (key_columns : Vector Text)

    ## PRIVATE
       A bottom-up, depth-first traversal of this IR node and its children. Each
       node is passed to the provided function, and the return value of the
       function replaces this node in the tree.
    traverse : (Any -> Any) -> Query
    traverse self f -> Query =
        rec e = e.traverse f
        do_name_exps pairs = pairs.if_not_nothing (pairs.map pair-> [pair.first, rec pair.second])

        new_query = case self of
            Query.Select expressions context ->
                Query.Select (do_name_exps expressions) (rec context)
            Query.Insert table_name pairs ->
                Query.Insert table_name (do_name_exps pairs)
            Query.Create_Table _ _ _ _ -> self
            Query.Drop_Table _ _ -> self
            Query.Truncate_Table _ -> self
            Query.Insert_From_Select table_name column_names select ->
                Query.Insert_From_Select table_name column_names (rec select)
            Query.Update_From_Table _ _ _ _ -> self
            Query.Delete_Unmatched_Rows _ _ _ -> self
            Query.Delete_Matching_Rows _ _ _ -> self
        f new_query
