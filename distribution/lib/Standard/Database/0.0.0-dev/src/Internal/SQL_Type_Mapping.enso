from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Unimplemented.Unimplemented

from Standard.Table import Value_Type
from Standard.Table.Errors import Inexact_Type_Coercion

import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.SQL_Type_Reference.SQL_Type_Reference
import project.SQL_Type.SQL_Type

## PRIVATE
type SQL_Type_Mapping
    ## PRIVATE
       ADVANCED
       Converts the given Value_Type to its corresponding SQL_Type.

       Some SQL dialects may not support all Value_Types (in fact most will
       have at least a few exceptions, and some like SQLite may have very
       limited support). If an SQL_Type that matches the Value_Type cannot be
       found, a closest approximate match is returned instead. If an exact match
       cannot be found, an `Inexact_Type_Coercion` warning is reported according
       to the `on_problems` setting.

       If the conversion is exact, it should be reversible, i.e.
       `sql_type_to_value_type (value_type_to_sql x Problem_Behavior.Report_Error) = x`.
    value_type_to_sql : Value_Type -> Problem_Behavior -> SQL_Type ! Inexact_Type_Coercion
    value_type_to_sql value_type on_problems:Problem_Behavior =
        _ = [value_type, on_problems]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       ADVANCED
       Converts the given SQL_Type to its corresponding Value_Type.
    sql_type_to_value_type : SQL_Type -> Value_Type
    sql_type_to_value_type sql_type =
        _ = sql_type
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Converts an SQL_Type to a Text representation compatible with the related
       SQL dialect that can be used in SQL expressions like CAST or column
       definitions.
    sql_type_to_text : SQL_Type -> Text
    sql_type_to_text sql_type =
        _ = sql_type
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       ADVANCED
       Returns a `SQL_Type_Reference` that will resolve to the resulting type of
       the given operation.

       In most cases this will just delegate to `infer_from_database_callback`
       which should ask the particular database backend to infer the type, but
       some specific cases may override the default behavior. The notable
       example is the ability to support Boolean types in SQLite.

       The particular operation is identified by its name. It also gets a vector
       of supplied arguments in case the result type may depend on them. The
       arguments are passed as-is, i.e. they may be Database columns or raw Enso
       values. The generated IR expression is also provided as
       depending on the backend the raw arguments or the target expression may
       be more useful to create the return type. In particular, the expression
       may be used as an argument for the `infer_from_database_callback`.
    infer_return_type : (SQL_Expression -> SQL_Type_Reference) -> Text -> Vector -> SQL_Expression -> SQL_Type_Reference
    infer_return_type infer_from_database_callback op_name arguments expression =
        _ = [infer_from_database_callback, op_name, arguments, expression]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Gets a list of type suggestions and returns a list of type overrides for
       a query.

       This is used to customize type override behavior - most backends will
       correctly infer types from metadata, so unless specifically overridden,
       we can rely on the `ResultSet` metadata and reduce any overhead. However,
       in some backends (SQLite) the metadata may not be as useful (in SQLite,
       the metadata is changing depending on the result row, so the first row
       that is usually used may not reflect the needs of the whole column) -
       this method allows to provide custom overrides in such case.

       If the vector contains a `Nothing` at a given position, that column type
       will be inferred from the `ResultSet` metadata. If it contains a concrete
       type, that type will be used instead, regardless of what is coming from
       the metadata.
    prepare_type_overrides : Nothing | Vector SQL_Type_Reference -> Nothing | Vector (Nothing | SQL_Type)
    prepare_type_overrides column_type_suggestions =
        _ = column_type_suggestions
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Checks if the conversion between the two types is one to be done implicitly in the given backend.
       Conversions marked as implicit will not raise Inexact_Type_Coercion warnings.

       For example, the Snowflake database converts all integer types to NUMERIC(38, 0).
       This conversion is a property of the database, so warning about it would only be annoying.
    is_implicit_conversion (source_type : Value_Type) (target_type : Value_Type) -> Boolean =
        _ = [source_type, target_type]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Specifies if the given type coercion should raise an
       `Inexact_Type_Coercion` warning when materializing a table into memory.
    should_warn_on_materialize (db_type : Value_Type) (in_memory_type : Value_Type) -> Boolean =
        _ = [db_type, in_memory_type]
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Specifies if this backend recognizes the given type as an integer type.

       For most backends, this should just be `.is_integer`.
       However, in some backends (e.g. Snowflake), the Decimal type is treated
       as the main Integer type, so this method can be used to specify that.
       We don't make Decimal type an integer type by default, as in other
       backends we do want to keep the distinction (for example in Postgres,
       `date_add` function will work with Integer but not with Decimal types).
    is_integer_type (value_type : Value_Type) -> Boolean =
        _ = value_type
        Unimplemented.throw "This is an interface only."

    ## PRIVATE
       Checks if the two types are to be considered the same by the `By_Type`
       selector.

       In most backends this can just delegate to `Value_Type.is_same_type`. But
       e.g. in Snowflake this can be used to make Decimal and Integer types
       interchangeable.
    is_same_type (value_type1 : Value_Type) (value_type2 : Value_Type) -> Boolean =
        _ = [value_type1, value_type2]
        Unimplemented.throw "This is an interface only."

## PRIVATE
default_sql_type_to_text sql_type =
    suffix = case sql_type.precision of
        Nothing ->
            if sql_type.scale.is_nothing.not then Error.throw (Illegal_Argument.Error "It is not possible to specify a scale but no precision in SQL, but got "+sql_type.to_text) else
                ""
        _ : Integer ->
            if sql_type.scale.is_nothing then "(" + sql_type.precision.to_text + ")" else
                "(" + sql_type.precision.to_text + "," + sql_type.scale.to_text + ")"
    sql_type.name.trim + suffix

## PRIVATE
default_should_warn_on_materialize (db_type : Value_Type) (in_memory_type : Value_Type) =
    ## We ignore simple approximations that our in-memory backend does - things like adding default
       timezone (because we do not have Date_Time without timezone in-memory),
       or changing Float32 to Float64 are silently ignored.
       However, bigger changes, like a Binary type column getting coerced to Mixed - _will_ still be reported.
    (Meta.meta db_type . constructor) != (Meta.meta in_memory_type . constructor)
