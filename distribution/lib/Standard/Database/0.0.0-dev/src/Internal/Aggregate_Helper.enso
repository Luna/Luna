from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import Standard.Table.Internal.Problem_Builder.Problem_Builder
from Standard.Table import Aggregate_Column
from Standard.Table.Errors import Floating_Point_Equality

import project.DB_Table.DB_Table
import project.Dialect.Dialect
import project.Internal.IR.Internal_Column.Internal_Column
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.SQL_Type_Reference.SQL_Type_Reference
from project.Errors import Unsupported_Database_Operation

## PRIVATE
   Creates an `Internal_Column` that will represent the computed aggregate.

   Arguments:
   - table: The table owning the columns used in the aggregation.
   - aggregate: The description of the aggregation to compute.
   - as: The name for the created column.
   - dialect: The dialect of the database to generate the SQL for.
   - infer_return_type: A function that takes 3 arguments (name of the
     operation, list of input columns and a raw SQL IR Expression) and returns
     the inferred type for the aggregation.
   - problem_builder: A `Problem_Builder` instance used for reporting warnings.
make_aggregate_column : DB_Table -> Aggregate_Column -> Text -> Dialect -> (Any -> Any -> Any -> SQL_Type_Reference) -> Problem_Builder -> SQL_Expression
make_aggregate_column table aggregate as dialect infer_return_type problem_builder =
    is_non_empty_selector v = v.is_nothing.not && v.not_empty
    simple_aggregate op_kind columns =
        expression = dialect.cast_op_type op_kind columns (SQL_Expression.Operation op_kind (columns.map c->c.expression))
        sql_type_ref = infer_return_type op_kind columns expression
        Internal_Column.Value as sql_type_ref expression

    aggregate_with_order_by op_kind column order_by =
        order_bys = order_by.map sc->
            effective_ordering = if sc.column.value_type.is_text then Text_Ordering.Default else Nothing
            dialect.prepare_order_descriptor sc.column.as_internal sc.direction effective_ordering
        expression = SQL_Expression.Operation op_kind [column.expression]+order_bys
        sql_type_ref = infer_return_type op_kind [column] expression
        Internal_Column.Value as sql_type_ref expression

    dialect.check_aggregate_support aggregate . if_not_error <| case aggregate of
        Aggregate_Column.Group_By c _ ->
            Internal_Column.Value as c.sql_type_reference c.expression
        Aggregate_Column.Count _ -> simple_aggregate "COUNT_ROWS" []
        Aggregate_Column.Count_Distinct columns _ ignore_nothing -> if columns.is_empty then Error.throw (Illegal_Argument.Error "Count_Distinct must have at least one column.") else
            case ignore_nothing of
                True -> simple_aggregate "COUNT_DISTINCT" columns
                False -> simple_aggregate "COUNT_DISTINCT_INCLUDE_NULL" columns
        Aggregate_Column.Count_Not_Nothing c _ -> simple_aggregate "COUNT" [c]
        Aggregate_Column.Count_Nothing c _ -> simple_aggregate "COUNT_IS_NULL" [c]
        Aggregate_Column.Count_Not_Empty c _ -> simple_aggregate "COUNT_NOT_EMPTY" [c]
        Aggregate_Column.Count_Empty c _ -> simple_aggregate "COUNT_EMPTY" [c]
        Aggregate_Column.Percentile p c _ ->
            op_kind = "PERCENTILE"
            expression = SQL_Expression.Operation op_kind [SQL_Expression.Literal p.to_text, c.expression]
            sql_type_ref = infer_return_type op_kind [c] expression
            Internal_Column.Value as sql_type_ref expression
        Aggregate_Column.Mode c _ ->
            col = table.make_column c
            if col.value_type.is_floating_point then
                problem_builder.report_other_warning (Floating_Point_Equality.Error as)
            simple_aggregate "MODE" [c]
        Aggregate_Column.First c _ ignore_nothing order_by -> case is_non_empty_selector order_by of
            False -> Error.throw (Unsupported_Database_Operation.Error "`First` aggregation requires at least one `order_by` column.")
            True ->
                op = case ignore_nothing of
                    False -> "FIRST"
                    True -> "FIRST_NOT_NULL"
                aggregate_with_order_by op c order_by
        Aggregate_Column.Last c _ ignore_nothing order_by -> case is_non_empty_selector order_by of
            False -> Error.throw (Unsupported_Database_Operation.Error "`Last` aggregation requires at least one `order_by` column.")
            True ->
                op = case ignore_nothing of
                    False -> "LAST"
                    True -> "LAST_NOT_NULL"
                aggregate_with_order_by op c order_by
        Aggregate_Column.Maximum c _ -> simple_aggregate "MAX" [c]
        Aggregate_Column.Minimum c _ -> simple_aggregate "MIN" [c]
        Aggregate_Column.Shortest c _ -> simple_aggregate "SHORTEST" [c]
        Aggregate_Column.Longest c _ -> simple_aggregate "LONGEST" [c]
        Aggregate_Column.Standard_Deviation c _ population -> case population of
            True -> simple_aggregate "STDDEV_POP" [c]
            False -> simple_aggregate "STDDEV_SAMP" [c]
        Aggregate_Column.Concatenate c _ separator prefix suffix quote_char ->
            base_args = [c.expression, SQL_Expression.Constant separator, SQL_Expression.Constant prefix, SQL_Expression.Constant suffix]
            op_kind = case quote_char.is_empty of
                True -> "CONCAT"
                False -> "CONCAT_QUOTE_IF_NEEDED"
            effective_args = case op_kind of
                "CONCAT_QUOTE_IF_NEEDED" ->
                    base_args+[SQL_Expression.Constant quote_char]
                "CONCAT" -> base_args
            expression = SQL_Expression.Operation op_kind effective_args
            sql_type_ref = infer_return_type op_kind [c] expression
            Internal_Column.Value as sql_type_ref expression
        Aggregate_Column.Sum c _ -> simple_aggregate "SUM" [c]
        Aggregate_Column.Average c _ -> simple_aggregate "AVG" [c]
        Aggregate_Column.Median c _ -> simple_aggregate "MEDIAN" [c]
