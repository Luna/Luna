from Standard.Base import all

from project.Errors import Invariant_Violation, SQL_Error

polyglot java import org.sqlite.SQLiteErrorCode
polyglot java import org.sqlite.SQLiteException

## PRIVATE
type SQLite_Error_Mapper

    ## PRIVATE
    is_duplicate_primary_key_violation : SQL_Error -> Boolean
    is_duplicate_primary_key_violation error =
        case error.java_exception of
            sqlite_exception : SQLiteException ->
                sqlite_exception.getResultCode == SQLiteErrorCode.SQLITE_CONSTRAINT_PRIMARYKEY

    ## PRIVATE
       SQLite does not mind SQLite NULL primary keys.
    is_null_primary_key_violation : SQL_Error -> Boolean
    is_null_primary_key_violation _ = False

    ## PRIVATE
    is_table_already_exists_error : SQL_Error -> Boolean
    is_table_already_exists_error error =
        case error.java_exception of
            sqlite_exception : SQLiteException ->
                (sqlite_exception.getResultCode == SQLiteErrorCode.SQLITE_ERROR) && (sqlite_exception.getMessage.match ".*\(table .* already exists\)")

    ## PRIVATE
    transform_custom_errors : SQL_Error -> Any
    transform_custom_errors error =
        invariant_failure_message = "unable to use function MATCH in the requested context"
        message = error.java_exception.getMessage
        if message.contains invariant_failure_message . not then error else
            query_contains_invariant_check = error.related_query.if_nothing "" . contains "ENSO INVARIANT VIOLATED"
            if query_contains_invariant_check . not then error else
                Invariant_Violation.Error Nothing error
