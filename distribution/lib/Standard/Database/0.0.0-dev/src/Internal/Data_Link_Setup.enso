from Standard.Base import all
import Standard.Base.Enso_Cloud.Data_Link.Data_Link
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Runtime.Context
from Standard.Base.Enso_Cloud.Data_Link_Helpers import data_link_extension, secure_value_to_json, save_password_for_data_link

import project.Connection.Credentials.Credentials
import project.Connection.Connection.Connection
import project.SQL_Statement.SQL_Statement

## PRIVATE
type Data_Link_Setup
    ## PRIVATE
    Available create_data_link_structure:Enso_File->JS_Object

    ## PRIVATE
    Unavailable cause:Text

    ## PRIVATE
       Returns an unavailable setup with reason being the connection was alraedy a data link.
    already_a_data_link -> Data_Link_Setup = Data_Link_Setup.Unavailable "Saving connections established through a Data Link is not allowed. Please copy the Data Link instead."

    ## PRIVATE
    save_as_data_link self destination on_existing_file:Existing_File_Behavior link_type:DB_Data_Link_Type=..Database = case self of
        Data_Link_Setup.Available create_fn -> Context.Output.if_enabled disabled_message="As writing is disabled, cannot save to a Data Link. Press the Write button â–¶ to perform the operation." panic=False <|
            case destination of
                _ : Enso_File ->
                    replace_existing = case on_existing_file of
                        Existing_File_Behavior.Overwrite -> True
                        Existing_File_Behavior.Error -> False
                        _ -> Error.throw (Illegal_Argument.Error "Invalid value for `on_existing_file` parameter, only `Overwrite` and `Error` are supported here.")
                    exists_checked = if replace_existing.not && destination.exists then Error.throw (File_Error.Already_Exists destination)
                    exists_checked.if_not_error <|
                        json = link_type.alter (create_fn destination)
                        Data_Link.write_config destination json replace_existing
                _ -> Error.throw (Illegal_Argument.Error "Currently a connection can only be saved as a Data Link into the Enso Cloud. Please provide an `Enso_File` as destination.")

        Data_Link_Setup.Unavailable cause ->
            word = case link_type of
                DB_Data_Link_Type.Database -> "connection"
                DB_Data_Link_Type.Table _ -> "table"
                DB_Data_Link_Type.Query _ -> "query"
                DB_Data_Link_Type.SQL_Statement _ -> "query"
            Error.throw (Illegal_Argument.Error "Cannot save "+word+" as Data Link: "+cause)

    ## PRIVATE
    save_credentials_for_data_link data_link_location:Enso_File credentials:Credentials -> JS_Object =
        # A plain text is automatically promoted to a secret.
        secret_password = save_password_for_data_link data_link_location credentials.password

        # But we keep the username as-is - if it was in plain text, it will stay in plain text.
        JS_Object.from_pairs [["username", secure_value_to_json credentials.username], ["password", secure_value_to_json secret_password]]

## PRIVATE
type DB_Data_Link_Type
    ## PRIVATE
    Database

    ## PRIVATE
    Table name:Text

    ## PRIVATE
    Query query:Text

    ## PRIVATE
    SQL_Statement sql_statement:SQL_Statement

    ## PRIVATE
       Alters the connection description JSON, adding information dependent on
       the data link type (table name or query to fetch, when applicable).
    alter self connection_description:JS_Object -> JS_Object = case self of
        DB_Data_Link_Type.Database -> connection_description
        DB_Data_Link_Type.Table name ->
            connection_description.set_value "table" name
        DB_Data_Link_Type.Query query ->
            connection_description.set_value "table" (JS_Object.from_pairs [["query", query]])
        DB_Data_Link_Type.SQL_Statement sql_statement ->
            serialized = sql_statement.serialize ensure_roundtrip=True
            serialized.if_not_error <|
                # Instead of nesting the serialized query as a JSON object, we store its JSON representation as a string - this will be more friendly in the GUI.
                connection_description.set_value "table" (JS_Object.from_pairs [["sql_statement", serialized.to_json]])

    ## PRIVATE
       Interprets this data link setup according to its type.
       The `Database` link will return the connection as-is, whereas the other
       types will return a `DB_Table` for the specific table/query.
    interpret self connection = case self of
        DB_Data_Link_Type.Database ->
            connection
        DB_Data_Link_Type.Table name ->
            connection.query (..Table_Name name)
        DB_Data_Link_Type.Query raw_sql ->
            connection.query (..Raw_SQL raw_sql)
        DB_Data_Link_Type.SQL_Statement sql_statement ->
            Connection.make_table_from_query connection sql_statement alias=""
                . catch Any error-> Error.throw (Illegal_State.Error "Failed to read back the SQL statement from the data link: "+error.to_display_text)
