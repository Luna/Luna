private

from Standard.Base import all

from Standard.Table import Aggregate_Column, Join_Kind
from Standard.Table.Errors import Null_Values_In_Key_Columns

from project.Errors import Multiple_Target_Rows_Matched_For_Update

## PRIVATE
check_duplicate_key_matches_for_delete target_table tmp_table key_columns allow_duplicate_matches ~continuation =
    if allow_duplicate_matches then continuation else
        check_multiple_rows_match target_table tmp_table key_columns <|
            continuation

## PRIVATE
   Checks if any rows identified by `key_columns` have more than one match between two tables.
check_multiple_rows_match left_table right_table key_columns ~continuation =
    joined = left_table.join right_table on=key_columns join_kind=Join_Kind.Inner
    counted = joined.aggregate key_columns [Aggregate_Column.Count]
    duplicates = counted.filter -1 (Filter_Condition.Greater than=1)
    example = duplicates.read (..First 1)
    case example.row_count == 0 of
        True -> continuation
        False ->
            row = example.first_row . to_vector
            offending_key = row.drop (..Last 1)
            count = row.last
            Error.throw (Multiple_Target_Rows_Matched_For_Update.Error offending_key count)

## PRIVATE
check_for_null_keys table key_columns ~continuation =
    keys = table.select_columns key_columns
    is_any_key_blank = keys.columns.map (_.is_nothing) . reduce (||)
    null_keys = table.filter is_any_key_blank Filter_Condition.Is_True
    example = null_keys.read (..First 1)
    case example.row_count == 0 of
        True -> continuation
        False ->
            example_key = example.first_row.to_vector
            Error.throw (Null_Values_In_Key_Columns.Error example_key add_sql_suffix=True)

## PRIVATE
check_for_null_keys_if_any_keys_set table key_columns ~continuation =
    if key_columns.is_empty then continuation else
        check_for_null_keys table key_columns continuation
