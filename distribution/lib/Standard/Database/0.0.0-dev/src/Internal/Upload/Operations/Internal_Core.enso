private

from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Table import Table

import project.Column_Description.Column_Description
import project.Connection.Connection.Connection
import project.DB_Table.DB_Table
import project.Internal.DDL_Transaction.Transactional_Table_Description
import project.Internal.In_Transaction.In_Transaction
import project.Internal.IR.Query.Query
import project.SQL_Query.SQL_Query

from project.Dialect import Temp_Table_Style
from project.Errors import SQL_Error, Table_Already_Exists, Different_Connections
from project.Internal.JDBC_Connection import log_sql_if_enabled
from project.Internal.Upload.Helpers.Argument_Checks import resolve_primary_key
from project.Internal.Upload.Helpers.Constants import default_batch_size
from project.Internal.Upload.Helpers.Error_Helpers import handle_upload_errors, internal_translate_known_upload_errors
from project.Internal.Upload.Helpers.Prepare_Structure import align_structure, validate_structure, verify_structure_hint
from project.Internal.Upload.Helpers.SQL_Helpers import make_batched_insert_template, prepare_create_table_statement
from project.Internal.Upload.Operations.Internal.Internal_Core_Impl import all

## PRIVATE
   Assumes the output context is enabled for it to work.
   Creates a table in the Database and returns its name.
internal_create_table_structure connection table_name structure primary_key temporary on_problems:Problem_Behavior -> Text =
    aligned_structure = align_structure connection structure
    resolved_primary_key = resolve_primary_key aligned_structure primary_key
    validate_structure connection.base_connection.column_naming_helper aligned_structure <|
        create_table_statement = prepare_create_table_statement connection table_name aligned_structure resolved_primary_key temporary on_problems
        update_result = create_table_statement.if_not_error <|
            log_sql_if_enabled connection.jdbc_connection create_table_statement.to_text
            connection.execute create_table_statement
        final_result = update_result.if_not_error table_name
        final_result.catch SQL_Error sql_error->
            if connection.dialect.get_error_mapper.is_table_already_exists_error sql_error then Error.throw (Table_Already_Exists.Error table_name) else final_result

## PRIVATE
   We split uploading a table within a transaction into two steps:
   1. creating the table structure, by passing the description to `DDL_Transaction.run_transaction_with_tables`,
   2. uploading the data inside of the `run_transaction_with_tables` transactional block.
type Table_Upload_Operation
    Value table_description:Transactional_Table_Description (internal_upload_callback : Nothing -> DB_Table)

    ## PRIVATE
       Performs the actual data upload.
       This method should be called inside of `run_transaction_with_tables`
       block which had the `table_description` passed to it.
    perform_upload self -> DB_Table = self.internal_upload_callback Nothing

## PRIVATE
   A helper to prepare an upload operation for a table.

   Arguments:
   - source_table: the table to be uploaded.
     If it's a `DB_Table`, the query will be materialized as a new table.
     If it's an In Memmory `Table`, the data will be uploaded to the newly created table.
   - connection: the connection to the database.
   - table_name: the name of the table to be created.
   - primary_key: the primary key of the table to be created. Can be `Nothing` to set no key.
   - temporary: if `True`, the table will be created as temporary.
   - structure_hint: If set, it can be used to hint what types should be used for the columns of the table. Useful if the types slightly differ from the in-memory source types.
   - row_limit: if set, only the first `row_limit` rows will be uploaded.
internal_upload_table : DB_Table | Table -> Connection -> Text -> Nothing | Vector Text -> Boolean -> Boolean -> Nothing | Vector Column_Description ->  Problem_Behavior -> Integer | Nothing -> Table_Upload_Operation
internal_upload_table source_table connection (table_name : Text) (primary_key : Nothing | Vector Text) (temporary : Boolean) (remove_after_transaction : Boolean = False) structure_hint=Nothing (on_problems:Problem_Behavior=..Report_Error) (row_limit : Integer | Nothing = Nothing) -> Table_Upload_Operation =
    resolved_table_name = resolve_temp_table_name connection temporary table_name
    case source_table of
        _ : Table ->
            internal_upload_in_memory_table source_table connection resolved_table_name primary_key temporary remove_after_transaction structure_hint on_problems row_limit
        _ : DB_Table ->
            internal_upload_database_table source_table connection resolved_table_name primary_key temporary remove_after_transaction structure_hint on_problems row_limit
        _ ->
            Panic.throw <| Illegal_Argument.Error ("Unsupported table type: " + Meta.get_qualified_type_name source_table)

## PRIVATE
resolve_temp_table_name connection temporary:Boolean table_name:Text -> Text =
    case temporary of
        False -> case table_name.starts_with "#" of
            True -> Error.throw <| Illegal_Argument.Error ("Table name cannot start with '#': " + table_name)
            False -> table_name
        True -> case connection.dialect.temp_table_style of
            Temp_Table_Style.Temporary_Table -> table_name
            Temp_Table_Style.Hash_Prefix -> case table_name.starts_with "#" of
                True -> table_name
                False -> "#" + table_name
