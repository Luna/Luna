from Standard.Base import all

import Standard.Table.Internal.Vector_Builder.Vector_Builder

import project.Data.SQL_Type.SQL_Type

## UNSTABLE

   Creates a Builder representing and empty code fragment.
empty : Builder
empty = Builder_Data (Vector_Builder.empty)

## UNSTABLE

   Creates a Builder representing a code fragment containing the specified raw
   code.

   Arguments:
   - text: The raw SQL code.
code : Text -> Builder
code text =
    vec = if text.is_empty then [] else [SQL_Code_Part text]
    Builder_Data (Vector_Builder.from_vector vec)

## UNSTABLE

   Creates a Builder representing an interpolation of the given object.

   Arguments:
   - sql_type: The expected SQL type of `object`.
   - object: The object to be interpolated into the query as if it has the type
     given by `sql_type`.
interpolation : SQL_Type -> Any -> Builder
interpolation sql_type object = Builder_Data (Vector_Builder.from_vector [SQL_Interpolation sql_type object])

## UNSTABLE

   Joins a vector of code fragments with the provided separator.

   Arguments:
   - separator: The separator to use when joining the code fragments.
   - statements: The SQL statements to join using `separator`.
join : Builder | Text -> Vector Builder -> Builder
join separator statements =
    sep = case separator of
        Builder_Data _ -> separator
        _ -> code separator

    if statements.length == 0 then empty else
        (1.up_to statements.length . fold (statements.at 0) acc-> i-> acc ++ sep ++ statements.at i)


# TODO Dubious constructor export
from project.Data.SQL.SQL_Fragment import all
from project.Data.SQL.SQL_Fragment export all

## UNSTABLE

   A fragment of a SQL query.

   It can either be a SQL_Code_Part that represents raw SQL code or
   SQL_Interpolation which represents an object that will be interpolated into
   the query.
type SQL_Fragment

    ## UNSTABLE

       A SQL fragment that represents raw SQL code.

       Arguments:
       - code: A fragment of SQL code.
    SQL_Code_Part code:Text

    ## UNSTABLE

       A SQL fragment that represents an object which will be interpolated into
       the query.

       Arguments:
       - sql_type: The expected SQL type of `object`.
       - object: A value that will be interpolated into the query, interpreted
         as having the type `sql_type`.
    SQL_Interpolation sql_type:SQL_Type object:Any

# TODO Dubious constructor export
from project.Data.SQL.Statement import all
from project.Data.SQL.Statement export all

type Statement

    ## UNSTABLE

       Represents a built SQL statement.

       Arguments:
       - internal_fragments: A vector of SQL code fragments.

       The statement consists of SQL code with parameters and values that will be
       interpolated for these parameters.
    Statement_Data (internal_fragments:(Vector SQL_Fragment))

    ## UNSTABLE

       A vector of code fragments.

       Consists of two types of values:
       - SQL_Code_Part, representing parts of raw SQL code and
       - SQL_Interpolation, representing objects that will be interpolated in
         between the SQL code.
    fragments : Vector SQL_Fragment
    fragments self = self.internal_fragments

    ## UNSAFE
       UNSTABLE
       ADVANCED

       This function returns a raw SQL string for the query, manually handling
       the interpolation that is normally handled by the database engine itself.

       It should be used EXTREMELY carefully - the returned SQL code should
       always be read by a human to ensure that it does what is expected before
       executing it in any REPLs or other database interfaces.

       It should NEVER be used in production code.
    unsafe_to_raw_sql : Text
    unsafe_to_raw_sql self =
        strings = self.internal_fragments . map <| case _ of
            SQL_Code_Part code -> code
            # TODO at some point we may try more sophisticated serialization based on data type
            SQL_Interpolation _ obj -> case obj of
                Number -> obj.to_text
                _ -> "'" + obj.to_text.replace "'" "''" + "'"
        strings.join ""

    ## UNSTABLE

       Returns a pair consisting of the SQL code with holes for values and
       a list for values that should be substituted.
    # prepare : [Text, Vector Any]
    prepare self =
        to_code fragment = case fragment of
            SQL_Code_Part code -> code
            SQL_Interpolation _ _ -> "?"
        to_subst fragment = case fragment of
            SQL_Code_Part _ -> []
            SQL_Interpolation typ obj -> [[obj, typ]]
        sql = self.fragments.map to_code . join ""
        substitutions = self.fragments.flat_map to_subst
        [sql, substitutions]

    ## UNSTABLE

       Returns a JSON representation of the statement.
    to_json : Json
    to_json self =
        jsonify fragment = case fragment of
            SQL_Code_Part code -> Json.from_pairs [["sql_code", code]]
            SQL_Interpolation typ obj ->
                inner = Json.from_pairs [["value", obj], ["expected_sql_type", typ.name]]
                Json.from_pairs [["sql_interpolation", inner]]
        fragments = Json.Array (self.internal_fragments.map jsonify)
        Json.from_pairs [["query", fragments]]

# TODO Dubious constructor export
from project.Data.SQL.Builder import all
from project.Data.SQL.Builder export all

type Builder

    ## PRIVATE

       A Builder for SQL queries.

       Arguments:
       - fragments: A builder that contains fragments of SQL code.

       It can be used to concatenate parts of SQL code in O(1) time and at the
       end build the actual query in linear time.
    Builder_Data (fragments:(Vector_Builder SQL_Fragment))

    ## UNSTABLE

       Concatenates two code fragments.

       Arguments:
       - other: The code fragment to append to `self`.
    ++ : Builder -> Builder
    ++ self other = case other of
        text : Text -> if text == "" then self else Builder_Data (self.fragments ++ (code text).fragments)
        _ -> Builder_Data (self.fragments ++ other.fragments)

    ## UNSTABLE

       Checks if the builder represents an empty code fragment.
    is_empty : Boolean
    is_empty self = self.fragments.is_empty

    ## UNSTABLE

       Builds a SQL statement.
    build : Statement
    build self =
        fragments = optimize_fragments self.fragments.build
        Statement_Data fragments

    ## UNSTABLE

       Wraps the code fragment in parentheses.
    paren : Builder
    paren self = code "(" ++ self ++ ")"

    ## UNSTABLE

       If the fragment is non empty, prepends the specified prefix to it.

       Arguments:
       - prefix: The prefix to append if the fragment is present.

       Empty fragments are unaffected.
    prefix_if_present : Text | Builder -> Builder
    prefix_if_present self prefix =
        pref = case prefix of
            Builder_Data _ -> prefix
            _ -> code prefix
        if self.is_empty then self else pref++self

## PRIVATE

   Merges neighboring code fragments to create a more compact representation of
   the same code.

   Arguments:
   - fragments: The fragments to be merged together.
optimize_fragments : Vector SQL_Fragment -> Vector SQL_Fragment
optimize_fragments fragments =
    builder = Vector.new_builder
    go elem =
        last_part = State.get SQL_Code_Part
        case elem of
            SQL_Code_Part code ->
                new_part = case last_part of
                    Nothing -> SQL_Code_Part code
                    SQL_Code_Part other -> SQL_Code_Part other+code
                State.put SQL_Code_Part new_part
            SQL_Interpolation _ _ ->
                case last_part of
                    Nothing -> Nothing
                    SQL_Code_Part _ ->
                        builder.append last_part
                        State.put SQL_Code_Part Nothing
                builder.append elem
    State.run SQL_Code_Part Nothing <|
        fragments.each go
        last_part = State.get SQL_Code_Part
        case last_part of
            Nothing -> Nothing
            SQL_Code_Part _ -> builder.append last_part
    builder.to_vector

