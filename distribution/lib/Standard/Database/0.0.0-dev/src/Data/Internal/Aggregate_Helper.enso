from Standard.Base import all

from Standard.Table.Data.Aggregate_Column import all
import Standard.Database.Data.Internal.IR
from Standard.Database.Data.Sql import Sql_Type
import Standard.Base.Error.Extensions as Errors

make_aggregate_column : Table -> Aggregate_Column -> IR.Internal_Column
make_aggregate_column table aggregate =
    new_name = aggregate.column_name table
    sql_type = table.connection.dialect.resolve_target_sql_type aggregate
    expression = here.make_expression aggregate
    IR.Internal_Column new_name sql_type expression

make_expression : Aggregate_Column -> IR.Expression
make_expression aggregate = case aggregate of
    Group_By c _ -> c.expression
    Count _ -> IR.Operation "COUNT_ROWS" []
    Count_Distinct c _ ignore_nothing -> case ignore_nothing of
        True -> IR.Operation "COUNT_DISTINCT" [c.expression]
        False -> IR.Operation "COUNT_DISTINCT_INCLUDE_NULL" [c.expression]
    Count_Not_Nothing c _ -> IR.Operation "COUNT" [c.expression]
    Count_Nothing c _ -> IR.Operation "COUNT_IS_NULL" [c.expression]
    Count_Not_Empty c _ -> IR.Operation "COUNT_NOT_EMPTY" [c.expression]
    Count_Empty c _ -> IR.Operation "COUNT_EMPTY" [c.expression]
    Percentile p c _ -> IR.Operation "PERCENTILE" [IR.Constant Sql_Type.double p, c.expression]
    Mode c _ -> IR.Operation "MODE" [c.expression]
    First _ _ _ _ -> Errors.unimplemented "Not implemented yet."
    Last _ _ _ _ -> Errors.unimplemented "Not implemented yet."
    Maximum c _ -> IR.Operation "MAX" [c.expression]
    Minimum c _ -> IR.Operation "MIN" [c.expression]
    Shortest c _ -> IR.Operation "MIN" [c.expression]
    Longest c _ -> IR.Operation "MAX" [c.expression]
    Standard_Deviation c _ population ->
        ## TODO!
        _ = population
        IR.Operation "STD_DEV" [c.expression]
    Concatenate c _ _ _ _ _ ->
        IR.Operation "CONCAT" [c.expression]
    Sum c _ -> IR.Operation "SUM" [c.expression]
    Average c _ -> IR.Operation "AVG" [c.expression]
    Median c _ -> IR.Operation "MEDIAN" [c.expression]
