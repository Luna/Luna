from Standard.Base import all

import Standard.Base.Data.Index_Sub_Range as Index_Sub_Range_Module
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
from Standard.Base.Data.Index_Sub_Range import normalize_ranges, resolve_ranges, sort_and_merge_ranges

from Standard.Table import Set_Mode

import project.Data.Column.Column
import project.Data.Table.Table
from project.Errors import Unsupported_Database_Operation

type Take_Drop
    Take
    Drop

take_drop_helper : Take_Drop -> Table -> (Index_Sub_Range | Range | Integer) -> Table
take_drop_helper take_drop table selector =
    check_supported selector <|
        length = table.row_count
        at x = [Range.new x x+1]
        single_slice s e = [Range.new s e]
        slice_ranges selectors =
            slice_range selector = case selector of
                i : Integer -> Range.new i i+1
                r : Range -> r
            selectors.map slice_range
        unclean_ranges = case take_drop of
            Take_Drop.Take -> Index_Sub_Range_Module.take_helper length at single_slice slice_ranges selector
            Take_Drop.Drop -> Index_Sub_Range_Module.drop_helper length at single_slice slice_ranges selector
        ranges = cleanup_ranges unclean_ranges

        if ranges.is_empty then table.remove_all_rows else
            # Filter on row column. Add the row column at the start, remove it at the end.
            row_column_name = Table.make_temp_column_name
            table_with_row_number = table.add_row_number name=row_column_name from=0

            subqueries = ranges.map range->
                generate_subquery table_with_row_number row_column_name range
            combined = subqueries.reduce (a-> b-> a.union b)
            combined.remove_columns row_column_name

## PRIVATE
   Throw Unsupported_Database_Operation for selectors that are not supported by database backends.
check_supported : (Index_Sub_Range | Range | Integer) -> Any -> Any | Unsupported_Database_Operation
check_supported selector ~cont =
    err =
        msg = selector.to_display_text + " is not supported for database backends"
        Error.throw (Unsupported_Database_Operation.Error msg)

    case selector of
        Index_Sub_Range.While _ -> err
        Index_Sub_Range.Sample _ _ -> err
        _ -> cont

## PRIVATE
   Remove empty ranges.
cleanup_ranges : Vector Range -> Vector Range
cleanup_ranges ranges:(Vector Range) =
    ok range = range.end > range.start
    ranges.filter ok

with_temporary_column : Table -> Column -> (Text -> Table -> Table) -> Table
with_temporary_column table:Table new_column:Column f:(Text -> Table -> Table) =
    new_column_name = Table.make_temp_column_name
    with_new_column = table.set new_column new_column_name set_mode=Set_Mode.Add
    modified_table = f new_column_name with_new_column
    modified_table.remove_columns new_column_name

generate_subquery : Table -> Text -> Range -> Table
generate_subquery table row_column_name range =
    case range.step == 1 of
        True ->
            filter_condition = Filter_Condition.Between range.start range.end-1
            table.filter row_column_name filter_condition
        False ->
            is_in_stepped_range = (((table.at row_column_name - range.start) % range.step) == 0) && (table.at row_column_name < range.end)
            with_temporary_column table is_in_stepped_range name-> table->
                table.filter name Filter_Condition.Is_True
