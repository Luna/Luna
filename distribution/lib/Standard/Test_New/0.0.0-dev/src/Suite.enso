
from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Runtime.State

import project.Group.Group
import project.Group.Group_Builder
import project.Helpers
import project.Phases.Running_Tests
import project.Suite_Config.Suite_Config
import project.Test_Reporter

type Suite_Builder
    ## PRIVATE
    Impl builder

    ## Add a group to the builder.
    group : Text -> (Group_Builder -> Any) -> Nothing
    group self (name:Text) (fn : (Group_Builder -> Any)) =
        group_builder = Group_Builder.Impl
        fn group_builder
        group = Group.Impl name group_builder.teardown_ref.get group_builder.builder.to_vector
        self.builder.append group


type Suite
    Impl (groups : Vector Group)

    ## Merges multiple suites into one suite
    merge : (Vector Suite) -> Suite
    merge suites =
        all_groups = suites.map (_.groups) . flatten
        all_group_names = all_groups.map (_.name)
        if all_group_names.distinct.length != all_group_names.length then Panic.throw "Group names not unique" else
            Suite.Impl all_groups

    run_all self =
        self.run_with_filter Nothing Nothing

    ## Run only tests that match the provided filters. The filters are converted to
       a regular expression. If a filter is Nothing, it matches all the names.

       Arguments:
       - group_filter: Filter for group names.
       - spec_filter: Filter for spec names.
    run_with_filter : (Regex | Text | Nothing) -> (Regex | Text | Nothing) -> Nothing
    run_with_filter self group_filter=Nothing spec_filter=Nothing =
        config = Suite_Config.from_environment
        convert_filter filter =
            case filter of
                r : Regex -> r
                t : Text -> Regex.compile t
                Nothing -> Regex.compile ".*"
                _ -> Error.throw (Illegal_Argument.Error "Wrong specification of a filter: "+filter.to_text)
        group_filter_conv = convert_filter group_filter
        spec_filter_conv = convert_filter spec_filter
        filtered_groups = self.groups.filter group->
            (group_filter_conv.match group.name) != Nothing
        filtered_groups.each group->
            State.run Running_Tests True <|
                results = Helpers.run_group_with_filter group spec_filter_conv
                Test_Reporter.print_report results config Nothing

    group_names self =
        self.groups.map (_.name)

    print_all self =
        IO.println "Test Suite:"
        self.groups.each group->
            IO.println <| "  Group '" + group.name + "':"
            group.specs.each spec->
                IO.println <| "    " + spec.name
