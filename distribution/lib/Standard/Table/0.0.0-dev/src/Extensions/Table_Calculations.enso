from Standard.Base import all
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice

import project.Data.Column.Column
import project.Data.Expression.Expression_Error
import project.Data.Set_Mode.Set_Mode
import project.Data.Table.Table
import project.Internal.Widget_Helpers
from project.Errors import No_Such_Column, Existing_Column, Missing_Column
from project.Internal.Filter_Condition_Helpers import make_filter_column

## Defines a column operation generally acting on each row producing a new
   column.
type Column_Operation
    ## Add a fixed value or another column to a column.
    Add input:(Text|Integer) other:(Column_Ref|Any)

    ## Subtract a fixed value or another column to a column.
    Subtract input:(Text|Integer) other:(Column_Ref|Any)

    ## Multiply a fixed value or another column to a column.
    Multiply input:(Text|Integer) other:(Column_Ref|Any)

    ## Divide a fixed value or another column to a column.
    Divide input:(Text|Integer) other:(Column_Ref|Any)

    ## Rounds values in the column to the specified precision.
    Round input:(Text|Integer) precision:Integer=0 use_bankers:Boolean=False

    ## Rounds values in the column up to the nearest integer.
    Ceil input:(Text|Integer)

    ## Rounds values in the column down to the nearest integer.
    Floor input:(Text|Integer)

    ## Truncates the fractional part of values in the column.
       If a Date_Time, returns the Date.
    Truncate input:(Text|Integer)

    ## Adds a period to a date/time column.
    Date_Add input:(Text|Integer) length:(Column_Ref|Integer) period:(Date_Period|Time_Period)=Date_Period.Day

    ## Returns part of a date/time column.
    Date_Part input:(Text|Integer) period:(Date_Period|Time_Period)

    ## Returns the difference between two date/time columns.
    Date_Diff input:(Text|Integer) end:(Column_Ref|Date_Time|Date|Time_Of_Day) period:(Date_Period|Time_Period)=Date_Period.Day

    ## Negate a boolean column.
    Not input:(Text|Integer)

    ## Boolean AND on two boolean columns.
    And input:(Text|Integer) other:(Column_Ref|Boolean)

    ## Boolean OR on two boolean columns.
    Or input:(Text|Integer) other:(Column_Ref|Boolean)

    ## If input meets a condition return true value other false value.
    If input:(Text|Integer) condition:Filter_Condition true_value:Any false_value:Any

    ## PRIVATE
       Implementation of Table calculation.
       Shorthand for getting a column.
       Performing an action and setting the result to a new column.
    evaluate : Table_Ref -> Boolean -> Problem_Behavior -> Any
    evaluate self table:Table_Ref use_input_name:Boolean on_problems:Problem_Behavior =
        input_column = table.at self.input
        derived = case self of
            Column_Operation.Add _ other -> input_column + (table.resolve other)
            Column_Operation.Subtract _ other -> input_column - (table.resolve other)
            Column_Operation.Multiply _ other -> input_column * (table.resolve other)
            Column_Operation.Divide _ other -> input_column / (table.resolve other)
            Column_Operation.Round _ precision use_bankers -> input_column.round precision use_bankers
            Column_Operation.Ceil _ -> input_column.ceil
            Column_Operation.Floor _ -> input_column.floor
            Column_Operation.Truncate _ -> input_column.truncate
            Column_Operation.Date_Add _ length period -> input_column.date_add (table.resolve length) period
            Column_Operation.Date_Part _ period -> input_column.date_part period
            Column_Operation.Date_Diff _ end period -> input_column.date_diff (table.resolve end) period
            Column_Operation.Not _ -> input_column.not
            Column_Operation.And _ other -> input_column && (table.resolve other)
            Column_Operation.Or _ other -> input_column || (table.resolve other)
            Column_Operation.If _ condition true_value false_value ->
                condition_column =  make_filter_column input_column (table.resolve_condition condition) on_problems
                condition_column.iif (table.resolve true_value) (table.resolve false_value)
        if use_input_name then derived.rename input_column.name else derived

    ## PRIVATE
       Create a widget for operation
    default_widget : Table_Ref -> Widget
    default_widget table:Table_Ref display=Display.Always =
        col_names = Widget_Helpers.make_column_name_selector table
        col_refs = Widget_Helpers.make_column_ref_by_name_selector table
        filter_cond = Widget_Helpers.make_filter_condition_selector table
        builder = Vector.new_builder
        fqn = Meta.get_qualified_type_name Column_Operation
        builder.append (Option "add" fqn+".Add" [["input", col_names], ["other", col_refs]])
        builder.append (Option "subtract" fqn+".Subtract" [["input", col_names], ["other", col_refs]])
        builder.append (Option "multiply" fqn+".Multiply" [["input", col_names], ["other", col_refs]])
        builder.append (Option "divide" fqn+".Divide" [["input", col_names], ["other", col_refs]])
        builder.append (Option "round" fqn+".Round" [["input", col_names]])
        builder.append (Option "ceil" fqn+".Ceil" [["input", col_names]])
        builder.append (Option "floor" fqn+".Floor" [["input", col_names]])
        builder.append (Option "truncate" fqn+".Truncate" [["input", col_names]])
        builder.append (Option "date add" fqn+".Date_Add" [["input", col_names], ["length", col_refs]])
        builder.append (Option "date part" fqn+".Date_Part" [["input", col_names]])
        builder.append (Option "date diff" fqn+".Date_Diff" [["input", col_names], ["end", col_refs]])
        builder.append (Option "not" fqn+".Not" [["input", col_names]])
        builder.append (Option "and" fqn+".And" [["input", col_names], ["other", col_refs]])
        builder.append (Option "or" fqn+".Or" [["input", col_names], ["other", col_refs]])
        builder.append (Option "if" fqn+".If" [["input", col_names], ["condition", filter_cond], ["true_value", col_refs], ["false_value", col_refs]])
        Single_Choice builder.to_vector display=display

## Reference to a column in a table.
type Column_Ref
    ## Reference to a column by name in a table.
    Name name:Text

    ## Reference to a column by index in a table.
    Index index:Integer

## PRIVATE
   Private type class for defining a table against
type Table_Ref
    ## PRIVATE
    Value underlying

    ## PRIVATE
       Get a column.
       Column must implement all the expected calculations.
    at : Text | Integer -> Column ! No_Such_Column | Index_Out_Of_Bounds
    at self selector=0 = self.underlying.at selector

    ## PRIVATE
       Resolve a Column_Ref to a Column.
    resolve : Any -> Any ! No_Such_Column | Index_Out_Of_Bounds
    resolve self value = case value of
        Column_Ref.Name name -> self.at name
        Column_Ref.Index index -> self.at index
        _ -> value

    ## PRIVATE
    resolve_condition : Filter_Condition -> Filter_Condition
    resolve_condition self condition = case condition of
        Filter_Condition.Equal value -> Filter_Condition.Equal (self.resolve value)
        Filter_Condition.Not_Equal value -> Filter_Condition.Not_Equal (self.resolve value)
        Filter_Condition.Less value -> Filter_Condition.Less (self.resolve value)
        Filter_Condition.Equal_Or_Less value -> Filter_Condition.Equal_Or_Less (self.resolve value)
        Filter_Condition.Greater value -> Filter_Condition.Greater (self.resolve value)
        Filter_Condition.Equal_Or_Greater value -> Filter_Condition.Equal_Or_Greater (self.resolve value)
        Filter_Condition.Between lower upper -> Filter_Condition.Between (self.resolve lower) (self.resolve upper)
        Filter_Condition.Starts_With prefix case_sensitivity -> Filter_Condition.Starts_With (self.resolve prefix) case_sensitivity
        Filter_Condition.Ends_With prefix case_sensitivity -> Filter_Condition.Ends_With (self.resolve prefix) case_sensitivity
        Filter_Condition.Contains prefix case_sensitivity -> Filter_Condition.Contains (self.resolve prefix) case_sensitivity
        Filter_Condition.Not_Contains prefix case_sensitivity -> Filter_Condition.Not_Contains (self.resolve prefix) case_sensitivity
        Filter_Condition.Like pattern -> Filter_Condition.Like (self.resolve pattern)
        Filter_Condition.Not_Like pattern -> Filter_Condition.Not_Like (self.resolve pattern)
        Filter_Condition.Is_In values -> Filter_Condition.Is_In (values.map self.resolve)
        Filter_Condition.Not_In values -> Filter_Condition.Is_In (values.map self.resolve)
        _ -> condition

    ## PRIVATE
       Set a column.
    set : Any -> Set_Mode -> Problem_Behavior -> Table_Ref ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error
    set self column new_name set_mode=Set_Mode.Add_Or_Update on_problems=Report_Warning =
        new_underlying = self.underlying.set column new_name set_mode=set_mode on_problems=on_problems
        Table_Ref.from new_underlying

    ## PRIVATE
       Gets a list of column names
    column_names : Vector Text
    column_names self = self.underlying.column_names

## PRIVATE
Table_Ref.from (that:Table) = Table_Ref.Value that
