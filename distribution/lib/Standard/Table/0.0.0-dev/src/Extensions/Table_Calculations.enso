from Standard.Base import all
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice

import project.Data.Column.Column
import project.Data.Expression.Expression_Error
import project.Data.Set_Mode.Set_Mode
import project.Data.Table.Table
import project.Internal.Widget_Helpers
from project.Errors import No_Such_Column, Existing_Column, Missing_Column
from project.Internal.Filter_Condition_Helpers import make_filter_column

## Defines a column operation generally acting on each row producing a new
   column.
type Column_Operation
    ## Add a fixed value or another column to a column.
    Add (lhs : Column_Ref|Number) (rhs : Column_Ref|Any)

    ## Subtract a fixed value or another column to a column.
    Subtract (lhs : Column_Ref|Number) (rhs : Column_Ref|Any)

    ## Multiply a fixed value or another column to a column.
    Multiply (lhs : Column_Ref|Number) (rhs : Column_Ref|Any)

    ## Divide a fixed value or another column to a column.
    Divide (lhs : Column_Ref|Number) (rhs : Column_Ref|Any)

    ## Rounds values in the column to the specified precision.
    Round (input : Column_Ref|Number) (precision:Integer = 0) (use_bankers:Boolean = False)

    ## Rounds values in the column up to the nearest integer.
    Ceil (input : Column_Ref|Number)

    ## Rounds values in the column down to the nearest integer.
    Floor (input : Column_Ref|Number)

    ## Truncates the fractional part of values in the column.
       If a Date_Time, returns the Date.
    Truncate (input : Column_Ref|Number|Date_Time)

    ## Returns the minimum value of two columns.
    Min (lhs : Column_Ref|Number) (rhs : Column_Ref|Any)

    ## Returns the maximum value of two columns.
    Max (lhs : Column_Ref|Number) (rhs : Column_Ref|Any)

    ## Adds a period to a date/time column.
    Date_Add (input : Column_Ref|Date_Time|Date|Time_Of_Day) (length : Column_Ref|Integer) (period : Date_Period|Time_Period = Date_Period.Day)

    ## Returns part of a date/time column.
    Date_Part (input : Column_Ref|Date_Time|Date|Time_Of_Day) (period : Date_Period|Time_Period)

    ## Returns the difference between two date/time columns.
    Date_Diff (start : Column_Ref|Date_Time|Date|Time_Of_Day) (end : Column_Ref|Date_Time|Date|Time_Of_Day) (period:Date_Period|Time_Period = Date_Period.Day)

    ## Negate a boolean column.
    Not (input : Column_Ref|Boolean)

    ## Boolean AND on two boolean columns.
    And (lhs : Column_Ref|Boolean) (rhs : Column_Ref|Boolean)

    ## Boolean OR on two boolean columns.
    Or (lhs : Column_Ref|Boolean) (rhs : Column_Ref|Boolean)

    ## If input meets a condition return true value, otherwise false value.

       The `true_value` and `false_value` can be either a constant or a column.
    If (input : Column_Ref|Any) (condition:Filter_Condition) (true_value:Column_Ref|Any = True) (false_value:Column_Ref|Any = False)

    ## PRIVATE
       Interprets the `Column_Operation` as operation on columns of a provided
       table, resolving the column references.
       It creates a new column instance which can be added to the table.
    evaluate : Table_Ref -> Boolean -> Problem_Behavior -> Any
    evaluate self table:Table_Ref use_input_name:Boolean on_problems:Problem_Behavior =
        resolve_input_column value = case value of
            ref : Column_Ref -> table.resolve ref
            constant -> table.make_constant_column constant
        derived = case self of
            Column_Operation.Add lhs rhs      -> (resolve_input_column lhs) + (table.resolve rhs)
            Column_Operation.Subtract lhs rhs -> (resolve_input_column lhs) - (table.resolve rhs)
            Column_Operation.Multiply lhs rhs -> (resolve_input_column lhs) * (table.resolve rhs)
            Column_Operation.Divide lhs rhs   -> (resolve_input_column lhs) / (table.resolve rhs)

            Column_Operation.Round input precision use_bankers ->
                (resolve_input_column input).round precision use_bankers
            Column_Operation.Ceil input     -> (resolve_input_column input).ceil
            Column_Operation.Floor input    -> (resolve_input_column input).floor
            Column_Operation.Truncate input -> (resolve_input_column input).truncate

            Column_Operation.Min lhs rhs -> (resolve_input_column lhs).min (table.resolve rhs)
            Column_Operation.Max lhs rhs -> (resolve_input_column lhs).max (table.resolve rhs)

            Column_Operation.Date_Add input length period ->
                (resolve_input_column input).date_add (table.resolve length) period
            Column_Operation.Date_Part input period ->
                (resolve_input_column input).date_part period
            Column_Operation.Date_Diff start end period ->
                (resolve_input_column start).date_diff (table.resolve end) period

            Column_Operation.Not input -> (resolve_input_column input).not
            Column_Operation.And lhs rhs -> (resolve_input_column lhs) && (table.resolve rhs)
            Column_Operation.Or lhs rhs  -> (resolve_input_column lhs) || (table.resolve rhs)

            Column_Operation.If input condition true_value false_value ->
                condition_column =  make_filter_column (resolve_input_column input) (table.resolve_condition condition) on_problems
                condition_column.iif (table.resolve true_value) (table.resolve false_value)
        if use_input_name then derived.rename input_column.name else derived

    ## PRIVATE
       Create a widget for operation
    default_widget : Table_Ref -> Widget
    default_widget table:Table_Ref display=Display.Always =
        col_refs = Widget_Helpers.make_column_ref_by_name_selector table
        filter_cond = Widget_Helpers.make_filter_condition_selector table
        builder = Vector.new_builder
        fqn = Meta.get_qualified_type_name Column_Operation
        builder.append (Option "add" fqn+".Add" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "subtract" fqn+".Subtract" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "multiply" fqn+".Multiply" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "divide" fqn+".Divide" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "round" fqn+".Round" [["input", col_refs]])
        builder.append (Option "ceil" fqn+".Ceil" [["input", col_refs]])
        builder.append (Option "floor" fqn+".Floor" [["input", col_refs]])
        builder.append (Option "truncate" fqn+".Truncate" [["input", col_refs]])
        builder.append (Option "min" fqn+".Min" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "max" fqn+".Max" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "date add" fqn+".Date_Add" [["input", col_refs], ["length", col_refs]])
        builder.append (Option "date part" fqn+".Date_Part" [["input", col_refs]])
        builder.append (Option "date diff" fqn+".Date_Diff" [["start", col_refs], ["end", col_refs]])
        builder.append (Option "not" fqn+".Not" [["input", col_refs]])
        builder.append (Option "and" fqn+".And" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "or" fqn+".Or" [["lhs", col_refs], ["rhs", col_refs]])
        builder.append (Option "if" fqn+".If" [["input", col_refs], ["condition", filter_cond], ["true_value", col_refs], ["false_value", col_refs]])
        Single_Choice builder.to_vector display=display

## Reference to a column in a table.
type Column_Ref
    ## Reference to a column by name in a table.
    Name name:Text

    ## Reference to a column by index in a table.
    Index index:Integer

## PRIVATE
   A helper type allowing to resolve column references in a context of an underlying table.
type Table_Ref
    ## PRIVATE
    Value underlying

    ## PRIVATE
       Get a column.
       Column must implement all the expected calculations.
    at : Text | Integer -> Column ! No_Such_Column | Index_Out_Of_Bounds
    at self selector=0 = self.underlying.at selector

    ## PRIVATE
       Resolve a Column_Ref to a Column.
    resolve : Any -> Any ! No_Such_Column | Index_Out_Of_Bounds
    resolve self value = case value of
        Column_Ref.Name name -> self.at name
        Column_Ref.Index index -> self.at index
        _ -> value

    ## PRIVATE
    resolve_condition : Filter_Condition -> Filter_Condition
    resolve_condition self condition = case condition of
        Filter_Condition.Equal value -> Filter_Condition.Equal (self.resolve value)
        Filter_Condition.Not_Equal value -> Filter_Condition.Not_Equal (self.resolve value)
        Filter_Condition.Less value -> Filter_Condition.Less (self.resolve value)
        Filter_Condition.Equal_Or_Less value -> Filter_Condition.Equal_Or_Less (self.resolve value)
        Filter_Condition.Greater value -> Filter_Condition.Greater (self.resolve value)
        Filter_Condition.Equal_Or_Greater value -> Filter_Condition.Equal_Or_Greater (self.resolve value)
        Filter_Condition.Between lower upper -> Filter_Condition.Between (self.resolve lower) (self.resolve upper)
        Filter_Condition.Starts_With prefix case_sensitivity -> Filter_Condition.Starts_With (self.resolve prefix) case_sensitivity
        Filter_Condition.Ends_With prefix case_sensitivity -> Filter_Condition.Ends_With (self.resolve prefix) case_sensitivity
        Filter_Condition.Contains prefix case_sensitivity -> Filter_Condition.Contains (self.resolve prefix) case_sensitivity
        Filter_Condition.Not_Contains prefix case_sensitivity -> Filter_Condition.Not_Contains (self.resolve prefix) case_sensitivity
        Filter_Condition.Like pattern -> Filter_Condition.Like (self.resolve pattern)
        Filter_Condition.Not_Like pattern -> Filter_Condition.Not_Like (self.resolve pattern)
        Filter_Condition.Is_In values -> Filter_Condition.Is_In (values.map self.resolve)
        Filter_Condition.Not_In values -> Filter_Condition.Is_In (values.map self.resolve)
        _ -> condition

    ## PRIVATE
       Set a column.
    set : Any -> Set_Mode -> Problem_Behavior -> Table_Ref ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error
    set self column new_name set_mode=Set_Mode.Add_Or_Update on_problems=Report_Warning =
        new_underlying = self.underlying.set column new_name set_mode=set_mode on_problems=on_problems
        Table_Ref.from new_underlying

    ## PRIVATE
       Gets a list of column names
    column_names : Vector Text
    column_names self = self.underlying.column_names

## PRIVATE
Table_Ref.from (that:Table) = Table_Ref.Value that
