from Standard.Base import all
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice

import project.Data.Column.Column
import project.Data.Expression.Expression_Error
import project.Data.Set_Mode.Set_Mode
import project.Data.Table.Table
import project.Internal.Widget_Helpers
from project.Errors import No_Such_Column, Existing_Column, Missing_Column

@column Widget_Helpers.make_column_name_selector
@operation create_operation_widget
Table.derive_value : Text | Integer -> Column_Operation -> Text | Nothing -> Table_Ref
Table.derive_value self column:(Text|Integer) operation:Column_Operation new_name:(Text|Nothing)=Nothing =
    derive_value self column operation new_name . underlying

## PRIVATE
   Implementation of Table calculation.
   Shorthand for getting a column.
   Performing an action and setting the result to a new column.
derive_value : Table_Ref -> Text | Integer -> Column_Operation -> Text | Nothing -> Table_Ref
derive_value table:Table_Ref column:(Text|Integer) operation:Column_Operation new_name:(Text|Nothing) =
    column_object = table.at column
    column_object.if_not_error <|
        derived = case operation of
            Column_Operation.Add other -> column_object + (table.resolve other)
            Column_Operation.Subtract other -> column_object - (table.resolve other)
            Column_Operation.Date_Add length period -> column_object.date_add (table.resolve length) period
            Column_Operation.Equal to -> column_object == (table.resolve to)
            Column_Operation.Less to -> column_object < (table.resolve to)
            Column_Operation.Between lower upper -> column_object.between (table.resolve lower) (table.resolve upper)
        derived.if_not_error <| table.set derived new_name

## Defines a column operation generally acting on each row producing a new
   column.
type Column_Operation
    ## Add a fixed value or another column to a column.
    Add other:(Column_Ref|Any)

    ## Subtract a fixed value or another column to a column.
    Subtract other:(Column_Ref|Any)

    ## Adds a period to a date/time column.
    Date_Add length:(Column_Ref|Integer) period:Date_Period=Date_Period.Day

    ## Row-based equality checking if a column is equal to another column or
       value.
    Equal to:(Column_Ref|Any)

    ## Row-based comparison checking if a column is less than another column
       or value.
    Less than:(Column_Ref|Any)

    ## Row-based comparison checking if a column is between two other columns
       or values.
    Between lower upper

## PRIVATE
   Create a widget for operation
create_operation_widget : Table_Ref -> Widget
create_operation_widget table:Table_Ref display=Display.Always =
    col_names_options = table.column_names.map (name -> Option name "(Column_Ref.Name "+name.pretty+")")
    col_names display=Display.Always = Single_Choice values=col_names_options display=display
    builder = Vector.new_builder
    fqn = Meta.get_qualified_type_name Column_Operation
    builder.append (Option "add" fqn+".Add" [["other", col_names]])
    builder.append (Option "subtract" fqn+".Subtract" [["other", col_names]])
    builder.append (Option "date add" fqn+".Date_Add" [["length", col_names]])
    builder.append (Option "equal" fqn+".Equal" [["to", col_names]])
    builder.append (Option "less" fqn+".Less" [["than", col_names]])
    builder.append (Option "between" fqn+".Between" [["lower", col_names], ["upper", col_names]])
    Single_Choice builder.to_vector display=display

## Reference to a column in a table.
type Column_Ref
    ## Reference to a column by name in a table.
    Name name:Text

    ## Reference to a column by index in a table.
    Index index:Integer

## PRIVATE
   Private type class for defining a table against
type Table_Ref
    ## PRIVATE
    Value underlying

    ## PRIVATE
       Get a column.
       Column must implement all the expected calculations.
    at : Text | Integer -> Column ! No_Such_Column | Index_Out_Of_Bounds
    at self selector=0 = self.underlying.at selector

    ## PRIVATE
       Resolve a Column_Ref to a Column.
    resolve : Any -> Any ! No_Such_Column | Index_Out_Of_Bounds
    resolve self value = case value of
        Column_Ref.Name name -> self.at name
        Column_Ref.Index index -> self.at index
        _ -> value

    ## PRIVATE
       Set a column.
    set : Any -> Set_Mode -> Problem_Behavior -> Table_Ref ! Existing_Column | Missing_Column | No_Such_Column | Expression_Error
    set self column new_name set_mode=Set_Mode.Add_Or_Update on_problems=Report_Warning =
        new_underlying = self.underlying.set column new_name set_mode=set_mode on_problems=on_problems
        Table_Ref.from new_underlying

    ## PRIVATE
       Gets a list of column names
    column_names : Vector Text
    column_names self = self.underlying.column_names

## PRIVATE
Table_Ref.from (that:Table) = Table_Ref.Value that
