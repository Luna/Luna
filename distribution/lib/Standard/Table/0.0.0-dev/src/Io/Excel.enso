from Standard.Base import Integer, Text, Nothing, Boolean, Illegal_Argument_Error, Any, Error, Panic, File, Vector, False
from Standard.Base.Error.Problem_Behavior as Problem_Behavior_Module import Problem_Behavior

import Standard.Table.Data.Table

polyglot java import org.enso.table.format.xlsx.Range as Java_Range
polyglot java import org.enso.table.format.xlsx.Reader
polyglot java import java.lang.IllegalArgumentException
polyglot java import java.io.IOException


## Specified the part of an Excel Workbook to Read
type Excel_Section
    ## Gets a list of sheets within a workbook
    type Sheet_Names

    ## Gets a list of named ranges within a workbook
    type Range_Names

    ## Gets the data from a specific sheet. Column names are the Excel column names.
    type Sheet (sheet:(Integer|Text)) (skip_rows:(Integer|Nothing)=Nothing) (row_limit:(Integer|Nothing)=Nothing)

    ## Gets a specific range (taking either a defined name or external style address) from the workbook
    type Range (address:(Text|Excel_Range)) (skip_rows:(Integer|Nothing)=Nothing) (row_limit:(Integer|Nothing)=Nothing)


## Specifies a range within Excel and provides various ways of
type Excel_Range
    type Excel_Range java_range:Java_Range

    ## Gets the name of the sheet
    sheet_name : Text
    sheet_name = this.java_range.getSheetName

    ## Gets the index (1-based) of the top row of the range
       Return Nothing if referring to a complete column
    top_row : Integer | Nothing
    top_row = if this.java_range.isWholeColumn then Nothing else
        this.java_range.getTopRow

    ## Gets the index (1-based) of the bottom row of the range
       Return Nothing if referring to a complete column
    bottom_row : Integer | Nothing
    bottom_row = if this.java_range.isWholeColumn then Nothing else
        this.java_range.getBottomRow

    ## Gets the index (1-based) of the left column of the range
       Return Nothing if referring to a complete row
    left_column : Integer | Nothing
    left_column = if this.java_range.isWholeRow then Nothing else
        this.java_range.getLeftColumn

    ## Gets the index (1-based) of the right column of the range
       Return Nothing if referring to a complete column
    right_column : Integer | Nothing
    right_column = if this.java_range.isWholeRow then Nothing else
        this.java_range.getRightColumn

    ## Gets the address to this in A1 format.
    address : Text
    address = this.java_range.getAddress

    ## Display the Excel_Range
    to_text : Text
    to_text = "Excel_Range " + this.address

    ## Validates if a column index (1-based) is within the valid range for Excel.
    is_valid_column : Integer -> Integer -> Boolean
    is_valid_column column (limit=16384) = (column > 0) && (column <= limit)

    ## Validates if a row index (1-based) is within the valid range for Excel.
    is_valid_row : Integer -> Integer -> Boolean
    is_valid_row row (limit=1048576) = (row > 0) && (row <= limit)

    ## Given a column name parse to the index (1-based) or return index unchanged.
    column_index : (Text|Integer) -> Integer
    column_index column =
        if column.is_an Integer then column else Java_Range.parseA1Column column

    ## Create a Range from an address
    from_address : Text -> Excel_Range
    from_address address =
        Panic.catch IllegalArgumentException (Excel_Range (Java_Range.new address)) caught_panic->
            Error.throw (Illegal_Argument_Error caught_panic.payload.cause.getMessage)

    ## Create a Range for a single cell.
    for_cell : Text -> (Text|Integer) -> Integer -> Excel_Range
    for_cell sheet column row =
        col_index = Excel_Range.column_index column

        col_valid = here.validate (Excel_Range.is_valid_column col_index) ("Invalid column for Excel: " + column.to_text + ".") _
        all_valid = here.validate (Excel_Range.is_valid_row row) ("Invalid row for Excel: " + row.to_text + ".") (col_valid _)

        all_valid <| Excel_Range (Java_Range.new sheet col_index row col_index row)

    ## Create a Range for a range of cells.
    for_range : Text -> (Text|Integer) -> Integer -> (Text|Integer) -> Integer -> Excel_Range
    for_range sheet left top right bottom =
        left_index = Excel_Range.column_index left
        right_index = Excel_Range.column_index right

        left_valid = here.validate (Excel_Range.is_valid_column left_index) ("Invalid left column for Excel: " + left.to_text + ".") _
        right_valid = here.validate (Excel_Range.is_valid_column right_index) ("Invalid right column for Excel: " + right.to_text + ".") (left_valid _)
        top_valid = here.validate (Excel_Range.is_valid_row top) ("Invalid top row for Excel: " + top.to_text + ".") (right_valid _)
        all_valid = here.validate (Excel_Range.is_valid_row bottom) ("Invalid bottom row for Excel: " + bottom.to_text + ".") (top_valid _)

        all_valid <| Excel_Range (Java_Range.new sheet left_index top right_index bottom)

    ## Create an Excel_Range for a set of columns.
    for_columns : Text -> (Text|Integer) -> (Text|Integer) -> Excel_Range
    for_columns sheet left (right=left) =
        left_index = Excel_Range.column_index left
        right_index = Excel_Range.column_index right

        left_valid = here.validate (Excel_Range.is_valid_column left_index) ("Invalid left column for Excel: " + left.to_text + ".") _
        all_valid = here.validate (Excel_Range.is_valid_column right_index) ("Invalid right column for Excel: " + right.to_text + ".") (left_valid _)

        all_valid <| Excel_Range (Java_Range.new sheet left_index 0 right_index 0)

    ## Create an Excel_Range for a set of rows.
    for_rows : Text -> Integer -> Integer -> Excel_Range
    for_rows sheet top (bottom=top) =
        top_valid = here.validate (Excel_Range.is_valid_row top) ("Invalid top row for Excel: " + top.to_text + ".") _
        all_valid = here.validate (Excel_Range.is_valid_row bottom) ("Invalid bottom row for Excel: " + bottom.to_text + ".") (top_valid _)

        all_valid <| Excel_Range (Java_Range.new sheet 0 top 0 bottom)


## PRIVATE
   Wrapper for validation
validate : Boolean -> Text -> Any
validate ~validation ~error_message ~wrapped =
    if validation then wrapped else Error.throw (Illegal_Argument_Error error_message)

read_excel : File -> Excel_Section -> Problem_Behavior -> Boolean -> (Table | Vector)
read_excel file section on_problems xls_format=False =
    reader stream = case section of
        Sheet_Names -> Vector.Vector (Reader.readSheetNames stream xls_format)
        Range_Names -> Vector.Vector (Reader.readRangeNames stream xls_format)
        Sheet sheet skip_rows row_limit ->
            Table.Table <|
                if sheet.is_an Integer then (Reader.readSheetByIndex stream sheet skip_rows row_limit xls_format) else
                    Reader.readSheetByName stream sheet skip_rows row_limit xls_format
        Range address skip_rows row_limit ->
            Table.Table <|
                range = (if address.is_an Excel_Range then address else Excel_Range.from_address address)
                Reader.readRange stream range.java_range skip_rows row_limit xls_format

    file_failure caught_panic = File.wrap_io_exception file caught_panic.payload.cause.getCause
    Panic.catch IOException handler=file_failure <|
        file.with_input_stream [File.Option.Read] stream->
            stream.with_java_stream reader
