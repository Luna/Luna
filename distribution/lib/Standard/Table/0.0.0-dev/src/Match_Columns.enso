from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Runtime.State
from Standard.Base.Runtime import assert

import project.Columns_To_Keep.Columns_To_Keep
import project.Constants.Report_Unmatched
from project.Errors import Column_Count_Mismatch, No_Output_Columns, Unmatched_Columns

## Specifies a column matching strategy.
type Match_Columns
    ## Columns are matched by Name.
    By_Name

    ## Columns are matched by Position.

       Note: column names are not compared.
    By_Position

## PRIVATE
   A helper that encapsulates the common backend-agnostic logic of matching
   columns in `Table.union`.

   It matches columns according to the provided matching settings and returns a
   list of column sets to be merged.

   Each column set consists of a name of the resulting column and a list of
   indices for columns in corresponding tables that will be merged to form this
   result column. The first column index corresponds to the first table in the
   input and so on. If no column corresponding to a given column set was matched
   in a particular table, its entry will be contain `Nothing` instead.

   The column sets are returned in the order in which the corresponding result
   columns should appear in the resulting table.

   The method assumes at least one table is provided in its input.
match_columns tables matching_mode columns_to_keep problem_builder =
    assert tables.not_empty
    case matching_mode of
        Match_Columns.By_Name -> match_columns_by_name tables columns_to_keep problem_builder
        Match_Columns.By_Position -> match_columns_by_position tables columns_to_keep problem_builder

## PRIVATE
match_columns_by_name tables columns_to_keep problem_builder = case columns_to_keep of
    Columns_To_Keep.In_List list -> if list.is_empty then Error.throw (Illegal_Argument.Error "The list of columns to keep cannot be empty.") else
        output_column_names = list.distinct
        column_counts = find_column_counts tables
        all_tables_count = tables.length
        unmatched_column_names = output_column_names.filter name->
            column_counts.get name 0 < all_tables_count
        if unmatched_column_names.not_empty then
            problem_builder.report_other_warning (Unmatched_Columns.Error unmatched_column_names)
        build_column_set_by_name tables output_column_names
    Columns_To_Keep.In_All ->
        column_counts = find_column_counts tables
        # This will only include columns that were present in all tables.
        all_tables_count = tables.length
        common_column_names = tables.first.column_names.filter name->
            column_counts.at name == all_tables_count
        if common_column_names.is_empty then Error.throw (No_Output_Columns.Error "Unmatched columns are set to be dropped, but no common column names were found.") else
            dropped_column_names = tables.map .column_names
                . flatten
                . filter (name-> column_counts.at name < all_tables_count)
                . distinct
            if dropped_column_names.not_empty then
                problem_builder.report_other_warning (Unmatched_Columns.Error dropped_column_names)
            build_column_set_by_name tables common_column_names
    _ ->
        output_column_names = distinct_columns_in_appearance_order tables
        report_missing = case columns_to_keep of
            Columns_To_Keep.In_Any -> False
            Columns_To_Keep.In_Any_Warn_On_Missing -> True
        if report_missing then
            column_counts = find_column_counts tables
            all_tables_count = tables.length
            ## We iterate over output column names to get deterministic
              order of unmatched columns.
            unmatched_column_names = output_column_names.filter name->
                column_counts.get name 0 < all_tables_count
            if unmatched_column_names.not_empty then
                problem_builder.report_other_warning (Unmatched_Columns.Error unmatched_column_names)
        build_column_set_by_name tables output_column_names

## PRIVATE
   Common logic for computing the final result of by-name matching.
   Once the set of output column names is determined, we compute the
   `Column_Set` by finding the corresponding column indices in each table (if found).
build_column_set_by_name tables output_column_names =
    output_column_names.map name->
        column_indices = tables.map table->
            # TODO this gets O(N^2), we should optimize
            table.column_names.index_of name
        Column_Set.Value name column_indices

## PRIVATE
match_columns_by_position tables columns_to_keep problem_builder = case columns_to_keep of
    Columns_To_Keep.In_List _ ->
        Error.throw (Illegal_Argument.Error "The In_List option for `columns_to_keep` cannot be used together with `By_Position` matching.")
    _ ->
        column_counts = tables.map table-> table.columns.length
        minmax = column_counts.compute_bulk [Statistic.Minimum, Statistic.Maximum]
        min = minmax.first
        max = minmax.second
        columns_to_take = case columns_to_keep of
            Columns_To_Keep.In_All -> min
            Columns_To_Keep.In_Any -> max
            Columns_To_Keep.In_Any_Warn_On_Missing -> max
        has_unmatched_columns = min != max
        if has_unmatched_columns then
            should_report_unmatched = case columns_to_keep of
                Columns_To_Keep.In_All -> True
                Columns_To_Keep.In_Any -> False
                Columns_To_Keep.In_Any_Warn_On_Missing -> True
            # TODO should we rephrase the wording of the error? should it depend on In_Any_Warn_On_Missing vs In_All?
            if should_report_unmatched then
                problem_builder.report_other_warning (Column_Count_Mismatch.Error max min)

        name_source = case columns_to_keep of
            Columns_To_Keep.In_All -> tables.first
            _ ->
                # We find the first table that has all the columns present.
                tables.find table-> table.columns.length == columns_to_take

        column_sets = Vector.new columns_to_take i->
            name = name_source.at i . name
            column_ids = tables.map table->
                column_count = table.columns.length
                if i >= column_count then Nothing else i
            Column_Set.Value name column_ids
        column_sets

type Column_Set
    ## PRIVATE
    Value (name : Text) (column_indices : Vector Integer)

    ## PRIVATE
    resolve_columns self (all_tables : Vector) = self.column_indices.zip all_tables i-> parent_table->
        case i of
            Nothing -> Nothing
            _ : Integer -> parent_table.at i

## PRIVATE
   Returns a map indicating in how many tables did a column with a given name appear.
find_column_counts tables =
    tables.fold Map.empty current->table->
        table.columns.fold current counts-> column->
            name=column.name
            new_count = counts.get name 0 + 1
            counts.insert name new_count

## PRIVATE
   Returns a list of distinct column names, in the order of first appearance,
   starting from the first table.
distinct_columns_in_appearance_order tables =
    Vector.build names_builder->
        tables.fold Map.empty current-> table->
            table.columns.fold current seen_names-> column->
                name = column.name
                if seen_names.contains_key name then seen_names else
                    names_builder.append name
                    seen_names.insert name True
