from Standard.Base import all

polyglot java import org.enso.table.data.column.builder.object.Builder
polyglot java import org.enso.table.data.column.storage.Storage as Java_Storage

## Represents different types of underlying storage for Columns.
type Storage
    ## A column storing text data.
    Text

    ## A column storing integer data.
    Integer

    ## A column storing decimal data.
    Decimal

    ## A column storing boolean data.
    Boolean

    ## A column storing dates.
    Date

    ## A column storing date-times.
    Date_Time

    ## A column storing time-of-day.
    Time_Of_Day

    ## A column storing arbitrary data.
    Any

    ## PRIVATE
       Enumerates storage types in a way that is consistent with
       `org.enso.table.data.Storage.Storage`, i.e.
       `storage_type.at org.enso.table.data.Storage.Type.LONG` will yield the
       corresponding `Storage.Integer`.
    types : Vector Storage
    types = [Storage.Any, Storage.Integer, Storage.Decimal, Storage.Text, Storage.Boolean, Storage.Date, Storage.Time_Of_Day, Storage.Date_Time]

    ## PRIVATE
       Converts a `Storage` to a Java storage id.
    to_java : Integer
    to_java self = case self of
        Storage.Any -> Java_Storage.Type.OBJECT
        Storage.Integer -> Java_Storage.Type.LONG
        Storage.Decimal -> Java_Storage.Type.DOUBLE
        Storage.Text -> Java_Storage.Type.STRING
        Storage.Boolean -> Java_Storage.Type.BOOLEAN
        Storage.Date -> Java_Storage.Type.DATE
        Storage.Time_Of_Day -> Java_Storage.Type.TIME_OF_DAY
        Storage.Date_Time -> Java_Storage.Type.DATE_TIME

    ## PRIVATE
       Creates a column storage builder for the given storage type.
    make_builder : Storage -> Integer -> Builder
    make_builder storage initial_size=64 =
        Builder.getForType storage.to_java initial_size
