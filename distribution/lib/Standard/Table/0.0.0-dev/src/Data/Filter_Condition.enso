from Standard.Base import all
from Standard.Table.Data.Table import Table
from Standard.Table.Data.Column import Column
from Standard.Table.Data.Value_Type import Value_Type

from Standard.Table.Data.Filter_Condition.Filter_Condition import all

type Filter_Condition
    ## Is less than a value (or another column)?
    Less than:(Column|Any)

    ## Is less than or equal to a value (or another column)?
    Equal_Or_Less than:(Column|Any)

    ## Is equal to a value (or another column)?
    Equal to:(Column|Any)

    ## Is greater than or equal to a value (or another column)?
    Equal_Or_Greater than:(Column|Any)

    ## Is greater than a value (or another column)?
    Greater than:(Column|Any)

    ## Is not equal to a value (or another column)?
    Not_Equal to:(Column|Any)

    ## Is between (inclusive) two values (or columns)?'
    Between lower:(Column|Any) upper:(Column|Any)

    ## Does the value start with a prefix (Text only)?
    Starts_With prefix:Text

    ## Does the value end with a suffix (Text only)?
    Ends_With suffix:Text

    ## Does the value contain the needle (Text only)?
    Contains substring:Text

    ## Is equal to Nothing?
    Is_Nothing

    ## Is not equal to Nothing?
    Not_Nothing

    ## Is the value equal to True (Boolean only)?
    Is_True

    ## Is the value equal to False (Boolean only)?
    Is_False

## PRIVATE
   A helper function gathering the common logic that generates a boolean mask
   from a given source column and a filter condition. It contains logic common
   for all backends.

   It also performs validation and will throw errors if unexpected column types
   are encountered.
make_filter_column source_column filter_condition = case filter_condition of
    Less value -> (source_column < value)
    Equal_Or_Less value -> (source_column <= value)
    Equal value -> (source_column == value)
    Equal_Or_Greater value -> (source_column >= value)
    Greater value -> (source_column > value)
    Not_Equal value -> (source_column != value)
    Between lower upper -> ((source_column >= lower) && (source_column <= upper))
    Starts_With prefix -> case source_column.value_type of
        Value_Type.Char _ _ -> source_column.starts_with prefix
        _ -> Error.throw (Illegal_Argument_Error "`Starts_With` expected a text column.")
    Ends_With suffix -> case source_column.value_type of
        Value_Type.Char _ _ -> source_column.ends_with suffix
        _ -> Error.throw (Illegal_Argument_Error "`Ends_With` expected a text column.")
    Contains substring -> case source_column.value_type of
        Value_Type.Char _ _ -> source_column.contains substring
        _ -> Error.throw (Illegal_Argument_Error "`Contains` expected a text column.")
    Is_Nothing -> source_column.is_missing
    Not_Nothing -> source_column.is_missing.not
    Is_True -> case source_column.value_type of
        Value_Type.Boolean -> source_column
        _ -> Error.throw (Illegal_Argument_Error "`Is_True` expected a Boolean column.")
    Is_False -> case source_column.value_type of
        Value_Type.Boolean -> source_column.not
        _ -> Error.throw (Illegal_Argument_Error "`Is_False` expected a Boolean column.")
