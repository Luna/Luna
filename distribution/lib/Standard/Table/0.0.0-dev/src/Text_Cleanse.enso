from Standard.Base import all
import project.Column.Column
import project.Internal.Widget_Helpers

## Defines a Text_Cleanse operation
type Text_Cleanse
   Duplicate_Whitespace
   Leading_Whitespace
   Trailing_Whitespace
   All_Whitespace
   Leading_Numbers
   Trailing_Numbers
   Non_ASCII
   ## Punctuation
     Numbers
     Symbols
     
     Tabs
     Letters

   ## Apply the cleanse operation to the text.
   apply self input:Cleansable_Text -> Any =
      case self of
         Text_Cleanse.Leading_Whitespace -> input.replace "^\s+" ""
         Text_Cleanse.Trailing_Whitespace -> input.replace "\s+$" ""
         Text_Cleanse.Duplicate_Whitespace -> input.replace "(\s)+" "$1"
         Text_Cleanse.All_Whitespace -> input.replace "\s+" ""
         Text_Cleanse.Leading_Numbers -> input.replace "^\d+" ""
         Text_Cleanse.Trailing_Numbers -> input.replace "\d+$" ""
         Text_Cleanse.Non_ASCII -> input.replace "[^\x00-\x7F]" ""
         ## Text_Cleanse.Punctuation -> input.replace "[^\w\s]" ""
           Text_Cleanse.Numbers -> input.replace "\d" ""
           Text_Cleanse.Symbols -> input.replace "[^\w\s]" ""
           
           Text_Cleanse.Tabs -> input.replace "\t" ""
           Text_Cleanse.Letters -> input.replace "[a-zA-Z]" ""

## PRIVATE 
   Defines the interface for cleansable object.
type Cleansable_Text
   Value backer

   ## PRIVATE
   replace self pattern:Text replace_with:Text -> Any =
      case self.backer of 
         _ : Column -> (self.backer.text_replace (regex pattern) replace_with).rename self.backer.name
         _ : Text -> self.backer.replace (regex pattern) replace_with

## PRIVATE
Cleansable_Text.from (that:Text) = Cleansable_Text.Value that

## PRIVATE
Cleansable_Text.from (that:Column) = Cleansable_Text.Value that

## Extension method to add cleanse to Text.
@remove Widget_Helpers.make_data_cleanse_vector_selector
Text.cleanse : Vector Text_Cleanse -> Text
Text.cleanse self remove =
   remove.fold self (current-> tc-> tc.apply current)
