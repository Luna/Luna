from Standard.Base import all

import project.Data.Column.Column
import project.Data.Set_Mode.Set_Mode
import project.Data.Table.Table
import project.Internal.Problem_Builder.Problem_Builder
import project.Internal.Unique_Name_Strategy.Unique_Name_Strategy

from project.Data.Type.Value_Type import Auto

## PRIVATE
   Splits a column of text into a set of new columns.
   See `Table.split_to_columns`.
split_to_columns : Table -> Text | Integer -> Text -> Auto | Integer -> Problem_Behavior -> Table
split_to_columns table column delimiter="," column_count=Auto on_problems=Report_Error =
    _ = [column_count, on_problems]
    transform_table_column_to_columns table column (ignore_nothing (x-> x.split delimiter))

split_to_rows : Table -> Text | Integer -> Text -> Problem_Behavior -> Table
split_to_rows table column delimiter="," on_problems=Report_Error =
    _ = on_problems
    multiply_rows table column (x-> x.split delimiter)

## Private
   Transform a column by applying the given function to the values in the
   column. The function produces multiple outputs, so each row is duplicated,
   with each row getting a distinct output value in place of the original
   input value. The other column values are just duplicated.

   Arguments:
   - table: The table to transform.
   - input_column: The column to transform.
   - function: A function that transforms a single element of `input_column`
     to multiple values.
multiply_rows : Table -> Text | Integer -> (Any -> Vector Any) -> Table
multiply_rows table column function =
    input_column = table.at column

    # Transform each input value to an output set.
    output_value_sets = input_column.to_vector.map function
    output_value_set_sizes = output_value_sets.map .length
    num_input_rows = table.row_count
    num_output_rows = output_value_set_sizes.fold 0 (+)

    ## Generate new columns for the output table. For the input_column, the
       new column consists of the concatenation of the output value sets. For
       each of the other columns, it consists of the elements of the input
       column repeated a number times, with that number equal to the size of
       the corresponding output value set.
    new_columns = table.columns.map column->
        builder = Vector.new_builder num_output_rows
        case column.name == input_column.name of
            True ->
                # The transformed column: concatenate output value sets.
                output_value_sets.map values->
                    builder.append_vector_range values
            False ->
                # The other columns: repeat the input values.
                column_vector = column.to_vector
                0.up_to num_input_rows . map i->
                    repetition_count = output_value_set_sizes.at i
                    input_value = column_vector.at i
                    0.up_to repetition_count . map _->
                        builder.append input_value
        Column.from_vector column.name (builder.to_vector)
    Table.new new_columns

## PRIVATE
   Tokenize a column of text into a set of new columns.
   See `Table.tokenize_to_columns`.
tokenize_to_columns : Table -> Text | Integer -> Text -> Case_Sensitivity -> Auto | Integer -> Problem_Behavior -> Table
tokenize_to_columns table column pattern case_sensitivity column_count on_problems =
    _ = [column_count, on_problems]
    transform_table_column_to_columns table column (ignore_nothing (x-> x.tokenize pattern case_sensitivity))

tokenize_to_rows : Table -> Text | Integer -> Text -> Case_Sensitivity -> Problem_Behavior -> Table
tokenize_to_rows _ _ = 1

## PRIVATE
   Transform a column into a set of columns. Takes a function that maps a
   single element of the input column to a vector of output values. The
   vectors of output values are padded with Nothing to be the same length.

   Arguments:
   - input_column: The column to transform.
   - function: A function that transforms a single element of `input_column`
     to multiple values.
map_column_to_multiple : Column -> (Any -> Vector Any) -> Vector Column
map_column_to_multiple input_column function =
    result_row_vectors = input_column.to_vector.map value-> function value
    result_column_vectors = transpose_with_pad result_row_vectors
    result_column_vectors.map_with_index i-> cv->
        name = input_column.name + "_" + i.to_text
        Column.from_vector name cv

## PRIVATE
   Transform a table by transforming a column into a set of columns. Takes a
   function that maps a single element of the input column to a vector of output
   values. The original column is replaced by the new columns.

   Arguments:
   - table: The table to transform.
   - input_column: The column to transform.
   - function: A function that transforms a single element of `input_column`
     to multiple values.
transform_table_column_to_columns : Table -> Text | Integer -> (Any -> Vector Any) -> Table
transform_table_column_to_columns table column function =
    input_column = table.at column
    new_columns = map_column_to_multiple input_column function
    replace_column_with_columns table column new_columns

replace_column_with_columns : Table -> Column -> Vector Column -> Table
replace_column_with_columns table old_column new_columns =
    with_column_removed = table.remove_columns old_column error_on_missing_columns=True
    new_columns.fold with_column_removed (t-> c-> t.set c set_mode=Set_Mode.Add)

## PRIVATE
   Swap rows and columns of a vector-of-vectors, padding each vector to be the
   same length first.
   Assumes both dimensions are non-zero.
transpose_with_pad : Vector (Vector Any) -> Vector (Vector Any)
transpose_with_pad vecs = transpose (pad_vectors vecs Nothing)

## PRIVATE
   Swap rows and columns of a vector-of-vectors.
   Assumes both dimensions are non-zero.
transpose : Vector (Vector Any) -> Vector (Vector Any)
transpose vecs =
    num_output_rows = vecs.length
    num_output_cols = vecs.first.length
    builders = (0.up_to num_output_cols).map _-> Vector.new_builder num_output_rows
    vecs.map vec->
        vec.map_with_index i-> v->
            builders.at i . append v
    builders.map .to_vector

## PRIVATE
   Pad vectors so they have the same length.
pad_vectors : Vector (Vector Any) -> Any -> Vector (Vector Any)
pad_vectors vecs pad_value =
  length = maximum <| vecs.map .length
  vecs.map v-> v.pad length pad_value

## PRIVATE
   Return the maximum value of the vector.
   Throws Empty_Error if the vector is empty.
maximum : Vector Any -> Vector Any
maximum vec = if vec.is_empty then Nothing else
    vec.reduce (a-> b-> a.max b)

## PRIVATE
   Wrap a function so that it returns Nothing if passed Nothing
ignore_nothing : (Any -> Any) -> (Any -> Any)
ignore_nothing function = x-> case x of
    _ : Nothing -> Nothing
    _ -> function x
