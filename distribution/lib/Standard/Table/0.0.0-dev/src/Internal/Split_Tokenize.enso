from Standard.Base import all

import project.Data.Column.Column
import project.Data.Set_Mode.Set_Mode
import project.Data.Table.Table
import project.Internal.Problem_Builder.Problem_Builder
import project.Internal.Unique_Name_Strategy.Unique_Name_Strategy

from project.Data.Type.Value_Type import Auto

## PRIVATE
   Splits a column of text into a set of new columns.
   See `Table.split_to_columns`.
table_split_to_columns : Table -> Text | Integer -> Text -> Auto | Integer -> Problem_Behavior -> Table
table_split_to_columns table column delimiter="," column_count=Auto on_problems=Report_Error =
    _ = [column_count, on_problems]
    input_column = table.at column
    new_columns = map_column_to_multiple input_column (ignore_nothing (x-> x.split delimiter))
    replace_column_with_columns table column new_columns

split_to_rows : Table -> Text | Integer -> Text -> Problem_Behavior -> Table
split_to_rows = 1
tokenize_to_columns : Table -> Text | Integer -> Text -> Case_Sensitivity -> Auto | Integer -> Problem_Behavior -> Table
tokenize_to_columns _ _ = 1
tokenize_to_rows : Table -> Text | Integer -> Text -> Case_Sensitivity -> Problem_Behavior -> Table
tokenize_to_rows _ _ = 1

## PRIVATE
   Transform a column into a set of columns. Takes a function that maps a
   single element of the input column to a vector of output values. The
   vectors of output values are padded with Nothing to be the same length.

   Arguments:
   - input_column: The column to transform
   - function: A function that transforms a single element of `input_column`
     to multiple values.
map_column_to_multiple : Column -> (Any -> Vector Any) -> Vector Column
map_column_to_multiple input_column function =
    result_row_vectors = input_column.to_vector.map value-> function value
    result_column_vectors = transpose_with_pad result_row_vectors
    result_column_vectors.map_with_index i-> cv->
        name = input_column.name + "_" + i.to_text
        Column.from_vector name cv

replace_column_with_columns : Table -> Column -> Vector Column -> Table
replace_column_with_columns table old_column new_columns =
    with_column_removed = table.remove_columns old_column error_on_missing_columns=True
    new_columns.fold with_column_removed (t-> c-> t.set c set_mode=Set_Mode.Add)

## PRIVATE
   Swap rows and columns of a vector-of-vectors, padding each vector to be the
   same length first.
   Assumes both dimensions are non-zero.
transpose_with_pad : Vector (Vector Any) -> Vector (Vector Any)
transpose_with_pad vecs = transpose (pad_vectors vecs Nothing)

## PRIVATE
   Swap rows and columns of a vector-of-vectors.
   Assumes both dimensions are non-zero.
transpose : Vector (Vector Any) -> Vector (Vector Any)
transpose vecs =
    num_output_rows = vecs.first.length
    builders = vecs.map _-> Vector.new_builder num_output_rows
    vecs.map vec->
        vec.map_with_index i-> v->
            builders.at i . append v
    builders.map .to_vector

## PRIVATE
   Pad vectors so they have the same length.
pad_vectors : Vector (Vector Any) -> Any -> Vector (Vector Any)
pad_vectors vecs pad_value =
  length = maximum <| vecs.map .length
  vecs.map v-> v.pad length pad_value

## PRIVATE
   Return the maximum value of the vector.
   Throws Empty_Error if the vector is empty.
maximum : Vector Any -> Vector Any
maximum vec = if vec.is_empty then Nothing else
    vec.reduce (a-> b-> a.max b)

## PRIVATE
   Wrap a function so that it returns Nothing if passed Nothing
ignore_nothing : (Any -> Any) -> (Any -> Any)
ignore_nothing function = x-> case x of
    _ : Nothing -> Nothing
    _ -> function x
