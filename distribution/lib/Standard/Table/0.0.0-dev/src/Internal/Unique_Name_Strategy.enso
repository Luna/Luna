from Standard.Base import Any, Vector, Text, Nothing

polyglot java import org.enso.table.util.NameDeduplicator


## Creates a new Unique_Name_Strategy instance.

   This is a mutable data structure, that allows for creating a collection
   of columns names and making them unique. It will track any duplicates or
   invalid names thet are passed to it.

   > Example
     Construct a set of unique names from two duplicate lists

         unique_name_strategy = Unique_Name_Strategy.new
         unique_names = ["A","B","A",""] . map unique_name_strategy.make_unique
         duplicates = unique_name_strategy.renames
         invalid = unique_name_strategy.invalid_names
Unique_Name_Strategy.new : Unique_Name_Strategy
Unique_Name_Strategy.new = Unique_Name_Strategy NameDeduplicator.new


## PRIVATE
   Creates a Unique_Name_Strategy

   Arguments:
   - deduplicator: Name deduplicator
type Unique_Name_Strategy deduplicator


## Vector of any duplicates renamed
Unique_Name_Strategy.renames : Vector
Unique_Name_Strategy.renames = Vector.Vector this.getDuplicatedNames


## Vector of any invalid names
Unique_Name_Strategy.invalid_names : Vector
Unique_Name_Strategy.invalid_names = Vector.Vector this.getInvalidNames


## Takes a value and converts to a valid (but not necessarily unique) name

   Arguments:
   - name: The column name to make valid.

   > Example
         strategy = Unique_Name_Strategy.new
         strategy.make_valid_name "" # returns "Column"
         strategy.make_valid_name 1 # returns "1"
         strategy.make_valid_name "Hello" # returns "Hello"
Unique_Name_Strategy.make_valid_name : Any -> Text
Unique_Name_Strategy.make_valid_name input =
    case input of
        Text -> this.deduplicator.makeValid input
        Nothing -> this.make_valid_name ""
        _ -> this.make_valid_name input.to_text


## Takes a name and gets a unique version

   Arguments:
   - name: The column name to make unique.

   > Example
         strategy = Unique_Name_Strategy.new
         strategy.make_unique "A" # returns "A"
         strategy.make_unique "A" # returns "A_1"
Unique_Name_Strategy.make_unique : Text -> Text
Unique_Name_Strategy.make_unique name = this.deduplicator.makeUnique name
