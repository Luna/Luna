from Standard.Base import all

import project.Data.Join_Condition.Join_Condition
import project.Internal.Problem_Builder.Problem_Builder

type Join_Condition_Resolver
    ## PRIVATE
    Value at make_equals make_equals_ignore_case make_between

    ## PRIVATE
    resolve : Vector Join_Condition
    resolve conditions on_problems =
        redundant_names = Vector.new_builder
        problem_builder = Problem_Builder.new

        converted = conditions.map condition-> case condition of
            Join_Condition.Equals left_selector right_selector ->
                # TODO handle errors
                left = self.at left_selector
                right = self.at right_selector
                if left.name == right.name then
                    redundant_names.append right.name
                self.make_equals left right
            Join_Condition.Equals_Ignore_Case left_selector right_selector ->
                unimplemented "TODO"
            Join_Condition.Between left_selector right_lower_selector right_upper_selector ->
                unimplemented "TODO"
        problem_builder.attach_problems_after on_problems <|
            Join_Condition_Resolution.result converted redundant_names.to_vector

type Join_Condition_Resolution
    Result (conditions : Vector Any) (redundant_column_names : Vector Text)
