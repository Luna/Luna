from Standard.Base import all
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Unimplemented.Unimplemented

import project.Data.Table.Table

## PRIVATE
expand_column table column fields prefix =
    column_object = table.at column
    expanded = create_table_from_objects column_object.to_vector fields

    output_builder = Vector.new_builder table.column_count+expanded.column_count-1

    ## Resolve names
    resolved_prefix = if prefix.is_nothing then column_object.name+" " else prefix
    naming_strategy = table.column_naming_helper.create_unique_name_strategy
    naming_strategy.mark_used (table.column_names.filter (c->c!=column_object.name))
    new_names = naming_strategy.make_all_unique (expanded.column_names.map n-> resolved_prefix+n)
    new_columns = new_names.zip expanded.columns (n->c-> c.rename n)

    ## Create Merged Columns
    table.columns.each c->
        if c.name != column_object.name then output_builder.append c else
            output_builder.append_vector_range new_columns

    Table.new output_builder.to_vector

## PRIVATE
create_table_from_objects value fields =
    table_for_value v =
        column_names = fields.if_nothing ["Value"]
        column_values = column_names.map f-> if f == "Value" then v else Nothing
        Table.from_rows column_names [column_values]

    get_fields v = case v of
        _ : JS_Object -> v.field_names
        Nothing -> ["Value"]
        _ : Number -> ["Value"]
        _ : Boolean -> ["Value"]
        _ : Text -> ["Value"]
        _ : Date -> ["Value"]
        _ : Time_Of_Day -> ["Value"]
        _ : Date_Time -> ["Value"]
        _ -> Error.throw (Illegal_Argument.Error "Invalid item within Vector for Table.from_objects. Currently only JS_Object, Number, Boolean, Text and Nothing are supported (got "+(Meta.get_simple_type_name v)+").")

    get_value v field = case v of
        _ : JS_Object -> v.get field
        _ -> if field == "Value" then v else Nothing

    case value of
        Nothing -> table_for_value value
        _ : Number -> table_for_value value
        _ : Boolean -> table_for_value value
        _ : Text -> table_for_value value
        _ : Date -> table_for_value value
        _ : Time_Of_Day -> table_for_value value
        _ : Date_Time -> table_for_value value
        _ : JS_Object ->
            field_names = fields.if_nothing value.field_names
            values = field_names.map value.get
            Table.from_rows field_names [values]
        _ : Vector ->
            len = value.length

            ## For every record, get the values into a Map.
            column_map = value.fold_with_index Map.empty current-> i-> v->
                field_names = fields.if_nothing (get_fields v)
                field_names.fold current c->f->
                    data = c.get f (Vector.new_builder len)
                    data.length.up_to i . each _-> data.append Nothing
                    data.append (get_value v f)
                    c.insert f data

            used_fields = fields.if_nothing column_map.keys

            ## Convert Builders to Vectors and fill as needed.
            used_values = used_fields.map f->
                data = column_map.get f (Vector.new_builder len)
                data.length.up_to len . each _-> data.append Nothing
                data.to_vector

            Table.new (used_fields.zip used_values)
        _ : Array -> create_table_from_objects (Vector.from_polyglot_array value) fields
        _ -> Error.throw (Illegal_Argument.Error "Invalid value for Table.from_objects. Currently must be one of JS_Object, Vector, Array, Number, Boolean, Text, date/time and Nothing are supported (got "+(Meta.get_simple_type_name value)+").")
