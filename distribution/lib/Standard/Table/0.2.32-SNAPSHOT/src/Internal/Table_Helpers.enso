from Standard.Base import all

import Standard.Base.Error.Warnings
import Standard.Table.Data.Matching
from Standard.Base.Error.Problem_Behavior as Problem_Behavior_Module import all
from Standard.Table.Data.Column_Selector as Column_Selector_Module import all
from Standard.Table.Error as Error_Module import all

## PRIVATE
   A helper function encapsulating shared code for `select_columns`
   implementations of various Table variants. See the documentation for the
   Table type for details.

   It takes a list of columns and returns the selected columns. It is the
   responsibility of each implementation to reconstruct a proper table from the
   resulting list of columns.

   Arguments:
   - internal_columns: A list of all columns in a table.
   - selector: Column selection criteria.
   - reorder: Specifies whether to reorder the matched columns according to the
     order of the selection criteria.
     If `False`, the matched entries are returned in the same order as in the
     input.
     If `True`, the matched entries are returned in the order of the criteria
     matching them. If a single object has been matched by multiple criteria, it
     is placed in the group belonging to the first matching criterion on the
     list. If a single criterion's group has more than one element, their
     relative order is the same as in the input.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - warnings: A Warning_System instance specifying how to handle warnings. This
     is a temporary workaround to allow for testing the warning mechanism. Once
     the proper warning system is implemented, this argument will become
     obsolete and will be removed. No user code should use this argument, as it
     will be removed in the future.
select_columns : Vector -> Column_Selector -> Boolean -> Problem_Behavior -> Warnings.Warning_System -> Vector
select_columns internal_columns selector reorder on_problems warnings =
    promote_no_matches_to_missing_columns error = case error of
        Matching.No_Matches_Found criteria -> Missing_Input_Columns criteria
        _ ->
            IO.println error
            error

    result = case selector of
        By_Name names matching_strategy ->
            ## TODO [RW] Once the proper Warning support is implemented, this passing through of a mock `Warning_System`
               instance will no longer be necessary.
            closure = warnings->
                Matching.match_criteria internal_columns names reorder=reorder name_mapper=(_.name) matching_strategy=matching_strategy on_problems=on_problems warnings=warnings
            Warnings.map_warnings_and_errors promote_no_matches_to_missing_columns warnings closure
        By_Index indices ->
            partitioned_indices = indices.partition (here.is_index_valid internal_columns)
            good_indices = partitioned_indices.first
            bad_indices = partitioned_indices.second
            issues = if bad_indices.is_empty then [] else
                [Column_Indexes_Out_Of_Range bad_indices]
            result = case reorder of
                True ->
                    here.select_indices_reordering internal_columns good_indices
                False ->
                    here.select_indices_preserving_order internal_columns good_indices
            # TODO warn if there are any non-unique columns in result? TODO test cases to illustrate
            Problem_Behavior_Module.attach_issues_as_needed (result.distinct on=_.name) on_problems issues warnings=warnings
        By_Column columns ->
            names = columns.map .name
            closure = warnings->
                Matching.match_criteria internal_columns names reorder=reorder name_mapper=(_.name) matching_strategy=(Matching.Exact case_sensitivity=True) on_problems=on_problems warnings=warnings
            Warnings.map_warnings_and_errors promote_no_matches_to_missing_columns warnings closure

    issues = if result.is_empty then [No_Output_Columns] else []
    Problem_Behavior_Module.attach_issues_as_needed result on_problems issues warnings=warnings

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as their provided indices.
select_indices_reordering vector indices =
    indices.map vector.at

## PRIVATE
   Selects element from the vector based on the given indices.

   The elements are returned in the same order as they appeared in the original vector.
select_indices_preserving_order vector indices =
    indices_to_keep = Map.from_vector (indices.map i-> [i, True])
    vector.filter_with_index ix-> _->
        indices_to_keep.get_or_else ix False

## PRIVATE
   Checks if the given index is in the valid range for the provided vector.
is_index_valid vector ix =
    actual_ix = if ix < 0 then vector.length+ix else ix
    actual_ix>=0 && actual_ix<vector.length
