from Standard.Base import all
import Standard.Base.Data.Locale
import Standard.Base.Data.Text.Regex as Regex_Module

from Standard.Table.Data.Column as Column_Module import Column

## Strategy for matching column names.
type Matching_Strategy
   ## UNSTABLE
      Exact column matching.

      A column is matched if its exact name is provided.
   type Exact case_sensitivity=Sensitive

   ## UNSTABLE
      Regex-based column matching.

      A column is matched if its name matches the provided regular expression.
   type Regex case_sensitivity=Sensitive

## Specifies how missing columns should be handled.

   TODO: make this type more general
type Missing_Behavior
    ## UNSTABLE
       Missing columns are ignored.
    type Ignore

    ## UNSTABLE
       A warning is reported when a column is missing but the computation
       proceeds without it.
    type Warn

    ## UNSTABLE
       Missing columns raise errors.
    type Error

## Specifies whether an operation should be case-sensitive or not.
type Case_Sensitivity

   ## Specifies that the operation should be case-sensitive.
   type Sensitive

   ## UNSTABLE
      Specifies that the operation should ignore case.

      TODO: Since case-sensitive can be locale dependent, in the future this may
            be extended with a `locale` setting.
   type Insensitive

## An error indicating that no column matching the provided criterion has
   been found in the input.
type Column_Missing criterion


Column_Missing.to_display_text : Text
Column_Missing.to_display_text =
    "The criterion ["+this.criterion+"] did not match any columns."


## UNSTABLE
   TODO

   TODO
match_criteria : Vector Text -> Vector Text -> Boolean -> Matching_Strategy -> Missing_Behavior -> (Text -> Nothing) -> Vector Text ! Column_Missing
match_criteria column_names criteria reorder=False matching_strategy=(Exact case_sensitivity=Sensitive) on_missing=Warn warning_callback=here.report_warning = Panic.recover <|
    # match_matrix . at i . at j specifies whether column_names.at i matches criteria.at j
    match_matrix = column_names.map column_name->
        criteria.map criterion->
            here.match_single_criterion column_name criterion matching_strategy

    # Checks if the ith column is matched by any criterion.
    is_column_matched_by_anything : Integer -> Boolean
    is_column_matched_by_anything i =
        match_matrix.at i . any x->x

    # Checks if the jth criterion matches any columns.
    does_criterion_match_anything : Integer -> Boolean
    does_criterion_match_anything j =
        match_matrix.map (col -> col.at j) . any x->x

    # Selects column indices which satisfy the provided predicate.
    select_matching_indices : (Integer -> Boolean) -> Vector Text
    select_matching_indices matcher =
        0.up_to column_names.length . to_vector . filter matcher

    # Check consistency
    case on_missing of
        Ignore -> Nothing
        Warn ->
            criteria.map_with_index j-> criterion->
                if does_criterion_match_anything j then Nothing else
                    error = Column_Missing criterion
                    warning_callback error.to_display_text
        Error ->
            criteria.map_with_index j-> criterion->
                if does_criterion_match_anything j then Nothing else
                    error = Column_Missing criterion
                    Panic.throw error

    selected_indices = case reorder of
        True ->
            nested_indices = 0.up_to criteria.length . map j->
                is_column_matched_by_this_criterion i =
                    match_matrix.at i . at j
                select_matching_indices is_column_matched_by_this_criterion
            nested_indices.flat_map x->x # TODO . distinct
        False ->
            select_matching_indices is_column_matched_by_anything
    selected_indices.map column_names.at

## UNSTABLE
   TODO

   TODO
match_single_criterion : Text -> Text -> Matching_Strategy -> Boolean
match_single_criterion column_name criterion matching_strategy = case matching_strategy of
    Exact case_sensitivity -> case case_sensitivity of
        Sensitive ->
            column_name == criterion
        Insensitive ->
            column_name.equals_ignore_case criterion
    Regex case_sensitivity ->
        insensitive = case case_sensitivity of
            Sensitive -> False
            Insensitive -> True
        re = Regex_Module.compile criterion case_insensitive=insensitive
        re.matches column_name

## PRIVATE
   A placeholder for reporting warnings. It should be replaced once the warning
   mechanism is designed and implemented. The argument type will likely change
   too.
report_warning : Text -> Nothing
report_warning message =
    IO.println "[WARNING] "+message
