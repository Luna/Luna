from Standard.Base import all
import Standard.Base.Data.Locale
import Standard.Base.Data.Text.Regex as Regex_Module

from Standard.Table.Data.Column as Column_Module import Column

type Matching_Strategy
   ## UNSTABLE
      Exact column matching.

      A column is matched if its exact name is provided.
   type Exact case_sensitivity=Sensitive

   ## UNSTABLE
      Regex-based column matching.

      A column is matched if its name matches the provided regular expression.
   type Regex case_sensitivity=Sensitive

type Missing_Behavior
    ## UNSTABLE
       Missing columns are ignored.
    type Ignore

    ## UNSTABLE
       A warning is reported when a column is missing but the computation
       proceeds without it.
    type Warn

    ## UNSTABLE
       Missing columns raise errors.
    type Error

type Case_Sensitivity
   type Sensitive
   type Insensitive

match_criteria : Vector Text -> Vector Text -> Matching_Strategy -> Missing_Behavior -> Vector Text
match_criteria column_names criteria matching_strategy missing_behavior =
    Error.throw "TODO"

match_single_criterion : Text -> Text -> Matching_Strategy -> Boolean
match_single_criterion column_name criterion matching_strategy =
    IO.println matching_strategy
    case matching_strategy of
        Exact case_sensitivity -> case case_sensitivity of
            Sensitive ->
                column_name == criterion
            Insensitive ->
                column_name.equals_ignore_case criterion
        Regex case_sensitivity ->
            insensitive = case case_sensitivity of
                Sensitive -> False
                Insensitive -> True
            re = Regex_Module.compile criterion case_insensitive=insensitive
            re.matches column_name
