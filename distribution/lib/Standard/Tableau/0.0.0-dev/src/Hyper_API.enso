from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice

from Standard.Table import Column, Table, Value_Type
import Standard.Table.Rows_To_Read.Rows_To_Read
import Standard.Table.Internal.Java_Problems

polyglot java import java.sql.Types
polyglot java import org.enso.tableau.HyperReader

type Hyper_File
    ## Creates a Hyper_File
    new : File -> Hyper_File
    new file:File = Hyper_File.Value file

    ## Gets the location for hyperd
    hyper_path : Text
    hyper_path  = HyperReader.HYPER_PATH.toString

    ## PRIVATE
       A representation of a Tableau Hyper Extract file.
    private Value file:File

    ## ICON metadata
       Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector Text
    schemas self =
        array = HyperReader.readSchemas self.file.path
        Vector.from_polyglot_array array

    ## ICON metadata
       Returns the list of tables for the connection within the current database (or catalog).
    @schema (hyper -> make_schema_selector hyper True)
    tables : Text -> Vector Hyper_Table
    tables self schema:Text='*' =
        array = case schema of
            "" -> Error.throw (Illegal_Argument.Error "Schema name cannot be empty.")
            "*" -> HyperReader.listTablesAllSchemas self.file.path
            _ -> HyperReader.listTables self.file.path schema
        array.map t-> Hyper_Table.Value self t.schema t.name

## An Enso representation of a Tableau Hyper Table.
type Hyper_Table
    ## Represents a Tableau Hyper Table.
    Value file:Hyper_File schema:Text table:Text

    ## PRIVATE
    to_display_text : Text
    to_display_text self = self.table + " (" + self.schema + ")"

    ## PRIVATE
    to_js_object : JS_Object
    to_js_object self =
        JS_Object.from_pairs [["type", "Hyper_Table"], ["schema", self.schema], ["table", self.table], ["file", self.file.file.path]]

    ## Reads The Columns for the Table
    columns : Vector Hyper_Column
    columns self =
        array = HyperReader.readStructure self.file.file.path self.schema self.table
        array.map column->
            value_type = case column.typeID of
                Types.BOOLEAN -> Value_Type.Boolean
                Types.BIGINT -> Value_Type.Integer ..Bits_64
                Types.SMALLINT -> Value_Type.Integer ..Bits_16
                Types.INTEGER -> Value_Type.Integer ..Bits_32
                Types.NUMERIC ->
                    precision = if column.precision.isEmpty then Nothing else column.precision.getAsInt
                    scale = if column.scale.isEmpty then Nothing else column.scale.getAsInt
                    Value_Type.Decimal precision scale
                Types.FLOAT -> Value_Type.Float ..Bits_32
                Types.DOUBLE -> Value_Type.Float ..Bits_64
                Types.VARCHAR ->
                    length = if column.length.isEmpty then Nothing else column.length.getAsInt
                    Value_Type.Char length variable_length=True
                Types.CHAR ->
                    length = if column.length.isEmpty then Nothing else column.length.getAsInt
                    Value_Type.Char length variable_length=False
                Types.DATE -> Value_Type.Date
                Types.TIME -> Value_Type.Time
                Types.TIMESTAMP -> Value_Type.Date_Time with_timezone=False
                Types.TIMESTAMP_WITH_TIMEZONE -> Value_Type.Date_Time with_timezone=True
                HyperReader.JSON -> Value_Type.Unsupported_Data_Type "JSON" JS_Object
                HyperReader.INTERVAL -> Value_Type.Unsupported_Data_Type "INTERVAL" Duration
                _ -> Value_Type.Unsupported_Data_Type "Unknown" Any
            Hyper_Column.Value column.name value_type column.nullable

    ## Reads the Table into Enso Table
    read : Rows_To_Read -> Table
    read self (max_rows : Rows_To_Read = ..All_Rows) =
        Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
            row_count = if max_rows == Rows_To_Read.All_Rows then Nothing else max_rows.rows
            java_columns = HyperReader.readTable self.file.file.path self.schema self.table row_count java_problem_aggregator
            enso_columns = java_columns.map c-> Column.from_storage c.getName c.getStorage
            Table.new enso_columns

## An Enso representation of a Column in a Tableau Hyper Table.
type Hyper_Column
    Value name:Text value_type:Value_Type nullable:Boolean

    ## PRIVATE
    to_display_text : Text
    to_display_text self = self.name + " (" + self.value_type.to_display_text + ")"

    ## PRIVATE
    to_js_object : JS_Object
    to_js_object self =
        JS_Object.from_pairs [["type", "Hyper_Column"], ["name", self.name], ["value_type", self.value_type], ["nullable", self.nullable]]

## PRIVATE
make_schema_selector hyper_file:Hyper_File include_any:Boolean=False =
    schemas = hyper_file.schemas.map t-> Option t t.pretty
    any_entry = if include_any then [Option "<Any Schema>" "'*'"] else []
    Single_Choice values=schemas+any_entry
