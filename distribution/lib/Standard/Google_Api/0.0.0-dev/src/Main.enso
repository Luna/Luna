from Standard.Base import all
import Standard.Base.Data.Array_Proxy.Array_Proxy
import Standard.Base.Metadata.Display
from Standard.Base.Metadata import make_single_choice, Widget
from Standard.Base.Metadata.Widget import Single_Choice, Vector_Editor
from Standard.Table import Table

polyglot java import com.google.api.client.googleapis.auth.oauth2.GoogleCredential
polyglot java import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport
polyglot java import com.google.api.client.json.gson.GsonFactory
polyglot java import com.google.api.services.sheets.v4.Sheets
polyglot java import com.google.api.services.sheets.v4.SheetsScopes
polyglot java import java.util.Collections
polyglot java import com.google.analytics.data.v1beta.BetaAnalyticsDataClient
polyglot java import com.google.analytics.data.v1beta.DateRange
polyglot java import com.google.analytics.data.v1beta.Dimension
polyglot java import com.google.analytics.data.v1beta.Metric
polyglot java import com.google.analytics.data.v1beta.Row
polyglot java import com.google.analytics.data.v1beta.RunReportRequest
polyglot java import com.google.analytics.data.v1beta.RunReportResponse


## PRIVATE
type Google_Api_Client
    ## PRIVATE
    Value credential json_factory http_transport

    ## Accesses a service responsible for working with Google Spreadsheets.

       Arguments:
       - app_name: the application name to use for making the API calls. This
         will show up in access logs etc.
    spreadsheets : Text -> Spreadsheets
    spreadsheets self app_name='Enso' =
        service = Sheets.Builder.new self.http_transport self.json_factory self.credential . setApplicationName app_name . build
        Spreadsheets.Service service

## PRIVATE
type Spreadsheets
    ## PRIVATE
    Service java_service

    ## Gets a table with the given ID and sheet range.

       Arguments:
       - sheet_id: the ID of the downloaded spreadsheet. It can be read from the
         spreadsheet URL.
       - sheet_range: specifies the sheet and cell range to read, e.g.
         `'Sheet1!A1:B7'`.
    get_table : Text -> Text -> Table
    get_table self sheet_id sheet_range =
        request = self.java_service.spreadsheets.values.get sheet_id sheet_range . setMajorDimension 'COLUMNS' . setValueRenderOption 'UNFORMATTED_VALUE'
        response = request.execute
        values = Vector.from_polyglot_array response.getValues
        columned = values.map v-> [v.first, v.drop 1]
        Table.new columned

## Initializes the Google services instance using the given credentials file.

   Arguments:
   - secret_file: a file containing Google Service Account credentials to use to
     access Google services. The credentials file can be downloaded from the
     Google Admin Console when generating a key.
initialize : File -> Google_Api_Client
initialize secret_file =
    credential = secret_file.with_input_stream [File_Access.Read] stream->
        stream.with_java_stream is->
            GoogleCredential.fromStream is . createScoped (Collections.singleton SheetsScopes.SPREADSHEETS)
    http_transport = GoogleNetHttpTransport.newTrustedTransport
    json_factory = GsonFactory.getDefaultInstance
    Google_Api_Client.Value credential json_factory http_transport

## PRIVATE
make_dimensions_vector_selector : Widget
make_dimensions_vector_selector =
    item_editor = make_single_choice ['country', 'date', 'isConversionEvent', 'language', 'userAgeBracket', 'userGender']
    Vector_Editor item_editor=item_editor item_default=item_editor.values.first.value display=Display.Always

## PRIVATE
make_metrics_vector_selector : Widget
make_metrics_vector_selector =
    item_editor = make_single_choice ['activeUsers', 'bounceRate', 'conversions', 'newUsers', 'sessionsPerUser', 'userConversionRate']
    Vector_Editor item_editor=item_editor item_default=item_editor.values.first.value display=Display.Always


## PLACEHOLDER, performs google analytics call
   This method calls the google reporting v4 api. 
   Arguments:
   - property_id: The Google Analytics property_id that is being queried
   - start_date: The beginning date of the query. Default is 2020-03-31
   - end_date: The end date being queried. Defaults to today.
@dimensions make_dimensions_vector_selector
@metrics make_metrics_vector_selector
run_analytics_report : Text -> Date -> Date -> (Vector Text) -> (Vector Text) -> Table
run_analytics_report property_id:Text start_date:Date=(Date.new 2020 3 31) end_date:Date=Date.today dimensions:Vector=['userType'] metrics:Vector=['users'] -> Table =
    analytics_data = BetaAnalyticsDataClient.create
    request_builder = RunReportRequest.newBuilder
        . setProperty ("properties/"+property_id)
        . addDateRanges (DateRange.newBuilder.setStartDate start_date.to_text . setEndDate end_date.to_text)
    dimensions.distinct.each dimension->
        request_builder.addDimensions (Dimension.newBuilder.setName dimension)
    metrics.distinct.each metric->
        request_builder.addMetrics (Metric.newBuilder.setName metric)

    request = request_builder.build
    response = analytics_data.runReport request

    dimension_count = response.getDimensionHeadersCount
    dimension_headers = 0.up_to dimension_count . map i-> response.getDimensionHeaders i . getName
    metric_count = response.getMetricHeadersCount
    metric_headers = 0.up_to metric_count . map i-> response.getMetricHeaders i . getName
    headers = dimension_headers + metric_headers

    row_count = response.getRowCount
    row_proxy = Array_Proxy.new row_count i->
        row = response.getRows i
        dimension_values = 0.up_to dimension_count . map i-> row.getDimensionValues i . getValue
        metric_values = 0.up_to metric_count . map i-> row.getMetricValues i . getValue
        dimension_values + metric_values

    Table.from_rows headers (Vector.from_polyglot_array row_proxy)
