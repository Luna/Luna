from Standard.Base import all

import Standard.Table.Data.Column
import Standard.Table.Data.Table
import Standard.Visualization.Helpers
from Standard.Base.Data.Index_Sub_Range import Sample

## PRIVATE

   Name of the index column that may be generated to plot against.
index_name : Text
index_name = 'index'

## PRIVATE
data_field : Text
data_field = 'data'

## PRIVATE
axis_field : Text
axis_field = 'axis'

## PRIVATE
label_field : Text
label_field = 'label'

## PRIVATE

   Represents a recognized point data field for a scatter plot visualization.
type Point_Data

    ## PRIVATE
    type Point_Data

    ## PRIVATE
    type X

    ## PRIVATE
    type Y

    ## PRIVATE
    type Color

    ## PRIVATE
    type Shape

    ## PRIVATE
    type Label

    ## PRIVATE
    type Size

    ## PRIVATE

       Returns all recognized point data fields.
    all_fields : Vector
    all_fields = [X,Y,Color,Shape,Label,Size]

    ## PRIVATE
    recognized_names : Vector
    recognized_names self = self.all_fields.map _.name

    ## PRIVATE
    is_recognized : Column -> Boolean
    is_recognized self column = self.recognized_names.contains column.name

    ## PRIVATE
    name : Text
    name self = self.to_text.to_case Case.Lower

    ## PRIVATE
    fallback_column : Table -> Column ! No_Fallback_Column
    fallback_column self table = case self of
        X -> table.index.catch_ <| self.iota table.row_count
        Y ->
            x_column = X.lookup_in table
            candidates = table.all_columns
            is_good_enough c = c.is_numeric && c.name != x_column.name
            is_good c = is_good_enough c && (self.is_recognized c).not

            candidates.find is_good . catch_ <| candidates.find is_good_enough
        _ -> Error.throw No_Fallback_Column

    ## PRIVATE

       Returns a vector of subsequent integers beginning from 0.
    iota : Number -> Vector
    iota count =
        range = 0.up_to count
        Column.from_vector index_name range.to_vector

    ## PRIVATE
    lookup_in : Table -> Column
    lookup_in self table =
        named = table.lookup_ignore_case self.name
        named.catch_ <| self.fallback_column table

## PRIVATE
type No_Fallback_Column

## PRIVATE
No_Fallback_Column.to_display_text : Text
No_Fallback_Column.to_display_text self =
    "No fallback column found for the scatter plot."

## PRIVATE

   Generates JSON that describes points data.
Table.Table.point_data : Table -> Object
Table.Table.point_data self =
    get_point_data field = field.lookup_in self . rename field.name
    columns = Point_Data.all_fields.filter_map get_point_data
    (0.up_to self.row_count).to_vector.map <| row_n->
        pairs = columns.map column->
            value = column.at row_n . catch_ Nothing
            [column.name, value]
        Json.from_pairs pairs

## PRIVATE

   Generates JSON that describes plot axes.
Table.Table.axes : Table -> Object
Table.Table.axes self =
    describe_axis field =
        col_name = field.lookup_in self . name
        label = Json.from_pairs [[label_field, col_name]]
        [field.name, label]
    x_axis = describe_axis X
    y_axis = describe_axis Y
    is_valid axis_pair =
        label = axis_pair.at 1
        label.is_valid && (self.all_columns.length > 0)
    axes_obj = Json.from_pairs <| [x_axis, y_axis].filter is_valid
    if axes_obj.fields.size > 0 then axes_obj else Nothing

## PRIVATE
Vector.Vector.point_data : Vector -> Object
Vector.Vector.point_data self  =
    self.map_with_index <| i-> elem->
        Json.from_pairs [[X.name,i],[Y.name,elem]]

## PRIVATE
bound_data bounds data = case bounds of
    Nothing -> data
    _ ->
        min_x = bounds.at 0
        min_y = bounds.at 1
        max_x = bounds.at 2
        max_y = bounds.at 3

        data.filter <| datum->
            x = datum.get "x" . unwrap
            y = datum.get "y" . unwrap

            min_x<=x && x<=max_x && min_y<=y && y<=max_y

type Extreme min_x max_x min_y max_y

## PRIVATE
limit_data limit data = case limit of
    Nothing -> data
    _ -> if (data.length <= limit) then data else
        b = Vector.new_builder limit

        x datum = (datum.get "x").unwrap
        y datum = (datum.get "y").unwrap

        check_max_y min now = case min of
            Extreme min_x max_x min_y Nothing -> Extreme min_x max_x min_y now
            Extreme min_x max_x min_y max_y -> if y max_y < y now then @Tail_Call check_max_y (Extreme min_x max_x min_y now) max_y else
                b.append now
                min

        check_min_y min now = case min of
            Extreme min_x max_x Nothing max_y -> Extreme min_x max_x now max_y
            Extreme min_x max_x min_y max_y -> if y min_y > y now then @Tail_Call check_min_y (Extreme min_x max_x now max_y) min_y else
                check_max_y min now

        check_max_x min now = case min of
            Extreme min_x Nothing min_y max_y -> Extreme min_x now min_y max_y
            Extreme min_x max_x min_y max_y -> if x max_x < x now then @Tail_Call check_max_x (Extreme min_x now min_y max_y) max_x else
                check_min_y min now

        check_min_x min now = case min of
            Extreme Nothing max_x min_y max_y -> Extreme now max_x min_y max_y
            Extreme min_x max_x min_y max_y -> if x min_x > x now then @Tail_Call check_min_x (Extreme now max_x min_y max_y) min_x else
                check_max_x min now

        extreme = case data.fold (Extreme Nothing Nothing Nothing Nothing) check_min_x of
            Extreme min_x max_x min_y max_y -> [min_x, max_x, min_y, max_y].filter case _ of
                Nothing -> False
                _ -> True

        if limit <= extreme.length then extreme.take (First limit) else
            extreme + b.to_vector.take (Sample limit-extreme.length)

## PRIVATE
json_from_table : Table -> [Int]|Nothing -> Int|Nothing -> Json
json_from_table table bounds limit =
    data = table.point_data |> bound_data bounds |> limit_data limit
    axes = table.axes
    Json.from_pairs <| [[data_field,data], [axis_field, axes]]

## PRIVATE
json_from_vector : Vector Any -> [Int]|Nothing -> Int|Nothing -> Json
json_from_vector vec bounds limit =
    data = vec.point_data |> bound_data bounds |> limit_data limit
    axes = [axis_field, Nothing]
    Json.from_pairs <| [[data_field, data], axes]

## PRIVATE

   Default preprocessor for the scatterplot visualization.

   Generates JSON text describing the scatterplot visualization.

   Arguments:
   - value: the value to be visualized.
process_to_json_text : Any -> Text
process_to_json_text value bounds=Nothing limit=Nothing =
    json = case value of
        Column.Column _ -> json_from_table  value.to_table bounds limit
        Table.Table _   -> json_from_table  value bounds limit
        Vector.Vector _ -> json_from_vector value bounds limit
        _               -> json_from_vector value.to_vector bounds limit

    json.to_text

