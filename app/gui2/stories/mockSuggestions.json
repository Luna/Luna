[{"kind":"Module","name":"Data","arguments":[],"returnType":"Standard.Base.Data","definedIn":"Standard.Base.Data","reexportedIn":"Standard.Base.Main","documentation":[],"aliases":[],"isPrivate":false,"isUnstable":false},{"arguments":[{"name":"path","reprType":"Standard.Base.Data.Text.Text | Standard.Base.System.File.File","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"format","reprType":"Standard.Base.System.File_Format.File_Format","isSuspended":false,"hasDefault":true,"defaultValue":"Auto_Detect","tagValues":["Standard.Base.System.File_Format.File_Format"]},{"name":"on_problems","reprType":"Standard.Base.Errors.Problem_Behavior.Problem_Behavior","isSuspended":false,"hasDefault":true,"defaultValue":"Problem_Behavior.Report_Warning","tagValues":["Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore","Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning","Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"]}],"kind":"Method","name":"read","definedIn":"Standard.Base.Data","documentation":[{"Tag":{"tag":"Alias","body":"load, open"}},{"Tag":{"tag":"Group","body":"Input"}},{"Paragraph":{"body":"Reads a file into Enso. Uses the specified file format to parse the file into an Enso type. If not specified will use the file's extension to determine the file format."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"path","description":"The path to the file to read."},{"name":"format","description":"A <code>File_Format</code> object used to read file into memory. If <code>Auto_Detect</code> is specified; the provided file determines the specific type and configures it appropriately. If there is no matching type then a <code>File_Error.Unsupported_Type</code> error is returned. You can use <code>File_Format.all</code> to get a list of currently loaded formats."},{"name":"on_problems","description":"Specifies the behavior when a problem occurs during the function. By default, a warning is issued, but the operation proceeds. If set to <code>Report_Error</code>, the operation fails with a dataflow error. If set to <code>Ignore</code>, the operation proceeds without errors or warnings."}]}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Read the first sheet of an XLSX from disk and convert it into a table.<div class=\"example\">\nfrom Standard.Table import all\nimport Standard.Examples\n\nexample_xlsx_to_table = Data.read Examples.xlsx\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Read the sheet named <code>Dates</code> from an XLS and convert it to a table.<div class=\"example\">\nfrom Standard.Table import all\nfrom Standard.Table import Excel, Worksheet\nimport Standard.Examples\n\nexample_xls_to_table = Data.read Examples.xls (Excel (Worksheet 'Dates'))</div>"}}],"groupIndex":0,"aliases":["load"," open"],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data","returnType":"Standard.Base.Any.Any"},{"arguments":[{"name":"path","reprType":"Standard.Base.Data.Text.Text | Standard.Base.System.File.File","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"encoding","reprType":"Standard.Base.Data.Text.Encoding.Encoding","isSuspended":false,"hasDefault":true,"defaultValue":"Encoding.utf_8","tagValues":null},{"name":"on_problems","reprType":"Standard.Base.Errors.Problem_Behavior.Problem_Behavior","isSuspended":false,"hasDefault":true,"defaultValue":"Problem_Behavior.Report_Warning","tagValues":["Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore","Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning","Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"]}],"kind":"Method","name":"read_text","definedIn":"Standard.Base.Data","documentation":[{"Tag":{"tag":"Alias","body":"load text, open text"}},{"Tag":{"tag":"Group","body":"Input"}},{"Paragraph":{"body":"Open and read the file at the provided <code>path</code>."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"path","description":"The path of the file to open and read the contents of. It will accept a textual path or a file."},{"name":"encoding","description":"The text encoding to decode the file with. Defaults to UTF-8."},{"name":"on_problems","description":"Specifies the behavior when a problem occurs during the function. By default, a warning is issued, but the operation proceeds. If set to <code>Report_Error</code>, the operation fails with a dataflow error. If set to <code>Ignore</code>, the operation proceeds without errors or warnings."}]}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Read the <code>data.csv</code> file in the project directory's <code>data</code> directory. You will need to create the file <code>data.csv</code> manually in that directory.<div class=\"example\">\nimport Standard.Base.Data\nimport Standard.Examples\n\nexample_read = Data.read_text Examples.csv_path</div>"}}],"groupIndex":0,"aliases":["load text"," open text"],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data","returnType":"Standard.Base.Data.Text.Text"},{"arguments":[{"name":"directory","reprType":"Standard.Base.System.File.File | Standard.Base.Data.Text.Text","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"name_filter","reprType":"Standard.Base.Data.Text.Text","isSuspended":false,"hasDefault":true,"defaultValue":"Nothing","tagValues":null},{"name":"recursive","reprType":"Standard.Base.Data.Boolean.Boolean","isSuspended":false,"hasDefault":true,"defaultValue":"False","tagValues":["Standard.Base.Data.Boolean.Boolean.True","Standard.Base.Data.Boolean.Boolean.False"]}],"kind":"Method","name":"list_directory","definedIn":"Standard.Base.Data","documentation":[{"Tag":{"tag":"Group","body":"Input"}},{"Paragraph":{"body":"Lists files contained in the provided directory."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"name_filter","description":"A glob pattern that can be used to filter the returned files. If it is not specified, all files are returned."},{"name":"recursive","description":"Specifies whether the returned list of files should include also files from the subdirectories. If set to <code>False</code> (the default), only the immediate children of the listed directory are considered."}]}},{"Keyed":{"key":"The `name_filter` can contain the following special characters","body":""}},{"List":{"items":["<code>\"?\"</code> - which matches a single filename character (so it will not match a <code>\"/\"</code>).","<code>\"*\"</code> - which matches any number of characters, but again does not cross directories.","<code>\"**\"</code> - which matches any number of characters and can cross directories.","<code>\"\\\"</code> - can be used to escape the characters with special meaning; to get a single backslash, you need to specify it twice; you also need to keep in mind that the interpolating string literal also uses <code>\"\\\"</code> as an escape sequence, so you need to type <code>'\\\\\\\\'</code> to get a single backslash for the glob pattern, unless you use the raw strings, where you only need to escape once: <code>\"\\\\\"</code>.","Brackets can be used to match exactly one character from some set of characters. For example <code>\"[xy]\"</code> matches <code>\"x\"</code> or <code>\"y\"</code>. Character ranges can also be specified: <code>\"[a-z]\"</code> matches any character from <code>\"a\"</code> to <code>\"z\"</code>. An exclamation mark can be used to negate the match, i.e. <code>\"[!xz]\"</code> will match any characters except for <code>\"x\"</code> and <code>\"z\"</code>. Moreover the ranges and single characters can be used together, so for example <code>\"[a-cxy]\"</code> will match <code>\"a\"</code>, <code>\"b\"</code>, <code>\"c\"</code>, <code>\"x\"</code> or <code>\"y\"</code>. Within the brackets, the special characters <code>\"*\"</code>, <code>\"?\"</code> and <code>\"\\\"</code> stand for themselves instead of their special meanings.","Braces allow to specify multiple patterns (separated with a comma), one of which must be matched. For example: <code>\"{abc,x*}\"</code> will match either the name <code>\"abc\"</code> or any name starting with <code>\"x\"</code>. The groups cannot be nested."]}},{"Marked":{"mark":"Example","header":"Example","body":"<p>List all files with <code>.md</code> extension in the example directory and any of its subdirectories.<div class=\"example\">\nimport Standard.Examples\n\nexample_list_files =\n    Data.list_directory Examples.data_dir name_filter=\"**.md\" recursive=True</div>"}}],"groupIndex":0,"aliases":[],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data","returnType":"Standard.Base.Data.Vector.Vector Standard.Base.System.File.File"},{"arguments":[{"name":"uri","reprType":"Standard.Base.Network.URI.URI | Standard.Base.Data.Text.Text","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"method","reprType":"Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method","isSuspended":false,"hasDefault":true,"defaultValue":"HTTP_Method.Get","tagValues":["Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"]},{"name":"headers","reprType":"Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)","isSuspended":false,"hasDefault":true,"defaultValue":"[]","tagValues":null},{"name":"try_auto_parse_response","reprType":"Standard.Base.Data.Boolean.Boolean","isSuspended":false,"hasDefault":true,"defaultValue":"True","tagValues":["Standard.Base.Data.Boolean.Boolean.True","Standard.Base.Data.Boolean.Boolean.False"]}],"kind":"Method","name":"fetch","definedIn":"Standard.Base.Data","documentation":[{"Tag":{"tag":"Alias","body":"download, http get"}},{"Tag":{"tag":"Group","body":"Input"}},{"Paragraph":{"body":"Fetches from the provided URI and returns the response, parsing the body if the content-type is recognised. Returns an  error if the status code does not represent a successful response."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"uri","description":"The URI to fetch."},{"name":"method","description":"The HTTP method to use. Must be one of <code>HTTP_Method.Get</code>, <code>HTTP_Method.Head</code>, <code>HTTP_Method.Delete</code>, <code>HTTP_Method.Options</code>. Defaults to <code>HTTP_Method.Get</code>."}]}},{"List":{"items":["headers: The headers to send with the request. Defaults to an empty vector.","try_auto_parse:  If successful should the body be attempted to be parsed to an Enso native object."]}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Read from an HTTP endpoint.<div class=\"example\">\nimport Standard.Base.Data\nresponse = Data.fetch URL\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Read from an HTTP endpoint and write the results to a file.<div class=\"example\">\nimport Standard.Base.Data\nfile = enso_project.data / \"spreadsheet.xls\"\nData.fetch URL . body . to_file file</div>"}}],"groupIndex":0,"aliases":["download"," http get"],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data","returnType":"Standard.Base.Any.Any"},{"arguments":[{"name":"uri","reprType":"Standard.Base.Network.URI.URI | Standard.Base.Data.Text.Text","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"body","reprType":"Standard.Base.Network.HTTP.Request_Body.Request_Body","isSuspended":false,"hasDefault":true,"defaultValue":"Request_Body.Empty","tagValues":["Standard.Base.Network.HTTP.Request_Body.Request_Body.Text","Standard.Base.Network.HTTP.Request_Body.Request_Body.Json","Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary","Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data","Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"]},{"name":"method","reprType":"Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method","isSuspended":false,"hasDefault":true,"defaultValue":"HTTP_Method.Post","tagValues":["Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"]},{"name":"headers","reprType":"Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)","isSuspended":false,"hasDefault":true,"defaultValue":"[]","tagValues":null},{"name":"try_auto_parse_response","reprType":"Standard.Base.Data.Boolean.Boolean","isSuspended":false,"hasDefault":true,"defaultValue":"True","tagValues":["Standard.Base.Data.Boolean.Boolean.True","Standard.Base.Data.Boolean.Boolean.False"]}],"kind":"Method","name":"post","definedIn":"Standard.Base.Data","documentation":[{"Tag":{"tag":"Alias","body":"upload, http post"}},{"Tag":{"tag":"Group","body":"Input"}},{"Paragraph":{"body":"Writes the provided data to the provided URI. Returns the response, parsing the body if the content-type is recognised. Returns an  error if the status code does not represent a successful response."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"uri","description":"The URI to fetch."},{"name":"body","description":"The data to write. See <code>Supported Body Types</code> below."},{"name":"method","description":"The HTTP method to use. Must be one of <code>HTTP_Method.Post</code>, <code>HTTP_Method.Put</code>, <code>HTTP_Method.Patch</code>. Defaults to <code>HTTP_Method.Post</code>."},{"name":"headers","description":"The headers to send with the request. Defaults to an empty vector."},{"name":"try_auto_parse","description":"If successful should the body be attempted to be parsed to an Enso native object."}]}},{"Marked":{"mark":"Important","header":"Supported Body Types","body":""}},{"List":{"items":["Request_Body.Text: Sends a text string, with optional encoding and content type.","Request_Body.Json: Sends an Enso object, after converting it to JSON.","Request_Body.Binary: Sends a file.","Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys must be <code>Text</code>, and the values must be <code>Text</code> or <code>File</code>.","Request_Body.Empty: Sends an empty body."]}},{"Keyed":{"key":"Additionally, the following types are allowed as the `body` parameter","body":""}},{"List":{"items":["Text: shorthand for <code>Request_Body.Text that_text</code>.","File: shorthand for <code>Request_Body.Binary that_file</code>.","Any other Enso object: shorthand for <code>Request_Body.Json that_object</code>."]}},{"Marked":{"mark":"Important","header":"Specifying Content Types","body":"<p>If the <code>body</code> parameter specifies an explicit content type, then it is an error to also specify additional <code>Content-Type</code> headers in the <code>headers</code> parameter. (It is not an error to specify multiple <code>Content-Type</code> values in <code>headers</code>, however.)"}},{"Marked":{"mark":"Important","header":"Default Content Types","body":""}},{"List":{"items":["<p>The following specifies the default content type for each <code>Request_Body</code> type.Request_Body.Text: <code>text/plain</code>","Request_Body.Json: <code>application/json</code>","Request_Body.Binary: <code>application/octet-stream</code>"]}},{"Keyed":{"key":"- Request_Body.Form_Data","body":""}},{"List":{"items":["<p>If <code>url_encoded</code> is True: <code>application/x-www-form-urlencoded</code> If <code>url_encoded</code> is False: <code>multipart/form-data</code>Request_Body.Empty: No content type is sent","Text: <code>text/plain</code>","File: <code>application/octet-stream</code>","Any other Enso object: <code>application/json</code>"]}},{"Marked":{"mark":"Important","header":"Specifying Text Encodings","body":"<p>Text encoding can be specified in the <code>encoding</code> parameter to the <code>Request_Body.Text</code> constructor. This value will be added to the <code>Content-Type</code> header.<p>If a value for <code>encoding</code> is specified, but no value for <code>content_type</code> is specified, then <code>\"text/plain\"</code> is used as the content type."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write a text string to an HTTP endpoint.<div class=\"example\">\nimport Standard.Base.Data\nresponse = Data.post url_post (Request_Body.Text \"hello world\")\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write JSON to an HTTP endpoint.<div class=\"example\">\nimport Standard.Base.Data\njson = Json.parse '{\"a\": \"asdf\", \"b\": 123}'\nresponse = Data.post url_post json\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write an Enso object to an HTTP endpoint.<div class=\"example\">\nimport Standard.Base.Data\nresponse = Data.post url_post (My_Type.Value 12)\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write a text string to an HTTP endpoint, with a specific text encoding.<div class=\"example\">\nimport Standard.Base.Data\nbody = Request_Body.Text 'Hello World!' encoding=Encoding.utf_16_le\nresponse = Data.post url_post body\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write a text string to an HTTP endpoint, with a specific content type.<div class=\"example\">\nimport Standard.Base.Data\nbody = Request_Body.Text 'a,b,c\\n' content_type=\"text/csv\"\nresponse = Data.post url_post body\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write the contents of a file to an HTTP endpoint.<div class=\"example\">\nimport Standard.Base.Data\ntest_file = enso_project.data / \"sample.png\"\nresponse = Data.post url_post (Request_Body.Binary test_file)\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write a multipart form to an HTTP endpoint.<div class=\"example\">\nimport Standard.Base.Data\ntest_file = enso_project.data / \"sample.png\"\nform_data = Map.from_vector [[\"key\", \"val\"], [\"a_file\", test_file]]\nresponse = Data.post url_post (Request_Body.Form_Data form_data)\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Write a URL-encoded form to an HTTP endpoint.<div class=\"example\">\nimport Standard.Base.Data\ntest_file = enso_project.data / \"sample.txt\"\nform_data = Map.from_vector [[\"key\", \"val\"], [\"a_file\", test_file]]\nresponse = Data.post url_post (Request_Body.Form_Data form_data url_encoded=True)</div>"}}],"groupIndex":0,"aliases":["upload"," http post"],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data","returnType":"Standard.Base.Any.Any"},{"arguments":[{"name":"self","reprType":"Standard.Base.Network.URI.URI","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"method","reprType":"Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method","isSuspended":false,"hasDefault":true,"defaultValue":"HTTP_Method.Get","tagValues":["Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect","Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"]},{"name":"headers","reprType":"Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)","isSuspended":false,"hasDefault":true,"defaultValue":"[]","tagValues":null},{"name":"try_auto_parse","reprType":"Standard.Base.Data.Boolean.Boolean","isSuspended":false,"hasDefault":true,"defaultValue":"True","tagValues":["Standard.Base.Data.Boolean.Boolean.True","Standard.Base.Data.Boolean.Boolean.False"]}],"kind":"Method","name":"fetch","definedIn":"Standard.Base.Data","documentation":[{"Tag":{"tag":"Alias","body":"download, http get"}},{"Tag":{"tag":"Group","body":"Input"}},{"Paragraph":{"body":"Fetches from the URI and returns the response, parsing the body if the content-type is recognised. Returns an  error if the status code does not represent a successful response."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"method","description":"The HTTP method to use. Defaults to <code>GET</code>."},{"name":"headers","description":"The headers to send with the request. Defaults to an empty vector."},{"name":"try_auto_parse","description":"If successful should the body be attempted to be parsed to an Enso native object."}]}}],"groupIndex":0,"aliases":["download"," http get"],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Network.URI.URI","memberOf":"Standard.Base.Network.URI.URI","returnType":"Standard.Base.Any.Any"},{"kind":"Module","name":"Date_Time","arguments":[],"returnType":"Standard.Base.Data.Time.Date_Time","definedIn":"Standard.Base.Data.Time.Date_Time","reexportedIn":"Standard.Base.Data.Time","documentation":[],"aliases":[],"isPrivate":false,"isUnstable":false},{"arguments":[],"kind":"Method","name":"unix_epoch_start","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Private","body":""}},{"Paragraph":{"body":""}}],"aliases":[],"isPrivate":true,"isUnstable":false,"memberOf":"Standard.Base.Data.Time.Date_Time","returnType":"Standard.Base.Data.Time.Date_Time.Date_Time"},{"arguments":[{"name":"date","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time | Standard.Base.Data.Time.Date.Date","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"action","reprType":"Standard.Base.Any.Any -> Standard.Base.Any.Any","isSuspended":true,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"ensure_in_epoch","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Private","body":""}},{"Paragraph":{"body":""}}],"aliases":[],"isPrivate":true,"isUnstable":false,"memberOf":"Standard.Base.Data.Time.Date_Time","returnType":"Standard.Base.Any.Any"},{"arguments":[{"name":"year","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"month","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"day","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"hour","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"minute","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"second","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"nanosecond","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"zone","reprType":"Standard.Base.Data.Time.Time_Zone.Time_Zone","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"new_builtin","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Private","body":""}},{"Paragraph":{"body":"Obtains an instance of <code>Date_Time</code> from a year, month, day, hour, minute, second, nanosecond and timezone."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"year","description":"The year to represent, any Integer is valid."},{"name":"month","description":"the month-of-year to represent, from 1 (January) to 12 (December)"},{"name":"day","description":"the day-of-month to represent, from 1 to 31 and must be valid for the year and month"},{"name":"hour","description":"the hour-of-day to represent, from 0 to 23"},{"name":"minute","description":"the minute-of-hour to represent, from 0 to 59"},{"name":"second","description":"the second-of-minute to represent, from 0 to 59"},{"name":"nanosecond","description":"the nano-of-second to represent, from 0 to 999,999,999"},{"name":"zone","description":"the timezone"}]}}],"aliases":[],"isPrivate":true,"isUnstable":false,"memberOf":"Standard.Base.Data.Time.Date_Time","returnType":"Standard.Base.Data.Time.Date_Time.Date_Time"},{"arguments":[],"kind":"Type","returnType":"Standard.Base.Data.Time.Date_Time.Date_Time","name":"Date_Time","definedIn":"Standard.Base.Data.Time.Date_Time","reexportedIn":"Standard.Base.Main","documentation":[{"Tag":{"tag":"Private","body":""}},{"Paragraph":{"body":"A date-time with a timezone in the ISO-8601 calendar system, such as \"2007-12-03T10:15:30+01:00 Europe/Paris\".<p>Time is a representation of a date-time with a timezone. This class stores all date and time fields, to a precision of nanoseconds, and a timezone, with a zone offset used to handle ambiguous local date-times.<p>For example, the value \"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris timezone\" can be stored as <code>Time</code>."}}],"aliases":[],"isPrivate":true,"isUnstable":false},{"arguments":[],"kind":"Method","name":"enso_epoch_start","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Paragraph":{"body":"Obtains the start of the epoch for Enso."}},{"Marked":{"mark":"Info","header":"Start of the epoch","body":"<p>For Enso, start of the epoch is equal to the start of the Gregorian calendar, which is on 15th October 1582.<p>Invoking some Gregorian calendar related functionalities, like <code>is_leap_year</code>, is computed for all the date times, including those before an epoch start, with today's rules. Trying to get some Gregorian calendar related properties for a historical date times that is defined before the epoch is likely an error, as the Gregorian calendar had not yet been introduced. Therefore, for such historical date times, a warning is attached to the result."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Time.Date_Time.Date_Time"},{"arguments":[],"kind":"Method","name":"now","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Alias","body":"current time"}},{"Tag":{"tag":"Group","body":"DateTime"}},{"Paragraph":{"body":"Obtains the current date-time from the system clock in the system timezone."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current time<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_now = Date_Time.now</div>"}}],"aliases":["current time"],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Time.Date_Time.Date_Time"},{"arguments":[{"name":"year","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"month","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"1","tagValues":null},{"name":"day","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"1","tagValues":null},{"name":"hour","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"0","tagValues":null},{"name":"minute","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"0","tagValues":null},{"name":"second","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"0","tagValues":null},{"name":"millisecond","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"0","tagValues":null},{"name":"microsecond","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"0","tagValues":null},{"name":"nanosecond","reprType":"Standard.Base.Data.Numbers.Integer","isSuspended":false,"hasDefault":true,"defaultValue":"0","tagValues":null},{"name":"zone","reprType":"Standard.Base.Data.Time.Time_Zone.Time_Zone","isSuspended":false,"hasDefault":true,"defaultValue":"Time_Zone.system","tagValues":null}],"kind":"Method","name":"new","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"DateTime"}},{"Paragraph":{"body":"Obtains an instance of <code>Date_Time</code> from a year, month, day, hour, minute, second, nanosecond and timezone."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"year","description":"The year to represent, any Integer is valid."},{"name":"month","description":"the month-of-year to represent, from 1 (January) to 12 (December)"},{"name":"day","description":"the day-of-month to represent, from 1 to 31 and must be valid for the year and month"},{"name":"hour","description":"the hour-of-day to represent, from 0 to 23"},{"name":"minute","description":"the minute-of-hour to represent, from 0 to 59"},{"name":"second","description":"the second-of-minute to represent, from 0 to 59"},{"name":"millisecond","description":"the millisecond-of-second to represent, from 0 to 999."},{"name":"microsecond","description":"the microsecond-of-second to represent, from 0 to 999,999."},{"name":"nanosecond","description":"The nano-of-second to represent, from 0 to 999,999,999."},{"name":"zone","description":"the timezone"}]}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Create a new zoned date time at Unix epoch.<div class=\"example\">\nfrom Standard.Base import Date_Time, Time_Zone\n\nexample_new = Date_Time.new 1970 (zone = Time_Zone.utc)\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the 5 August 1986 at midnight.<div class=\"example\">\nfrom Standard.Base import Date_Time, Time_Zone\n\nexample_new = Date_Time.new 1986 8 5</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Any.Any"},{"arguments":[{"name":"text","reprType":"Standard.Base.Data.Text.Text","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"format","reprType":"Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter","isSuspended":false,"hasDefault":true,"defaultValue":"Date_Time_Formatter.default_enso_zoned_date_time","tagValues":null}],"kind":"Method","name":"parse","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Alias","body":"time from text"}},{"Tag":{"tag":"Group","body":"Conversions"}},{"Paragraph":{"body":"Obtains an instance of <code>Time</code> from a text such as \"2007-12-03T10:15:30+01:00 Europe/Paris\".<p>This method will return a <code>Time_Error</code> if the provided time cannot be parsed."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"text","description":"The text representing the time to be parsed."},{"name":"format","description":"A pattern describing how to parse the text, or a <code>Date_Time_Formatter</code>."}]}},{"Marked":{"mark":"Info","header":"Pattern Syntax","body":""}},{"List":{"items":["<p>If the pattern is provided as <code>Text</code>, it is parsed using the format described below. See <code>Date_Time_Formatter</code> for more options.y: Year. The number of pattern letters determines the minimum number of digits.y: The year using any number of digits.","yy: The year, using at most two digits. The default range is 1950-2049, but this can be changed by including the end year in braces e.g. <code>yy{2099}</code>.","yyyy: The year, using exactly four digits."]}},{"List":{"items":[""]}},{"Keyed":{"key":"- M: Month of year. The number of pattern letters determines the format","body":""}},{"List":{"items":["M: Any number (1-12).","MM: Month number with zero padding required (01-12).","MMM: Short name of the month (Jan-Dec).","MMMM: Full name of the month (January-December)."]}},{"Keyed":{"key":"- d: Day. The number of pattern letters determines the format","body":""}},{"List":{"items":["d: Any number (1-31).","dd: Day number with zero padding required (01-31).","ddd: Short name of the day of week (Mon-Sun).","dddd: Full name of the day of week (Monday-Sunday)."]}},{"List":{"items":["Z: Zone offset.Z, ZZ, ZZZ: A short offset form (+HHmm). No offset is indicated by \"+0000\". This can be customized by setting an alternative no offset string in curly braces, e.g. <code>zz{Z}</code>.","ZZZZ: Localized offset (e.g. GMT-08:00).","ZZZZZ: A full offset form (+HH:mm:ss). No offset is indicated by \"Z\". This can be customized as above, e.g. <code>ZZZZZ{0}</code>."]}},{"List":{"items":[""]}},{"Marked":{"mark":"Info","header":"Default Date_Time Format","body":"<p>Unless you provide a custom format, the text must represent a valid date-time as defined by the ISO-8601 format (see https://en.wikipedia.org/wiki/ISO_8601). If a time zone is present, it must be in the ISO-8601 Extended Date/Time Format (EDTF) (see https://en.wikipedia.org/wiki/ISO_8601#EDTF)."}},{"Keyed":{"key":"The time zone format consists of","body":""}},{"List":{"items":["The ISO offset date time.","If the zone ID is not available or is a zone offset then the format is complete.","An open square bracket '['.","The zone ID. This is not part of the ISO-8601 standard. Parsing is case sensitive.","A close square bracket ']'."]}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Parse UTC time.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_parse = Date_Time.parse \"2020-10-01T04:11:12Z\"\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Parse UTC-04:00 time.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_parse = Date_Time.parse \"2020-10-01T04:11:12-04:00\"\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Parse UTC-04:00 time specifying New York timezone.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_parse = Date_Time.parse \"2020-10-01T04:11:12-04:00[America/New_York]\"\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Parse UTC-04:00 time with nanoseconds.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_parse = Date_Time.parse \"2020-10-01T04:11:12.177528-04:00\"\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Recover from the parse error.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_parse = Date_Time.parse \"2020-10-01\" . catch Time_Error (_->Date_Time.now)\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Parse \"2020-05-06 04:30:20\" as Date_Time<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_parse = Date_Time.parse \"2020-05-06 04:30:20\" \"yyyy-MM-dd HH:mm:ss\"\n</div>"}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Parse \"06 of May 2020 at 04:30AM\" as Date_Tme<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_parse =\n   Date_Time.parse \"06 of May 2020 at 04:30AM\" \"dd 'of' MMMM yyyy 'at' hh:mma\"</div>"}}],"aliases":["time from text"],"isPrivate":false,"isUnstable":false,"memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Any.Any"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"year","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the year portion of the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current year.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_year = Date_Time.now.year</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"month","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the month portion of the time as a number from 1 to 12."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current month.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_month = Date_Time.now.month</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"day","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the day portion of the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current day.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_day = Date_Time.now.day</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"hour","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the hour portion of the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current hour.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_hour = Date_Time.now.hour</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"minute","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the minute portion of the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current minute.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_minute = Date_Time.now.minute</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"second","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the second portion of the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current second.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_second = Date_Time.now.second</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"millisecond","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the millisecond portion of the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current millisecond.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_millisecond = Date_Time.now.millisecond</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"microsecond","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the microsecond portion of the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current microsecond.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_microsecond = Date_Time.now.microsecond</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"include_milliseconds","reprType":"Standard.Base.Data.Boolean.Boolean","isSuspended":false,"hasDefault":true,"defaultValue":"False","tagValues":["Standard.Base.Data.Boolean.Boolean.True","Standard.Base.Data.Boolean.Boolean.False"]}],"kind":"Method","name":"nanosecond","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Get the nanosecond portion of the time."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"include_milliseconds","description":"Specifies if the whole fractional part of the second should be returned as nanoseconds. Defaults to <code>False</code>, meaning it will only return the nanosecond part in the range 0-999."}]}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current nanosecond.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_nanosecond = Date_Time.now.nanosecond</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"zone","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"DateTime"}},{"Paragraph":{"body":"Get the timezone for the time."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current timezone.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_zone = Date_Time.now.zone</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Time.Time_Zone.Time_Zone"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"to_unix_epoch_seconds","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Paragraph":{"body":"Return the number of seconds from the Unix epoch start (1.1.1970)<p>If this Date_Time is before the epoch start, returns a negative number."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current number of seconds from the Unix epoch.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_epoch = Date_Time.now.to_unix_epoch_seconds</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"to_unix_epoch_milliseconds","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Paragraph":{"body":"Return the number of milliseconds from the Unix epoch start.<p>If this Date_Time is before an epoch start, returns a negative number."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Get the current number of milliseconds from the Enso epoch.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_epoch = Date_Time.now.to_unix_epoch_milliseconds</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"to_enso_epoch_seconds","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Paragraph":{"body":"Return the number of seconds from the Enso epoch start.<p>See <code>Date_Time.enso_epoch_start</code>."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"to_enso_epoch_milliseconds","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Paragraph":{"body":"Return the number of milliseconds from the Enso epoch start.<p>See <code>Date_Time.enso_epoch_start</code>."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"time_of_day","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"DateTime"}},{"Paragraph":{"body":"Convert this point in time to time of day, discarding the time zone information."}},{"Marked":{"mark":"Example","header":"Example","body":"<p>Convert the current time to a time of day.<div class=\"example\">\nfrom Standard.Base import Date_Time\n\nexample_time_of_day = Date_Time.now.time_of_day</div>"}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null},{"name":"locale","reprType":"Standard.Base.Data.Locale.Locale | Standard.Base.Nothing.Nothing","isSuspended":false,"hasDefault":true,"defaultValue":"Nothing","tagValues":["Standard.Base.Nothing.Nothing"]}],"kind":"Method","name":"week_of_year","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Paragraph":{"body":"Returns the number of week of year this date falls into.<p>Produces a warning for a Date that is before epoch start."}},{"Keyed":{"key":"Arguments","body":""}},{"Arguments":{"args":[{"name":"locale","description":"the locale used to define the notion of weeks of year. If no locale is provided, then the ISO 8601 week of year is used."}]}},{"Marked":{"mark":"Important","header":"Locale Dependency","body":"<p>Note that this operation is locale-specific. It varies both by the local definition of the first day of week and the definition of the first week of year. For example, in the US, the first day of the week is Sunday and week 1 is the week containing January 1. In the UK on the other hand, the first day of the week is Monday, and week 1 is the week containing the first Thursday of the year. Therefore it is important to properly specify the <code>locale</code> argument."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"is_leap_year","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"DateTime"}},{"Paragraph":{"body":"Returns if the date is in a leap year.<p>Produces a warning for a Date that is before epoch start."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Boolean.Boolean"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"length_of_year","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"DateTime"}},{"Paragraph":{"body":"Returns the number of days in the year represented by this date.<p>Produces a warning for a Date that is before epoch start."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"century","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Paragraph":{"body":"Returns the century of the date."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"quarter","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"Metadata"}},{"Paragraph":{"body":"Returns the quarter of the year the date falls into."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"},{"arguments":[{"name":"self","reprType":"Standard.Base.Data.Time.Date_Time.Date_Time","isSuspended":false,"hasDefault":false,"defaultValue":null,"tagValues":null}],"kind":"Method","name":"length_of_month","definedIn":"Standard.Base.Data.Time.Date_Time","documentation":[{"Tag":{"tag":"Group","body":"DateTime"}},{"Paragraph":{"body":"Returns the number of days in the month represented by this date.<p>Produces a warning for a Date that is before epoch start."}}],"aliases":[],"isPrivate":false,"isUnstable":false,"selfType":"Standard.Base.Data.Time.Date_Time.Date_Time","memberOf":"Standard.Base.Data.Time.Date_Time.Date_Time","returnType":"Standard.Base.Data.Numbers.Integer"}]
