[
    {
        "type": "module",
        "module": "Standard.Base.Data.Set",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Set",
        "name": "Set",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " An unordered collection of unique values.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Set",
        "name": "Value",
        "arguments": [
            {
                "name": "underlying_map",
                "reprType": "Standard.Base.Data.Map.Map Standard.Base.Any.Any Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Set.Set",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "underlying_map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map Standard.Base.Any.Any Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Map.Map Standard.Base.Any.Any Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "from_vector",
        "arguments": [
            {
                "name": "vector",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_on_duplicates",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nConstructs a new set from a vector.\n\nArguments:\n- vector: the vector of elements to add to the set.\n- error_on_duplicates: specifies if duplicate elements in the input\n should result in an error. Defaults to `False`, meaning that the last\n occurrence of each duplicated element is retained in the set. If set to\n `True` it will raise an `Illegal_Argument` if duplicate elements are\n encountered.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "empty",
        "arguments": [],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Set.Set",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nConstructs an empty set.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Conversions\nReturns a vector containing all elements of this set.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "size",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the number of elements in this set.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the set is empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the set is not empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this set contains a given value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "insert",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Set.Set",
        "isStatic": false,
        "documentation": " ALIAS add\nGROUP Calculations\nAdds a value to this set.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "union",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Set.Set",
        "isStatic": false,
        "documentation": " GROUP Calculations\nCreates a union of the two sets.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "intersection",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Set.Set",
        "isStatic": false,
        "documentation": " GROUP Calculations\nCreates an intersection of the two sets.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "difference",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Set.Set",
        "isStatic": false,
        "documentation": " Computes a set difference.\n\nReturns the set that contains all elements of this set that are not in\nthe other set.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Set.Set",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Set",
        "name": "Set_Comparator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "compare",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set_Comparator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Set",
        "name": "hash",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Set.Set_Comparator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.Process.Exit_Code",
        "documentation": null,
        "reexport": "Standard.Base.System.Process"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.Process.Exit_Code",
        "name": "Exit_Code",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " The exit codes that the process can return.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Process.Exit_Code",
        "name": "Success",
        "arguments": [],
        "returnType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "documentation": " The process exited with a success.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Process.Exit_Code",
        "name": "Failure",
        "arguments": [
            {
                "name": "code",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "documentation": " The process exited with a failure.\n\nArguments:\n- code: The exit code for the failure.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Exit_Code",
        "name": "code",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Exit_Code",
        "name": "from_number",
        "arguments": [
            {
                "name": "code",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "returnType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreate exit code from a number.\n\nArguments:\n- code: The exit code you want to create.\n\n> Example\n Create a failure exit code.\n\n     import Standard.Base.System.Process.Exit_Code.Exit_Code\n\n     example_from_number = Exit_Code.from_number 1",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Exit_Code",
        "name": "to_number",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConvert exit code to a number.\n\n> Example\n Convert a success code to a corresponding number.\n\n     import Standard.Base.System.Process.Exit_Code.Exit_Code\n\n     example_to_number = Exit_Code.Success.to_number",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Exit_Code",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Exit_Code.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Helpers",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Helpers",
        "name": "expect_text",
        "arguments": [
            {
                "name": "text_maybe",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Helpers",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nAssert that `text_maybe` is a Text, then call the action.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "new_builtin",
        "arguments": [
            {
                "name": "hour",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "minute",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "second",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "nanosecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "isStatic": true,
        "documentation": " PRIVATE\n\nObtains an instance of `Time_Of_Day` from an hour, minute, second\nand nanosecond.\n\nArguments:\n- hour: The hour-of-day to represent, from 0 to 23.\n- minute: The minute-of-hour to represent, from 0 to 59.\n- second: The second-of-minute to represent, from 0 to 59.\n- nanosecond: The nano-of-second to represent, from 0 to 999,999,999.\n\nRecommended to use `Time_Of_Day.new` instead which handles potential exceptions.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "Time_Of_Day",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\n\nThis type is a date-time object that represents a time, often viewed\nas hour-minute-second.\n\nTime is represented to nanosecond precision. For example, the value\n\"13:45.30.123456789\" can be stored in a `Time_Of_Day`.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "now",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "isStatic": true,
        "documentation": " GROUP DateTime\nObtains the current time from the system clock in the default time-zone.\n\n> Example\n Get the current time in the default time zone.\n\n     from Standard.Base import Time_Of_Day\n\n     example_now = Time_Of_Day.now",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "new",
        "arguments": [
            {
                "name": "hour",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "minute",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "second",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "millisecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "microsecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "nanosecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " GROUP DateTime\nObtains an instance of `Time_Of_Day` from an hour, minute, second\nand nanosecond.\n\nArguments:\n- hour: The hour-of-day to represent, from 0 to 23.\n- minute: The minute-of-hour to represent, from 0 to 59.\n- second: The second-of-minute to represent, from 0 to 59.\n- millisecond: the millisecond-of-second to represent, from 0 to 999.\n- microsecond: the microsecond-of-second to represent, from 0 to 999,999.\n- nanosecond: The nano-of-second to represent, from 0 to 999,999,999.\n\nReturns a `Time_Error` if the provided time is not a valid time.\n\n> Example\n Create a new local time at Unix epoch.\n\n     from Standard.Base import Time_Of_Day\n\n     example_epoch = Time_Of_Day.new\n\n> Example\n Get the local time at 9:30.\n\n     from Standard.Base import Time_Of_Day\n\n     example_epoch = Time_Of_Day.new hour=9 minute=30",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "parse",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time_Formatter.iso_time",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " GROUP Conversions\nObtains an instance of `Time_Of_Day` from a text such as \"10:15\".\n\nArguments:\n- text: The text to parse as a time of day.\n- format: A pattern describing how to parse the text,\n or a `Date_Time_Formatter`.\n\nReturns a `Time_Error` if the provided text cannot be parsed using the\ndefault format.\n\n? Default Time Format\n Unless you provide a custom format, the text must represent a valid\n time and is parsed using the ISO-8601 extended local time format.\n The format consists of:\n\n - Two digits for the hour-of-day. This is pre-padded by zero to ensure two\n   digits.\n - A colon\n - Two digits for the minute-of-hour. This is pre-padded by zero to ensure\n   two digits.\n - If the second-of-minute is not available then the format is complete.\n - A colon\n - Two digits for the second-of-minute. This is pre-padded by zero to ensure\n   two digits.\n - If the nano-of-second is zero or not available then the format is\n   complete.\n - A decimal point\n - One to nine digits for the nano-of-second. As many digits will be output\n   as required.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - H: 24h hour of day (0-23).\n - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n   between AM and PM.\n - m: Minute of hour.\n - s: Second of minute.\n - f: Fractional part of the second. The number of pattern letters\n   determines the number of digits. If one letter is used, any number of\n   digits will be accepted.\n - a: AM/PM marker.\n\n> Example\n Get the time 15:05:30.\n\n     from Standard.Base import Time_Of_Day\n\n     example_parse = Time_Of_Day.parse \"15:05:30\"\n\n> Example\n Recover from the parse error.\n\n     from Standard.Base import Time_Of_Day\n     from Standard.Base.Errors.Common import Time_Error\n\n     example_parse = Time_Of_Day.parse \"half twelve\" . catch Time_Error _->\n         Time_Of_Day.new\n\n> Example\n Parse \"04:30:20\" as Time_Of_Day.\n\n     from Standard.Base import Time_Of_Day\n\n     example_parse = Time_Of_Day.parse \"04:30:20\" \"HH:mm:ss\"\n\n> Example\n Parse \"4:30AM\" as Time_Of_Day\n\n     from Standard.Base import Time_Of_Day\n\n     example_parse = Time_Of_Day.parse \"4:30AM\" \"h:mma\"",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "hour",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the hour portion of the time of day.\n\n> Example\n Get the current hour.\n\n     from Standard.Base import Time_Of_Day\n\n     example_hour = Time_Of_Day.now.hour",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "minute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the minute portion of the time of day.\n\n> Example\n Get the current minute.\n\n     from Standard.Base import Time_Of_Day\n\n     example_minute = Time_Of_Day.now.minute",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the second portion of the time of day.\n\n> Example\n Get the current second.\n\n     from Standard.Base import Time_Of_Day\n\n     example_second = Time_Of_Day.now.second",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "millisecond",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the millisecond portion of the time of day.\n\n> Example\n Get the current millisecond.\n\n     from Standard.Base import Time_Of_Day\n\n     example_millisecond = Time_Of_Day.now.millisecond",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "microsecond",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the microsecond portion of the time of day.\n\n> Example\n Get the current microsecond.\n\n     from Standard.Base import Time_Of_Day\n\n     example_microsecond = Time_Of_Day.now.microsecond",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "nanosecond",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_milliseconds",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the nanosecond portion of the time of day.\n\nArguments:\n- include_milliseconds: Specifies if the whole fractional part of the\n second should be returned as nanoseconds. Defaults to `False`, meaning\n it will only return the nanosecond part in the range 0-999.\n\n> Example\n Get the current nanosecond.\n\n     from Standard.Base import Time_Of_Day\n\n     example_nanosecond = Time_Of_Day.now.nanosecond",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "start_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Time_Period.Day",
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the first time within the `Time_Period` containing self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "end_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Time_Period.Day",
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the last time within the `Time_Period` containing self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "to_seconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Conversions\nExtracts the time as the number of seconds, from 0 to 24 * 60 * 60 - 1.\n\n> Example\n Convert the current time into elapsed seconds in the day.\n\n     from Standard.Base import Time_Of_Day\n\n     example_to_seconds = Time_Of_Day.now.to_seconds",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "to_date_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "zone",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Time_Zone.system",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " GROUP Conversions\nCombine this time of day with a date to create a point in time.\n\nArguments:\n- date: The date on which this time should occur.\n- zone: The time-zone in which the time is specified.\n\n> Example\n Convert local time to 1st January 2020 12:30 at system timezone.\n\n     from Standard.Base import Time_Of_Day\n\n     example_to_time = Time_Of_Day.new 12 30 . to_time (Date.new 2020)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "date_part",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns a requested time part as integer.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "date_diff",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nComputes a time difference between the two times of day.\n\nIt returns an integer expressing how many periods fit between the two\ntimes of day.\n\nThe difference will be positive if `end` is greater than `self`.\n\nArguments:\n- end: A time of day to compute the difference from.\n- period: The period to compute the difference in.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "date_add",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "isStatic": false,
        "documentation": " GROUP DateTime\nShifts the time of day by a specified period.\n\nArguments:\n- amount: An integer specifying by how many periods to shift the time.\n- period: The period by which to shift.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Time.Duration.Duration | Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS add duration\nGROUP Operators\nAdd the specified amount of time to this instant to get a new instant.\n\nArguments:\n- amount: The amount of time to add to this instant. It can be a\n `Duration` or `Time_Period`.\n\n> Example\n Add a `Duration` to a `Time_Of_Day`.\n\n     from Standard.Base import Time_Of_Day, Duration\n\n     example_plus = Time_Of_Day.new + (Duration.new seconds=3)\n\n> Example\n Add a `Time_Period` to a `Time_Of_Day`.\n\n     from Standard.Base import Time_Of_Day, Time_Period\n\n     example_plus = Time_Of_Day.new + Time_Period.Hour",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Time.Duration.Duration | Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS subtract duration\nGROUP Operators\nSubtract the  specified amount of time from this instant to get a new\ninstant.\n\nArguments:\n- amount: The amount of time to add to this instant. It can be a\n `Duration` or `Time_Period`.\n\n> Example\n Subtract 12 hours from a local time.\n\n     from Standard.Base import Time_Of_Day, Duration\n\n     example_minus = Time_Of_Day.now - (Duration.new hours=12)\n\n> Example\n Subtract a `Time_Period` from a `Time_Of_Day`.\n\n     from Standard.Base import Time_Of_Day, Time_Period\n\n     example_plus = Time_Of_Day.new - Time_Period.Hour",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing this Time_Of_Day.\n\n> Example\n Convert the current time to a JS_Object.\n\n     example_to_json = Time_Of_Day.now.to_js_object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Time_Of_Day.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "format",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Conversions\nFormat this time of day using the provided formatter pattern.\n\nArguments:\n- format: A pattern describing how to format the text,\n or a `Date_Time_Formatter`.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - H: 24h hour of day (0-23).\n - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n   between AM and PM.\n - m: Minute of hour.\n - s: Second of minute.\n - f: Fractional part of the second. The number of pattern letters\n   determines the number of digits. If one letter is used, any number of\n   digits will be accepted.\n - a: AM/PM marker.\n\n> Example\n Format \"16:21:10\" as \"16:21:00.1234\"\n\n     from Standard.Base import Time_Of_Day\n\n     example_format = Time_Of_Day.new 16 21 10 . format \"HH:mm:ss.SSSS\"\n\n> Example\n Format \"16:21:10\" as \"16:21:00.123456789\"\n\n     from Standard.Base import Time_Of_Day\n\n     example_format = Time_Of_Day.new 16 21 10 . format \"HH:mm:ss.n\"\n\n> Example\n Format \"16:21:10\" as \"4:21pm\"\n\n     from Standard.Base import Time_Of_Day\n\n     example_format = Time_Of_Day.new 16 21 10 . format \"h:mma\"\n\n> Example\n Format \"16:21:10\" as \"04:21:10pm\"\n\n     from Standard.Base import Time_Of_Day\n\n     example_format = Time_Of_Day.new 16 21 10 . format \"hh:mm:ssa\"\n\n> Example\n Format \"16:21:10\" as \"hour:4\"\n\n     from Standard.Base import Time_Of_Day\n\n     example_format = Time_Of_Day.new 16 21 10 . format \"'hour:'h\"",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Of_Day",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Polyglot",
        "documentation": " A module representing interactions with polyglot languages.\nPolyglot is a term that refers to other languages (such as Java) that are\nrunning on the same JVM.",
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Polyglot",
        "name": "Polyglot",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nUtilities for working with Polyglot objects.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "get_array_size",
        "arguments": [
            {
                "name": "array",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReads the number of elements in a given polyglot array object.\n\nArguments:\n- array: a polyglot array object, originating in any supported language.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "read_array_element",
        "arguments": [
            {
                "name": "array",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReads the element in a given polyglot array object.\n\nArguments:\n- index: The index to get the element from.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "execute",
        "arguments": [
            {
                "name": "callable",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nExecutes a polyglot function object (e.g. a lambda).\n\nArguments:\n- callable: The polyglot function object to execute.\n- arguments: A vector of arguments to callable.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "get_member",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "member_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nPerforms a by-name lookup for a member in a polyglot object.\n\nArguments:\n- object: The polyglot object on which to perform the member lookup.\n- member_name: The textual name of the member to lookup.\n\n> Example\n  Look up the field a on an object o.\n      Polyglot.get_member o \"a\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "get_members",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns a polyglot array of all of the members of the provided object.\n\nArguments:\n- object: The object from which to get a list of member names.\n\n> Example\n  Get a list of the fields for an object o.\n      Polyglot.get_members o",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "new",
        "arguments": [
            {
                "name": "constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nInstantiates a polyglot object using the provided constructor.\n\nArguments:\n- constructor: The constructor with which to instantiate the object.\n- arguments: A vector of the arguments to pass to the polyglot\n constructor.\n\n> Example\n Instantiate a new Java Integer with the value 1.\n     Polyglot.new Integer [1]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "invoke",
        "arguments": [
            {
                "name": "target",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nInvokes a method on a polyglot object by name.\n\nArguments:\n- target: The polyglot object on which to call the method.\n- name: The name of the method.\n- arguments: The arguments to pass to the method given by name.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "has_source_location",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nChecks if `value` defines a source location.\n\nSource locations are typically exposed by functions, classes, sometimes\nalso other objects to specify their allocation sites.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "get_source_location",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nGets the source location of `value`.\n\nSource locations are typically exposed by functions, classes, sometimes\nalso other objects to specify their allocation sites.\nThis method will throw a polyglot exception if\n`Polyglot.has_source_location value` returns `False`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "is_language_installed",
        "arguments": [
            {
                "name": "language_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nChecks if a polyglot language is installed in the runtime environment.\n\nArguments:\n- language_name: The name of the language to test.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "get_executable_name",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Polyglot",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns the executable name of a polyglot object.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Polyglot",
        "name": "Java",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Utilities for working with Java polyglot objects.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "add_to_class_path",
        "arguments": [
            {
                "name": "path",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Java",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nAdds the provided entry to the host class path.\n\nArguments:\n- path: The java classpath entry to add.\n\nUse of the actual polyglot imports system should be preferred to use of\nthis method.\n\n> Example\n Adding Random to the classpath.\n\n    Java.add_to_class_path \"java.util.Random\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "lookup_class",
        "arguments": [
            {
                "name": "name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Java",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nLooks up a java symbol on the classpath by name.\n\nArguments:\n- name: The name of the java symbol to look up.\n\nUse of the actual polyglot imports system should be preferred to use of\nthis method.\n\n> Example\n Look up java's Random class.\n\n     Java.lookup_class \"java.util.Random\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Polyglot",
        "name": "is_instance",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "class",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Polyglot.Java",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nChecks whether an object is an instance of a given class.\n\nArguments:\n- object: The object to check for class membership.\n- class: The java class to check for membership in.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Runtime.Source_Location",
        "documentation": null,
        "reexport": "Standard.Base.Runtime"
    },
    {
        "type": "type",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "Source_Location",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nADVANCED\nRepresents a source location in Enso code. Contains information about the\nsource file and code position within it."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "Value",
        "arguments": [
            {
                "name": "prim_location",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "prim_location",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nPretty prints the location.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "start_line",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the 1-based line index of the start of this code range.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "end_line",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the 1-based line index of the end of this code range.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "start_column",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the 1-based column index of the start of this code range.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "end_column",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the 1-based column index of the end of this code range.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "formatted_coordinates",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " Returns a pretty-printed location (file and line info).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Source_Location",
        "name": "file",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " Return the source file corresponding to this location.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Extensions",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "reverse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Text\nReturns a new `Text` object with the characters in the reverse order of the input.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Reverse the text \"Hello, world!\".\n\n     \"Hello, world!\".reverse",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Text.Text -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies the provided `function` to each character in `self`.\n\nArguments:\n- function: The operation to apply to each character in the text.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Print each character in the text \"aaa\".\n\n     \"aaa\".each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS get character\nGROUP Selections\n\nReturns a character from the text at the specified index (0-based).\n\nArguments:\n - index: The location in the text to get the character from. The\n   index is also allowed be negative, then the characters are\n   counted from the end of the text, i.e. -1 will correspond to the\n   last character.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Get the individual characters in the text \"건반(Korean)\".\n\n     \"건반(Korean)\".at 1 == \"반\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS get character\n\nReturns a character from the text at the specified index (0-based).\nIf the index is invalid then `if_missing` is returned.\n\nArguments:\n - index: The location in the text to get the character from. The\n   index is also allowed be negative, then the characters are\n   counted from the end of the text, i.e. -1 will correspond to the\n   last character.\n - if_missing: The value to return if the index is out of bounds.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Get the individual characters in the text \"건반(Korean)\".\n\n     \"건반(Korean)\".get 1 == \"반\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the first character from the text.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Get the first character in the text \"건반(Korean)\".\n\n     \"건반(Korean)\".first == \"건\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the second character from the text.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Get the second character in the text \"건반(Korean)\".\n\n     \"건반(Korean)\".second == \"반\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the last character from the text.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Get the last character in the text \"건반(Korean)\".\n\n     \"건반(Korean)\".last == \")\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "characters",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS get characters\nGROUP Text\n\nReturns a vector containing all characters in the given text.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Get the individual characters in the text \"건반(Korean)\".\n\n     \"건반(Korean)\".characters",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": ".*",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nFind the regular expression `pattern` in `self`, returning the first match\nif present or `Nothing` if not found.\n\nArguments:\n- pattern: The pattern to match `self` against.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\nIf an empty regex is used, `find` throws an `Illegal_Argument` error.\n\nIf a non-default locale is used, `find` throws an `Illegal_Argument` error.\n\n> Example\n Find the first substring matching the regex.\n\n     example_find =\n         ## This matches `abc` @ character 11\n         \"aabbbbccccaabcaaaa\".find \"a[ab]c\"\n     example_find_insensitive =\n         ## This matches `aBc` @ character 11\n         \"aabbbbccccaaBcaaaa\".find \"a[ab]c\" Case_Sensitivity.Insensitive",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "find_all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": ".*",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nFinds all the matches of the regular expression `pattern` in `self`,\nreturning a Vector. If not found, will be an empty Vector.\n\nArguments:\n- pattern: The pattern to match `self` against.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\nIf an empty regex is used, `find_all` throws an `Illegal_Argument` error.\n\nIf a non-default locale is used, `find_all` throws an `Illegal_Argument` error.\n\n> Example\n Find the substring matching the regex.\n\n     example_find_all =\n          ## This matches `aabbbbc` @ character 0 and `abc` @ character 11\n         \"aabbbbccccaabcaaaa\".find_all \"a[ab]+c\"\n     example_find_all_insensitive =\n          ## This matches `aABbbbc` @ character 0 and `aBC` @ character 11\n         \"aABbbbccccaaBCaaaa\".find_all \"a[ab]+c\" Case_Sensitivity.Insensitive",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "match",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": ".*",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS check matches\nGROUP Text\n\nChecks if the whole text in `self` matches a provided `pattern`.\n\nArguments:\n- pattern: The pattern to match `self` against.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\nIf an empty regex is used, `match` throws an `Illegal_Argument` error.\n\nIf a non-default locale is used, `match` throws an `Illegal_Argument` error.\n\n> Example\n Checks if whole text matches a basic email regex.\n\n     example_match =\n         regex = \".+ct@.+\"\n         # Evaluates to true\n         \"contact@enso.org\".match regex\n     example_match_insensitive =\n         regex = \".+ct@.+\"\n         # Evaluates to true\n         \"CONTACT@enso.org\".match regex Case_Sensitivity.Insensitive",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "to_regex",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_insensitive",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Text\nCompile the text into a regex pattern that can be used for matching.\n\nArguments\n- case_insensitive: Enables or disables case-insensitive matching. Case\n insensitive matching behaves as if it normalises the case of all input\n text before matching on it.\n\nIf an empty regex is used, `compile` throws an `Illegal_Argument` error.\n\n? Why Compile?\n While many regex engines are able to cache ad-hoc patterns, it is often\n useful to be able to manually retain a pattern that you have computed. This\n function exists so you can hold onto the resultant `Pattern` object,\n instead of immediately proceeding to match using it.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "split",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "delimiter",
                "reprType": "Standard.Base.Data.Text.Text | (Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": ",",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            },
            {
                "name": "use_regex",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "(Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text) | Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
        "isStatic": false,
        "documentation": " ALIAS split text\nGROUP Conversions\n\nTakes a delimiter and returns the vector that results from splitting `self`\non each of its occurrences.\n\nArguments:\n- delimiter: The pattern used to split the text.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively. The values are compared case sensitively by default.\n- use_regex: If true, the term is used as a regular expression.\n\n> Example\n Split the text on any occurrence of the separator `\"::\"`.\n\n     text = \"Namespace::package::package::Type\"\n     text.split \"::\" == [\"Namespace\", \"package\", \"package\", \"Type\"]\n\n> Example\n Split the text on a regex pattern.\n\n     \"abc--def==>ghi\".split \"[-=>]+\" use_regex=True == [\"abc\", \"def\", \"ghi\"]\n\n> Example\n Split the text on any whitespace.\n\n     'abc  def\\tghi'.split '\\\\s+' use_regex=True == [\"abc\", \"def\", \"ghi\"]\n\n> Example\n Split with a vector of strings.\n\n     'azbzczdzezfzg'.split ['b', 'zez'] == ['az', 'zczd', 'fzg']",
        "annotations": [
            "delimiter"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "tokenize",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": ".",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Conversions\nTakes an input string and and a pattern and returns all the matches as a\n`Vector Text`. If the pattern contains marked groups, the values are\nconcatenated together; otherwise the whole match is returned.\n\nArguments:\n- input: The text to tokenize.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively. The values are compared case sensitively by default.\n\n> Example\n Split to blocks of 3 characters.\n\n    \"ABCDEF\" . tokenize  \"...\" == [\"ABC\",\"DEF\"]\n\n> Example\n Split to blocks of 3 characters taking first and third letters.\n\n    \"ABCDEF\" . tokenize \"(.).(.)\" == [\"AC\",\"DF\"]\n\n> Example\n Split a text on any white space.\n\n    'Hello Big\\r\\nWide\\tWorld\\nGoodbye!' . tokenize \"(\\S+)(?:\\s+|$)\"\n        == [\"Hello\",\"Big\",\"Wide\",\"World\",\"Goodbye!\"]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "replace",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "term",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "replacement",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Default",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            },
            {
                "name": "only_first",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS replace text\nGROUP Text\nPerform a text or regex replace.\n\nReturns the text with all matched elements replaced by the provided\nreplacement. If `input` is empty, the function returns the input unchanged.\n\nThe replacement string can contain references to groups matched by the\nregex. The following syntaxes are supported:\n   $0: the entire match string\n   $&: the entire match string\n   $n: the nth group\n   $<foo>: Named group `foo`\n\nArguments:\n- term: The `Text` or `Regex` to find.\n- replacement: The text to replace matches with.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n- only_first: If True, only replace the first match.\n\nIf an empty regex is used, `replace` throws an `Illegal_Argument` error.\n\nIf a non-default locale is used with a regex, `replace` throws an\nIllegal_Argument error.\n\n> Example\n Replace letters in the text \"aaa\".\n\n     'aaa'.replace 'aa' 'b' == 'ba'\n\n> Example\n Replace all occurrences of letters 'l' and 'o' with '#'.\n\n     \"Hello World!\".replace \"[lo]\".to_regex \"#\" == \"He### W#r#d!\"\n\n> Example\n Replace the first occurrence of letter 'l' with '#'.\n\n     \"Hello World!\".replace \"l\" \"#\" only_first=True == \"He#lo World!\"\n\n> Example\n Replace texts in quotes with parentheses.\n\n      '\"abc\" foo \"bar\" baz'.replace '\"(.*?)\"'.to_regex '($1)' == '(abc) foo (bar) baz'\n\n! Matching Grapheme Clusters\n In case-insensitive mode, a single character can match multiple characters,\n for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to\n match only a part of some single grapheme cluster, for example in the text\n `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.\n Since we do not have the resolution to distinguish such partial matches, a\n match which matched just a part of some grapheme cluster is extended and\n treated as if it matched the whole grapheme cluster. Thus the whole\n grapheme cluster may be replaced with the replacement text even if just a\n part of it was matched.\n\n> Example\n Extended partial matches in case-insensitive mode.\n\n     # The ß symbol matches the letter `S` twice in case-insensitive mode, because it folds to `ss`.\n     'ß'.replace 'S' 'A' case_sensitivity=Case_Sensitivity.Insensitive . should_equal 'AA'\n     # The 'ﬃ' ligature is a single grapheme cluster, so even if just a part of it is matched, the whole grapheme is replaced.\n     'aﬃb'.replace 'i' 'X' case_sensitivity=Case_Sensitivity.Insensitive . should_equal 'aXb'\n\n> Example\n Regexp replace.\n\n '<a href=\"url\">content</a>'.replace '<a href=\"(.*?)\">(.*?)</a>'.to_regex '$2 is at $1'== 'content is at url'",
        "annotations": [
            "term"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "words",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "keep_whitespace",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS get words\nGROUP Text\n\nReturns a vector containing all words in the given text.\n\nArguments:\n- keep_whitespace: Whether or not the whitespace around the words should be\n preserved. If set to `True`, the whitespace will be included as a \"word\" in\n the output.\n\n! What is a Word?\n A word is defined based on the definition of Word Boundaries in the Unicode\n Standard Annex 29, supplemented by language-specific dictionaries for\n Chinese, Japanese, Thai, and Khmer.\n\n> Example\n Getting the words in the sentence \"I have not one, but two cats.\"\n\n    \"I have not one, but two cats.\".words == ['I', 'have', 'not', 'one', ',', 'but', 'two', 'cats', '.']\n\n> Example\n Getting the words in the Thai sentence \"แมวมีสี่ขา\"\n\n     \"แมวมีสี่ขา\".words == ['แมว', 'มี', 'สี่', 'ขา']",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "lines",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "keep_endings",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS get lines\nGROUP Text\n\nSplits the text into lines, based on '\\n', '\\r' or '\\r\\n' line endings.\n\nEmpty lines are added for leading newlines. Multiple consecutive\nnewlines will also yield additional empty lines. A line ending at the end of\nthe line is not required, but if it is present it will not cause an empty\nline to be added at the end.\n\n> Example\n Split the text 'a\\nb\\nc' into lines.\n\n    'a\\nb\\nc'.lines == ['a', 'b', 'c']\n\n> Example\n Split the text '\\na\\n\\nb\\n\\n' into lines.\n\n    '\\na\\n\\nb\\n\\n\\n'.lines == ['', 'a', '', 'b', '', '']\n\n> Example\n Split the text '\\na\\nb\\n' into lines, keeping the line endings.\n\n    '\\na\\nb\\n'.lines keep_endings=True == ['\\n', 'a\\n', 'b\\n']",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "insert",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Text\nInserts text value at the specified index.\n\nArguments:\n - index: The position (0-based) in the text to inset text at.\n   When the index is non-negative the text is inserted before the\n   specified position.\n   When the index is negative, then the characters are counted from\n   the end of the text and the text is inserted after the specified\n   position, i.e. -1 will insert the text after the last character.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\nInsert text at a specified index\n\n     \"Hello World!\".insert 0 \" Cruel\" == \" CruelHello World!\"\n     \"Hello World!\".insert 5 \" Cruel\" == \"Hello Cruel World!\"\n     \"Hello World!\".insert -1 \" Cruel\" == \"Hello World! Cruel\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "is_digit",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Logical\nReturns if a character from the text at the specified index (0-based) is a\ndigit (0-9).\n\nArguments:\n - index: The location in the text to get the character from. The\n   index is also allowed to be negative, then the characters are\n   counted from the end of the text, i.e. -1 will correspond to the\n   last character.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Check if an individual character is a digit:\n\n     \"0\".is_digit == True\n     \"A0\".is_digit == False\n     \"A0\".is_digit 1 == True\n     \"건반(Korean)\".is_digit 1 == False",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "is_whitespace",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the text consists only of whitespace characters.\n\n> Example\n Check if a text is whitespace only.\n\n     ' \\t'.is_whitespace == True\n     \"0 \".is_whitespace == False",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Warning",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " ADVANCED\nReturns a vector containing bytes representing the specified encoding of the\ninput text.\n\nThis is useful for low-level operations, such as binary data encoding.\n\nArguments:\n- encoding: The text encoding to encode self with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n function.\n By default, a warning is issued, but the operation proceeds.\n If set to `Report_Error`, the operation fails with a dataflow error.\n If set to `Ignore`, the operation proceeds without errors or warnings.\n\n> Example\n Get the ASCII bytes of the text \"Hello\".\n\n     \"Hello\".bytes (Encoding.ascii)",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "from_bytes",
        "arguments": [
            {
                "name": "bytes",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Error",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " Takes a vector of bytes and returns Text resulting from decoding it using the\nspecified encoding.\n\nArguments:\n- bytes: The vector of UTF-8 bytes.\n- encoding: The text encoding to decode the bytes with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n function. By default, a dataflow error is raised.\n\n> Example\n Get the ASCII bytes of the text \"Hello\".\n\n     \"Hello\".bytes (Encoding.ascii)",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "utf_8",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Warning",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns a vector containing bytes representing the UTF-8 encoding of the\ninput text.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.\n\nArguments:\n- on_problems: Specifies the behavior when a problem occurs during the\n function.\n By default, a warning is issued, but the operation proceeds.\n If set to `Report_Error`, the operation fails with a dataflow error.\n If set to `Ignore`, the operation proceeds without errors or warnings.\n\n> Example\n Get the UTF-8 bytes of the text \"Hello\".\n\n     \"Hello\".utf_8",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "from_utf_8",
        "arguments": [
            {
                "name": "bytes",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Error",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " Takes a vector of bytes and returns Text resulting from decoding it as UTF-8.\n\nArguments:\n- bytes: The vector of UTF-8 bytes.\n- on_problems: Specifies the behavior when a problem occurs during the\n function. By default, a dataflow error is raised.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.\n\n> Example\n Decoding the bytes to get a text.\n\n     Text.from_utf_8 [-32, -92, -107, -32, -91, -115, -32, -92, -73, -32, -92, -65]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "char_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns a vector containing the UTF-16 characters that encode the input text.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.\n\n> Example\n Get the character vector of the text \"Hello\".\n\n     \"Hello\".char_vector",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "from_char_vector",
        "arguments": [
            {
                "name": "chars",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " Takes a vector of characters and returns the text that results from it.\n\nArguments:\n- chars: The vector of UTF-16 characters.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "codepoints",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns a vector containing integers representing the Unicode codepoints of\nthe input text.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.\n\n> Example\n Get the codepoints of the text \"Hello\".\n\n     \"Hello\".codepoints",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "from_codepoints",
        "arguments": [
            {
                "name": "codepoints",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " Takes an array of numbers and returns the text resulting from interpreting it\nas a sequence of Unicode codepoints.\n\nThis is useful for low-level operations, such as binary data encoding and\ndecoding.\n\n> Example\n Converting a vector of codepoints back into a text.\n     Text.from_codepoints [129318, 127996, 8205, 9794, 65039]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "starts_with",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "prefix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS check prefix\nGROUP Text\n\nChecks whether `self` starts with `prefix`.\n\nArguments:\n- prefix: The prefix to see if `self` starts with.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\n! Unicode Equality\n The definition of equality includes Unicode canonicalization. I.e. two\n texts are equal if they are identical after canonical decomposition. This\n ensures that different ways of expressing the same character in the\n underlying binary representation are considered equal.\n\n     'ś' . starts_with 's' == False\n     's\\u{301}' . starts_with 's' == False\n     's\\u{301}' . starts_with 'ś' == True\n     'ś' . starts_with 's\\u{301}' == True\n\n> Example\n See if the text \"Hello!\" starts with the specified prefix.\n\n     \"Hello!\".starts_with \"Hello\" == True\n     \"Hello!\".starts_with \"hello\" == False\n     \"Hello!\".starts_with \"hello\" Case_Sensitivity.Insensitive == True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "ends_with",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "suffix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS check suffix\nGROUP Text\n\nChecks whether `self` ends with `suffix`.\n\nArguments:\n- suffix: The suffix to see if `self` ends with.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\n! Unicode Equality\n The definition of equality includes Unicode canonicalization. I.e. two\n texts are equal if they are identical after canonical decomposition. This\n ensures that different ways of expressing the same character in the\n underlying binary representation are considered equal.\n\n> Example\n See if the text \"Hello World\" ends with the specified suffix.\n\n     \"Hello World\".ends_with \"World\" == True\n     \"Hello World\".ends_with \"world\" == False\n     \"Hello World\".ends_with \"world\" Case_Sensitivity.Insensitive == True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "term",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS contains\nGROUP Logical\n\nChecks whether `self` contains `sequence` as its substring.\nReturns: `True` if term is found within `self`. `False` otherwise.\n\nArguments:\n- term: The term to find.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\n! Unicode Equality\n The definition of equality includes Unicode canonicalization. I.e. two\n texts are equal if they are identical after canonical decomposition. This\n ensures that different ways of expressing the same character in the\n underlying binary representation are considered equal.\n\n     'ś' . contains 's' == False\n     's\\u{301}' . contains 's' == False\n     's\\u{301}' . contains 'ś' == True\n     'ś' . contains 's\\u{301}' == True\n\n> Example\n See if the text \"Hello\" contains the text \"ell\".\n\n     \"Hello\".contains \"ell\"\n\n> Example\n See if the text \"Cześć\" contains the text 's\\u{301}' (which folds to 'ś').\n\n     \"Cześć\".contains 's\\u{301}'\n\n> Example\n See if the text \"Hello!\" contains the text 'LO', ignoring case.\n\n     \"Hello!\".contains \"LO\" Case_Sensitivity.Insensitive",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "*",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Operators\nTakes an integer and returns a new text, consisting of `count` concatenated\ncopies of `self`.\n\nArguments:\n- count: The number of times that the text `self` should be repeated to make\n the new text.\n\n> Example\n Repeat the string \"A\" five times.\n\n     \"A\" * 5 == \"AAAAA\"\n\n> Example\n Repeat the string \"Hello \" twice.\n\n     \"Hello \" * 2 == \"Hello Hello \"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "repeat",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Calculations\nTakes an integer and returns a new text, consisting of `count` concatenated\ncopies of `self`.\n\nArguments:\n- count: The number of times that the text `self` should be repeated to make\n the new text.\n\n> Example\n Repeat the string \"ABBA\" five times.\n\n     \"ABBA\".repeat 5 == \"ABBAABBAABBAABBAABBA\"\n\n> Example\n Repeat the string \"Hello \" twice.\n\n     \"Hello \".repeat 2 == \"Hello Hello \"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "take",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range | Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Index_Sub_Range.1.First",
                "tagValues": [
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.Before",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.Before_Last",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.After",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.After_Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS first, last, left, mid, right, slice, substring\nGROUP Selections\nCreates a new Text by selecting the specified range of the input.\n\nThis can select a section of text from the beginning, end, or middle of the\ninput using various criteria defined by the range parameter.\n\nArguments:\n- range: The section of the self text to return.\n If a `Text_Sub_Range`, then the selection is interpreted following the rules of that type.\n If a `Range`, the selection is specified by two indices, from and to.\n\nReturns:\nThe part of the input as specified by the range parameter.\n\n> Examples\n Various different ways to take part of \"Hello World!\"\n\n     \"Hello World!\".take First == \"H\"\n     \"Hello World!\".take (First 5) == \"Hello\"\n     \"Hello World!\".take (First 0) == \"\"\n     \"Hello World!\".take Last == \"!\"\n     \"Hello World!\".take (Last 6) == \"World!\"\n     \"Hello World!\".take (Before \" \") == \"Hello\"\n     \"Hello World!\".take (Before_Last \"o\") == \"Hello W\"\n     \"Hello World!\".take (After \" \") == \"World!\"\n     \"Hello World!\".take (After_Last \"o\") == \"rld!\"\n     \"Hello World!\".take (While c->c!=\" \") == \"Hello\"\n     \"Hello World!\".take (Range 3 5) == \"lo\"\n     \"Hello World!\".take (Range 5 Nothing) == \" World!\"\n     \"Hello World!\".take (Range 5 12) == \" World!\"\n     \"Hello World!\".take (Range 6 12 2) == \"Wrd\"\n     \"Hello World!\".take (Every 2 first=6) == \"Wrd\"\n     \"Hello World!\".take (Every 3) == \"Hl Wl\"\n     \"Hello World!\".take (By_Index 0) == \"H\"\n     \"Hello World!\".take (By_Index [1, 0, 0, 6, 0]) == \"eHHWH\"\n     \"Hello World!\".take (By_Index [Range 0 3, 6, Range 6 12 2]) == \"HelWWrd\"\n     \"Hello World!\".take (Sample 3 seed=42) == \"l d\"",
        "annotations": [
            "range"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "drop",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range | Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Index_Sub_Range.1.First",
                "tagValues": [
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.Before",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.Before_Last",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.After",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.After_Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS remove, skip\nGROUP Selections\nCreates a new Text by removing the specified range of the input.\n\nThis can select a section of text from the beginning, end, or middle of the\ninput using various criteria defined by the range parameter.\n\nArguments:\n- range: The section of the this text to return.\n If a `Text_Sub_Range`, then the selection is interpreted following the rules of that type.\n If a `Range`, the selection is specified by two indices, from and to.\n\nReturns:\nThe part of the input as specified by the range parameter.\n\n> Examples\n Various different ways to take part of \"Hello World!\"\n\n     \"Hello World!\".drop First == \"ello World!\"\n     \"Hello World!\".drop (First 5) == \" World!\"\n     \"Hello World!\".drop (First 0) == \"Hello World!\"\n     \"Hello World!\".drop Last == \"Hello World\"\n     \"Hello World!\".drop (Last 6) == \"Hello \"\n     \"Hello World!\".drop (Before \" \") == \" World!\"\n     \"Hello World!\".drop (Before_Last \"o\") == \"orld!\"\n     \"Hello World!\".drop (After \" \") == \"Hello \"\n     \"Hello World!\".drop (After_Last \"o\") == \"Hello Wo\"\n     \"Hello World!\".drop (While c->c!=\" \") == \" World!\"\n     \"Hello World!\".drop (Range 3 5) == \"Hel World!\"\n     \"Hello World!\".drop (Range 5 Nothing) == \"Hello\"\n     \"Hello World!\".drop (Range 5 12) == \"Hello\"\n     \"Hello World!\".drop (Range 6 12 2) == \"Hello ol!\"\n     \"Hello World!\".drop (Every 2 first=6) == \"Hello ol!\"\n     \"Hello World!\".drop (Every 3) == \"elo ord!\"\n     \"Hello World!\".drop (By_Index 0) == \"ello World!\"\n     \"Hello World!\".drop (By_Index [1, 0, 0, 6, 0]) == \"llo orld!\"\n     \"Hello World!\".drop (By_Index [Range 0 3, 6, Range 6 12 2]) == \"lo ol!\"\n     \"Hello World!\".drop (Sample 3 seed=42) == \"HeloWorl!\"",
        "annotations": [
            "range"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "to_case",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_option",
                "reprType": "Standard.Base.Data.Text.Case.Case",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case.Lower",
                "tagValues": [
                    "Standard.Base.Data.Text.Case.Case.Lower",
                    "Standard.Base.Data.Text.Case.Case.Upper",
                    "Standard.Base.Data.Text.Case.Case.Title"
                ]
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS lower, proper, title, upper\nGROUP Text\nConverts each character in `self` to the specified case.\n\nArguments:\n- case_option: specifies how to convert the characters.\n- locale: specifies the locale for character case mapping. Defaults to\n `Locale.default`.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n! What is title case?\n Title case capitalizes the first letter of every word and ensures that all\n the remaining letters are in lower case. Some definitions of title case\n avoid capitalizing minor words (like the article \"the\" in English) but this\n implementation treats all words in the same way.\n\n> Example\n Converting a text to lower case in the default locale:\n\n     \"My TeXt!\".to_case == \"my text!\"\n\n> Example\n Converting a text to upper case in a specified locale:\n\n     from Standard.Base import all\n\n     example_case_with_locale = \"i\".to_case Upper (Locale.new \"tr\") == \"İ\"",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "pad",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "with_pad",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": " ",
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Text.Location.Location",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Location.End",
                "tagValues": [
                    "Standard.Base.Data.Text.Location.Location.Start",
                    "Standard.Base.Data.Text.Location.Location.End",
                    "Standard.Base.Data.Text.Location.Location.Both"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Calculations\nReturns the input padded to the specified `length`, using the `with_pad`\nstring repeated at the start or the end.\n\nArguments:\n- length: The new length for the output. The result is the original string if\n the input length is more than length.\n- with_pad: The string to use to pad the input. If the last repetition\n exceeds the target length, it is truncated to the required size. If padding\n at the `End`, the beginning of the padding string is used and if padding at\n `Start`, the end of the string is used.\n- at: The location of where to pad the input.\n\n> Example\n Padding a text with whitespace at the end.\n\n     \"Hello World!\".pad 15 == \"Hello World!   \"\n\n> Example\n Behavior of padding if the `with_pad` string has to be truncated.\n\n     \"HELLO\".pad 9 \"AB\" == \"HELLOABAB\"\n     \"HELLO\".pad 8 \"AB\" == \"HELLOABA\"\n     \"HELLO\".pad 8 \"AB\" Location.Start == \"BABHELLO\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "trim",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "where",
                "reprType": "Standard.Base.Data.Text.Location.Location",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Location.Both",
                "tagValues": [
                    "Standard.Base.Data.Text.Location.Location.Start",
                    "Standard.Base.Data.Text.Location.Location.End",
                    "Standard.Base.Data.Text.Location.Location.Both"
                ]
            },
            {
                "name": "what",
                "reprType": "Standard.Base.Data.Text.Text | (Standard.Base.Data.Text.Text -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "<internal-439> -> ((is_whitespace) <internal-439>)",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Text\nThis function removes the specified `trim_characters`, by default any\nwhitespace, from the start, the end, or both ends of the input.\n\nArguments:\n- where: The location of where to trim the input. By default, this function\n trims both ends of the input.\n- what: Either a `Text` containing characters that should be removed or a\n predicate taking single character strings and specifying if they should be\n removed. By default, all Unicode whitespace is removed.\n\n> Example\n Trimming whitespace from a string.\n\n     \" Hello! \".trim == \"Hello!\"\n     \" Hello! \".trim Location.Start == \"Hello! \"\n     \" Hello! \".trim Location.End == \" Hello!\"\n\n> Example\n Trimming a specific set of letters from a string.\n\n    \"ABC123\".trim Location.Start \"ABC\" == \"123\"\n    \"ABBA123\".trim Location.Start \"ABC\" == \"123\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "locate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "term",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "mode",
                "reprType": "Standard.Base.Data.Text.Matching_Mode.Matching_Mode",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Matching_Mode.First",
                "tagValues": [
                    "Standard.Base.Data.Text.Matching_Mode.Matching_Mode.First",
                    "Standard.Base.Data.Text.Matching_Mode.Matching_Mode.Last"
                ]
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Span.Span | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " ALIAS position_of, span_of\nGROUP Text\nFind the location of the `term` in the input.\nReturns a Span representing the location at which the term was found, or\n`Nothing` if the term was not found in the input.\n\nArguments:\n- term: The term to find.\n- mode: Specifies if the first or last occurrence of the term should be\n returned if there are multiple occurrences within the input. The first\n occurrence is returned by default.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Finding location of a substring.\n\n     \"Hello World!\".locate \"J\" == Nothing\n     \"Hello World!\".locate \"o\" == Span (Range 4 5) \"Hello World!\"\n     \"Hello World!\".locate \"o\" mode=Matching_Mode.Last == Span (Range 7 8) \"Hello World!\"\n\n! Match Length\n The  function returns not only the index of the match but a `Span` instance\n which contains both the start and end indices, allowing to determine the\n length of the match. This is useful for case insensitive matching. In\n case-insensitive mode, a single character can match multiple characters,\n for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n `ffi` or `f` etc. Thus in case-insensitive mode, the length of the match\n can be shorter or longer than the term that was being matched, so it is\n extremely important to not rely on the length of the matched term when\n analysing the matches as they may have different lengths.\n\n> Example\n Match length differences in case-insensitive matching.\n\n     term = \"straße\"\n     text = \"MONUMENTENSTRASSE 42\"\n     match = text . locate term case_sensitivity=Case_Sensitivity.Insensitive\n     term.length . should_equal 6\n     match.length . should_equal 7\n\n! Matching Grapheme Clusters\n In case-insensitive mode, a single character can match multiple characters,\n for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to\n match only a part of some single grapheme cluster, for example in the text\n `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.\n Since we do not have the resolution to distinguish such partial matches\n (as that would require non-integer indices), so a match which matched just\n a part of some grapheme cluster is extended and treated as if it matched\n the whole grapheme cluster.\n\n> Example\n Extending matches to full grapheme clusters.\n\n     ligatures = \"ﬃﬄ\"\n     ligatures.length == 2\n     term_1 = \"IFF\"\n     match_1 = ligatures . locate term_1 case_sensitivity=Case_Sensitive.Insensitive\n     term_1.length == 3\n     match_1.length == 2\n     term_2 = \"ffiffl\"\n     match_2 = ligatures . locate term_2 case_sensitivity=Case_Sensitive.Insensitive\n     term_2.length == 6\n     match_2.length == 2\n     # After being extended to full grapheme clusters, both terms \"IFF\" and \"ffiffl\" match the same span of grapheme clusters.\n     match_1 == match_2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "locate_all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "term",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Span.Span",
        "isStatic": false,
        "documentation": " ALIAS index_of_all, position_of_all, span_of_all\nGROUP Text\nFinds all the locations of the `term` in the input.\nIf not found, the function returns an empty Vector.\n\nArguments:\n- term: The term to find.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Finding locations of all occurrences of a substring.\n\n     \"Hello World!\".locate_all \"J\" == []\n     \"Hello World!\".locate_all \"o\" . map .start == [4, 7]\n\n! Match Length\n The  function returns not only the index of the match but a `Span` instance\n which contains both the start and end indices, allowing to determine the\n length of the match. This is useful for case insensitive matching. In\n case-insensitive mode, a single character can match multiple characters,\n for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n `ffi` or `f` etc. Thus in case-insensitive mode, the length of the match\n can be shorter or longer than the term that was being matched, so it is\n extremely important to not rely on the length of the matched term when\n analysing the matches as they may have different lengths.\n\n> Example\n Match length differences in case-insensitive matching.\n\n     term = \"strasse\"\n     text = \"MONUMENTENSTRASSE ist eine große Straße.\"\n     match = text . locate_all term case_sensitivity=Case_Sensitive.Insensitive\n     term.length == 7\n     match . map .length == [7, 6]\n\n! Matching Grapheme Clusters\n In case-insensitive mode, a single character can match multiple characters,\n for example `ß` will match `ss` and `SS`, and the ligature `ﬃ` will match\n `ffi` or `f` etc. Thus in this mode, it is sometimes possible for a term to\n match only a part of some single grapheme cluster, for example in the text\n `ﬃa` the term `ia` will match just one-third of the first grapheme `ﬃ`.\n Since we do not have the resolution to distinguish such partial matches\n (as that would require non-integer indices), so a match which matched just\n a part of some grapheme cluster is extended and treated as if it matched\n the whole grapheme cluster.\n\n> Example\n Extending matches to full grapheme clusters.\n\n     ligatures = \"ﬃﬄFFIFF\"\n     ligatures.length == 7\n     match_1 = ligatures . locate_all \"IFF\" case_sensitivity=Case_Sensitive.Insensitive\n     match_1 . map .length == [2, 3]\n     match_2 = ligatures . locate_all \"ffiff\" case_sensitivity=Case_Sensitive.Insensitive\n     match_2 . map .length == [2, 5]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "term",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nFind the first index of the `term` in the input.\nReturns `Nothing` if the term was not found in the input.\n\nUsing `locate` is preferred as then you can also get the length of the match\nwhich may not necessarily be equal to the length of the searched term - not\nonly in case of regex matching but also in case insensitive mode.\nSee the Match Length section of `locate` for an explanation.\n\nArguments:\n- term: The term to find.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the vector.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Finding location of a substring.\n\n     \"Hello World!\".index_of \"J\" == Nothing\n     \"Hello World!\".index_of \"o\" == 4",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "last_index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "term",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nFind the last index of the `term` in the input.\nReturns `Nothing` if the term was not found in the input.\n\nUsing `locate` is preferred as then you can also get the length of the match\nwhich may not necessarily be equal to the length of the searched term - not\nonly in case of regex matching but also in case insensitive mode.\nSee the Match Length section of `locate` for an explanation.\n\nArguments:\n- term: The term to find.\n- start: The index to start searching backwards from. If the index is\n negative, it is counted from the end of the vector.\n- case_sensitivity: Specifies if the text values should be compared case\n sensitively.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Finding location of a substring.\n\n     \"Hello World!\".last_index_of \"J\" == Nothing\n     \"Hello World!\".last_index_of \"o\" == 7",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "parse_float",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS float from text, to_float\nGROUP Conversions\n\nParses a textual representation of a float into a float number, returning\na `Number_Parse_Error` if the text does not represent a valid float.\n\nArguments:\n- locale: The locale that specifies the format to use when parsing\n\n> Example\n Parse the text \"7.6\" into a float number.\n\n     \"7.6\".parse_float",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "parse_integer",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "radix",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "10",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS integer from text, to_integer\nGROUP Conversions\n\nParses a textual representation of an integer into an integer number, returning\na `Number_Parse_Error` if the text does not represent a valid integer.\n\nArguments:\n- radix: The number base to use for parsing (defaults to 10). `radix`\n must be between 2 and 36 (inclusive) -- see https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Character.html#MIN_RADIX.\n\n> Example\n Parse the text \"20220216\" into an integer number.\n\n    \"20220216\".parse",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "parse_json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS json from text\nGROUP Conversions\n\nParse a Text value into a `JS_Object` or an Enso primitive value (like\n`Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values.\n\n> Example\nParse the text \"[null, null, true, false]\".\n\n    \"[null, null, true, false]\".parse_json",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "parse_date",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time_Formatter.iso_date",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS date from text, to_date\nGROUP Conversions\n\nConverts text containing a date into a Date object.\n\nThis method will return a `Time_Error` if the provided time cannot be parsed.\n\nArguments:\n- format: The format to use for parsing the input text.\n\n? Default Date Formatting\n Unless you provide a custom format, the text must represent a valid date\n that can be parsed using the ISO-8601 extended local date format. The\n format consists of:\n\n - Four digits or more for the year. Years in the range 0000 to 9999\n   will be pre-padded by zero to ensure four digits. Years outside\n   that range will have a prefixed positive or negative symbol.\n - A dash\n - Two digits for the month-of-year. This is pre-padded by zero to ensure\n   two digits.\n - A dash\n - Two digits for the day-of-month. This is pre-padded by zero to ensure two\n   digits.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - y: Year. The number of pattern letters determines the minimum number of\n   digits.\n   - y: The year using any number of digits.\n   - yy: The year, using at most two digits. The default range is\n     1950-2049, but this can be changed by including the end year in\n     braces e.g. `yy{2099}`.\n   - yyyy: The year, using exactly four digits.\n - M: Month of year. The number of pattern letters determines the format:\n   - M: Any number (1-12).\n   - MM: Month number with zero padding required (01-12).\n   - MMM: Short name of the month (Jan-Dec).\n   - MMMM: Full name of the month (January-December).\n   The month names depend on the selected locale.\n - d: Day. The number of pattern letters determines the format:\n   - d: Any number (1-31).\n   - dd: Day number with zero padding required (01-31).\n   - ddd: Short name of the day of week (Mon-Sun).\n   - dddd: Full name of the day of week (Monday-Sunday).\n   The weekday names depend on the selected locale.\n   Both day of week and day of month may be included in a single pattern -\n   in such case the day of week is used as a sanity check.\n - Q: Quarter of year.\n   If only year and quarter are provided in the pattern, when parsing a\n   date, the result will be the first day of that quarter.\n\n> Example\n Parse the date of 23rd December 2020.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"2020-12-23\".parse_date\n\n> Example\n Recover from an error due to a wrong format.\n\n     import Standard.Base.Data.Text.Extensions\n     from Standard.Base.Errors.Common import Time_Error\n\n     example_parse_err = \"my birthday\".parse_date . catch Time_Error _->\n         Date.new 2000 1 1\n\n> Example\n Parse \"1999-1-1\" as Date using a custom format.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"1999-1-1\".parse_date \"yyyy-M-d\"\n\n> Example\n Recover from the parse error.\n\n     import Standard.Base.Data.Text.Extensions\n     from Standard.Base.Errors.Common import Time_Error\n\n     example_parse_err =\n         date = \"1999-1-1\".parse_date \"yyyy-MM-dd\"\n         date.catch Time_Error (_->Date.new 2000 1 1)",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "parse_date_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time_Formatter.default_enso_zoned_date_time",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS date_time from text\nGROUP Conversions\n\nObtains an instance of `Date_Time` from a text such as\n\"2007-12-03T10:15:30+01:00 Europe/Paris\".\n\nThis method will return a `Time_Error` if the provided time cannot be parsed.\n\nArguments:\n- format: The format to use for parsing the input text.\n\n? Default Date_Time Format\n Unless you provide a custom format, the text must represent a valid\n date-time as defined by the ISO-8601 format (see https://en.wikipedia.org/wiki/ISO_8601).\n If a time zone is present, it must be in the ISO-8601 Extended Date/Time\n Format (EDTF) (see https://en.wikipedia.org/wiki/ISO_8601#EDTF). The time\n zone format consists of:\n\n - The ISO offset date time.\n - If the zone ID is not available or is a zone offset then the format is\n   complete.\n - An open square bracket '['.\n - The zone ID. This is not part of the ISO-8601 standard. Parsing is case\n   sensitive.\n - A close square bracket ']'.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - y: Year. The number of pattern letters determines the minimum number of\n   digits.\n   - y: The year using any number of digits.\n   - yy: The year, using at most two digits. The default range is\n     1950-2049, but this can be changed by including the end year in\n     braces e.g. `yy{2099}`.\n   - yyyy: The year, using exactly four digits.\n - M: Month of year. The number of pattern letters determines the format:\n   - M: Any number (1-12).\n   - MM: Month number with zero padding required (01-12).\n   - MMM: Short name of the month (Jan-Dec).\n   - MMMM: Full name of the month (January-December).\n   The month names depend on the selected locale.\n - d: Day. The number of pattern letters determines the format:\n   - d: Any number (1-31).\n   - dd: Day number with zero padding required (01-31).\n   - ddd: Short name of the day of week (Mon-Sun).\n   - dddd: Full name of the day of week (Monday-Sunday).\n   The weekday names depend on the selected locale.\n   Both day of week and day of month may be included in a single pattern -\n   in such case the day of week is used as a sanity check.\n - Q: Quarter of year.\n   If only year and quarter are provided in the pattern, when parsing a\n   date, the result will be the first day of that quarter.\n - H: 24h hour of day (0-23).\n - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n   between AM and PM.\n - m: Minute of hour.\n - s: Second of minute.\n - f: Fractional part of the second. The number of pattern letters\n   determines the number of digits. If one letter is used, any number of\n   digits will be accepted.\n - a: AM/PM marker.\n - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n   -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n - Z: Zone offset (e.g. +0000, -0830, +08:30:15).\n\n> Example\n Parse UTC time.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"2020-10-01T04:11:12Z\".parse_date_time\n\n> Example\n Parse UTC-04:00 time.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"2020-10-01T04:11:12-04:00\".parse_date_time\n\n> Example\n Parse UTC-04:00 time specifying New York timezone.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"2020-10-01T04:11:12-04:00[America/New_York]\".parse_date_time\n\n> Example\n Parse UTC-04:00 time with nanoseconds.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"2020-10-01T04:11:12.177528-04:00\".parse_date_time\n\n> Example\n Recover from the parse error.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"2020-10-01\".parse_date_time . catch Time_Error (_->Date_Time.now)\n\n> Example\n Parse \"2020-05-06 04:30:20\" as Date_Time\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"2020-05-06 04:30:20\".parse_date_time \"yyyy-MM-dd HH:mm:ss\"\n\n> Example\n Parse \"06 of May 2020 at 04:30AM\" as Date_Tme\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse =\n        \"06 of May 2020 at 04:30AM\".parse_date_time \"dd 'of' MMMM yyyy 'at' hh:mma\"",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "parse_time_of_day",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time_Formatter.iso_time",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS time_of_day from text, to_time_of_day\nGROUP Conversions\n\nObtains an instance of `Time_Of_Day` from a text such as \"10:15\".\n\nThis method will return a `Time_Error` if the provided time cannot be parsed.\n\nArguments:\n- format: The format to use for parsing the input text.\n\n? Default Time Format\n Unless you provide a custom format, the text must represent a valid time\n and is parsed using the ISO-8601 extended local time format.\n The format consists of:\n\n - Two digits for the hour-of-day. This is pre-padded by zero to ensure two\n   digits.\n - A colon\n - Two digits for the minute-of-hour. This is pre-padded by zero to ensure\n   two digits.\n - If the second-of-minute is not available then the format is complete.\n - A colon\n - Two digits for the second-of-minute. This is pre-padded by zero to ensure\n   two digits.\n - If the nano-of-second is zero or not available then the format is\n   complete.\n - A float point\n - One to nine digits for the nano-of-second. As many digits will be output\n   as required.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - H: 24h hour of day (0-23).\n - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n   between AM and PM.\n - m: Minute of hour.\n - s: Second of minute.\n - f: Fractional part of the second. The number of pattern letters\n   determines the number of digits. If one letter is used, any number of\n   digits will be accepted.\n - a: AM/PM marker.\n\n> Example\n Get the time 15:05:30.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"15:05:30\".parse_time_of_day\n\n> Example\n Recover from the parse error.\n\n     import Standard.Base.Data.Text.Extensions\n     from Standard.Base.Errors.Common import Time_Error\n\n     example_parse = \"half twelve\".parse_time_of_day . catch Time_Error _->\n         Time_Of_Day.new\n\n> Example\n Parse \"04:30:20\" as Time_Of_Day.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"04:30:20\".parse_time_of_day \"HH:mm:ss\"\n\n> Example\n Parse \"4:30AM\" as Time_Of_Day\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"4:30AM\".parse_time_of_day \"h:mma\"",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "parse_time_zone",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS time_zone from text, to_time_zone\nGROUP Conversions\n\nThis method parses the ID producing a `Time_Zone`.\n\n> Example\n Get Central European Time.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"CET\".parse_time_zone\n\n> Example\n Get Moscow time.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"Europe/Moscow\".parse_time_zone\n\n> Example\n Get time zone -06:00.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"-06:00\".parse_time_zone\n\n> Example\n Get custom offset +03:02:01 of 3 hours 2 minutes an 1 second.\n\n     import Standard.Base.Data.Text.Extensions\n\n     example_parse = \"+03:02:01\".parse_time_zone",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "substring",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "self.length",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS mid, slice, substring\nGROUP Selections\nCreates a new Text by selecting the specified range of the input.\n\nArguments:\n- start: the character position to start the substring at. 0-based index. Has support for negative values.\n- length: the number of characters to include from start.\n\nReturns:\nPart of the selected Text starting at start and stopping after length.\n\n> Examples\n Various different ways to take part of \"Hello World!\"\n\n     \"Hello World!\".substring 3 2 == \"lo\"\n     \"Hello World!\".substring 5 Nothing == \" World!\"\n     \"Hello World!\".substring 5 7 == \" World!\"\n     \"Hello World!\".substring -7 3 == \" Wo\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "slice_text",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "char_ranges",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Extensions",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns a new Text constructed by slicing the input according to the provided\nranges. The ranges are assumed to have step equal to 1 and bounds within the\ninput's range.\n\nThe input ranges are in UTF-16 code unit space.",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Extensions",
        "name": "split_find_delimiters",
        "arguments": [
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "delimiter",
                "reprType": "Standard.Base.Data.Text.Text | (Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Extensions",
        "returnType": "(Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text) | Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
        "isStatic": true,
        "documentation": " PRIVATE\n\nFind occurrences of delimiters in a string.",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "module",
        "module": "Standard.Base.System.File.File_Access",
        "documentation": null,
        "reexport": "Standard.Base.System.File"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File.File_Access",
        "name": "File_Access",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents different options for opening file streams.\n\nThis is intended for more advanced users, wishing to obtain lower-level\nfile access. For most use cases, the default values used in the methods of\nthe `File` type should be preferred.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Append",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " If the file is opened for `Write` access then bytes will be written to\nthe end of the file rather than the beginning.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Create",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Create a new file if it does not exist.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Create_New",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Create a new file, failing if the file already exists.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Delete_On_Close",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Delete the underlying file on closing the stream.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Dsync",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Requires that every update to the file's content be written\nsynchronously to the underlying storage device.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Read",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Open for read access.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Sparse",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Sparse file.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Sync",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Requires that every update to the file's content or metadata be written\nsynchronously to the underlying storage device.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Truncate_Existing",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " If the file already exists and is opened for `Write` access,\nthe original contents will be removed.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Access",
        "name": "Write",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Access.File_Access",
        "documentation": " Open file for write access.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Access",
        "name": "to_java",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Access.File_Access",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Access.File_Access",
        "returnType": "Standard.Base.System.File.File_Access.StandardOpenOption",
        "isStatic": false,
        "documentation": " PRIVATE\n\nConvert this object into a representation understandable by the JVM.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Json.Extensions",
        "documentation": null,
        "reexport": "Standard.Base.Data.Json"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConverts the given value to a JSON serialized value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serialized value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Json.JS_Object | Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Json.JS_Object | Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Json.JS_Object | Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms and maps, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Nothing, booleans, numbers and strings, this is the value itself.\nFor arrays or vectors, the elements are converted recursively.\nFor atoms, the object is converted to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nCustom serialization for Locale, serializes the language, country and variant.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json.Extensions",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the given value to a JSON serializable object.\nFor Map, this is serialized as a Vector of Key-Value pairs.\n\nEnso Maps support arbitrary types as map keys, so we cannot serialize them into JS Objects because there only strings are accepted as keys.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Span",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Span",
        "name": "Span",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Span",
        "name": "Value",
        "arguments": [
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "parent",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Span.Span",
        "documentation": " A representation of a span of characters in Enso's `Text` type.\n\nArguments:\n- range: The range of characters over which the span exists. The range is\n assumed to have `step` equal to 1.\n- parent: The text over which the span exists.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\n> Example\n Creating a span over the first three characters of the text \"hello!\".\n\n     import Standard.Base.Data.Text.Span\n\n     example_span =\n         text = \"Hello!\"\n         range = 0.up_to 3\n         Span.Value range text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "range",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Range.Range",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "parent",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Span",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nThe index of the first character included in the span.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Span",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " The index of the first character after `start` that is _not_ included in\nthe span.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Span",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nThe length of the span in extended grapheme clusters.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Span",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the part of the text that this span covers.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "to_utf_16_span",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Span",
        "returnType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "isStatic": false,
        "documentation": " ADVANCED\nConverts the span of extended grapheme clusters to a corresponding span\nof UTF-16 code units.\n\n> Example\n Find the span of code units corresponding to the span of extended grapheme clusters.\n\n text = 'ae\\u{301}fz'\n (Span.Value (Range 1 3) text).to_utf_16_span == (Utf_16_Span.Value (Range 1 4) text)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Span",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Span.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Span",
        "name": "Utf_16_Span",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Span",
        "name": "Value",
        "arguments": [
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "parent",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "documentation": " A representation of a span of UTF-16 code units in Enso's `Text` type.\n\nArguments:\n- range: The range of code units over which the span exists. The range is\n assumed to have `step` equal to 1.\n- parent: The text over which the span exists.\n\n> Example\n Creating a span over the first three code units of the text 'a\\u{301}bc'.\n\n     import Standard.Base.Data.Text.Span\n\n     example_span =\n         text = 'a\\u{301}bc'\n         Span.Utf_16_Span.Value (Range 0 3) text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "range",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Range.Range",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "parent",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nThe index of the first code unit included in the span.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " The index of the first code unit after `start` that is _not_ included in\nthe span.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nThe length of the span in UTF-16 code units.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the part of the text that this span covers.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "to_grapheme_span",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "returnType": "Standard.Base.Data.Text.Span.Span",
        "isStatic": false,
        "documentation": " GROUP Conversions\nReturns a span of extended grapheme clusters which is the closest\napproximation of this span of code units.\n\nThe resulting span is extended in such a way that every code unit that\nwas contained by the original span is also contained in a new span. Since\nsome grapheme clusters consist of multiple code units, after the span was\nextended it may also contain code units which were not contained inside\nof the original span.\n\n> Example\n Convert a codepoint span to graphemes and back.\n\n text = 'a\\u{301}e\\u{302}o\\u{303}'\n span = Utf_16_Span.Value (Range 1 5) text # The span contains the units [\\u{301}, e, \\u{302}, o].\n extended = span.to_grapheme_span\n extended == Span.Value (Range 0 3) text # The span is extended to the whole string since it contained code units from every grapheme cluster.\n extended.to_utf_16_span == Utf_16_Span.Value (Range 0 6) text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Span.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Span",
        "name": "range_to_char_indices",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nUtility function taking a range pointing at grapheme clusters and converting\nto a range on the underlying code units.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Regression",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Regression",
        "name": "Model",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Linear",
        "arguments": [
            {
                "name": "intercept",
                "reprType": "Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Regression.Model",
        "documentation": " Fit a line (y = A x + B) to the data with an optional fixed intercept.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Exponential",
        "arguments": [
            {
                "name": "intercept",
                "reprType": "Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Regression.Model",
        "documentation": " Fit a exponential line (y = A exp(B x)) to the data with an optional fixed intercept.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Logarithmic",
        "arguments": [],
        "returnType": "Standard.Base.Data.Regression.Model",
        "documentation": " Fit a logarithmic line (y = A log x + B) to the data.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Power",
        "arguments": [],
        "returnType": "Standard.Base.Data.Regression.Model",
        "documentation": " Fit a power series (y = A x ^ B) to the data.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "intercept",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Regression.Model",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Model.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "fitted_model_with_r_squared",
        "arguments": [
            {
                "name": "constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "a",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "b",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "known_xs",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "known_ys",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Regression.Model",
        "returnType": "Standard.Base.Data.Regression.Fitted_Model",
        "isStatic": true,
        "documentation": " PRIVATE\nComputes the R Squared value for a model and returns a new instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "ln_series",
        "arguments": [
            {
                "name": "xs",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "series_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Values",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Regression.Model",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nComputes the natural log series as long as all values are positive.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "fit_least_squares",
        "arguments": [
            {
                "name": "known_xs",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "known_ys",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "model",
                "reprType": "Standard.Base.Data.Regression.Model",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Model.Linear",
                "tagValues": [
                    "Standard.Base.Data.Regression.Model.Linear",
                    "Standard.Base.Data.Regression.Model.Exponential",
                    "Standard.Base.Data.Regression.Model.Logarithmic",
                    "Standard.Base.Data.Regression.Model.Power"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Regression",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Use Least Squares to fit a line to the data.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Regression",
        "name": "Fitted_Model",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Linear",
        "arguments": [
            {
                "name": "slope",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "intercept",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "r_squared",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0.0",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Regression.Fitted_Model",
        "documentation": " Fitted line (y = slope x + intercept).",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Exponential",
        "arguments": [
            {
                "name": "a",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "b",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "r_squared",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0.0",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Regression.Fitted_Model",
        "documentation": " Fitted exponential line (y = a exp(b x)).",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Logarithmic",
        "arguments": [
            {
                "name": "a",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "b",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "r_squared",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0.0",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Regression.Fitted_Model",
        "documentation": " Fitted logarithmic line (y = a log x + b).",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Power",
        "arguments": [
            {
                "name": "a",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "b",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "r_squared",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0.0",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Regression.Fitted_Model",
        "documentation": " Fitted power series (y = a x ^ b).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "slope",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "intercept",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "r_squared",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "a",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "b",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Regression.Fitted_Model",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nDisplay the fitted line.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Regression.Fitted_Model",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Fitted_Model.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "predict",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fitted_Model",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "x",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Regression.Fitted_Model",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " GROUP Calculations\nUse the model to predict a value.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Regression",
        "name": "Fit_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " An error thrown when the linear regression cannot be computed."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Regression",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Regression.Fit_Error",
        "documentation": " PRIVATE\nAn error thrown when the linear regression cannot be computed.\n\nArguments:\n- message: The error message.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fit_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Regression.Fit_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Regression.Fit_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the `Fit_Error` to a human-readable representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Regression",
        "name": "handle_java_exception",
        "arguments": [],
        "selfType": "Standard.Base.Data.Regression.Fit_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Noise",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Noise",
        "name": "Deterministic_Random",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A noise generator that implements a seeded deterministic random perturbation\nof the input.\n\nIt produces what is commonly termed \"white\" noise, where any value in the\nrange has an equal chance of occurring."
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Noise",
        "name": "step",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Noise.Deterministic_Random",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "interval",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Noise.Deterministic_Random",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " GROUP Random\nStep the generator to produce the next value.\n\nArguments:\n- input: The seed number to perturb.\n- interval: The interval over which the noise should be generated.\n\n> Example\n Step the generator with the input 1 and range 0 to 1\n\n     from Standard.Base.Data.Noise.Generator import Deterministic_Random\n\n     example_det_random = Deterministic_Random.step 1 (Interval.new 0 1 Interval_Type.Inclusive)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Noise",
        "name": "noise",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "interval",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Interval.0.1.((Exclusive) Interval_Type).new",
                "tagValues": null
            },
            {
                "name": "gen",
                "reprType": "Standard.Base.Data.Noise.Deterministic_Random",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Deterministic_Random",
                "tagValues": [
                    "Standard.Base.Data.Noise.Deterministic_Random"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Random\nGenerate noise based on the input number.\n\nArguments:\n- interval: An interval in which the noise should be generated.\n- gen: The generator to use for generating noise.\n\nThe output of the noise generator will depend on the input and the range over\nwhich the noise is being generated.\n\nBy default, this uses a seeded deterministic generator that will always\nreturn the same input for the same output. In addition, it will, by default,\ngenerate values in the exclusive range 0 to 1.\n\n> Example\n Deterministically perturb the input number 1.\n     1.noise",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "Index_Sub_Range",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "First",
        "arguments": [
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "documentation": " Select the first `count` items.\n\nSelects no items if `count` is less than or equal to 0.\nSelects all items  if `count` is greater than the length of the input.",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "Last",
        "arguments": [
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "documentation": " Select the last `count` characters.\n\nSelects no items if `count` is less than or equal to 0.\nSelects all items  if `count` is greater than the length of the input.",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "While",
        "arguments": [
            {
                "name": "predicate",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "documentation": " Select elements from the start while the predicate returns `True`.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "By_Index",
        "arguments": [
            {
                "name": "indexes",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range | (Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "documentation": " Selects specific indexes (starting from 0) either as an `Integer` or a\n`Range`.\n\nIf the index or start of the Range is out of bounds, an error is\nreported. If the end of the Range is out of bounds, all items until the\nend of the input are selected.\n\nOnly ranges with positive step and positive indices are supported.\nIndividual integer indices can be negative which allows for indexing\nfrom the end of the collection.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "Sample",
        "arguments": [
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "seed",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Random.get_default_seed",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "documentation": " Gets a random sample of entries, without repetitions.\n\nIf `count` is greater than the length of the input, a random permutation\nof all elements from the input is selected.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "Every",
        "arguments": [
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "first",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "documentation": " Gets every Nth entry.\n\nArguments:\n- step: The step between consecutive entries that are included.\n- first: The first entry to include. If it is outside of bounds of the\n input, an error is raised.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "count",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "predicate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "indexes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range | (Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range)",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range | (Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range)",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "seed",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "step",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Index_Sub_Range.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "default_options",
        "arguments": [],
        "selfType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Metadata.Choice.Option",
        "isStatic": true,
        "documentation": " PRIVATE\nIt includes all constructors of `Index_Sub_Range` but also `Range`, since\nthe `Index_Sub_Range` type is by default used in sum types containing\n`Range` too.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "default_widget",
        "arguments": [],
        "selfType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "resolve_ranges",
        "arguments": [
            {
                "name": "ranges",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
        "isStatic": true,
        "documentation": " PRIVATE\nResolves a vector of ranges or indices into a vector of ranges that fit\nwithin a sequence.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "normalize_ranges",
        "arguments": [
            {
                "name": "descriptors",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nTakes a list of descriptors and returns a new one where ranges with\nnon-unitary step have been replaced with series of ranges covering the same\nset of indices with step equal to 1, and indices have been replaced with\nsingle-element ranges.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "invert_range_selection",
        "arguments": [
            {
                "name": "ranges",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "needs_sorting",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
        "isStatic": true,
        "documentation": " PRIVATE\nInverts the selection determined by the input list of ranges.\n\nThe input ranges are assumed to be normalized (i.e. all of them have step\nequal to 1).\n\nArguments:\n- ranges: The list of ranges determining indices which are selected. The\n result will be a list of ranges containing all the indices which were not\n originally selected here.\n- length: Length of the related sequence.\n- needs_sorting: Determines if `ranges` need to be sorted and merged or if it\n can be assumed that they are sorted already.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "sort_and_merge_ranges",
        "arguments": [
            {
                "name": "ranges",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns a new sorted list of ranges where intersecting ranges have been\nmerged.\n\nEmpty subranges are discarded.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "take_helper",
        "arguments": [
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "single_slice",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "slice_ranges",
                "reprType": "(Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range) -> (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nA helper that implements taking from an arbitrary collection using a set of\ncallbacks.\n\nArguments:\n- length: The length of the collection.\n- at: An accessor returning ith element of the collection. Used only for\n `While`.\n- single_slice: A two argument function that returns a slice of the\n collection starting from the index `start` (inclusive) and continuing until\n the `end` (exclusive). The slice operation should be robust to negative\n indices - if `start` is less than 0 it should just start slicing from the\n beginning of the collection. If `end` is less than `start`, an empty\n collection should be returned. If `end` is greater than `length`, the\n collection should be sliced until the end of the collection. It should\n avoid copying and just return the original collection if the whole\n collection is included in the slice. It should never throw out of bounds\n errors (these are handled at a higher level), but always return some\n collection, possibly empty.\n- slice_ranges: A function that takes a vector of ranges and indices and\n constructs a new collection containing the provided subranges and indices\n in the provided order. The input ranges do not need to be normalized, so if\n the method wants to work only with normalized ranges, it must perform\n normalization on its own.\n- range: The `Index_Sub_Range` to take from the collection.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "drop_helper",
        "arguments": [
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "single_slice",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "slice_ranges",
                "reprType": "(Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Range.Range) -> (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nA helper that implements dropping from an arbitrary collection using a set of\ncallbacks.\n\nArguments:\n- length: The length of the collection.\n- at: An accessor returning ith element of the collection. Used only for\n `While`.\n- single_slice: A two argument function that returns a slice of the\n collection starting from the index `start` (inclusive) and continuing until\n the `end` (exclusive). The slice operation should be robust to negative\n indices - if `start` is less than 0 it should just start slicing from the\n beginning of the collection. If `end` is less than `start`, an empty\n collection should be returned. If `end` is greater than `length`, the\n collection should be sliced until the end of the collection. It should\n avoid copying and just return the original collection if the whole\n collection is included in the slice. It should never throw out of bounds\n errors (these are handled at a higher level), but always return some\n collection, possibly empty.\n- slice_ranges: A function that takes a vector of ranges and indices and\n constructs a new collection containing the provided subranges and indices\n in the provided order. The function may assume that the ranges have been\n normalized.\n- range: The `Index_Sub_Range` to drop from the collection.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Index_Sub_Range",
        "name": "handle_unmatched_type",
        "arguments": [
            {
                "name": "expected_types",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "actual_value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Index_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Runtime.Thread",
        "documentation": " Utilities for working with threads.\nInternal threading utilities used for working with threads.",
        "reexport": "Standard.Base.Runtime"
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Thread",
        "name": "with_interrupt_handler",
        "arguments": [
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "interrupt_handler",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Thread",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nExecutes an action with a handler for the executing thread being\ninterrupted.\n\nArguments:\n- action: The action to execute.\n- interrupt_handler: The code to be executed if the thread is\n interrupted.\n\n> Example\n Die on thread interrupts.\n\n     Thread.with_interrupt_handler (1 + 1) <| IO.println \"I died!\"",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Day_Of_Week",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents a day of the week.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Sunday",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "documentation": " Day_Of_Week representing Sunday.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Monday",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "documentation": " Day_Of_Week representing Monday.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Tuesday",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "documentation": " Day_Of_Week representing Tuesday.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Wednesday",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "documentation": " Day_Of_Week representing Wednesday.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Thursday",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "documentation": " Day_Of_Week representing Thursday.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Friday",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "documentation": " Day_Of_Week representing Friday.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Saturday",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "documentation": " Day_Of_Week representing Saturday.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "to_integer",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "first_day",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Day_Of_Week.Sunday",
                "tagValues": [
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Sunday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Monday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Tuesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Wednesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Thursday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Friday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Saturday"
                ]
            },
            {
                "name": "start_at_zero",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConvert the Day_Of_Week to an Integer.\n\nArguments:\n- `first_day`: The first day of the week.\n- `start_at_zero`: If True, first day of the week is 0 otherwise is 1.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "to_java",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.DayOfWeek",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "Day_Of_Week_Comparator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "compare",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Sunday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Monday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Tuesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Wednesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Thursday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Friday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Saturday"
                ]
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Sunday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Monday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Tuesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Wednesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Thursday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Friday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Saturday"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week_Comparator",
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "hash",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Sunday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Monday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Tuesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Wednesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Thursday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Friday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Saturday"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week_Comparator",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Sunday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Monday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Tuesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Wednesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Thursday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Friday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Saturday"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "returnType": "Standard.Base.Data.Ordering.Comparable",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Day_Of_Week",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "first_day",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Day_Of_Week.Sunday",
                "tagValues": [
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Sunday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Monday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Tuesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Wednesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Thursday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Friday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Saturday"
                ]
            },
            {
                "name": "start_at_zero",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "isStatic": false,
        "documentation": " Convert from an integer to a Day_Of_Week\n\nArguments:\n- `that`: The first day of the week.\n- `first_day`: The first day of the week.\n- `start_at_zero`: If True, first day of the week is 0 otherwise is 1.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.Platform",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.Platform",
        "name": "OS",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A representation of the various operating systems on which Enso can run."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Platform",
        "name": "Linux",
        "arguments": [],
        "returnType": "Standard.Base.System.Platform.OS",
        "documentation": " The Linux operating system.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Platform",
        "name": "Mac_OS",
        "arguments": [],
        "returnType": "Standard.Base.System.Platform.OS",
        "documentation": " The macOS operating system.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Platform",
        "name": "Windows",
        "arguments": [],
        "returnType": "Standard.Base.System.Platform.OS",
        "documentation": " The Windows operating system.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Platform",
        "name": "Unknown",
        "arguments": [],
        "returnType": "Standard.Base.System.Platform.OS",
        "documentation": " An unknown operating system.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Platform",
        "name": "os",
        "arguments": [],
        "selfType": "Standard.Base.System.Platform",
        "returnType": "Standard.Base.System.Platform.OS",
        "isStatic": true,
        "documentation": " Return the type of operating system.\n\n> Example\n Return the OS type:\n\n     import Standard.Base.System.Platform\n\n     example_os = Platform.os",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Platform",
        "name": "is_unix",
        "arguments": [],
        "selfType": "Standard.Base.System.Platform",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCheck if the operating system is UNIX.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Platform",
        "name": "from_text",
        "arguments": [
            {
                "name": "os",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Platform",
        "returnType": "Standard.Base.System.Platform.OS",
        "isStatic": true,
        "documentation": " PRIVATE\nCreate an Os object from text.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Runtime",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "primitive_get_stack_trace",
        "arguments": [],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\n\nReturns a raw representation of the current execution stack trace.\nYou probably want `Runtime.get_stack_trace` instead.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "get_stack_trace",
        "arguments": [],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Runtime.Stack_Trace_Element",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nReturns the execution stack trace of its call site. The ordering of the\nresulting vector is such that the top stack frame is the first element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "gc",
        "arguments": [],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nSuggests that the runtime perform garbage collection.\n\nIt is not _guaranteed_ to perform garbage collection, but in practice\nwill _usually_ begin a garbage collection cycle.\n\n> Example\n Ask for the runtime to collect garbage.\n\n     Runtime.gc",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "assert",
        "arguments": [
            {
                "name": "action",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ADVANCED\n\nAsserts that the given action succeeds, otherwise throws a panic.\n\nAssertions are disable by default, meaning that call to this method is\na no-op. To enable assertions, set the environment variable\n`ENSO_ENABLE_ASSERTIONS=true`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "assert_builtin",
        "arguments": [
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "no_inline",
        "arguments": [
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ADVANCED\n\nExecutes the provided action without allowing it to inline.\n\nArguments:\n- action: The computation to be executed.\n\nThis is particularly useful when writing benchmarks and\nperformance-critical code where you need to prevent inlining from\noccurring.\n\n> Example\n Print something to the console without it being inlined.\n\n     Runtime.no_inline <| IO.println \"Hi!\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "no_inline_with_arg",
        "arguments": [
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arg",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nApplies the following function to the given argument, without allowing\nthem to inline.\n\nArguments:\n- function: The one-argument function to call.\n- arg: The single argument for the function.\n\nThis is particularly useful to avoid constant folding in benchmarks.\n\n> Example\n Print something to the console without it being inlined.\n\n     Runtime.no_inline_with_arg IO.println \"Hi!\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "wrap_primitive_stack_trace_element",
        "arguments": [
            {
                "name": "el",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nConverts a primitive stack trace element into the regular one.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Runtime",
        "name": "Stack_Trace_Element",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nADVANCED\n\nRepresents a single stack frame in an Enso stack trace."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Runtime",
        "name": "Value",
        "arguments": [
            {
                "name": "name",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "source_location",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Runtime.Stack_Trace_Element",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Stack_Trace_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "source_location",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Stack_Trace_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Stack_Trace_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Stack_Trace_Element",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Runtime",
        "name": "Context",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nADVANCED\n\nType indicating allowed execution context."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Runtime",
        "name": "Input",
        "arguments": [],
        "returnType": "Standard.Base.Runtime.Context",
        "documentation": " PRIVATE\nADVANCED",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Runtime",
        "name": "Output",
        "arguments": [],
        "returnType": "Standard.Base.Runtime.Context",
        "documentation": " PRIVATE\nADVANCED",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Context",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nReturns the name of the context.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "if_enabled",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "environment",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Runtime.current_execution_environment",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Context",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nChecks whether the context is enabled. If it is, evaluates the provided\nfunction and returns the result. If not, panics.\n\nArguments:\n- environment: Name of the execution environment.\n- context: The context to enable.\n- action: Action to be performed with the context enabled.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "is_enabled",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "environment",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Runtime.current_execution_environment",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Context",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nChecks whether the permission is enabled in the given environment.\n\nArguments:\n- environment: Name of the execution environment.\n- context: The context to enable.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "is_enabled_builtin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "environment",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Context",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "with_enabled",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Context",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nRun an action with the Context enabled.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "with_disabled",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Context",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nRun an action with the Context disabled.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "current_execution_environment",
        "arguments": [],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nReturns the name of the current execution environment.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "with_enabled_context",
        "arguments": [
            {
                "name": "context",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Runtime.Context.Input",
                    "Standard.Base.Runtime.Context.Output"
                ]
            },
            {
                "name": "environment",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Runtime.current_execution_environment",
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nEnables a specific context in the provided runtime environment for the duration of the execution of the action.\n\nArguments:\n- environment: Name of the execution environment.\n- context: The context to enable.\n- action: Action to be performed with the context enabled.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "with_enabled_context_builtin",
        "arguments": [
            {
                "name": "context",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Runtime.Context.Input",
                    "Standard.Base.Runtime.Context.Output"
                ]
            },
            {
                "name": "environment",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nEnables a specific context in the provided runtime environment for the duration of the execution of the action.\n\nThis method is internal, using `with_enabled_context` is preferred as it provides correct defaults.\n\nArguments:\n- environment: Name of the execution environment.\n- context: The context to enable.\n- action: Action to be performed with the context enabled.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "with_disabled_context",
        "arguments": [
            {
                "name": "context",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Runtime.Context.Input",
                    "Standard.Base.Runtime.Context.Output"
                ]
            },
            {
                "name": "environment",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Runtime.current_execution_environment",
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nDisables a specific context in the provided runtime environment for the duration of the execution of the action.\n\nArguments:\n- environment: Name of the execution environment.\n- context: The context to disable.\n- action: Action to be performed with the context disabled.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime",
        "name": "with_disabled_context_builtin",
        "arguments": [
            {
                "name": "context",
                "reprType": "Standard.Base.Runtime.Context",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Runtime.Context.Input",
                    "Standard.Base.Runtime.Context.Output"
                ]
            },
            {
                "name": "environment",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nDisables a specific context in the provided runtime environment for the duration of the execution of the action.\n\nThis method is internal, using `with_disabled_context` is preferred as it provides correct defaults.\n\nArguments:\n- environment: Name of the execution environment.\n- context: The context to disable.\n- action: Action to be performed with the context disabled.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.HTTP_Error",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.HTTP_Error",
        "name": "HTTP_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Errors when reading from a web response."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Error",
        "name": "IO_Error",
        "arguments": [
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error",
        "documentation": " A generic IO error.\n\nArguments:\n- uri: The uri that couldn't be read.\n- message: The message for the error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Error",
        "name": "uri",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Network.URI.URI",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Error",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Error",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the HTTP_Error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Error",
        "name": "handle_java_exceptions",
        "arguments": [
            {
                "name": "uri",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nUtility method for running an action with Java exceptions mapping.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text.Regex.Internal"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "Replacer",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "Value",
        "arguments": [
            {
                "name": "replacement",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Regex.Internal.Replacer.Replacement",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacer",
        "documentation": " PRIVATE\n\nImplements a replacement for a regular expression.\n\nRegex.replace uses a Replacer to replace each regex match with\na replacement string. This string can contain references to match\ngroups from the original regex.\n\nThe `new` smart constructor parses a Text into a vector of\nReplacements. Each Replacement is either a literal string or a\ngroup number. To provide a replacement for a regex match, the\nReplacer iterates through the Replacement vector, substitutes\nthe match group contents for each group number, and concatenates\nall the strings together to form the full replacement string.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "replacement",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Regex.Internal.Replacer.Replacement",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Regex.Internal.Replacer.Replacement",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "new",
        "arguments": [
            {
                "name": "replacement_string",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a new Replacer.\n\nArguments\n- replacement_string: a string, possibly containing group references,\n that will be used to provide a replacement in a regex match.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "replace",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "match",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacer",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nBuild a replacement string from a match.\n\nArguments:\n- match: the match from the original string that is to be replaced.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "get_lru_size",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet the size of the Replacer LRU cache. For testing.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "replacer_cache_lookup",
        "arguments": [
            {
                "name": "replacement_string",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacer | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\n\nLook up a replacement string in the Replacer LRU cache. For testing.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "group_reference_regex",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "build_replacement_vector_cached",
        "arguments": [
            {
                "name": "replacement_string",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nBuild a replacement vector.\n\nParse the replacement string into an alternating series of literal\nstrings and group reference numbers.\n\nUses Replacement_Cache to avoid rebuilding the vector for recently used\nreplacement strings.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "build_replacement_vector",
        "arguments": [
            {
                "name": "replacement_string",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nBuild a replacement vector.\n\nParse the replacement string into an alternating series of literal\nstrings and group reference numbers.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "parse_group_number",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "match",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nParse a capture group reference.\n\nArguments:\n- pattern: the Regex used to initiate the replacement. This is used\n to identify and validate capture groups.\n- match: the match of the replacement string against group_reference_regex.\n\nReturns a Replacement: a group number, or, in the case of `$$`, a literal.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "Replacement",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "Literal",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacement",
        "documentation": " PRIVATE\nA string literal to replace with.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "Substitution",
        "arguments": [
            {
                "name": "group_number",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacement",
        "documentation": " PRIVATE\nTarget group to insert.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacement",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Replacer",
        "name": "group_number",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Replacer.Replacement",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "HTTP_Method",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Options",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"OPTIONS\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Get",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"GET\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Head",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"HEAD\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Post",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"POST\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Put",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"PUT\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Patch",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"PATCH\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Delete",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"DELETE\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Trace",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"TRACE\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Connect",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " The HTTP method \"CONNECT\".",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "Custom",
        "arguments": [
            {
                "name": "verb",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "documentation": " Custom unsupported HTTP method.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "verb",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "to_http_method_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nConvert to a Text of the HTTP method name.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Method",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts from Text to an HTTP_Method.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.Illegal_Argument",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Illegal_Argument",
        "name": "Illegal_Argument",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Illegal_Argument",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "cause",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
        "documentation": " PRIVATE\nUNSTABLE\n\nA generic error that indicates that the provided argument is not valid\nfor the operation.\n\nArguments:\n- message: the error message explaining why the argument is illegal.\n- cause: (optional) another error that is the cause of this one.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Illegal_Argument",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Illegal_Argument",
        "name": "cause",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Illegal_Argument",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nProvides a human-readable representation of the encoding error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Illegal_Argument",
        "name": "handle_java_exception",
        "arguments": [],
        "selfType": "Standard.Base.Errors.Illegal_Argument.Illegal_Argument",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCapture a Java `IllegalArgumentException` and convert it to an Enso dataflow error - `Illegal_Argument.Error`.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Range",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Range",
        "name": "Range",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents a right-exclusive range of integer values.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Range",
        "name": "Between",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Range.Range",
        "documentation": " PRIVATE\nA representation of a right-exclusive range of integer values.\n\nArguments:\n- start: The left boundary of the range. Its value is included.\n- end: The right boundary of the range. Its value is excluded.\n- step: The step between consecutive elements of the range. It must be\n non-zero. Defaults to 1.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "step",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "new",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "100",
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Range.Range",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreate a representation of a right-exclusive range of integer values.\n\nArguments:\n- start: The left boundary of the range. Its value is included.\n- end: The right boundary of the range. Its value is excluded.\n- step: The step between values. Must be a positive value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "with_step",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "new_step",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Range.Range",
        "isStatic": false,
        "documentation": " GROUP Metadata\nCreates a copy of this range with a changed step.\n\n> Example\n Create a range of even numbers from 0 to 10 (exclusive).\n\n     0.up_to 10 . with_step 2 . to_vector == [0, 2, 4, 6, 8]\n\n> Example\n Create a a decreasing range of even numbers from 10 to 0 (exclusive).\n\n     10.down_to 0 . with_step 2 . to_vector == [10, 8, 6, 4, 2]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the first element that is included within the range.\n\nIt will raise `Index_Out_Of_Bounds` if the range is empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the second element that is included within the range.\n\nIt will raise `Index_Out_Of_Bounds` if the range has less than two elements.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the last element that is included within the range.\n\nIt will raise `Index_Out_Of_Bounds` if the range is empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the number of elements in the range.\n\n> Example\n The following range has 100 elements.\n\n    0.up_to 100 . length",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets an element from the Range at a specified index (0-based).\n\nArguments:\n- index: The location in the Range to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back,\n i.e. -1 will correspond to the last element.\n\n> Example\n Get the second element of a range.\n\n     0.up_to 10 . get 1 == 1\n\n> Example\n Get the last element of a range with step.\n\n    0.up_to 10 . with_step 2 . get -1 == 8",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets an element from the Range at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.\n\nArguments:\n- index: The location in the Range to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back,\n i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this range is empty.\n\n> Example\n Checking if the range from 0 to 100 is empty.\n\n     0.up_to 100 . is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this range is not empty.\n\n> Example\n Checking if the range from 0 to 100 is not empty.\n\n     0.up_to 100 . not_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element in the range, producing a vector of\nresults.\n\nArguments:\n- function: The function to apply to each integer in the range.\n\n> Example\n Create a vector that contains the numbers twice that of the numbers in\n the range.\n\n     1.up_to 10 . map (*2)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "filter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "filter",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns a vector of all elements of this range which satisfy a condition.\n\nArguments:\n- filter: The filter to apply to the range. It can either be an instance\n of `Filter_Condition` or a predicate taking a value and returning a\n boolean value indicating whether the corresponding element should be\n kept or not.\n\n> Example\n Selecting all elements that are greater than 3.\n\n     (0.up_to 7).filter (> 3)\n     (0.up_to 7).filter (Filter_Condition.Greater than=3)",
        "annotations": [
            "filter"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "partition",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Pair.Pair (Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer) (Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer)",
        "isStatic": false,
        "documentation": " GROUP Selections\nPartitions the range into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of\nelements which did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Splitting a range into even and odd elements.\n\n     (0.up_to 4).partition (x-> x%2 == 0) == (Pair [0, 2] [1, 3])",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function for each element in the range.\n\nArguments:\n- function: The function to apply to each integer in the range.\n\n> Example\n To print all the numbers from 1 to 10 use:\n     1.up_to 11 . each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "each_propagate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nExecutes a function for each element in the range. Exits early if the body\nproduces an `Error`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "each_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Numbers.Integer -> Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the range.\n\nEssentially acts like `range.to_vector.each_with_index`, but it is more\nefficient.\n\nArguments:\n- function: A function to apply that takes two parameters: first the\n index of a given range element and then the actual range element.\n\n> Example\n Print range elements with their indices within the range.\n\n     (10.up_to 13).each_with_index ix-> elem-> IO.println (Pair ix elem) # Will print Pair 0 10, Pair 1 11, Pair 2 12",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the range, by iteratively applying the\npassed function with next elements of the range.\n\nArguments:\n- init: The initial value for the fold.\n- function: A binary function taking an item and a number, and returning\n an item.\n\nIn general, the result of\n   Range start end step . fold init f\nis the same as\n   f (...(f (f init start) start+step)...) last\n\n> Example\n In the following example, we'll compute the sum of all even integers\n less than 100.\n\n     0.up_to 100 . with_step 2 . fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "running_fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the range, by iteratively applying the\npassed function with the next element of the range. After each step the\nvalue is stored resulting in a new Vector of the same size as self.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking two elements and combining them.\n\n> Example\n Compute the running sum of all of the elements in a range.\n\n    (0.up_to 4).running_fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a condition is satisfied for all numbers in this range.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Checking that all numbers in the range are greater than 5.\n\n     10.up_to 100 . all (Filter_Condition.Greater than=5)\n\n> Example\n Checking that all numbers in the range are even.\n\n     10.up_to 100 . with_step 2 . all (x-> x%2 == 0)",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "any",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a condition is satisfied for any number in this range.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Checking that at least one number in the range is greater than 10.\n\n     1.up_to 100 . any (Filter_Condition.Greater than=10)\n\n> Example\n Checking that at least one number in the range is even.\n\n     1.up_to 100 . any (x-> x%2 == 0)",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets the first element of this range that satisfies a condition.\nIf no element satisfies the condition, returns `if_missing`.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the range.\n- if_missing: Value returned if no element satisfies the predicate.\n\n> Example\n Get the first number in the range divisible by 2, 3 and 5.\n\n     1.up_to 100 . find i->(i%2==0 && i%3==0 && i%5==0)\n\n> Example\n Get the first number in the range that is greater than 10.\n\n     1.up_to 100 . find (Filter_Condition.Greater than=10)",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the range contains the specified value.\n\n> Example\n Check if an index is in the range of a Vector\n\n      vec = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n      0.up_to vec.length . contains 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the index of an element in the range.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the range.\n\n> Example\n Find the index of an element in a range.\n\n     0.up_to 100 . index_of 20 == 20\n     0.up_to 100 . with_step 5 . index_of 20 == 4\n     0.up_to 100 . with_step 5 . index_of (>10) == 3",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "last_index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the last index of an element in the range.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n negative, it is counted from the end of the range.\n\n> Example\n Find the last index of an element in a pair.\n\n     Pair.new 2 2 . last_index_of 2 == 1",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "reverse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Range.Range",
        "isStatic": false,
        "documentation": " GROUP Selections\nReverses the range, returning a range with the same elements, but in\nthe opposite order.\n\n> Example\n Reverse a step 5 from 0 to 23\n\n     Range.new 0 23 . with_step 5 . reverse",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConverts the range to a vector containing the numbers in the range.\n\n> Example\n Getting a vector of the numbers 1 to 5.\n\n     1.up_to 6 . to_vector",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "reduce",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_empty",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Empty_Error.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of a non-empty range using a binary operation.\nIf the range is empty, returns `if_empty`.\n\nArguments:\n- function: A binary operation that takes two integers and combines them.\n- if_empty: Value returned if the range is empty.\n\n> Example\n Compute the sum of all the elements in a range.\n\n     0.up_to 10 . reduce (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Range.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "throw_zero_step_error",
        "arguments": [],
        "selfType": "Standard.Base.Data.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "check_start_valid",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_end",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCheck inputs are valid for a range",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "find_internal",
        "arguments": [
            {
                "name": "range",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nFind value and index for a predicate",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "get_index",
        "arguments": [
            {
                "name": "range",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "min",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "max",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nWork out the index of a value in a range",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Range",
        "name": "Empty_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " An error representing that the list is empty."
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Range.Empty_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Empty_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nPretty prints the empty error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "range_default_filter_condition_widget",
        "arguments": [],
        "selfType": "Standard.Base.Data.Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.Illegal_State",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Illegal_State",
        "name": "Illegal_State",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Illegal_State",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "cause",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Illegal_State.Illegal_State",
        "documentation": " PRIVATE\nUNSTABLE\n\nA generic error that indicates that a given operation cannot be performed\nin some specific conditions.\n\nArguments:\n- message: the error message explaining why the operation cannot be\n performed.\n- cause: (optional) another error that is the cause of this one.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Illegal_State",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Illegal_State.Illegal_State",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Illegal_State",
        "name": "cause",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Illegal_State.Illegal_State",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Illegal_State",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Illegal_State.Illegal_State",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Illegal_State.Illegal_State",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nProvides a human-readable representation of the encoding error.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Time_Period",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Time_Period",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents a unit of time of a day or shorter.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Day",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "documentation": " Represents a time period of a single day, measured as 24 hours.\n\n? Daylight Saving Time\n\n Note that due to DST changes, some days may be slightly longer or\n shorter. This is not reflected in the duration of this time period. For\n a calendar-oriented day period, use `Date_Period.Day` instead.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Hour",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "documentation": " Represents a time period of an hour.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Minute",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "documentation": " Represents a time period of a minute.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Second",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "documentation": " Represents a time period of a second.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Millisecond",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "documentation": " Represents a time period of a millisecond.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Microsecond",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "documentation": " Represents a time period of a microsecond.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "Nanosecond",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "documentation": " Represents a time period of a nanosecond.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "to_java_unit",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "returnType": "Standard.Base.Data.Time.Time_Period.TemporalUnit",
        "isStatic": false,
        "documentation": " PRIVATE\nWe treat the `Time_Period.Day` as a period of 24 hours, not a calendar day.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "to_java_unit_for_adjust",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "returnType": "Standard.Base.Data.Time.Time_Period.TemporalUnit",
        "isStatic": false,
        "documentation": " PRIVATE\nA special case for `adjust_start` and `adjust_end` methods.\nIn this particular case, it seems better to treat `Time_Period.Day` as a\ncalendar day. Otherwise, the behaviour of `start_of` and `end_of` methods\nnear DST would become unintuitive.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "adjust_start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day | Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day | Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "adjust_end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day | Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day | Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Period",
        "name": "to_duration",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Period.Time_Period",
        "returnType": "Standard.Base.Data.Time.Duration.Duration",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.File_Error",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.File_Error",
        "name": "File_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Errors when reading or writing to a file."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.File_Error",
        "name": "Not_Found",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.File_Error.File_Error",
        "documentation": " An error that indicates that the requested file does not exist.\n\nArguments:\n- file: The file that doesn't exist.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.File_Error",
        "name": "Already_Exists",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.File_Error.File_Error",
        "documentation": " Indicates that a destination file already exists.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.File_Error",
        "name": "Access_Denied",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.File_Error.File_Error",
        "documentation": " Indicates that the user did not have the permission to complete the\nrequested operation on the given file.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.File_Error",
        "name": "IO_Error",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.File_Error.File_Error",
        "documentation": " A generic IO error.\n\nArguments:\n- file: The file that couldn't be read.\n- message: The message for the error.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.File_Error",
        "name": "Unsupported_Type",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.File_Error.File_Error",
        "documentation": " Indicates that the given file's type is not supported.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.File_Error",
        "name": "Unsupported_Output_Type",
        "arguments": [
            {
                "name": "format",
                "reprType": "Standard.Base.System.File_Format.File_Format | Standard.Base.System.File.File | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.System.File_Format.File_Format"
                ]
            },
            {
                "name": "data_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.File_Error.File_Error",
        "documentation": " Indicates that the given type cannot be serialized to the provided file\nformat.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.File_Error",
        "name": "Corrupted_Format",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "cause",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "returnType": "Standard.Base.Errors.File_Error.File_Error",
        "documentation": " Indicates that the given file is corrupted, i.e. the data it contains\nis not in the expected format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "file",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.File_Error.File_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.File_Error.File_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "format",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.File_Error.File_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.File_Format | Standard.Base.System.File.File | Standard.Base.Any.Any",
        "returnType": "Standard.Base.System.File_Format.File_Format | Standard.Base.System.File.File | Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "data_type",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.File_Error.File_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "cause",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.File_Error.File_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.File_Error.File_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.File_Error.File_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the File error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "handle_java_exceptions",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.File_Error.File_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nUtility method for running an action with Java exceptions mapping.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "access_denied",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.File_Error.File_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nRaises an error indicating that the user does not have permission to\naccess the file in a given way.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.File_Error",
        "name": "wrap_io_exception",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "io_exception",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.File_Error.File_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nConverts a Java `IOException` into its Enso counterpart.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Numbers",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Numbers",
        "name": "Number",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " The root type of the Enso numeric hierarchy.\n\nIf a Number is expected, then the program can provide either a Float or\nan Integer in its place.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS add, plus\nGROUP Operators\nAdds two arbitrary numbers.\n\nArguments:\n- that: The number to add to this.\n\nAddition in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\n> Example\n Adding 10 and 15.\n\n     10 + 15",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS minus, subtract\nGROUP Operators\nSubtract an arbitrary number from this.\n\nArguments:\n- that: The number to subtract from this.\n\n> Example\n Subtract 5 from 2.\n\n     2 - 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "*",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS multiply, product, times\nGROUP Operators\nMultiply two arbitrary numbers.\n\nArguments:\n- that: The number to multiply this by.\n\nMultiplication in Enso will undergo automatic conversions such that you\nneed not convert between Integer and Float manually.\n\n> Example\n Multiplying 3 by 5.\n\n     3 * 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "/",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS divide\nGROUP Operators\nDivides an this by an arbitrary number.\n\nArguments:\n- that: The number to divide this by.\n\nDivision in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\n> Example\n Dividing 10 by 4 to get 2.5.\n\n     10 / 4",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "^",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS power\nGROUP Operators\nCompute the result of raising this to the power that.\n\nArguments:\n- that: The exponent.\n\n> Example\n Computing 2 cubed.\n\n     2^3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "asin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS inverse sine\nGROUP Trigonometry\n\nComputes the inverse of the sine function\n\nSelects a value in the -pi/2 through pi/2 range.\n\n> Example\n Calculate the inverse sine of 1.\n\n     1.asin",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "acos",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS inverse cosine\nGROUP Trigonometry\n\nComputes the inverse of the cosine function.\n\nSelects a value in the -pi/2 through pi/2 range.\n\n> Example\n Calculate the inverse cosine of 1.\n\n     1.acos",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "atan",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS inverse tangent\nGROUP Trigonometry\n\nComputes the inverse of the tangent function.\n\nSelects a value in the -pi/2 through pi/2 range.\n\n> Example\n Calculate the inverse tangent of 1.\n\n     1.atan",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "atan_2",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Trigonometry\nComputes the argument (angle) in the conversion from cartesian\nto polar coordinates, taking `self` as the x coordinate.\n\nArguments:\n- y: The y coordinate.\n\nThe returned angle is in the -pi through pi range.\n\n> Example\n Convert the coordinates 1 and 2 to polar form.\n\n     1.atan_2 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "sin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS sine\nGROUP Trigonometry\n\nComputes the sine function.\n\n> Example\n Calculate the sine of 2.\n\n     2.sin",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "cos",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS cosine\nGROUP Trigonometry\n\nComputes the cosine function.\n\n> Example\n Calculate the cosine of 2.\n\n     2.cos",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "tan",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS tangent\nGROUP Trigonometry\n\nComputes the tangent function.\n\n> Example\n Calculate the tangent of 2.\n\n     2.tan",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "sinh",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Trigonometry\nComputes the hyperbolic sine function.\n\n> Example\n Calculate the hyperbolic sine of 1.\n\n     1.sinh",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "cosh",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Trigonometry\nComputes the hyperbolic cosine function.\n\n> Example\n Calcualte the hyperbolic cosine of 1.\n\n     1.cosh",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "tanh",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Trigonometry\nComputes the hyperbolic tangent function.\n\n> Example\n Calculate the hyperbolic tangent of 1.\n\n     1.tanh",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "exp",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS exponential\nGROUP Math\n\nComputes the exponential function, raising Euler's number `r` to the power of\n`self`.\n\n> Example\n Calculate e to the 4th power.\n\n     4.exp",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "ln",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS natural logarithm\nGROUP Math\n\nComputes the natural logarithm function.\n\n> Example\n Calculate the natural logarithm of 2.\n\n     2.ln",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "sqrt",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS square root\nGROUP Math\n\nComputes the square root of `self`.\n\n> Example\n Calculate the square root of 8.\n\n     8.sqrt",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "log",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "base",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " ALIAS logarithm\nGROUP Math\n\nComputes the `base`-log of `self`.\n\nArguments:\n- base: The base for the logarithm.\n\n> Example\n Calculate log 2 of 4.\n\n     4.log 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "format",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConverts a numeric value to a string, using the Java DecimalFormat\nformatter.\n\nArguments:\n- format: The java-style formatting specifier.\n\n> Example\n Convert the value 5000 to a string.\n\n     5000.format \"#,##0\"",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "equals",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "epsilon",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0.0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks equality of numbers, using an `epsilon` value.\n\n! Error Conditions\n If either of the arguments is `Number.nan`, an `Incomparable_Values` error is raised.\n\nArguments:\n- that: The number to check equality against.\n- epsilon: The value by which `self` and `that` can be separated by before\n counting as not equal.\n\n> Example\n Check if 1 is equal to 1.0000001 within 0.001.\n\n     1.equals 1.0000001 epsilon=0.001",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "min",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " GROUP Math\nReturns the smaller value of `self` and `that`.\n\nArguments:\n- that: The number to compare `self` against.\n\n? Math.min or Number.min\n While we provide the min method on `Number`, we find it more intuitive to\n write `Math.min a b` rather than `a.min b`. To that end, we recommend using\n the first style.\n\n> Example\n Find the minimum of 2 and 5.\n\n     2.min 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "max",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " GROUP Math\nReturns the larger value of `self` and `that`.\n\nArguments:\n- that: The number to compare `self` against.\n\n? Math.max or Number.max\n While we provide the max method on `Number`, we find it more intuitive to\n write `Math.max a b` rather than `a.max b`. To that end, we recommend using\n the first style.\n\n> Example\n Find the maximum of 2 and 5.\n\n     2.max 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "positive_infinity",
        "arguments": [],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": true,
        "documentation": " A constant holding the floating-point positive infinity.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "negative_infinity",
        "arguments": [],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": true,
        "documentation": " A constant holding the floating-point negative infinity.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "nan",
        "arguments": [],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": true,
        "documentation": " A constant holding the floating-point Not-a-Number value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "is_nan",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Math\nChecks if the given number is the floating-point Not-a-Number value.\n\nThis is needed, because the NaN value will return `False` even when being\ncompared with itself, so `x == Number.nan` would not work.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "is_infinite",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Math\nChecks if the given number is infinite.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "signum",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Math\nReturns the sign of the number.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Numbers",
        "name": "Float",
        "params": [],
        "parentType": "Standard.Base.Data.Numbers.Number",
        "documentation": " Float is the type of float numbers in Enso.\n\n? Representation\n Enso's float numbers are represented as IEEE754 double-precision\n floating point numbers.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS add, plus\nGROUP Operators\nAdds a float and an arbitrary number.\n\nArguments:\n- that: The number to add to this.\n\nAddition in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\n> Example\n Adding 10.1 and 15.\n\n     10.1 + 15",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS minus, subtract\nGROUP Operators\nSubtract an arbitrary number from this.\n\nArguments:\n- that: The number to subtract from this.\n\n> Example\n Subtract 5 from 2.78.\n\n     2.78 - 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "*",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS multiply, product, times\nGROUP Operators\nMultiply a float by an arbitrary number.\n\nArguments:\n- that: The number to multiply this by.\n\nMultiplication in Enso will undergo automatic conversions such that you\nneed not convert between Integer and Float manually.\n\n> Example\n Multiplying 3 by 5.27.\n\n     5.27 * 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "/",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS divide\nGROUP Operators\nDivides a float by an arbitrary number.\n\nArguments:\n- that: The number to divide this by.\n\nDivision in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\n> Example\n Dividing 10 by 4.5.\n\n     10 / 4.5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "%",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS modulo, modulus\nGROUP Operators\nComputes the remainder when dividing this by that.\n\nArguments:\n- that: The number to divide this by.\n\nModulus in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\n> Example\n Computing the remainder when dividing 3.5 by 2.\n\n     3.5 % 2 == 1.5\n\n> Example\n Computing the fractional part of a number.\n\n     10.5 % 1.0 == 0.5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "^",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS power\nGROUP Operators\nCompute the result of raising this to the power that.\n\nArguments:\n- that: The exponent.\n\n> Example\n Computing 2.2 cubed.\n\n     2.2^3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": ">",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS greater than\nGROUP Operators\nChecks if this is greater than that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10 is greater than 7.3.\n\n     10 > 7.3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": ">=",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS greater than or equal\nGROUP Operators\nChecks if this is greater than or equal to that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10 is greater than or equal to 7.3.\n\n     10 >= 7.3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "<",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS less than\nGROUP Operators\nChecks if this is less than that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10 is less than 7.3.\n\n     10 < 7.3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "<=",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS less than or equal\nGROUP Operators\nChecks if this is less than or equal to that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10.4 is less than or equal to 7.\n\n     10.4 <= 7",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "abs",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Math\nComputes the absolute value of this.\n\nThe absolute value of a positive number is itself, while the absolute\nvalue of a negative number is that number multiplied by -1.\n\n> Example\n Computing the absolute value of -10.63.\n\n    -10.63.abs",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "ceil",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Rounding\nComputes the nearest integer above this number.\n\nThis method provides a means of converting a Float to an Integer.\n\n> Example\n Computing the ceiling of 4.736 (which is 5).\n\n     4.736.ceil",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "floor",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Rounding\nComputes the nearest integer below this float.\n\nThis method provides a means of converting a Float to an Integer.\n\n> Example\n Computing the floor of 4.323 (which is 4).\n\n     4.323.floor",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "truncate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " ALIAS int\nGROUP Rounding\n\nTruncate a floating-point number to an integer by dropping the fractional\npart. This is equivalent to \"round-toward-zero\".",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "round",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decimal_places",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "use_bankers",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Rounding\nRound to a specified number of decimal places.\n\nBy default, rounding uses \"asymmetric round-half-up\", also known as\n\"round towards positive infinity.\" If use_bankers=True, then it uses\n\"round-half-even\", also known as \"banker's rounding\".\n\nIf `decimal_places` > 0, `round` returns a `Float`; otherwise, it\nreturns an `Integer`.\n\nIf the argument is `NaN` or `+/-Inf`, an `Arithmetic_Error` error is\nthrown.\n\nArguments:\n- decimal_places: The number of decimal places to round to. Can be\n negative, which results in rounding to positive integer powers of 10.\n Must be between -15 and 15 (inclusive).\n- use_bankers: Rounds mid-point to nearest even number.\n\n! Error Conditions\n\n If `self` is outside the range -99999999999999..99999999999999\n (inclusive), an `Illegal_Argument` error is thrown.\n\n If `decimal_places` is outside the range -15..15 (inclusive), an\n `Illegal_Argument` error is thrown.\n\n? Negative decimal place counts\n Rounding to `n` digits can be thought of as \"rounding to the nearest\n multiple of 10^(-n)\". For negative decimal counts, this results in\n rounding to the nearest positive integer power of 10.\n\n> Example\n Round to the nearest integer.\n\n    3.3 . round == 3\n\n> Example\n Round to two decimal places.\n\n    3.1415 . round 2 == 3.14\n\n> Example\n Round to the nearest hundred.\n\n    1234.0 . round -2 == 1200\n\n> Example\n Use Banker's Rounding.\n\n    2.5 . round use_bankers=True == 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "round_float_builtin",
        "arguments": [
            {
                "name": "n",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decimal_places",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "use_bankers",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "negate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Operators\nCompute the negation of this.\n\n> Example\n Negate 5.1 to get -5.1.\n\n     5.1.negate",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "to_float",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Float",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " Convert this to a float.\n\nThis is a no-op on floats, but is provided for completeness of the Enso\nNumber API.\n\n> Example\n Convert 5.0 to a float to get 5.0.\n\n     5.0.to_float",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "parse",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Float",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS from text\nGROUP Conversions\n\nParses a textual representation of a float into a float number, returning\na `Number_Parse_Error` if the text does not represent a valid float.\n\nArguments:\n- text: The text to parse into a float.\n- locale: The locale that specifies the format to use when parsing\n\n> Example\n Parse the text \"7.6\" into a float number.\n\n     Float.parse \"7.6\"",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Numbers",
        "name": "Integer",
        "params": [],
        "parentType": "Standard.Base.Data.Numbers.Number",
        "documentation": " Integer is the type of integral numbers in Enso. They are of unbounded\nsize and can grow as large as necessary.\n\n? Representation\n For certain operations (such as bitwise logic), the underlying\n representation of the number matters. Enso Integers are represented as\n signed 2's complement numbers.\n\n? Performance\n Integers that fit into 64 bits are represented in memory as 64 bits.\n This means that operations on them achieve excellent performance. Once\n the integer grows beyond being able to fit in 64 bits, performance will\n degrade.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS add, plus\nGROUP Operators\nAdds an integer and an arbitrary number.\n\nArguments:\n- that: The number to add to this.\n\nAddition in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\n> Example\n Adding 10 and 15.\n\n     10 + 15",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS minus, subtract\nGROUP Operators\nSubtract an arbitrary number from this.\n\nArguments:\n- that: The number to subtract from this.\n\n> Example\n Subtract 5 from 2.\n\n     2 - 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "*",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS multiply, product, times\nGROUP Operators\nMultiply an integer by an arbitrary number.\n\nArguments:\n- that: The number to multiply this by.\n\nMultiplication in Enso will undergo automatic conversions such that you\nneed not convert between Integer and Float manually.\n\n> Example\n Multiplying 3 by 5.\n\n     3 * 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "/",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS divide\nGROUP Operators\nDivides an integer by an arbitrary number.\n\nArguments:\n- that: The number to divide this by.\n\nDivision in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\n> Example\n Dividing 10 by 4 to get 2.5.\n\n     10 / 4",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "%",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS modulo, modulus\nGROUP Operators\nComputes the remainder when dividing this by that.\n\nArguments:\n- that: The number to divide this by.\n\nModulus in Enso will undergo automatic conversions such that you need\nnot convert between Integer and Float manually.\n\nReturns an error if the shift amount exceeds 2^32.\n\n> Example\n Computing the remainder when dividing 10 by 3 (which is 1).\n\n     10 % 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "^",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " ALIAS power\nGROUP Operators\nCompute the result of raising this to the power that.\n\nArguments:\n- that: The exponent.\n\n> Example\n Computing 2 cubed.\n\n     2^3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": ">",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS greater than\nGROUP Operators\nChecks if this is greater than that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10 is greater than 7.\n\n     10 > 7",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": ">=",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS greater than or equal\nGROUP Operators\nChecks if this is greater than or equal to that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10 is greater than or equal to 7.\n\n     10 >= 7",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "<",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS less than\nGROUP Operators\nChecks if this is less than that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10 is less than 7.\n\n     10 < 7",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "<=",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS less than or equal\nGROUP Operators\nChecks if this is less than or equal to that.\n\nArguments:\n- that: The number to compare this against.\n\n> Example\n Checking if 10 is less than or equal to 7.\n\n     10 <= 7",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "abs",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Math\nComputes the absolute value of this.\n\nThe absolute value of a positive number is itself, while the absolute\nvalue of a negative number is that number multiplied by -1.\n\n> Example\n Computing the absolute value of -10.\n\n    -10.abs",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "ceil",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Rounding\nComputes the nearest integer above this integer.\n\nThis is a no-op on integers but is provided for completeness of the Enso\nnumber API.\n\n> Example\n Computing the ceiling of 4.\n\n     4.ceil",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "div",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Math\nComputes the integer division of this by that.\n\nArguments:\n- that: The number to divide this by.\n\nInteger division rounds down to the nearest integer.\n\nReturns an error if `that` is zero.\n\n> Example\n Dividing 10 by 3 to get 3.\n\n     10.div 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "floor",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Rounding\nComputes the nearest integer below this integer.\n\nThis is a no-op on integers but is provided for completeness of the Enso\nnumber API.\n\n> Example\n Computing the floor of 4.\n\n     4.floor",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "truncate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " ALIAS int\nGROUP Rounding\n\nTruncate an `Integer` to an `Integer`, i.e. returns its argument. For\ncompatibility with `Float.truncate`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "round",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decimal_places",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "use_bankers",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Rounding\nRound to a specified number of decimal places.\n\nFor integers, rounding to 0 or more decimal places simply returns the\nargument. For negative decimal places, see below.\n\nBy default, rounding uses \"asymmetric round-half-up\", also known as\n\"round towards positive infinity.\" If use_bankers=True, then it uses\n\"round-half-even\", also known as \"banker's rounding\".\n\nArguments:\n- decimal_places: The number of decimal places to round to. Can be\n negative, which results in rounding to positive integer powers of 10.\n Must be between -15 and 15 (inclusive).\n- use_bankers: Rounds mid-point to nearest even number.\n\n! Error Conditions\n If `self` is outside the range -99999999999999..99999999999999\n (inclusive), an `Illegal_Argument` error is thrown.\n\n If `decimal_places` is outside the range -15..15 (inclusive), an\n `Illegal_Argument` error is thrown.\n\n? Negative decimal place counts\n Rounding to `n` digits can be thought of as \"rounding to the nearest\n multiple of 10^(-n)\". For negative decimal counts, this results in\n rounding to the nearest positive integer power of 10.\n\n> Example\n Round an integer (returns the value unchanged).\n\n    3 . round == 3\n\n> Example\n Round to the nearest thousand.\n\n    2511 . round -3 == 3000\n\n> Example\n Round to the nearest hundred, using Banker's Rounding.\n\n    12250 . round -2 use_bankers=True == 12200",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "round_integer_builtin",
        "arguments": [
            {
                "name": "n",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decimal_places",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "use_bankers",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "negate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Operators\nCompute the negation of this.\n\n> Example\n Negate 5 to get -5.\n\n     5.negate",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "to_float",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " Convert this to a float.\n\n> Example\n Convert 5 to a float to get 5.0.\n\n     5.to_float",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "bit_and",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Bitwise\nComputes the bitwise and (conjunction) operation between this and\nthat.\n\nArguments:\n- that: The number to compute the bitwise conjunction with.\n\nBitwise and computes the logical conjunction of the corresponding pairs\nof bits in the operands.\n\n? Example\n Computing the bitwise conjunction of 2_01101101 and 2_11110000.\n\n     2_01101101.bit_and 2_11110000",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "bit_not",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Bitwise\nComputes the bitewise compliment of this.\n\nThe bitwise compliment negates the value of each bit in the operand.\n\n? Example\n Bitwise negation of 2_0110.\n\n     2_0110.bit_not",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "bit_or",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Bitwise\nComputes the bitwise or (disjunction) operation between this and\nthat.\n\nArguments:\n- that: The number to compute the bitwise disjunction with.\n\nBitwise or computes the logical disjunction of the pairs of corresponding\nbits in the operands.\n\n> Example\n Computing the bitwise disjunction of 2_01101101 and 2_11110000.\n\n     2_01101101.bit_or 2_11110000",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "bit_xor",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Bitwise\nComputes the bitwise exclusive or between this and that.\n\nArguments:\n- that: The number to compute the bitwise exclusive or with.\n\nBitwise exclusive or computes the exclusive or of the pairs of\ncorresponding bits in the operands.\n\n> Example\n Computing the bitwise exclusive or of 2_01101101 and 2_11110000.\n\n     2_01101101.bit_xor 2_11110000",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "bit_shift",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Bitwise\nShifts the bits of this by the amount that.\n\nLeft-shifts fill the new bits with zeroes, while right-shifts perform\nsign extension.\n\nReturns an error if the shift amount exceeds 2^32.\n\nArguments:\n- that: The number of bits by which the shift should be performed.\n Positive numbers perform a left-shift, while negative numbers perform a\n right-shift.\n\n\n> Example\n Shift the bits of the number 1 left by four bits.\n\n     1.bit_shift 4",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "bit_shift_l",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Bitwise\nPerforms a bitwise left-shift on the number.\n\nLeft-shifts fill the new bits with zeroes, while right-shifts perform\nsign extension.\n\nReturns an error if the shift amount exceeds 2^32.\n\nArguments:\n- that: The number of bits by which the shift should be performed.\n Positive numbers perform a left-shift, while negative numbers perform a\n right-shift.\n\n> Example\n Shift the bits of the number 1 left by four bits.\n\n     1.bit_shift_l 4",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "bit_shift_r",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Bitwise\nPerforms a bitwise right-shift on the number.\n\nLeft-shifts fill the new bits with zeroes, while right-shifts perform\nsign extension.\n\nReturns an error if the shift amount exceeds 2^32.\n\nArguments:\n- that: The number of bits by which the shift should be performed.\n Positive numbers perform a right-shift, while negative numbers perform\n a left-shift.\n\n> Example\n Shift the bits of the number 1 right by four bits.\n\n     1.bit_shift_r 4",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "parse",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "radix",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "10",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS from text\nGROUP Conversions\n\nParses a textual representation of an integer into an integer number, returning\na `Number_Parse_Error` if the text does not represent a valid integer.\n\nArguments:\n- text: The text to parse into a integer.\n- radix: The number base to use for parsing (defaults to 10). `radix`\n must be between 2 and 36 (inclusive) -- see https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/lang/Character.html#MIN_RADIX.\n\n> Example\n Parse the text \"20220216\" into an integer number.\n\n    Integer.parse \"20220216\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "parse_builtin",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "radix",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nInternally handles the parsing.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Numbers",
        "name": "Number_Parse_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A syntax error when parsing a double."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Numbers",
        "name": "Error",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Numbers.Number_Parse_Error",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number_Parse_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Number_Parse_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number_Parse_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nPretty print the syntax error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Numbers",
        "name": "Positive_Integer",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A wrapper type that ensures that a function may only take positive integers."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Numbers",
        "name": "Value",
        "arguments": [
            {
                "name": "integer",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Numbers.Positive_Integer",
        "documentation": " PRIVATE\nThis constructor should not be used by user code as it can be used to\nbreak the invariants. Instead, this type should only be created by `new`\nor conversions.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "integer",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Positive_Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "new",
        "arguments": [
            {
                "name": "integer",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Positive_Integer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nConstructor to create a `Positive_Integer` from an `Integer` - checking\nif it satisfies the condition. User code should prefer the\n`Positive_Integer.from` conversion.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Positive_Integer",
        "isStatic": false,
        "documentation": " Allows to create a `Positive_Integer` from an `Integer`.\nIt will throw `Illegal_Argument` if the provided integer is not positive.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Positive_Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Positive_Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Numbers",
        "name": "Positive_Integer_Comparator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "compare",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Positive_Integer_Comparator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "hash",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Positive_Integer_Comparator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Numbers",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Positive_Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Positive_Integer",
        "returnType": "Standard.Base.Data.Ordering.Comparable",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.XML",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.XML",
        "name": "XML_Document",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.XML",
        "name": "Value",
        "arguments": [
            {
                "name": "java_document",
                "reprType": "Standard.Base.Data.XML.Document",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.XML.XML_Document",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "java_document",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Document",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.Document",
        "returnType": "Standard.Base.Data.XML.Document",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "from_file",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Document",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Read an XML document from a file.\n\nArguments:\n- file: the `File` to read the XML document from.\n\nIf there is an error reading the file, `File_Error` is thrown.\n\nIf there is a parsing error, `XML_Error.Parse_Error` is thrown.\n\n> Example\n Read an XML document in 'doc.xml'.\n\n     file = enso_project.data / \"doc.xml\"\n     doc = XML_Document.from_file test_file",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "from_stream",
        "arguments": [
            {
                "name": "input_stream",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Document",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Read an XML document from an input stream.\n\nArguments:\n- input_stream: the input stread to read the XML document from.\n\nIf there is a parsing error, `XML_Error.Parse_Error` is thrown.\n\n> Example\n Read an XML document from an input_stream.\n\n     doc = XML_Document.from_stream input_stream",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "from_text",
        "arguments": [
            {
                "name": "xml_string",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Document",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Read an XML document from a string.\n\nArguments:\n- xml_string: The string to read the XML document from.\n\nIf there is a parsing error, `XML_Error.Parse_Error` is thrown.\n\n> Example\n Read an XML document from an string.\n\n     xml_string = \"<foo></foo>\"\n     doc = XML_Document.from_text xml_string",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "from_source",
        "arguments": [
            {
                "name": "input_source",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Document",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nRead XML from an input source.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "root_element",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Document",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Document",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Get the root element of the document.\n\n> Example\n Get the root element of a document.\n\n     doc = XML_Document.from_file file\n     root = doc.root_element",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Document",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Document",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing this XML_Document.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Document",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Document",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this XML_Document.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.XML",
        "name": "XML_Element",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.XML",
        "name": "Value",
        "arguments": [
            {
                "name": "java_element",
                "reprType": "Standard.Base.Data.XML.Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "children_cache",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.XML.XML_Element | Standard.Base.Data.Text.Text",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.XML.XML_Element",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "java_element",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.Element",
        "returnType": "Standard.Base.Data.XML.Element",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "children_cache",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.XML.XML_Element | Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.XML.XML_Element | Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the tag of an XML element.\n\n> Example\n Get the tag of an XML element.\n\n     XML_Document.from_text '<foo>hello</foo>' . root_element . name\n     # => \"foo\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets a child of an XML element.\n\nArguments:\n- key: If an `Integer`, returns the element at position `at` in its list\n of children. If a `Text`, treats `key` as an XPath specifier, and\n returns the elements it points to. If a `Text` that starts with `\"@\"`,\n returns the attribute with the given name.\n\n> Example\n   XML_Document.from_text '<foo><baz>hello</baz></foo>' . root_element . get 0\n   # => XML_Document.from_text \"<baz>hello</baz>\" . root_element\n\n> Example\n Get a tag attribute.\n\n     root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element\n     root.get \"@bar\"\n     # => \"one\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets a child or attribute of an XML element.\n\nArguments:\n- key: If an `Integer`, returns the element at position `at` in its list\n of children. If a `Text`, treats `key` as an XPath specifier, and\n returns the elements it points to. If a `Text` that starts with `\"@\"`,\n returns the attribute with the given name.\n\n> Example\n Get a nested tag:\n\n     XML_Document.from_text '<foo><baz>hello</baz></foo>' . root_element . at 0\n     # => XML_Document.from_text \"<baz>hello</baz>\" . root_element\n\n> Example\n Get a tag attribute.\n\n     root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element\n     root.at \"@bar\"\n     # => \"one\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "get_xpath",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Get elements denoted by the given XPath key.\n\nArguments:\n- key: The XPath string to use to search for elements.\n\n> Example\n Get an element by xpath.\n\n     root = XML_Document.from_file test_file . root_element\n     root.at \"/class/teacher[1]/firstname\"\n     # => [XML_Document.from_text \"<firstname>Alice</firstname>\" . root_element]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "children",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the child elements of an XML element.\n\n`children` only returns child elements and child text nodes that are not\n100% whitespace. Other node types, such as comments, are not included.\n\n> Example\n     XML_Document.from_text '<foo><baz>hello</baz></foo>' . root_element . children\n     # => [XML_Document.from_text \"<baz>hello</baz>\"]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "child_count",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the number children of an XML element.\n\n`child_count` only counts child elements and child text nodes that are\nnot 100% whitespace. Other node types, such as comments, are not included\nin the count.\n\n> Example\n Get the number of children of an element.\n\n     XML_Document.from_text '<foo> <bar>hello</bar> <bar>hello2</bar>< </foo>' . root_element . child_count\n     # => 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "attribute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.((Error) No_Such_Key self name).throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Get an attribute of an XML element.\n\nArguments:\n- name: The name of the attribute to get.\n- if_missing: The value returned if the attribute does not exist.\n\n> Example\n Get an attribute of an element.\n\n     root = XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element\n     root.attribute \"bar\"\n     # => \"one\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "attributes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets a map containing f the attributes of an XML element.\n\n> Example\n   XML_Document.from_text '<foo bar=\"one\">hello</foo>' . root_element . attributes\n   # => Map.from_vector [[\"bar\", \"one\"]]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the text (non-markup) contents of the element and its descendants,\nif any.\n\n> Example\n Get the text content of an element.\n\n     XML_Document.from_text '<foo>hello</foo>' . root_element . text\n     # => \"hello\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "outer_xml",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the raw XML of the element (including tag, attributes and contents).\n\n> Example\n Get the outer XML of an element.\n\n     XML_Document.from_text '<foo>hello</foo>' . root_element . outer_xml\n     # => '<foo>hello</foo>'",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "inner_xml",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the raw XML of the contents of the element, not including the\noutermost tag and attributes.\n\n> Example\n Get the inner XML of an element.\n\n     XML_Document.from_text '<foo><bar>hello</bar></foo>' . root_element . inner_xml\n     # => '<bar>hello</bar>'",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "get_elements_by_tag_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "tag_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets elements matching a given tag name.\n\nThis searches through all descendants of the node, not just immediate children.\n\n> Example\n     XML_Document.from_text '<foo> <baz>hello</baz> <bar>and</bar> <baz>goodbye</baz> </foo>' . root_element . get_elements_by_tag_name \"baz\"\n     # => [XML_Document.from_text \"<baz>hello</baz>\" . root_element, XML_Document.from_text \"<baz>goodbye</baz>\" . root_element]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this XML_Element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing this XML_Element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "new",
        "arguments": [
            {
                "name": "java_element",
                "reprType": "Standard.Base.Data.XML.Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Element",
        "returnType": "Standard.Base.Data.XML.XML_Element",
        "isStatic": true,
        "documentation": " PRIVATE\n\nBuild a new XML_Element, populating the lazy `children_cache` field.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.XML",
        "name": "XML_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.XML",
        "name": "Parse_Error",
        "arguments": [
            {
                "name": "line_number",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "column_number",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.XML.XML_Error",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.XML",
        "name": "Other",
        "arguments": [
            {
                "name": "error",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.XML.XML_Error",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "line_number",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "column_number",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "handle_java_exceptions",
        "arguments": [
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nUtility method for running an action with Java exceptions mapping.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "wrap_java_exception",
        "arguments": [
            {
                "name": "exception",
                "reprType": "Standard.Base.Data.XML.JException",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Error",
        "returnType": "Standard.Base.Data.XML.XML_Error",
        "isStatic": true,
        "documentation": " PRIVATE\n\nConverts a Java `Exception` into its Enso counterpart.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the XML_Error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "only_wanted_nodes",
        "arguments": [
            {
                "name": "node_list",
                "reprType": "Standard.Base.Data.XML.NodeList",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text | Standard.Base.Data.XML.XML_Element",
        "isStatic": true,
        "documentation": " PRIVATE\nFilter out unwanted nodes.\nWanted nodes are:\n- Elements\n- Text (if not completely whitespace)\n- Attribute values (which only arise in the case of XPath keys)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "build_child_list",
        "arguments": [
            {
                "name": "java_element",
                "reprType": "Standard.Base.Data.XML.Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nBuild the child list, filtering out unwanted child nodes.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML",
        "name": "is_attribute_key",
        "arguments": [
            {
                "name": "s",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns true if `key` starts with \"@\".",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Sort_Direction",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Sort_Direction",
        "name": "Sort_Direction",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Specifies the direction of ordering.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Sort_Direction",
        "name": "Ascending",
        "arguments": [],
        "returnType": "Standard.Base.Data.Sort_Direction.Sort_Direction",
        "documentation": " Elements should be sorted in ascending order.\n\n> Example\n Create an ascending order.\n\n     Sort_Direction.Ascending",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Sort_Direction",
        "name": "Descending",
        "arguments": [],
        "returnType": "Standard.Base.Data.Sort_Direction.Sort_Direction",
        "documentation": " Elements should be sorted in descending order.\n\n> Example\n Create a descending order.\n\n     Sort_Direction.Descending",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Sort_Direction",
        "name": "to_sign",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Sort_Direction.Sort_Direction",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Sort_Direction.Sort_Direction",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert into the sign of the direction",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "maximum_body_in_memory",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Response_Body",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nHow large a response body can be before it is written to a temporary file.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "Response_Body",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "Raw_Stream",
        "arguments": [
            {
                "name": "raw_stream",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "documentation": " PRIVATE\nFor internal use only. Should be materialised before returning to an end\nuser.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "Byte_Array",
        "arguments": [
            {
                "name": "bytes",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "Temporary_File",
        "arguments": [
            {
                "name": "file_resource",
                "reprType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "raw_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.System.Input_Stream.Input_Stream",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "content_type",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "uri",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Network.URI.URI",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "file_resource",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "returnType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "new",
        "arguments": [
            {
                "name": "stream",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.InputStream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "isStatic": true,
        "documentation": " Create a Response_Body.\n\nArguments:\n- stream: The body of the response as an InputStream.\n- content_type: The content type of the response.\n- uri: The URI of the response.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "with_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "materialize",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.System.Input_Stream.Input_Stream",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nMaterializes the stream into either a byte array or a temporary file and\nreturn a new Response_Body.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "decode",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.System.File_Format.File_Format",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Auto_Detect",
                "tagValues": [
                    "Standard.Base.System.File_Format.File_Format"
                ]
            },
            {
                "name": "if_unsupported",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.((Error) Unsupported_Content_Type ((content_type) self)).throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS parse\nGROUP Conversions\nUses the format to decode the body.\nIf using `Auto_Detect`, the content-type will be used to determine the\nformat.\n\nArguments:\n- format: The format to use to decode the body.\n- if_unsupported: Specifies how to proceed if the format is not supported.",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "decode_as_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " ALIAS bytes\nGROUP Input\nRead the body as a byte array.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "decode_as_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS parse as text\nGROUP Conversions\nDecodes the body to a Text value.",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "decode_as_json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.Data.Json.JS_Object | Standard.Base.Data.Boolean.Boolean | Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text | Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " ALIAS parse as json, parse json\nGROUP Conversions\nDecodes the body as JSON.\n\n> Example\n Convert a response from JSON.\n\n     import Standard.Examples\n\n     example_to_text = Examples.get_geo_data.decode_as_json",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert response body to Text.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "to_file",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_existing_file",
                "reprType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Existing_File_Behavior.Backup",
                "tagValues": [
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Overwrite",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Backup",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Append",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " GROUP Output\nWrite response body to a File.\n\nArguments:\n- file: The file to write the body to.\n- on_existing_file: Specifies how to proceed if the file already exists.\n\n> Examples\n Write the contents of the request body to a scratch file on disk. The\n file will be created if it does not exist, and will be overwritten if\n it does.\n\n     import Standard.Examples\n\n     example_to_file =\n        Examples.get_geo_data.to_file Examples.scratch_file",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "Unsupported_Content_Type",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "Error",
        "arguments": [
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Response_Body.Unsupported_Content_Type",
        "documentation": " PRIVATE\nA type representing an unsupported content type.\n\nArguments:\n- content_type: The content type that is unsupported.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "content_type",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Unsupported_Content_Type",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response_Body.Unsupported_Content_Type",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body.Unsupported_Content_Type",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the error to a human readable string.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "can_decode",
        "arguments": [
            {
                "name": "type",
                "reprType": "Standard.Base.System.File_Format.File_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.System.File_Format.File_Format"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "decode_format_selector",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Response_Body",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nSelector for decoding from the web.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response_Body",
        "name": "delete_file",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response_Body",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nUtility method for closing primitive Java streams. Provided to avoid\naccidental scope capture with `Managed_Resource` finalizers.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Case",
        "documentation": " Specifies the casing options for text conversion.",
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Case",
        "name": "Case",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Case",
        "name": "Lower",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Case.Case",
        "documentation": " All letters in lower case.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Case",
        "name": "Upper",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Case.Case",
        "documentation": " All letters in upper case.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Case",
        "name": "Title",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Case.Case",
        "documentation": " First letter of each word in upper case, rest in lower case.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Meta.Enso_Project",
        "documentation": null,
        "reexport": "Standard.Base.Meta"
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "Project_Description",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Functionality for inspecting the current project.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "Value",
        "arguments": [
            {
                "name": "prim_root_file",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "prim_config",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Enso_Project.Project_Description",
        "documentation": " PRIVATE\nA representation of an Enso project.\n\nArguments:\n- prim_root_file: The primitive root file of the project.\n- prim_config: The primitive config of the project.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "prim_root_file",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Enso_Project.Project_Description",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "prim_config",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Enso_Project.Project_Description",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "new",
        "arguments": [
            {
                "name": "module",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Meta.Enso_Project.Project_Description",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns the Enso project description for the given module. If no module is\ngiven, returns the description of the project that the engine was executed\nwith, i.e., the project that contains the `main` method, or throws\n`Module_Not_In_Package_Error` if there is no such project, e.g., when\nexecuting a single file.\n\nArguments:\n- module: An optional module for which the Enso project description\n will be fetched. If `Nothing`, the current project description will\n be fetched.\n\n> Example\n Get the project description for the project that contains the `main`\n method.\n\n     Project_Description.new\n\n> Example\n Get the project description for the `Standard.Visualizations` project.\n\n     Project_Description.new Standard.Visualizations\n\n> Example\n Get the project description for the `Standard.Base` project from the\n `Vector` module.\n\n     Project_Description.new Standard.Base.Data.Vector",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "root",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Enso_Project.Project_Description",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Enso_Project.Project_Description",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the root directory of the project.\n\n> Example\n Get the root directory of the project.\n\n     enso_project.root",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "data",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Enso_Project.Project_Description",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Enso_Project.Project_Description",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " GROUP Input\nReturns the root data directory of the project.\n\n> Example\n Get the data directory of the project.\n\n     enso_project.data",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Enso_Project.Project_Description",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Enso_Project.Project_Description",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the name of the project.\n\n> Example\n Get the name of the project.\n\n     enso_project.name",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "namespace",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Enso_Project.Project_Description",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Enso_Project.Project_Description",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the namespace of the project.\n\n> Example\n Get the namespace of the project.\n\n     enso_project.namespace",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta.Enso_Project",
        "name": "enso_project",
        "arguments": [],
        "selfType": "Standard.Base.Meta.Enso_Project",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Returns the Enso project description for the project that the engine was\nexecuted with, i.e., the project that contains the `main` method, or\nthrows `Module_Not_In_Package_Error` if executing a single file.\n\n> Example\n Get the project description for the project that contains the `main`\n method.\n\n     enso_project",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text",
        "name": "Text",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Enso's text type.\n\nEnso's text type is natively unicode aware, and will handle arbitrary\ntextual data.\n\n? Concatenation\n Enso's text type uses a rope-based structure under the hood to provide\n users with efficient concatenation operations.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " ALIAS count\nGROUP Metadata\nComputes the number of characters in the text.\n\n! What is a Character?\n  A character is defined as an Extended Grapheme Cluster, see Unicode\n  Standard Annex 29. This is the smallest unit that still has semantic\n  meaning in most text-processing applications.\n\n> Example\n  Getting the length of the string \"건반(Korean)\".\n\n      \"건반(Korean)\".length",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS concatenate\nGROUP Operators\nConcatenates the text that to the right side of this.\n\nArguments:\n- that: The text to concatenate to this.\n\n> Example\n Concatenating two texts.\n\n     \"Hello\" + \", world!\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "equals_ignore_case",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether `self` is equal to `that`, ignoring the case of the texts.\n\nArguments:\n- that: The text to compare `self` for case-insensitive equality with.\n\nTwo texts are considered equal ignoring case if they are of the same length\nand corresponding characters are equal ignoring case.\n\n! Unicode Equality\n The definition of equality includes Unicode canonicalization. I.e. two\n texts are equal if they are identical after canonical decomposition. This\n ensures that different ways of expressing the same character in the\n underlying binary representation are considered equal.\n\n> Example\n The string 'É' (i.e. U+00C9, LATIN CAPITAL LETTER E WITH ACUTE) is\n equal to the string 'é' (i.e. U+00E9, LATIN SMALL LETTER E WITH ACUTE)\n ignoring case, which is canonically the same as the string 'e\\u0301'\n (i.e. the letter `e` followed by U+0301, COMBINING ACUTE ACCENT).\n Therefore:\n\n     (('É' . equals_ignore_case 'é') && ('é' . equals_ignore_case 'e\\u0301')) == True",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "to_case_insensitive_key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nUNSTABLE\nUnifies the case of all letters in the text, generating a key which can be\nused to perform case-insensitive comparisons.",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "compare_to_ignore_case",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "isStatic": false,
        "documentation": " Compare two texts to discover their ordering.\n\nArguments:\n- that: The text to order `self` with respect to.\n\n> Example\n Checking how \"a\" orders in relation to \"b\".\n\n     \"a\".compare_to_ignore_case \"b\"",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nCheck if `self` is empty.\n\n! What is Empty?\n Text is considered to be empty when its length is zero.\n\n> Example\n Check if the text \"aaa\" is empty.\n\n     \"aaa\".is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nCheck if `self` is not empty.\n\n! What is Not Empty?\n Text is considered to be not empty when its length is greater than zero.\n\n> Example\n Check if the text \"aaa\" is not empty.\n\n     \"aaa\".not_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConversion to Text that overrides the default `to_text` behavior.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "is_normalized",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ADVANCED\nChecks where this Text is in FCD normalized form.\n\n> Example\n Check if the string is normalized\n\n     \"14.95€\".is_normalized",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text",
        "name": "normalize",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "normalization",
                "reprType": "Standard.Base.Data.Text.Normalization.Normalization",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Normalization.NFD",
                "tagValues": [
                    "Standard.Base.Data.Text.Normalization.Normalization.NFC",
                    "Standard.Base.Data.Text.Normalization.Normalization.NFD",
                    "Standard.Base.Data.Text.Normalization.Normalization.NFKC",
                    "Standard.Base.Data.Text.Normalization.Normalization.NFKD",
                    "Standard.Base.Data.Text.Normalization.Normalization.NFKCCasefold"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS normalise\n\nPerform Unicode normalization on the string, using the specified method.\n\nArguments:\n- normalization: The `Normalization` method to use.\n\n> Example\n Normalize a string.\n\n     'aśb'.normalize == 'as\\u0301b'",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.URI",
        "documentation": null,
        "reexport": "Standard.Base.Network"
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "handle_nothing",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nHandle a nothing value.\n\nArguments:\n- value: The value that may possibly be nothing.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.URI",
        "name": "URI",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.URI",
        "name": "Value",
        "arguments": [
            {
                "name": "internal_uri",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.URI.URI",
        "documentation": " PRIVATE\n\nRepresents a Uniform Resource Identifier (URI) reference.\n\nArguments:\n- internal_uri: The internal representation of the URI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "parse",
        "arguments": [
            {
                "name": "uri",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS get uri\nGROUP Conversions\n\nParse a URI from text.\n\nArguments:\n- uri: The text to parse as a URI.\n\nThrows a Syntax_Error when the text cannot be parsed as a URI.\n\n> Example\n Parse URI text.\n\n     import Standard.Base.Network.URI.URI\n\n     example_parse = URI.parse \"http://example.com\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "to_uri",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Network.URI.URI",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert this to URI.\n\n> Examples\n Convert a URI to a URI (a no op).\n\n     import Standard.Examples\n\n     example_to_uri = Examples.uri.to_uri",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "scheme",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the scheme part of this URI.\n\n> Example\n Return the scheme from the URI.\n\n     import Standard.Examples\n\n     example_scheme = Examples.uri.scheme",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "user_info",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the user info part of this URI.\n\n> Example\n Return the user info part of the URI.\n\n     import Standard.Examples\n\n     example_user_info = Examples.uri.user_info",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "host",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the host part of this URI.\n\n> Example\n Return the host portion of the URI.\n\n     import Standard.Examples\n\n     example_host = Examples.uri.host",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "authority",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Get the authority (user info and host) part of this URI.\n\n> Example\n Return the authority portion of the URI.\n\n     import Standard.Examples\n\n     example_authority = Examples.uri.authority",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "port",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Get the port part of this URI.\n\n> Example\n Return the port portion of the URI\n\n     import Standard.Examples\n\n     example_port = Examples.uri.port",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "path",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the path part of this URI.\n\n> Example\n Return the path portion of the URI.\n\n     import Standard.Examples\n\n     example_path = Examples.uri.path",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "query",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the query part of this URI.\n\n> Example\n Return the query portion of the URI.\n\n     import Standard.Examples\n\n     example_query = Examples.uri.query",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "fragment",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Get the fragment part of this URI.\n\n> Example\n Return the fragment portion of the URI.\n\n     import Standard.Examples\n\n     example_fragment = Examples.uri.fragment",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "raw_user_info",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nGet the unescaped user info part of this URI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "raw_authority",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nGet the unescaped authority part of this URI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "raw_path",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nGet the unescaped path part of this URI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "raw_query",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nGet the unescaped query part of this URI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "raw_fragment",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nGet the unescaped fragment part of this URI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert this URI to text.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this URI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.URI",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing this URI.\n\n> Example\n Convert a URI to a JS_Object.\n\n     import Standard.Base.Network.URI.URI\n     import Standard.Examples\n\n     example_to_json = Examples.uri.to_js_object",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.Process.Process_Builder",
        "documentation": null,
        "reexport": "Standard.Base.System.Process"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "Process_Builder",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nADVANCED\nThe builder object that is used to create operating system processes."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "Value",
        "arguments": [
            {
                "name": "command",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stdin",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
        "documentation": " PRIVATE\n\nA builder object that is used to create operating system processes.\n\nArguments:\n- command: The command to execute on the system.\n- arguments: The arguments to pass to `command`. These must be text.\n- stdin: Any content to pass to the standard input for `command`.\n\n? Creating a Builder\n We recommend that you use this type with its builder interface. Start\n by creating a `Builder \"command\"` and then call functions on it to\n set arguments and standard output. It results in much clearer code.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "command",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "arguments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "stdin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "set_arguments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
        "returnType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
        "isStatic": false,
        "documentation": " Sets the arguments that should be passed to the created process.\n\nArguments:\n- arguments: The arguments to pass to the process.\n\n> Examples\n Set the arguments to the process using a builder.\n\n     import Standard.Base.System.Process\n\n     example_set_args =\n         builder = Process.new_builder \"echo\"\n         builder.set_arguments [\"hello, world!\"]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "set_stdin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stdin",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
        "returnType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
        "isStatic": false,
        "documentation": " Sets the text that will be used to feed standard input to the created\nprocess.\n\nArguments:\n- stdin: The standard input contents to pass to the process.\n\n> Examples\n Set the standard input to a process using a builder.\n\n     import Standard.Base.System.Process\n\n     example_set_args =\n         builder = Process.new_builder \"echo\"\n         builder.set_stdin \"hello, world!\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "create",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
        "returnType": "Standard.Base.System.Process.Process_Builder.Process_Result",
        "isStatic": false,
        "documentation": " Create a process using a builder returning the result of execution.\n\n> Example\n Execute the process contained in the builder.\n\n     import Standard.Base.System.Process\n\n     example_create =\n         builder = Process.new_builder \"echo\"\n         with_args = builder.set_arguments [\"hello, world!\"]\n         with_args.create",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "Process_Result",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "Value",
        "arguments": [
            {
                "name": "exit_code",
                "reprType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.System.Process.Exit_Code.Exit_Code.Success",
                    "Standard.Base.System.Process.Exit_Code.Exit_Code.Failure"
                ]
            },
            {
                "name": "stdout",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stderr",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.Process.Process_Builder.Process_Result",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "exit_code",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Result",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "returnType": "Standard.Base.System.Process.Exit_Code.Exit_Code",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "stdout",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Result",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "stderr",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Result",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process.Process_Builder",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Process.Process_Builder.Process_Result",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process.Process_Builder.Process_Result",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Process_Result.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Maybe",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Maybe",
        "name": "Maybe",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A type representing computations that may fail.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Maybe",
        "name": "None",
        "arguments": [],
        "returnType": "Standard.Base.Data.Maybe.Maybe",
        "documentation": " No contained value.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Maybe",
        "name": "Some",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Maybe.Maybe",
        "documentation": " A value.\n\nArguments:\n- value: The contained value in the maybe.\n\n> Example\n Construct a some value.\n\n     import Standard.Base.Data.Maybe\n\n     example_some = Maybe.Some \"yes!\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Maybe",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Maybe.Maybe",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Maybe",
        "name": "maybe",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Maybe.Maybe",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "default",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Maybe.Maybe",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nApplies the provided function to the contained value if it exists,\notherwise returning the provided default value.\n\nArguments:\n- default: The value to return if `self` is None. This value is lazy\n and hence will not execute any provided computation unless it is used.\n- function: The function to execute on the value inside the `Some`, if it\n is a just.\n\n> Example\n Apply a function over a Some value to get 4.\n\n     import Standard.Base.Data.Maybe\n\n     example_maybe = Maybe.Some 2 . maybe 0 *2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Maybe",
        "name": "is_some",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Maybe.Maybe",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Maybe.Maybe",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nCheck if the maybe value is `Some`.\n\n> Example\n Check if `None` is `Some`.\n\n     import Standard.Base.Data.Maybe\n\n     example_is_some = Maybe.Some \"yes!\" . is_some",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Maybe",
        "name": "is_none",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Maybe.Maybe",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Maybe.Maybe",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nCheck if the maybe value is `None`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Maybe",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Maybe.Maybe",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Maybe.Maybe",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert Maybe to a friendly string.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Metadata",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Metadata",
        "name": "Display",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Always",
        "arguments": [],
        "returnType": "Standard.Base.Metadata.Display",
        "documentation": " Parameter is always shown on the collapsed view.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "When_Modified",
        "arguments": [],
        "returnType": "Standard.Base.Metadata.Display",
        "documentation": " Parameter is shown on the collapsed view if not the default value.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Expanded_Only",
        "arguments": [],
        "returnType": "Standard.Base.Metadata.Display",
        "documentation": " Parameter is only shown on the expanded view.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Metadata",
        "name": "File_Action",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Open",
        "arguments": [],
        "returnType": "Standard.Base.Metadata.File_Action",
        "documentation": " The File or Folder is for reading from.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Save",
        "arguments": [],
        "returnType": "Standard.Base.Metadata.File_Action",
        "documentation": " The File or Folder is for writing to.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Metadata",
        "name": "Choice",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Option",
        "arguments": [
            {
                "name": "label",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "(FORCE label)",
                "tagValues": null
            },
            {
                "name": "parameters",
                "reprType": "Standard.Base.Data.Vector.Vector (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Metadata.Widget)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "icon",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Metadata.Choice",
        "documentation": " Describes an entry in a Single_Choice or Multiple_Choice widget.\n\nFields:\n- label: The text to display for the entry.\n- value: The code to insert for the entry. By default, the `label` is used.\n- parameters: A list of parameters for the arguments for the `value`.\n This provides the structure needed for nested widgets.\n- icon: The icon to display for the entry. By default, no icon is used.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "label",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Choice",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Choice",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "parameters",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Choice",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Metadata.Widget)",
        "returnType": "Standard.Base.Data.Vector.Vector (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Metadata.Widget)",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "icon",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Choice",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Metadata",
        "name": "Widget",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Single_Choice",
        "arguments": [
            {
                "name": "values",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Metadata.Choice",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            },
            {
                "name": "allow_custom",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describes a single value widget (dropdown).\n\nFields:\n- values: A list of choices to display.\n- label: The placeholder text value.\n By default, the parameter name is used.\n- display: The display mode for the parameter.\n- allow_custom: Allow the user to enter a value not in the list?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Vector_Editor",
        "arguments": [
            {
                "name": "item_editor",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Metadata.Widget.Single_Choice",
                    "Standard.Base.Metadata.Widget.Vector_Editor",
                    "Standard.Base.Metadata.Widget.Multiple_Choice",
                    "Standard.Base.Metadata.Widget.Code_Input",
                    "Standard.Base.Metadata.Widget.Boolean_Input",
                    "Standard.Base.Metadata.Widget.Numeric_Input",
                    "Standard.Base.Metadata.Widget.Text_Input",
                    "Standard.Base.Metadata.Widget.Folder_Browse",
                    "Standard.Base.Metadata.Widget.File_Browse"
                ]
            },
            {
                "name": "item_default",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describes a list editor widget producing a Vector.\nItems can be dragged around to change the order, or dragged out to be deleted from the Vector.\n\nFields:\n- item_editor: The widget to use for editing the items.\n- item_default: The default value for new items inserted when the user clicks the `+` button.\n- label: The placeholder text value.\n By default, the parameter name is used.\n- display: The display mode for the parameter.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Multiple_Choice",
        "arguments": [
            {
                "name": "values",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Metadata.Choice",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            },
            {
                "name": "quote_values",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describes a multi value widget.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Code_Input",
        "arguments": [
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describe a code parameter.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Boolean_Input",
        "arguments": [
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describe a boolean parameter.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Numeric_Input",
        "arguments": [
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            },
            {
                "name": "minimum",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "maximum",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            },
            {
                "name": "decimal_places",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "allow_outside",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describe a numeric parameter.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Text_Input",
        "arguments": [
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            },
            {
                "name": "quote_values",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "suggestions",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describes a text widget.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "Folder_Browse",
        "arguments": [
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describes a folder chooser.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Metadata",
        "name": "File_Browse",
        "arguments": [
            {
                "name": "label",
                "reprType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.When_Modified",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Metadata.File_Action",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "File_Action.Open",
                "tagValues": [
                    "Standard.Base.Metadata.File_Action.Open",
                    "Standard.Base.Metadata.File_Action.Save"
                ]
            },
            {
                "name": "file_types",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[((new) Pair \"All Files\" \"*.*\")]",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Metadata.Widget",
        "documentation": " Describes a file chooser.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "values",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Metadata.Choice",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Metadata.Choice",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "label",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "display",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Metadata.Display",
        "returnType": "Standard.Base.Metadata.Display",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "allow_custom",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "item_editor",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Metadata.Widget",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "item_default",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "quote_values",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "minimum",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "maximum",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "step",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Number",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "decimal_places",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "allow_outside",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "suggestions",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "action",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Metadata.File_Action",
        "returnType": "Standard.Base.Metadata.File_Action",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "file_types",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Metadata.Widget",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Pair.Pair",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Metadata",
        "name": "make_single_choice",
        "arguments": [
            {
                "name": "values",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.Always",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            }
        ],
        "selfType": "Standard.Base.Metadata",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Function",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Function",
        "name": "Function",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A function is any type that represents a not-yet evaluated computation.\n\nMethods are represented as functions with dynamic dispatch semantics on\nthe this argument.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": "<|",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "argument",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Operators\nApplies the function `self` to the provided argument.\n\nArguments:\n- argument: The argument to apply `self` to.\n\n? Piping Blocks to Functions\n This construction is particularly useful for passing a block as an argument\n to a function. This means that you can compute more sophisticated values\n in-line, as shown in the example below.\n\n> Example\n Applying a function to a block.\n\n     (x -> x + 1) <|\n        y = 1 ^ 3\n        3 + y",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": "<<",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Operators\nComposes two functions together, for `f << g` creating the function\ncomposition `f ∘ g` (equivalent to `x -> f (g x)`).\n\nArguments:\n- that: The function to compose with `self`.\n\n> Example\n Multiply by 2 and then add 1 as a function applied to 2.\n\n     (+1 << *2) 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": ">>",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Operators\nComposes two functions together in the forward direction, for `f >> g`\ncreating the function composition `g ∘ f` (equivalent to `x -> g (f (x))`).\n\nArguments:\n- that: The function to compose with `self`.\n\n> Example\n Add one and then multiply by two as a function applied to 2.\n\n     (+1 >> *2) 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": "identity",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " An identity function which returns the provided argument.\n\nArguments:\n- x: the value to return.\n\n> Example\n five = Function.identity 5 # returns number 5",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": "flip",
        "arguments": [
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Flips the first two arguments of a function. Returns function that\ntakes two arguments, but in opposite order.\n\nArguments:\n- f function that takes two arguments\n\n> Example\nIO.println <| Function.flip (+) \"world\" \"hello\" # Prints 'helloworld'",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": "const",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Creates a function which drops its input and returns the provided value instead.\nThe expression const a is the same as \\_ -> a.\n\nArguments:\n- x constant value to return\n\n> Example\nIO.println <| [1, 2, 3].map (Function.const 7) # Prints '[7, 7, 7]'",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": "curry",
        "arguments": [
            {
                "name": "f",
                "reprType": "(Standard.Base.Data.Vector.Vector Standard.Base.Any.Any) -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Converts a single-argument function accepting a pair of elements into a multi-argument one.\n\nArguments:\n- f function accepting pair of values",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Function",
        "name": "uncurry",
        "arguments": [
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pair",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Function",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Converts a multi-argument function into a single-argument one accepting a pair of elements.\n\nArguments:\n- f function accepting multiple arguments",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "module",
        "module": "Standard.Base.Runtime.Debug",
        "documentation": " Debug utilities.",
        "reexport": "Standard.Base.Runtime"
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Debug",
        "name": "breakpoint",
        "arguments": [],
        "selfType": "Standard.Base.Runtime.Debug",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nPlaces a breakpoint in the program's execution, dropping the user into an\ninteractive debugging REPL.\n\nFrom the REPL, the user is able to manipulate both the program state and\nits execution in an interactive fashion.\n\n> Example\n Dropping into a debugging REPL during execution.\n\n    Standard.Base.Runtime.Debug.breakpoint",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Debug",
        "name": "eval",
        "arguments": [
            {
                "name": "expression",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Debug",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nEvaluates the provided Enso code in the caller frame.\n\nArguments:\n- expression: The enso code to evaluate.\n\n? Scoping\n The fact that expression is evaluated in the caller frame means that\n it has access to variables in the scope enclosing the call to\n Debug.eval.\n\n> Example\n Evaluating the expression 1 + 1 and assigning it to a value.\n\n     result = Debug.eval \"1 + 1\"",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Matching_Mode",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Matching_Mode",
        "name": "Matching_Mode",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Matching_Mode",
        "name": "First",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Matching_Mode.Matching_Mode",
        "documentation": " Matches the first found instance.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Matching_Mode",
        "name": "Last",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Matching_Mode.Matching_Mode",
        "documentation": " Matches the last found instance.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Date_Period",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "Date_Period",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents a unit of time longer on the scale of days (longer than a day).",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "Year",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "documentation": " Represents a date period of a calendar year.\n\nIts length in days will depend on context (accounting for leap years).",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "Quarter",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "documentation": " Represents a date period of a quarter - 3 calendar months.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "Month",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "documentation": " Represents a date period of a month.\n\nIts length in days will depend on context of what month it is used.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "Week",
        "arguments": [
            {
                "name": "first_day",
                "reprType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Day_Of_Week.Monday",
                "tagValues": [
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Sunday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Monday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Tuesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Wednesday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Thursday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Friday",
                    "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week.Saturday"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "documentation": " Represents a 7-day week starting at a given day.\n\nBy default, the first day of the week is Monday, but this can be adjusted\nto any other day.\n\nThe starting day will be ignored for methods that just compute the time\ndifferences. It only matters for methods that need to find a beginning or\nend of a specific period (like `start_of` or `end_of`).\n\nThe `date_part` method will return the ISO 8601 week of year number,\nregardless of the starting day.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "Day",
        "arguments": [],
        "returnType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "documentation": " Represents a time period of a single calendar day.\n\n? Daylight Saving Time\n\n Note that due to DST changes, some days may be slightly longer or\n shorter. This date period will reflect that and still count such days\n as one day. For a measure of exactly 24 hours, use `Time_Period.Day`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "first_day",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "adjust_start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date",
                "reprType": "Standard.Base.Data.Time.Date.Date | Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "returnType": "Standard.Base.Data.Time.Date.Date | Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "adjust_end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date",
                "reprType": "Standard.Base.Data.Time.Date.Date | Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "returnType": "Standard.Base.Data.Time.Date.Date | Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "to_period",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "returnType": "Standard.Base.Data.Time.Period.Period",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Period",
        "name": "to_java_unit",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Period.Date_Period",
        "returnType": "Standard.Base.Data.Time.Date_Period.TemporalUnit",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.File",
        "documentation": null,
        "reexport": "Standard.Base.System"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "file_types",
        "arguments": [],
        "selfType": "Standard.Base.System.File",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File",
        "name": "File",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents a file or folder on the filesystem.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "new",
        "arguments": [
            {
                "name": "path",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS new file\nGROUP Input\n\nCreates a new file object, pointing to the given path.\n\nArguments:\n- path: The path to the file that you want to create, or a file itself. The\n latter is a no-op.\n\n> Example\n Create a new file pointing to the `data.csv` file in the project directory.\n\n     import Standard.Base.System.File.File\n     import Standard.Examples\n\n     example_new = File.new Examples.csv_path",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "create_temporary_file",
        "arguments": [
            {
                "name": "prefix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "temp",
                "tagValues": null
            },
            {
                "name": "suffix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": ".tmp",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": true,
        "documentation": " Creates a temporary file which will be deleted when Enso exits.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "create_dry_run_file",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "copy_original",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nCreate a dry run temporary file which will be deleted when Enso exits.\n\nFor an absolute path the same temporary file is returned.\nIf this file is a temporary file that was generated by\n`create_dry_run_file` on another file, it is returned as-is.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "current_directory",
        "arguments": [],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": true,
        "documentation": " ALIAS current directory\n\nReturns the current working directory (CWD) of the current program.\n\n> Example\n Get the program's current working directory.\n\n     import Standard.Base.System.File.File\n\n     example_cwd = File.current_directory",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "home",
        "arguments": [],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": true,
        "documentation": " ALIAS home directory\n\nReturns the home directory of the current user.\n\n> Example\n Get the current user's home directory.\n\n     import Standard.Base.System.File.File\n\n     example_home = File.home",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "with_output_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "open_options",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Access.File_Access",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nCreates a new output stream for this file and runs the specified action\non it.\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).\n\nArguments:\n- open_options: A vector of `File_Access` objects determining how to open\n the stream. These options set the access properties of the stream.\n- action: A function that operates on the output stream and returns some\n value. The value is returned from this method.\n\n> Example\n Perform an action on an output stream with the file open for writing.\n\n     import Standard.Base.System.File.File_Access.File_Access\n     import Standard.Examples\n\n     example_with_stream =\n         file = Examples.scratch_file\n         action = stream -> stream.write_bytes \"hello\".utf_8\n         file.with_output_stream [File_Access.Create, File_Access.Write] action",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "output_stream_builtin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "options",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Access.File_Access",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.Java_Output_Stream",
        "isStatic": false,
        "documentation": " PRIVATE\nCreates a new output stream for this file. Recommended to use\n`File.with_output_stream` instead, which does resource management.\n\nArguments:\n- options: A vector of `File_Access` objects determining how to open\n the stream. These options set the access properties of the stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "input_stream_builtin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "options",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.StandardOpenOption",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.Java_Input_Stream",
        "isStatic": false,
        "documentation": " PRIVATE\nCreates a new input stream for this file. Recommended to use\n`File.with_input_stream` instead, which does resource management.\n\nArguments:\n- open_options: A vector of `StandardOpenOption` polyglot objects\n determining how to open the stream. These options set the access\n properties of the stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "with_input_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "open_options",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Access.File_Access",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nCreates a new input stream for this file and runs the specified action\non it.\n\nArguments:\n- open_options: A vector of `File_Access` objects determining how to open\n the stream. These options set the access properties of the stream.\n- action: A function that operates on the input stream and returns some\n value. The value is returned from this method.\n\nThe created stream is automatically closed when `action` returns (even\nif it returns exceptionally).\n\n> Example\n Perform an action on an input stream with the file open for reading.\n\n     import Standard.Base.System.File.File_Access.File_Access\n     import Standard.Examples\n\n     example_with_stream =\n         file = Examples.csv\n         action = stream -> stream.read_all_bytes\n         file.with_input_stream [File_Access.Create, File_Access.Read] action",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.System.File_Format.File_Format",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Auto_Detect",
                "tagValues": [
                    "Standard.Base.System.File_Format.File_Format"
                ]
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Warning",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS load, open\nGROUP Input\nRead a file using the specified file format\n\nArguments:\n- format: A `File_Format` object used to read file into memory.\n If `Auto_Detect` is specified; the provided file determines the specific\n type and configures it appropriately. If there is no matching type then\n a `File_Error.Unsupported_Type` error is returned.\n- on_problems: Specifies the behavior when a problem occurs during the\n function.\n By default, a warning is issued, but the operation proceeds.\n If set to `Report_Error`, the operation fails with a dataflow error.\n If set to `Ignore`, the operation proceeds without errors or warnings.\n\n> Example\n Read the first sheet of an XLSX from disk and convert it into a table.\n\n     from Standard.Table import all\n     import Standard.Examples\n\n     example_xlsx_to_table = Examples.xlsx.read\n\n> Example\n Read the sheet named `Dates` from an XLS and convert it to a table.\n\n     from Standard.Table import all\n     from Standard.Table import Excel, Worksheet\n     import Standard.Examples\n\n     example_xls_to_table = Examples.xls.read (Excel (Worksheet 'Dates'))",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "read_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS load bytes, open bytes\nReads all bytes in this file into a byte vector.\n\n> Example\n Read all of the bytes in the file.\n\n     import Standard.Examples\n\n     example_read_bytes = Examples.csv.read_bytes",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "read_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Warning",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS load text, open text\nReads the whole file into a `Text`, with specified encoding.\n\nArguments:\n- encoding: The text encoding to decode the file with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n function.\n By default, a warning is issued, but the operation proceeds.\n If set to `Report_Error`, the operation fails with a dataflow error.\n If set to `Ignore`, the operation proceeds without errors or warnings.\n\n> Example\n Read the contents of the file.\n\n     import Standard.Examples\n\n     example_read = Examples.csv.read",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "/",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "subpath",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " GROUP Operators\nJoin two path segments together.\n\nArguments:\n- subpath: The path to join to the path of `self`.\n\n> Example\n Concatenate two file path segments.\n\n     import Standard.Examples\n\n     example_append = Examples.data_dir / \"scratch_file\"",
        "annotations": [
            "subpath"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "join",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "subpaths",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.System.File.File | Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " GROUP Calculations\nJoin two or more path segments together, normalizing the `..` and `.` subpaths.\n\nArguments:\n- subpaths: The path segment or segments to join to the path of `self`.\n\n> Example\n Concatenate two file path segments.\n\n     import Standard.Examples\n\n     example_append = Examples.data_dir.join \"scratch_file\"\n\n> Example\n Concatenate multiple file path segments and normalizes the result.\n\n     import Standard.Examples\n\n     example_append = Examples.data_dir.join [\"2022\", \"10\", \"31\", \"scratch_file\"]",
        "annotations": [
            "subpaths"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "resolve",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "subpath",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " PRIVATE\nInternal method to join two path segments together.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the file descriptor to a JS_Object.\n\n> Example\n Convert a file to a JS_Object.\n\n     import Standard.Examples\n\n     example_to_json = Examples.csv.to_js_object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "exists",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks whether the file exists.\n\n> Example\n Check if a file exists.\n\n     import Standard.Examples\n\n     example_exists = Examples.csv.exists",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "size",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the size of a file in bytes.\n\n> Example\n Gets the size of a file.\n\n     import Standard.Examples\n\n     example_exists = Examples.csv.size",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "starts_with",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "parent",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Text\nChecks whether the file is within another path.\n\nArguments:\n- parent: The path to check if self is contained within.\n\n> Example\n Check if a file is within another path.\n\n     is_within = File.new \"foo/bar\" . starts_with (File.new \"foo\")\n     is_not_within = File.new \"foo/bar\" . starts_with (File.new \"f\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "creation_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the creation time of a file.\n\n> Example\n Gets the creation time of a file.\n\n     import Standard.Examples\n\n     example_exists = Examples.csv.creation_time",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "last_modified_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the last modified time of a file.\n\n> Example\n Gets the last modified time of a file.\n\n     import Standard.Examples\n\n     example_exists = Examples.csv.last_modified_time",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "posix_permissions",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "isStatic": false,
        "documentation": " Gets the POSIX permissions associated with the file.\n\n> Example\n Check if the file is readable by the user's group.\n\n     import Standard.Examples\n\n     example_permissions = Examples.csv.posix_permissions.group_read",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "is_directory",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks whether the file exists and is a directory.\n\n> Example\n Check if a file is a directory.\n\n     import Standard.Examples\n\n     example_is_directory = Examples.csv.is_directory",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "create_directory",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Creates the directory represented by this file if it did not exist.\n\nIt also creates parent directories if they did not exist.\n\n> Example\n Create a directory on the file system.\n\n     import Standard.Examples\n\n     example_is_directory =\n        (Examples.data_dir / \"my_directory\") . create_directory",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "create_directory_builtin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nCreates the directory represented by this file if it did not exist.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "is_regular_file",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks whether the file exists and is a regular file.\n\n? Regular Files\n A regular file is one that does not have any special meaning to the\n operating system. Examples of files that are not regular are symlinks,\n pipes, devices, sockets and directories.\n\n> Example\n Check if a file is regular.\n\n     import Standard.Examples\n\n     example_is_regular_file = Examples.csv.is_regular_file",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "is_writable",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks whether it the file can be written to.\n\n? Read-only Files\n If a file is read-only, it may still be possible to move or delete it,\n depending on the permissions associated with its parent directory.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "parent",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Metadata\nResolves the parent filesystem node of this file.\n\n> Example\n Get the parent file of a file.\n\n     import Standard.Examples\n\n     example_parent = Examples.csv.parent",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "path",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the path of this file.\n\n> Example\n Get the path from a file.\n\n     import Standard.Examples\n\n     example_path = Examples.csv.path",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the name of this file.\n\n> Example\n Get the name from a file.\n\n     import Standard.Examples\n\n     example_name = Examples.csv.name",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "extension",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the extension of the file.\n\n> Example\n Get the extension of a file.\n\n     import Standard.Examples\n\n     Examples.csv.extension == \".csv\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "absolute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " Converts this file to an equivalent file represented with an absolute\npath.\n\n> Example\n Convert a file to an equivalent absolute path.\n\n     import Standard.Examples\n\n     example_absolute = Examples.csv.absolute",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "is_absolute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " Checks is this file's path is absolute.\n\n> Example\n Check if a file is represented by an absolute path.\n\n     import Standard.Examples\n\n     example_is_absolute = Examples.csv.is_absolute",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "normalize",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " Normalizes the filepath.\n\n> Example\n Normalize a file path.\n\n     import Standard.Examples\n\n     example_normalize = Examples.csv.normalize",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "delete",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Deletes the file.\n\nIf the file is a directory, it must be empty, otherwise a `Panic` will\nbe thrown.\n\n> Example\n Create a file and then delete it.\n\n     import Standard.Examples\n\n     example_delete =\n         file = Examples.data_dir / \"my_file\"\n         file.write_text \"hello\"\n         file.delete",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "copy_to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "destination",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "replace_existing",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Moves the file to the specified destination.\n\nArguments:\n- destination: the destination to move the file to.\n- replace_existing: specifies if the operation should proceed if the\n destination file already exists. Defaults to `False`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "move_to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "destination",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "replace_existing",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Moves the file to the specified destination.\n\nArguments:\n- destination: the destination to move the file to.\n- replace_existing: specifies if the operation should proceed if the\n destination file already exists. Defaults to `False`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "delete_if_exists",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Deletes the file if it exists on disk.\n\nIf the file is a directory, it must be empty, otherwise a `Panic` will\nbe thrown.\n\n> Example\n Delete a file if it exists on disk.\n\n     import Standard.Examples\n\n     example_del_if_exists = Examples.scratch_file.delete_if_exists",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "read_first_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nReads first `n` bytes from the file (or less if the file is too small)\nand returns a vector of bytes.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "read_last_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nReads last `n` bytes from the file (or less if the file is too small) and\nreturns a vector of bytes.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "list",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "name_filter",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "recursive",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " GROUP Input\nLists files contained in the directory denoted by this file.\n\nArguments:\n- name_filter: A glob pattern that can be used to filter the returned\n files. If it is not specified, all files are returned.\n- recursive: Specifies whether the returned list of files should include\n also files from the subdirectories. If set to `False` (the default),\n only the immediate children of the listed directory are considered.\n\nThe `name_filter` can contain the following special characters:\n- `\"?\"` - which matches a single filename character (so it will not match\n a `\"/\"`).\n- `\"*\"` - which matches any number of characters, but again does not\n cross directories.\n- `\"**\"` - which matches any number of characters and can cross\n directories.\n- `\"\\\"` - can be used to escape the characters with special meaning; to\n get a single backslash, you need to specify it twice; you also need to\n keep in mind that the interpolating string literal also uses `\"\\\"` as\n an escape sequence, so you need to type `'\\\\\\\\'` to get a single\n backslash for the glob pattern, unless you use the raw strings, where\n you only need to escape once: `\"\\\\\"`.\n- Brackets can be used to match exactly one character from some set of\n characters. For example `\"[xy]\"` matches `\"x\"` or `\"y\"`. Character\n ranges can also be specified: `\"[a-z]\"` matches any character from\n `\"a\"` to `\"z\"`. An exclamation mark can be used to negate the match,\n i.e. `\"[!xz]\"` will match any characters except for `\"x\"` and `\"z\"`.\n Moreover the ranges and single characters can be used together, so for\n example `\"[a-cxy]\"` will match `\"a\"`, `\"b\"`, `\"c\"`, `\"x\"` or `\"y\"`.\n Within the brackets, the special characters `\"*\"`, `\"?\"` and `\"\\\"`\n stand for themselves instead of their special meanings.\n- Braces allow to specify multiple patterns (separated with a comma), one\n of which must be matched. For example: `\"{abc,x*}\"` will match either\n the name `\"abc\"` or any name starting with `\"x\"`. The groups cannot be\n nested.\n\nIf `recursive` is set to True and a `name_filter` does not contain `**`,\nit will be automatically prefixed with `**/` to allow matching files in\nsubdirectories.\n\n> Example\n List all files with \".md\" or \".txt\" extension in the example directory\n and any of its subdirectories.\n\n     import Standard.Examples\n\n     example_list_md_files =\n         Examples.data_dir.list name_filter=\"**.{txt,md}\" recursive=True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "is_child_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks if `self` is a child path of `other`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "relativize",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "child",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " Transforms `child` to a relative path with respect to `self`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "list_immediate_children",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File",
        "isStatic": false,
        "documentation": " PRIVATE\nUtility function that lists immediate children of a directory.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nReturn the absolute path of this File",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this File.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "list_descendants",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File",
        "isStatic": true,
        "documentation": " PRIVATE\n\nUtility function that returns all descendants of the provided file, including\nthat file itself. If the file is not a directory, a list containing only\nitself is returned.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "get_cwd",
        "arguments": [],
        "selfType": "Standard.Base.System.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGets a file corresponding to the current working directory of the\nprogram.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "get_file",
        "arguments": [
            {
                "name": "path",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGets a file corresponding to the provided path.\n\nArguments:\n- path: The path to obtain a file at.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File",
        "name": "get_child_widget",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Random",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "get_default_seed",
        "arguments": [],
        "selfType": "Standard.Base.Random",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nUNSTABLE\nReturns a default seed to use for random number generation.\n\nThe returned seed may differ between each call to this method.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "new",
        "arguments": [
            {
                "name": "seed",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "<internal-1460>.get_default_seed",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random",
        "returnType": "Standard.Base.Random.Random_Number_Generator",
        "isStatic": true,
        "documentation": " Constructs a new random number generator.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Random",
        "name": "Random_Number_Generator",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Random",
        "name": "Value",
        "arguments": [
            {
                "name": "java_random",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Random.Random_Number_Generator",
        "documentation": " A random number generator.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "java_random",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "boolean",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random.Random_Number_Generator",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Random\nGets the next random Boolean.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "float",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random.Random_Number_Generator",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Random\nGets the next random Float between 0 and 1.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "gaussian",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random.Random_Number_Generator",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": false,
        "documentation": " GROUP Random\nGets the next random Float from a normal distribution with mean 0 and std-dev 1.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "integer",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "min",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "max",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "100",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random.Random_Number_Generator",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Random\nGets the next random integer between min (inclusive) and max (exclusive).\n\nArguments:\n- min: the minimum value (inclusive) of the random integer.\n- max: the maximum value (exclusive) of the random integer.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random.Random_Number_Generator",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nSerialise to JS_Object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random.Random_Number_Generator",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Random_Number_Generator.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "sample",
        "arguments": [
            {
                "name": "vector",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "k",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "rng",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns a new vector containing a random sample of the input vector, without\nreplacement.\n\nIf the amount of elements to select is larger than the input vector size, it\nreturns a random permutation of the input vector.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "random_indices",
        "arguments": [
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "k",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "rng",
                "reprType": "Standard.Base.Random.Random_Number_Generator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Random",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns `k` indices sampled from the range [0, n-1] without replacement.\n\nIf `k >= n`, it will return a random permutation of the indices.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Random",
        "name": "random_uuid",
        "arguments": [],
        "selfType": "Standard.Base.Random",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nGenerates a text representation of a randomly generated UUID.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.Input_Stream",
        "documentation": null,
        "reexport": "Standard.Base.System"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.Input_Stream",
        "name": "Input_Stream",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nAn input stream, allowing for interactive reading of contents."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Input_Stream",
        "name": "Value",
        "arguments": [
            {
                "name": "stream_resource",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_handler",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.Input_Stream.Input_Stream",
        "documentation": " PRIVATE\nAn input stream, allowing for interactive reading of contents.\n\nArguments:\n- stream_resource: The internal resource that represents the underlying\n stream.\n- error_handler: An error handler for IOExceptions thrown when reading.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "stream_resource",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "error_handler",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "new",
        "arguments": [
            {
                "name": "java_stream",
                "reprType": "Standard.Base.System.Input_Stream.Java_Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_handler",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.System.Input_Stream.Input_Stream",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nGiven a Java InputStream, wraps as a Managed_Resource and returns a new\nInput_Stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "read_all_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nReads all the bytes in this stream into a vector of bytes.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "read_n_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nReads up to the provided number of bytes from the stream.\n\nMakes a best-effort to read as many bytes as provided, however fewer\nbytes may be read, if end of stream is encountered.\n\nThe length of the returned vector is the same as the number of bytes\nread.\n\nArguments:\n- n: The number of bytes to read from the stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "read_byte",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nReads the next byte from the stream.\n\nThe returned value is an integer in the range 0-255 representing the\nnext byte of input, or -1 if end of stream is reached.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "close",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nCloses this stream.\n\nEven though Streams are closed automatically upon garbage collection, it\nis still advised to close streams manually if they are not used within\na bracket pattern.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "with_java_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.System.Input_Stream.Java_Input_Stream -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nExposes operations on the underlying Java input stream.\n\nUseful when integrating with polyglot functions requiring an\n`InputStream` as an argument.\n\nArguments:\n- f: Applies a function over the internal java stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "with_stream_decoder",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            },
            {
                "name": "action",
                "reprType": "Standard.Base.System.Input_Stream.ReportingStreamDecoder -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream.Input_Stream",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nRuns an action with a `ReportingStreamDecoder` decoding data from the\ninput stream with the specified encoding.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Input_Stream",
        "name": "close_stream",
        "arguments": [
            {
                "name": "stream",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Input_Stream",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nUtility method for closing primitive Java streams. Provided to avoid\naccidental scope capture with `Managed_Resource` finalizers.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Main",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "module",
        "module": "Standard.Base.System.File.Write_Extensions",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Write_Extensions",
        "name": "write",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "path",
                "reprType": "Standard.Base.System.File.File | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            },
            {
                "name": "on_existing_file",
                "reprType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Existing_File_Behavior.Backup",
                "tagValues": [
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Overwrite",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Backup",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Append",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Error"
                ]
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Warning",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Output\nWrites (or appends) the text to the specified file using the supplied\nencoding. The behavior specified in the `existing_file` parameter will be\nused if the file exists.\n\nArguments:\n- path: The path to the target file.\n- encoding: The encoding to use when writing the file.\n- on_existing_file: Specifies how to proceed if the file already exists.\n- on_problems: Specifies how to handle any encountered problems.\n\nIf a character cannot be converted to a byte, an `Encoding_Error` is raised.\nIf `on_problems` is set to `Report_Warning` or `Ignore`, it is replaced with\na substitute (either '�' (if Unicode) or '?' depending on the encoding).\nOtherwise, the process is aborted.\nIf the path to the parent location cannot be found or the filename is\ninvalid, a `File_Error.Not_Found` is raised.\nIf another error occurs, such as access denied, an `File_Error.IO_Error` is\nraised.\nOtherwise, the file is created with the encoded text written to it.\n\nThe method returns a `File` object for the written file.\n\n? Dry Run\n\n If writing to Output context is not enabled (such as in \"Design\" mode),\n then this function will write to a temporary file. This temporary file will\n be automatically deleted on exit of the Enso process.\n\n This allows for building the workflow without affecting the real files.",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Write_Extensions",
        "name": "write_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "path",
                "reprType": "Standard.Base.System.File.File | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_existing_file",
                "reprType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Existing_File_Behavior.Backup",
                "tagValues": [
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Overwrite",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Backup",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Append",
                    "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior.Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Writes (or appends) the Vector of bytes into the specified file. The behavior\nspecified in the `existing_file` parameter will be used if the file exists.\n\nArguments:\n- path: The path to the target file.\n- on_existing_file: Specifies how to proceed if the file already exists.\n\nIf the Vector contains any item which is not a `Byte`, an\n`Illegal_Argument` will be raised. Enso follows the Java convention,\nthat a `Byte` is between -128 and 127.\nIf the path to the parent location cannot be found or the filename is\ninvalid, a `File_Not_Found` is raised.\nIf another error occurs, such as access denied, an `File_Error.IO_Error` is\nraised.\nOtherwise, the file is created with the encoded text written to it.\n\nThe method returns a `File` object for the written file.\n\n> Example\n Write the UTF-8 bytes of the text \"$£§€¢\" to a file.\n\n     import Standard.Examples\n\n     [36, -62, -93, -62, -89, -30, -126, -84, -62, -94].write_bytes Examples.scratch_file\n\n> Example\n Append the UTF-8 bytes of the text \"$£§€¢\" to a file.\n\n     import Standard.Examples\n\n     [36, -62, -93, -62, -89, -30, -126, -84, -62, -94].write_bytes Examples.scratch_file.write_bytes Examples.scratch_file Existing_File_Behavior.Append",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Date_Time",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "unix_epoch_start",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "ensure_in_epoch",
        "arguments": [
            {
                "name": "date",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time | Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "new_builtin",
        "arguments": [
            {
                "name": "year",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "month",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "day",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "hour",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "minute",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "second",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "nanosecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "zone",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": true,
        "documentation": " PRIVATE\n\nObtains an instance of `Date_Time` from a year, month, day, hour, minute,\nsecond, nanosecond and timezone.\n\nArguments:\n- year: The year to represent, any Integer is valid.\n- month: the month-of-year to represent, from 1 (January) to 12 (December)\n- day: the day-of-month to represent, from 1 to 31 and must be valid for the\n year and month\n- hour: the hour-of-day to represent, from 0 to 23\n- minute: the minute-of-hour to represent, from 0 to 59\n- second: the second-of-minute to represent, from 0 to 59\n- nanosecond: the nano-of-second to represent, from 0 to 999,999,999\n- zone: the timezone\n\nRecommended to use `Date_Time.new` instead which handles potential exceptions.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "Date_Time",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\n\nA date-time with a timezone in the ISO-8601 calendar system, such as\n\"2007-12-03T10:15:30+01:00 Europe/Paris\".\n\nTime is a representation of a date-time with a timezone. This class\nstores all date and time fields, to a precision of nanoseconds, and a\ntimezone, with a zone offset used to handle ambiguous local\ndate-times.\n\nFor example, the value \"2nd October 2007 at 13:45.30.123456789 +02:00 in\nthe Europe/Paris timezone\" can be stored as `Time`.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "enso_epoch_start",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": true,
        "documentation": " Obtains the start of the epoch for Enso.\n\n? Start of the epoch\nFor Enso, start of the epoch is equal to the start of the Gregorian calendar,\nwhich is on 15th October 1582.\n\nInvoking some Gregorian calendar related functionalities, like `is_leap_year`,\nis computed for all the date times, including those before an epoch start,\nwith today's rules. Trying to get some Gregorian calendar related properties\nfor a historical date times that is defined before the epoch is likely an error,\nas the Gregorian calendar had not yet been introduced. Therefore, for such\nhistorical date times, a warning is attached to the result.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "now",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": true,
        "documentation": " ALIAS current time\nGROUP DateTime\n\nObtains the current date-time from the system clock in the system timezone.\n\n> Example\n Get the current time\n\n     from Standard.Base import Date_Time\n\n     example_now = Date_Time.now",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "new",
        "arguments": [
            {
                "name": "year",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "month",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            },
            {
                "name": "day",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            },
            {
                "name": "hour",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "minute",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "second",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "millisecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "microsecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "nanosecond",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "zone",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Time_Zone.system",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " GROUP DateTime\nObtains an instance of `Date_Time` from a year, month, day, hour, minute,\nsecond, nanosecond and timezone.\n\nArguments:\n- year: The year to represent, any Integer is valid.\n- month: the month-of-year to represent, from 1 (January) to 12 (December)\n- day: the day-of-month to represent, from 1 to 31 and must be valid for the\n year and month\n- hour: the hour-of-day to represent, from 0 to 23\n- minute: the minute-of-hour to represent, from 0 to 59\n- second: the second-of-minute to represent, from 0 to 59\n- millisecond: the millisecond-of-second to represent, from 0 to 999.\n- microsecond: the microsecond-of-second to represent, from 0 to 999,999.\n- nanosecond: The nano-of-second to represent, from 0 to 999,999,999.\n- zone: the timezone\n\nReturns a `Time_Error` if the provided time cannot be represented.\n\n> Example\n Create a new zoned date time at Unix epoch.\n\n     from Standard.Base import Date_Time, Time_Zone\n\n     example_new = Date_Time.new 1970 (zone = Time_Zone.utc)\n\n> Example\n Get the 5 August 1986 at midnight.\n\n     from Standard.Base import Date_Time, Time_Zone\n\n     example_new = Date_Time.new 1986 8 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "parse",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time_Formatter.default_enso_zoned_date_time",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS time from text\nGROUP Conversions\n\nObtains an instance of `Time` from a text such as\n\"2007-12-03T10:15:30+01:00 Europe/Paris\".\n\nThis method will return a `Time_Error` if the provided time cannot be\nparsed.\n\nArguments:\n- text: The text representing the time to be parsed.\n- format: A pattern describing how to parse the text,\n or a `Date_Time_Formatter`.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - y: Year. The number of pattern letters determines the minimum number of\n   digits.\n   - y: The year using any number of digits.\n   - yy: The year, using at most two digits. The default range is\n     1950-2049, but this can be changed by including the end year in\n     braces e.g. `yy{2099}`.\n   - yyyy: The year, using exactly four digits.\n - M: Month of year. The number of pattern letters determines the format:\n   - M: Any number (1-12).\n   - MM: Month number with zero padding required (01-12).\n   - MMM: Short name of the month (Jan-Dec).\n   - MMMM: Full name of the month (January-December).\n   The month names depend on the selected locale.\n - d: Day. The number of pattern letters determines the format:\n   - d: Any number (1-31).\n   - dd: Day number with zero padding required (01-31).\n   - ddd: Short name of the day of week (Mon-Sun).\n   - dddd: Full name of the day of week (Monday-Sunday).\n   The weekday names depend on the selected locale.\n   Both day of week and day of month may be included in a single pattern -\n   in such case the day of week is used as a sanity check.\n - Q: Quarter of year.\n   If only year and quarter are provided in the pattern, when parsing a\n   date, the result will be the first day of that quarter.\n - H: 24h hour of day (0-23).\n - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n   between AM and PM.\n - m: Minute of hour.\n - s: Second of minute.\n - f: Fractional part of the second. The number of pattern letters\n   determines the number of digits. If one letter is used, any number of\n   digits will be accepted.\n - a: AM/PM marker.\n - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n   -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n - Z: Zone offset.\n   - Z, ZZ, ZZZ: A short offset form (+HHmm).\n     No offset is indicated by \"+0000\". This can be customized by setting\n     an alternative no offset string in curly braces, e.g. `zz{Z}`.\n   - ZZZZ: Localized offset (e.g. GMT-08:00).\n   - ZZZZZ: A full offset form (+HH:mm:ss).\n     No offset is indicated by \"Z\". This can be customized as above, e.g.\n     `ZZZZZ{0}`.\n\n? Default Date_Time Format\n Unless you provide a custom format, the text must represent a valid\n date-time as defined by the ISO-8601 format (see https://en.wikipedia.org/wiki/ISO_8601).\n If a time zone is present, it must be in the ISO-8601 Extended\n Date/Time Format (EDTF) (see https://en.wikipedia.org/wiki/ISO_8601#EDTF).\n The time zone format consists of:\n\n - The ISO offset date time.\n - If the zone ID is not available or is a zone offset then the format is\n   complete.\n - An open square bracket '['.\n - The zone ID. This is not part of the ISO-8601 standard. Parsing is case\n   sensitive.\n - A close square bracket ']'.\n\n> Example\n Parse UTC time.\n\n     from Standard.Base import Date_Time\n\n     example_parse = Date_Time.parse \"2020-10-01T04:11:12Z\"\n\n> Example\n Parse UTC-04:00 time.\n\n     from Standard.Base import Date_Time\n\n     example_parse = Date_Time.parse \"2020-10-01T04:11:12-04:00\"\n\n> Example\n Parse UTC-04:00 time specifying New York timezone.\n\n     from Standard.Base import Date_Time\n\n     example_parse = Date_Time.parse \"2020-10-01T04:11:12-04:00[America/New_York]\"\n\n> Example\n Parse UTC-04:00 time with nanoseconds.\n\n     from Standard.Base import Date_Time\n\n     example_parse = Date_Time.parse \"2020-10-01T04:11:12.177528-04:00\"\n\n> Example\n Recover from the parse error.\n\n     from Standard.Base import Date_Time\n\n     example_parse = Date_Time.parse \"2020-10-01\" . catch Time_Error (_->Date_Time.now)\n\n> Example\n Parse \"2020-05-06 04:30:20\" as Date_Time\n\n     from Standard.Base import Date_Time\n\n     example_parse = Date_Time.parse \"2020-05-06 04:30:20\" \"yyyy-MM-dd HH:mm:ss\"\n\n> Example\n Parse \"06 of May 2020 at 04:30AM\" as Date_Tme\n\n     from Standard.Base import Date_Time\n\n     example_parse =\n        Date_Time.parse \"06 of May 2020 at 04:30AM\" \"dd 'of' MMMM yyyy 'at' hh:mma\"",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the year portion of the time.\n\n> Example\n Get the current year.\n\n     from Standard.Base import Date_Time\n\n     example_year = Date_Time.now.year",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "month",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the month portion of the time as a number from 1 to 12.\n\n> Example\n Get the current month.\n\n     from Standard.Base import Date_Time\n\n     example_month = Date_Time.now.month",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "day",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the day portion of the time.\n\n> Example\n Get the current day.\n\n     from Standard.Base import Date_Time\n\n     example_day = Date_Time.now.day",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "hour",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the hour portion of the time.\n\n> Example\n Get the current hour.\n\n     from Standard.Base import Date_Time\n\n     example_hour = Date_Time.now.hour",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "minute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the minute portion of the time.\n\n> Example\n Get the current minute.\n\n     from Standard.Base import Date_Time\n\n     example_minute = Date_Time.now.minute",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the second portion of the time.\n\n> Example\n Get the current second.\n\n     from Standard.Base import Date_Time\n\n     example_second = Date_Time.now.second",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "millisecond",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the millisecond portion of the time.\n\n> Example\n Get the current millisecond.\n\n     from Standard.Base import Date_Time\n\n     example_millisecond = Date_Time.now.millisecond",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "microsecond",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the microsecond portion of the time.\n\n> Example\n Get the current microsecond.\n\n     from Standard.Base import Date_Time\n\n     example_microsecond = Date_Time.now.microsecond",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "nanosecond",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_milliseconds",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the nanosecond portion of the time.\n\nArguments:\n- include_milliseconds: Specifies if the whole fractional part of the\n second should be returned as nanoseconds. Defaults to `False`, meaning\n it will only return the nanosecond part in the range 0-999.\n\n> Example\n Get the current nanosecond.\n\n     from Standard.Base import Date_Time\n\n     example_nanosecond = Date_Time.now.nanosecond",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "zone",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": false,
        "documentation": " GROUP DateTime\nGet the timezone for the time.\n\n> Example\n Get the current timezone.\n\n     from Standard.Base import Date_Time\n\n     example_zone = Date_Time.now.zone",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "to_unix_epoch_seconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Return the number of seconds from the Unix epoch start (1.1.1970)\n\nIf this Date_Time is before the epoch start, returns a negative number.\n\n> Example\n Get the current number of seconds from the Unix epoch.\n\n     from Standard.Base import Date_Time\n\n     example_epoch = Date_Time.now.to_unix_epoch_seconds",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "to_unix_epoch_milliseconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Return the number of milliseconds from the Unix epoch start.\n\nIf this Date_Time is before an epoch start, returns a negative number.\n\n> Example\n Get the current number of milliseconds from the Enso epoch.\n\n     from Standard.Base import Date_Time\n\n     example_epoch = Date_Time.now.to_unix_epoch_milliseconds",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "to_enso_epoch_seconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Return the number of seconds from the Enso epoch start.\n\nSee `Date_Time.enso_epoch_start`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "to_enso_epoch_milliseconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Return the number of milliseconds from the Enso epoch start.\n\nSee `Date_Time.enso_epoch_start`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "time_of_day",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
        "isStatic": false,
        "documentation": " GROUP DateTime\nConvert this point in time to time of day, discarding the time zone\ninformation.\n\n> Example\n Convert the current time to a time of day.\n\n     from Standard.Base import Date_Time\n\n     example_time_of_day = Date_Time.now.time_of_day",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "week_of_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the number of week of year this date falls into.\n\nProduces a warning for a Date that is before epoch start.\n\nArguments:\n- locale: the locale used to define the notion of weeks of year.\n If no locale is provided, then the ISO 8601 week of year is used.\n\n! Locale Dependency\n Note that this operation is locale-specific. It varies both by the\n local definition of the first day of week and the definition of the\n first week of year. For example, in the US, the first day of the week\n is Sunday and week 1 is the week containing January 1. In the UK on the\n other hand, the first day of the week is Monday, and week 1 is the week\n containing the first Thursday of the year. Therefore it is important to\n properly specify the `locale` argument.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "is_leap_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns if the date is in a leap year.\n\nProduces a warning for a Date that is before epoch start.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "length_of_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the number of days in the year represented by this date.\n\nProduces a warning for a Date that is before epoch start.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "century",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the century of the date.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "quarter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the quarter of the year the date falls into.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "length_of_month",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the number of days in the month represented by this date.\n\nProduces a warning for a Date that is before epoch start.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "day_of_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the day of the year.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "day_of_week",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the day of the week.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "start_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Period.Month",
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the first date within the `Time_Period` or `Date_Period`\ncontaining self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "end_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Period.Month",
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the last date within the `Time_Period` or `Date_Period`\ncontaining self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "date",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " ALIAS time to date\nGROUP DateTime\n\nConvert this point in time to date, discarding the time of day\ninformation.\n\n> Example\n Convert the current time to a date.\n\n     from Standard.Base import Date_Time\n\n     example_date = Date_Time.now.date",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "at_zone",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "zone",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " ALIAS change time zone\nGROUP DateTime\n\nConvert the time instant to the same instant in the provided time zone.\n\nArguments:\n- zone: The timezone to convert the time instant into.\n\n> Example\n Convert time instance to -04:00 timezone.\n\n     from Standard.Base import Date_Time, Time_Zone\n\n     example_at_zone = Date_Time.new 2020 . at_zone (Time_Zone.new -4)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "date_part",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns a requested date-time part as integer.\n\nProduces a warning for a Date_Time that is before epoch start.\nSee `Date_Time.enso_epoch_start`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "date_diff",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nComputes a time difference between the two date-times.\n\nIt returns an integer expressing how many periods fit between the two\ndate-times.\n\nThe difference will be positive if `end` is greater than `self`.\n\nProduces a warning for a Date_Time that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- end: A date-time to compute the difference from.\n- period: The period to compute the difference in.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "date_add",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Time_Period.Time_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " GROUP DateTime\nShifts the date-time by a specified period.\n\nProduces a warning for a Date_Time that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- amount: An integer specifying by how many periods to shift the\n date-time.\n- period: The period by which to shift.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Time.Duration.Duration | Standard.Base.Data.Time.Period.Period | Standard.Base.Data.Time.Time_Period.Time_Period | Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS add duration, add period\nGROUP Operators\nAdd the specified amount of time to this instant to produce a new instant.\n\nArguments:\n- amount: The amount of time to add to this instant, It can be a\n `Duration`, `Period`, `Time_Period`, or `Date_Period`.\n\n> Example\n Add 15 years and 3 hours to a zoned date time.\n\n     from Standard.Base import Date_Time, Period\n     from Standard.Base.Data.Time import Duration\n\n     example_plus = Date_Time.new 2020 + (Period.new years=15) + (Duration.new hours=3)\n\n> Example\n Add one quarter to a zoned date time.\n\n     from Standard.Base import Date_Time, Date_Period\n\n     example_plus = Date_Time.new 2020 + Date_Period.Quarter",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "add_work_days",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "days",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            },
            {
                "name": "holidays",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " GROUP DateTime\nShift the date by the specified amount of business days.\n\nFor the purpose of this method, the business days are defined to be\nMonday through Friday.\n\nProduces a warning if called on a Date_Time that is before an epoch\nstart. See `Date_Time.enso_epoch_start`.\n\nThis method always returns a day which is a business day - if the shift\namount is zero, the closest following business day is returned. For the\npurpose of calculating the shift, the holidays are treated as if we were\nstarting at the next business day after them, for example counting the\nshift starting on Saturday or Sunday works as if we were counting the\nshift from Monday (for positive shifts). So shifting Sunday by zero days\nwill return Monday, but shifting it by one day will return a Tuesday\n(so that there is the full work day - Monday) within the interval. For\nnegative shifts, shifting either Saturday or Sunday one day backwards\nwill return Friday, but shifting Monday one day backwards will return a\nFriday. The whole logic is made consistent with `work_days_until`, so\nthat the following properties hold:\n   date.work_days_until (date.add_work_days N) == N for any N >= 0\n   (date.add_work_days N).work_days_until date == -N for any N < 0\n\nThe time of day is preserved, only the date is shifted.\n\nArguments:\n- amount: The number of business days to shift the date by. If `amount`\n is zero, the current date is returned, unless it is a weekend or a\n holiday, in which case the next business day is returned.\n- holidays: An optional list of dates of custom holidays that should also\n be skipped. If it is not provided, only weekends are skipped.\n\n> Example\n Shift the date by 5 business days.\n\n     example_shift = Date_Time.new 2020 2 3 11 45 . add_work_days 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Time.Duration.Duration | Standard.Base.Data.Time.Period.Period | Standard.Base.Data.Time.Time_Period.Time_Period | Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Day",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Hour",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Minute",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Second",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Millisecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Microsecond",
                    "Standard.Base.Data.Time.Time_Period.Time_Period.Nanosecond",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS subtract duration, subtract period\nGROUP Operators\nSubtract the specified amount of time from this instant to get a new\ninstant.\n\nProduces a warning if the resulting date time is before an Enso epoch.\n\nArguments:\n- amount: The amount of time to add to this instant, It can be a\n `Duration`, `Period`, `Time_Period`, or `Date_Period`.\n\n> Example\n Subtract 1 year, 9 months and 12 hours from a zoned date time.\n\n     from Standard.Base import Date_Time\n     import Standard.Base.Data.Time.Duration\n\n     example_minus = Date_Time.new 2020 - (Period.new years=1) - (Period.new months=9) - (Duration.new hours=5)\n\n> Example\n Subtract one quarter from a zoned date time.\n\n     from Standard.Base import Date_Time, Date_Period\n\n     example_plus = Date_Time.new 2020 - Date_Period.Quarter",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Date_Time.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing a Date_Time.\n\n> Example\n Convert the current time to a JS_Object.\n\n     example_to_json = Date_Time.now.to_js_object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "format",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Conversions\nFormat this time as text using the specified format specifier.\n\nArguments:\n- format: A pattern describing how to format the text,\n or a `Date_Time_Formatter`.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - y: Year. The number of pattern letters determines the minimum number of\n   digits.\n   - y: The year using any number of digits.\n   - yy: The year, using at most two digits. The default range is\n     1950-2049, but this can be changed by including the end year in\n     braces e.g. `yy{2099}`.\n   - yyyy: The year, using exactly four digits.\n - M: Month of year. The number of pattern letters determines the format:\n   - M: Any number (1-12).\n   - MM: Month number with zero padding required (01-12).\n   - MMM: Short name of the month (Jan-Dec).\n   - MMMM: Full name of the month (January-December).\n   The month names depend on the selected locale.\n - d: Day. The number of pattern letters determines the format:\n   - d: Any number (1-31).\n   - dd: Day number with zero padding required (01-31).\n   - ddd: Short name of the day of week (Mon-Sun).\n   - dddd: Full name of the day of week (Monday-Sunday).\n   The weekday names depend on the selected locale.\n   Both day of week and day of month may be included in a single pattern -\n   in such case the day of week is used as a sanity check.\n - Q: Quarter of year.\n   If only year and quarter are provided in the pattern, when parsing a\n   date, the result will be the first day of that quarter.\n - H: 24h hour of day (0-23).\n - h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n   between AM and PM.\n - m: Minute of hour.\n - s: Second of minute.\n - f: Fractional part of the second. The number of pattern letters\n   determines the number of digits. If one letter is used, any number of\n   digits will be accepted.\n - a: AM/PM marker.\n - T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n   -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n - Z: Zone offset.\n   - Z, ZZ, ZZZ: A short offset form (+HHmm).\n     No offset is indicated by \"+0000\". This can be customized by setting\n     an alternative no offset string in curly braces, e.g. `zz{Z}`.\n   - ZZZZ: Localized offset (e.g. GMT-08:00).\n   - ZZZZZ: A full offset form (+HH:mm:ss).\n     No offset is indicated by \"Z\". This can be customized as above, e.g.\n     `ZZZZZ{0}`.\n\n> Example\n Format \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" as\n \"2020-10-08T16:41:13+03:00[Europe/Moscow]\".\n\n     from Standard.Base import Date_Time\n\n     example_format =\n        Date_Time.parse \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" . format \"yyyy-MM-dd'T'HH:mm:ssZZZZ'['tt']'\"\n\n> Example\n Format \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" as\n \"Thursday October 8 4:41 PM\".\n     from Standard.Base import Date_Time\n\n     example_format =\n        Date_Time.parse \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" . format \"EEEE MMMM d h:mm a\"\n\n> Example\n Format \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" as\n \"Thu Oct 8 (16:41)\".\n\n     from Standard.Base import Date_Time\n\n     example_format =\n        Date_Time.parse \"2020-10-08T16:41:13+03:00[Europe/Moscow]\" . format \"EEE MMM d (HH:mm)\"\n\n> Example\n Format \"2020-06-21T16:41:13+03:00\" with French locale as \"21. juin 2020\"\n\n     from Standard.Base import Date_Time\n     import Standard.Base.Data.Locale.Locale\n\n     example_format =\n         Date_Time.parse \"2020-06-21T16:41:13+03:00\" . format \"d. MMMM yyyy\" (Locale.new \"fr\")",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "documentation": null,
        "reexport": "Standard.Base.Internal.Time.Format"
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Format_Token",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Pattern",
        "arguments": [
            {
                "name": "character",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "documentation": " PRIVATE\nA format pattern described by a single character and count.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Literal",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "documentation": " PRIVATE\nA literal text string.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Optional_Section_Start",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "documentation": " PRIVATE\nIndicates beginning of an optional section.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Optional_Section_End",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "documentation": " PRIVATE\nIndicates end of an optional section.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Curly_Section",
        "arguments": [
            {
                "name": "inner_text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "documentation": " PRIVATE\nA special parameter in curly braces.\n\nCurrently only used to customize base year for `yy`, i.e. `yy{2099}`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "character",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "count",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "inner_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Tokenizer",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "Instance",
        "arguments": [
            {
                "name": "original_text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "chars",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "tokens_builder",
                "reprType": "Standard.Base.Data.Vector.Builder Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "optional_nesting",
                "reprType": "Standard.Base.Runtime.Ref.Ref Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "documentation": " PRIVATE\nA helper type to hold the state of the tokenizer.\nNormally, we could keep these in the closure, inside of a method.\nBut our 3 parse methods need to be able to call each other, and mutual\nrecursion of variables defined inside of a method is not supported in\nEnso. So to achieve the mutual recursion, we instead define these as\nmember methods.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "original_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "chars",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "tokens_builder",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "returnType": "Standard.Base.Data.Vector.Builder Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "optional_nesting",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Ref.Ref Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Runtime.Ref.Ref Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "new",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "finalize_token",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "current_token",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "is_in_optional",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE\nChecks if we are inside of an optional section.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "enter_optional_section",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "exit_optional_section",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "parse_normal",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "position",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "current_token",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "parse_quoted",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "position",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "text_accumulator",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "parse_curly",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "position",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "text_accumulator",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Tokenizer",
        "name": "tokenize",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Tokenizer.Tokenizer",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Tokenizer.Format_Token",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Error",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Error",
        "name": "Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A type representing dataflow errors.\n\nA dataflow error in Enso is one that behaves like a standard value, and\nhence represents erroneous states in a way that exists _within_ standard\ncontrol flow.\n\n? Dataflow Errors or Panics\n Whilst a Panic is useful for unrecoverable situations, most Enso APIs\n are designed to use dataflow errors instead. As they exist within the\n normal program control flow, they are able to be represented on the\n Enso graph.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "throw",
        "arguments": [
            {
                "name": "payload",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Error.Error",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreates a new dataflow error containing the provided payload.\n\nArguments:\n- payload: The contents of the dataflow error to be created.\n\n> Example\n Throw a dataflow error containing the text \"Oops\".\n\n     Error.throw \"Oops\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "catch_primitive",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "handler",
                "reprType": "Standard.Base.Error.Error -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\n\nExecutes the provided handler on a dataflow error, or executes as\nidentity on a non-error value.\n\nArguments:\n- handler: The function to call on this if it is an error value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "get_stack_trace_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nUNSTABLE\n\nReturns a textual representation of the stack trace attached to an error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts an error to a corresponding textual representation.\n\n> Example\n Converting a thrown error to text.\n\n     Error.throw \"foo\" . to_text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns a human-readable text representing this error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "catch",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            },
            {
                "name": "handler",
                "reprType": "Standard.Base.Error.Error -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "x -> (FORCE x)",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Errors\nExecutes the provided handler on an error, or returns the value unchanged.\n\nArguments:\n- error_type: The type of error to handle. Defaults to `Any` to handle\n all errors.\n- handler: The function to call on this if it is an error value of a\n matching type. By default this is identity.\n\n> Example\n Catching an `Illegal_Argument` and returning its message.\n\n     from Standard.Base import all\n\n     example_catch =\n         error = Error.throw (Illegal_Argument.Error \"My message\")\n         error.catch Illegal_Argument (err -> err.message)\n\n> Example\n Catching any dataflow error and turning it into a regular value.\n\n     from Standard.Base import all\n\n     example_catch =\n         error = Error.throw 42\n         error.catch == 42",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "map_error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Error.Error -> Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Transforms an error.\n\nArguments:\n- f: The function used to transform the error.\n\nIf `self` is a non-error value it is returned unchanged. However, if `self`\nis an error, the error is transformed using the provided function\n\n> Example\n Transforming an error value.\n\n     import Standard.Examples\n\n     example_map_error =\n         map = Examples.map\n         map.at 10 . map_error (_ -> \"The element 10 was not found.\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "stack_trace",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Runtime.Stack_Trace_Element",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Errors\n\nReturns the attached stack trace of the error.\n\nThe ordering of the resulting vector is such that the top stack frame is the\nfirst element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "is_error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Errors\nChecks if `self` is an error.\n\n> Example\n Checking if the value 1 is an error.\n\n     1.is_error",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Error",
        "name": "if_not_error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nReturns the provided `other` value, unless `self` is an error.\n\nArguments:\n- other: The value to return if `self` is not an error.\n\nThe primary application of this function is to introduce a dataflow\ndependency between two otherwise unrelated operations. Very useful if one\nof the operations is performing a side-effect.\n\nAside from ensuring that any dataflow errors are propagated, the result\nwill also inherit any warnings attached to any of the two inputs.\n\n> Example\n Writing to a file and returning the file object if all went well, or an\n error if it failed.\n\n     file.write \"foo\" . if_not_error file",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Any",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Any",
        "name": "Any",
        "params": [],
        "documentation": " Any is the universal top-type, with all other types being subsumed by it.\n\nIf a value of type Any is expected in a given location, _any value_ can\nbe used in that position.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "target_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Conversions\nGeneric conversion of an arbitrary Enso value to requested type.\nDelegates to appropriate `.from` conversion method, if it exists.\nIf such method doesn't exist, `No_Such_Conversion` panic is raised.\n\nArguments:\n- target_type: the requested type.\n\n> Example\n Following code defines conversion of a `Complex` type to a `Number`\n by computing absolute distance from `0`. The code yields `5.0`:\n\n     type Complex\n         Value re:Number im:Number\n\n     Number.from (that:Complex) = that.re*that.re+that.im*that.im . sqrt\n\n     Complex.Value 3 4 . to Number\n\n> Example\n `.from` conversion methods may have additional arguments\n with default values. Thus the conversion from `Complex` to\n `Number` may take additional argument:\n\n     type Complex\n         Value re:Number im:Number\n\n     Number.from (that:Complex) = that.re*that.re+that.im*that.im . sqrt\n\n     Complex.Value 3 4 . to Number\n\n     type Complex\n         Value re:Number im:Number\n\n     Number.from (that:Complex) (ignore_im:Boolean=False) = case ignore_im of\n         False -> that.re*that.re+that.im*that.im . sqrt\n         True -> that.re\n\n     yields_3 = Complex.Value 3 4 . to Number ignore_im=True\n     yields_5 = Complex.Value 3 4 . to Number ignore_im=False\n     default5 = Complex.Value 3 4 . to Number",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Conversions\nGeneric conversion of an arbitrary Enso value to a corresponding textual\nrepresentation.\n\n> Example\n Getting a textual representation of the number 7.\n\n     7.to_text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "pretty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " Generic conversion of an arbitrary Enso value to a corresponding human-readable\nrepresentation.\n\n> Example\n Getting a human-readable representation of the number 7.\n\n     7.to_text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nGeneric conversion of an arbitrary Enso value to a corresponding short\nhuman-readable representation.\n\n> Example\n Getting a short human-readable textual representation of the number 7.\n\n     7.to_display_text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "==",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS equals\nGROUP Operators\nChecks if `self` is equal to `that`.\n\nArguments:\n- that: The object to compare `self` with.\n\nTwo values are considered to be equal in Enso when they obey the following\nrecursive properties:\n- At each level, they have the same structure.\n- The value of each field in `self` is equal (by this definition) to the\n corresponding field in `that`.\n\n! Implementing Your Own Equality\n Equality in Enso is defined to allow comparison of any two values\n (universal equality), no matter if they are not directly comparable. When\n implementing equality for your own types, keep in mind that it needs to\n work with any Enso value as the `that` argument.\n\n! Unicode Equality\n The definition of equality includes Unicode canonicalization. I.e. two\n texts are equal if they are identical after canonical decomposition. This\n ensures that different ways of expressing the same character in the\n underlying binary representation are considered equal.\n\n? Generic Equality and Performance\n While the generic equality provided here will work for _all_ values in\n Enso, its performance may often be suboptimal. Many types can implement\n their own equality operations that will be more efficient than these.\n\n> Example\n The string 'é' (i.e. the character U+00E9, LATIN SMALL LETTER E WITH ACUTE)\n is canonically the same as the string 'e\\u0301' (i.e. the letter `e`\n followed by U+0301, COMBINING ACUTE ACCENT). Therefore:\n\n     ('é' == 'e\\u0301') == True\n\n> Example\n Checking if the variable `a` is equal to `147`.\n\n     from Standard.Base import all\n\n     example_equality =\n         a = 7 * 21\n         a == 147",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "!=",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS not equals\nGROUP Operators\nChecks if `self` is not equal to `that`.\n\nArguments:\n- that: The object to compare `self` against.\n\n! Implementing Your Own Inequality\n We recommend that you do not implement your own inequality, instead relying\n on the default definition given here. If you do, please ensure that you\n satisfy universal equality, as described in the documentation for `Any.==`.\n\n> Example\n Checking if the variable `a` is not equal to `147`.\n\n     from Standard.Base import all\n\n     example_inequality =\n         a = 7 * 21\n         a != 147",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": ">",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS greater than\nGROUP Operators\nChecks if `self` is greater than `that`.\n\nArguments:\n- that: The value to compare `self` against.\n\nTo be comparable, a custom object must have an associated comparator\nwhich will return `Ordering.Less/Greater` for unequal values. Otherwise,\nthis will raise `Incomparable_Values` error. See `Ordering.enso` for\ninformation how comparators work.\n\n> Example\n Checking if the variable `a` is greater than `147`.\n\n     from Standard.Base import all\n\n     example_greater =\n         a = 7 * 28\n         a > 147",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": ">=",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS greater than or equal\nGROUP Operators\nChecks if `self` is greater than or equal to `that`.\n\nArguments:\n- that: The value to compare `self` against.\n\n! Implementing Greater Than or Equal\n While it is often possible to implement a more efficient version of this\n operation for complex types, care must be taken to ensure that your\n implementation is semantically equivalent to the disjunction of the\n greater than and equal to operations.\n\n> Example\n Checking if the variable `a` is greater than or equal to `147`.\n\n     from Standard.Base import all\n\n     example_greater_eq =\n         a = 6 * 21\n         a >= 147",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "<",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS less than\nGROUP Operators\nChecks if `self` is less than `that`.\n\nArguments:\n- that: The value to compare `self` against.\n\nTo be comparable, a custom object must have an associated comparator\nwhich will return `Ordering.Less/Greater` for unequal values. Otherwise,\nthis will raise `Incomparable_Values` error. See `Ordering.enso` for\ninformation how comparators work.\n\n> Example\n Checking if the variable `a` is less than `147`.\n\n     from Standard.Base import all\n\n     example_less =\n         a = 7 * 21\n         a < 147",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "<=",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS less than or equal\nGROUP Operators\nChecks if `self` is less than or equal to `that`.\n\nArguments:\n- that: The value to compare `self` against.\n\nTo have `<=` defined, a type must define both `<` and `==`.\n\n! Implementing Less Than or Equal\n While it is often possible to implement a more efficient version of this\n operation for complex types, care must be taken to ensure that your\n implementation is semantically equivalent to the disjunction of the\n less than than and equal to operations.\n\n> Example\n Checking if the variable `a` is less than or equal to `147`.\n\n     from Standard.Base import all\n\n     example_less_eq =\n         a = 7 * 21\n         a < 147",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "is_nothing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the type is an instance of `Nothing`.\n\nNothing in Enso is used as a universal value to indicate the lack of presence\nof a value. This function is primarily useful in the IDE.\n\n> Example\n Checking if the value 1 is nothing.\n\n     1.is_nothing",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "if_nothing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Logical\nIf `self` is Nothing then returns `function`.\n\n> Example\n If the value \"Hello\" is nothing return \"\".\n\n     \"Hello\".if_nothing \"\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "catch",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            },
            {
                "name": "handler",
                "reprType": "Standard.Base.Error.Error -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "x -> (FORCE x)",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Errors\nExecutes the provided handler on an error, or returns the value unchanged.\n\nArguments:\n- error_type: The type of error to handle. Defaults to `Any` to handle\n all errors.\n- handler: The function to call on this if it is an error value of a\n matching type. By default this is identity.\n\n> Example\n Catching an `Illegal_Argument` and returning its message.\n\n     from Standard.Base import all\n\n     example_catch =\n         error = Error.throw (Illegal_Argument.Error \"My message\")\n         error.catch Illegal_Argument (err -> err.message)\n\n> Example\n Catching any dataflow error and turning it into a regular value.\n\n     from Standard.Base import all\n\n     example_catch =\n         error = Error.throw 42\n         error.catch == 42",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "catch_primitive",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "handler",
                "reprType": "Standard.Base.Error.Error -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\n\nExecutes the provided handler on a dataflow error, or executes as\nidentity on a non-error value.\n\nArguments:\n- handler: The function to call on this if it is an error value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "map_error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Error.Error -> Standard.Base.Error.Error",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Transforms an error.\n\nArguments:\n- f: The function used to transform the error.\n\nIf `self` is a non-error value it is returned unchanged. However, if `self`\nis an error, the error is transformed using the provided function.\n\n> Example\n Transforming an error value to provide more information.\n\n     from Standard.Base import all\n     from Standard.Examples import Example_Error_Type\n\n     example_map_error =\n        my_map = Map.empty\n        error = my_map.at \"x\"\n        error.map_error (_ -> Example_Error_Type \"x is missing\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "is_error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Errors\nChecks if `self` is an error.\n\n> Example\n Checking if the provided value is an error.\n\n     1.is_error",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "if_not_error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nReturns the provided `other` value, unless `self` is an error.\n\nArguments:\n- other: The value to return if `self` is not an error.\n\nThe primary application of this function is to introduce a dataflow\ndependency between two otherwise unrelated operations. Very useful if one\nof the operations is performing a side-effect.\n\nAside from ensuring that any dataflow errors are propagated, the result\nwill also inherit any warnings attached to any of the two inputs.\n\n> Example\n Writing to a file and returning the file object if all went well, or an\n error if it failed.\n\n     file.write \"foo\" . if_not_error file",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "map_nothing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Applies the provided function to `self` unless `self` is `Nothing`, which is\nreturned unchanged.\n\nArguments:\n- f: The function to apply to `self` if `self` is not `Nothing`.\n\n> Example\n Applying a function over a value 10.\n\n     10.map_nothing *2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "|>",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nGROUP Operators\nApplies the function on the right hand side to the argument on the left.\n\nArguments\n- function: The function to apply to `self`.\n\n? `|>` or `.`?\n The eagle-eyed reader will notice that the operator dot (`.`) is very\n similar to the operator `|>`. In Enso, with the variable precedence of\n operators, this makes perfect sense. In general, we recommend using `.`.\n However, there are some contexts where variable precedence might be unclear\n or confusing, or where the function being applied is not a method. In these\n contexts we recommend using `|>`.\n\n> Example\n Applying multiple functions in a pipeline to compute a number and transform\n it to text.\n\n     1 |> (* 2) |> (/ 100) |> .to_text",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "has_warnings",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warning_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Errors\nChecks if any warnings (either all or of a specified type) are attached to the value.\n\nArguments:\n- warning_type: The type to check if attached to the value. Defaults to any warning.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "remove_warnings",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warning_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Errors\nRemove the warnings (either all or of a specified type) attached to the value.\n\nArguments:\n- warning_type: The type to remove if attached to the value. Defaults to all warnings.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "throw_on_warning",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warning_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Errors\nThrows the first matching warning (either all or of a specified type) as a data flow error.\n\nArguments:\n- warning_type: The type to throw if attached to the value. Defaults to all warnings.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Any",
        "name": "assert_same_comparators",
        "arguments": [
            {
                "name": "this",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nChecks if the comparators for the given objects are both of the same type. If so,\nproceeds with the given action, and if not, throws `Incomparable_Values` error.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Math",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Math",
        "name": "pi",
        "arguments": [],
        "selfType": "Standard.Base.Math",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": true,
        "documentation": " The mathematical constant pi, equal to the ratio of a circle circumference\nto its diameter.\n\n> Example\n Calculating the area of a circle.\n\n     circle_area r = 2 * Math.pi * r^2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Math",
        "name": "e",
        "arguments": [],
        "selfType": "Standard.Base.Math",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": true,
        "documentation": " The mathematical constant e, the base of the natural logarithm.\n\n> Example\n Calculating the natural logarithm of 3.\n\n     3.log Math.e",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Math",
        "name": "min",
        "arguments": [
            {
                "name": "a",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "b",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Math",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nGROUP Math\n\nReturns the smaller value of `a` and `b`.\n\nArguments:\n- a: The first number.\n- b: The second number.\n\n? Math.min or Number.min\n While we provide the min method on `Number`, we find it more intuitive to\n write `Math.min a b` rather than `a.min b`. To that end, we recommend using\n the first style.\n\n> Example\n Calculate the smallest number out of 1 and 2.\n\n     Math.min 1 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Math",
        "name": "max",
        "arguments": [
            {
                "name": "a",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "b",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Math",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nGROUP Math\n\nReturns the larger value of `a` and `b`.\n\nArguments:\n- a: The first number.\n- b: The second number.\n\n? Math.max or Number.max\n While we provide the max method on `Number`, we find it more intuitive to\n write `Math.max a b` rather than `a.max b`. To that end, we recommend using\n the first style.\n\n> Example\n Calculate the largest number out of 1 and 2.\n\n     Math.max 1 2",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Duration",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "between_builtin",
        "arguments": [
            {
                "name": "start_inclusive",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end_exclusive",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "timezone_aware",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration",
        "returnType": "Standard.Base.Data.Time.Duration.Duration",
        "isStatic": true,
        "documentation": " PRIVATE\nCreate an interval representing the duration between two points in time.\n\nArguments:\n- start_inclusive: The start datetime of the duration, included.\n- end_exclusive: The end datetime of the duration, excluded.\n- timezone_aware: Whether the duration between two given times should be\n aware of the timezone, that can be set for start or end times.\n\nRecommended to use `Duration.between` instead which provides defaults.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "new_builtin",
        "arguments": [
            {
                "name": "hours",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "minutes",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "seconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "milliseconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "nanoseconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration",
        "returnType": "Standard.Base.Data.Time.Duration.Duration",
        "isStatic": true,
        "documentation": " PRIVATE\nCreate a duration from time units.\n\nArguments:\n- hours: hours\n- minutes: minutes\n- seconds: seconds\n- milliseconds: milliseconds\n- nanoseconds: nanoseconds\n\nRecommended to use `Duration.new` instead which provides defaults.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "ensure_duration",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "Duration",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents the amount of time between two points in time.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "between",
        "arguments": [
            {
                "name": "start_inclusive",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end_exclusive",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "timezone_aware",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Time.Duration.Duration",
        "isStatic": true,
        "documentation": " Create an interval representing the duration between two points in time.\n\nArguments:\n- start_inclusive: The start datetime of the duration, included.\n- end_exclusive: The end datetime of the duration, excluded.\n- timezone_aware: Whether the duration between two given times should be\n aware of the timezone, that can be set for start or end times.\n\n> Example\n An hour interval between two points in time.\n\n     from Standard.Base import Date_Time\n     import Standard.Base.Data.Time.Duration\n\n     example_between = Duration.between Date_Time.now (Date_Time.new 2010 10 20)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "new",
        "arguments": [
            {
                "name": "hours",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "minutes",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "seconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "milliseconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "nanoseconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Time.Duration.Duration",
        "isStatic": true,
        "documentation": " GROUP DateTime\nCreate a duration from time units.\n\nArguments:\n- hours: hours\n- minutes: minutes\n- seconds: seconds\n- milliseconds: milliseconds\n- nanoseconds: nanoseconds\n\n> Example\n Duration of 2 hours.\n\n     import Standard.Base.Data.Time.Duration\n\n     example_duration = Duration.new hours=2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "zero",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Time.Duration.Duration",
        "isStatic": true,
        "documentation": " Create a zero (empty) duration.\n> Example\n Folding a vector of durations.\n\n     import Standard.Base.Data.Time.Duration\n\n     durations = [(Duration.new seconds=1), (Duration.new seconds=2), (Duration.new seconds=3)]\n     example_sum = durations.fold Duration.zero (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "time_execution",
        "arguments": [
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Pair.Pair",
        "isStatic": true,
        "documentation": " ADVANCED\n\nTime the evaluation of a function, return a Pair of Duration and Result\n\nArguments:\n- function: Function to execute.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS add duration\nGROUP Operators\nAdd the specified amount of time to this duration.\n\nArguments:\n- that: The duration to add to `self`.\n\n> Example\n Add 6 seconds to a duration of 3 minutes\n\n     import Standard.Base.Data.Time.Duration\n\n     example_add = (Duration.new minutes=3) + (Duration.new seconds=6)\n\n> Example\n Add 12 hours to a duration of 30 minutes.\n\n     import Standard.Base.Data.Time.Duration\n\n     example_add = (Duration.new minutes=30) + (Duration.new hours=12)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS subtract duration\nGROUP Operators\nSubtract the specified amount of time from this duration.\n\nArguments:\n- that: The duration to subtract from `self`.\n\n> Example\n Substract 30 minutes from a duration of 6 hours.\n\n     import Standard.Base.Data.Time.Duration\n\n     example_subtract = (Duration.new hours=6) - (Duration.new minutes=30)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "nanoseconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the portion of the duration expressed in nanoseconds.\n\n> Example\n Get the portion of the duration expressed in nanoseconds.\n\n     import Standard.Examples\n\n     example_nanos = Examples.duration.nanoseconds",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "milliseconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the portion of the duration expressed in milliseconds.\n\n> Example\n Get the portion of the duration expressed in milliseconds.\n\n     import Standard.Examples\n\n     example_millis = Examples.duration.milliseconds",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "seconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the portion of the duration expressed in seconds.\n\n> Example\n Get the portion of the duration expressed in seconds.\n\n     import Standard.Examples\n\n     example_seconds = Examples.duration.seconds",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "minutes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the portion of the duration expressed in minutes.\n\n> Example\n Get the portion of the duration expressed in minutes.\n\n     import Standard.Examples\n\n     example_minutes = Examples.duration.minutes",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "hours",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the portion of the duration expressed in hours.\n\n> Example\n Get the portion of the duration expressed in hours.\n\n     import Standard.Examples\n\n     example_hours = Examples.duration.milliseconds",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "total_milliseconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP DateTime\nConvert the duration to total milliseconds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "total_seconds",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP DateTime\nConvert the duration to total seconds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "total_minutes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP DateTime\nConvert the duration to total minutes.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "total_hours",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP DateTime\nConvert the duration to total minutes.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing a Duration.\n\n> Example\n Convert a duration of 10 seconds to a JS_Object.\n\n     example_to_json = (Duration.new seconds=10).to_js_object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Duration",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Duration.Duration",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert Duration to a friendly string.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Range.Extensions",
        "documentation": null,
        "reexport": "Standard.Base.Data.Range"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range.Extensions",
        "name": "up_to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_end",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Range.Range",
        "isStatic": false,
        "documentation": " ALIAS range\nGROUP Input\n\nCreates an increasing range of integers from `self` to `n`.\n\nArguments:\n- n: The end of the range.\n- include_end: Specifies if the right end of the range should be included. By\n default, the range is right-exclusive.\n\n> Example\n Create a range containing the numbers 0, 1, 2, 3, 4.\n\n     0.up_to 5\n\n> Example\n Create a range containing elements 1, 2, 3.\n\n     1.up_to 3 include_end=True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Range.Extensions",
        "name": "down_to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_end",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Range.Range",
        "isStatic": false,
        "documentation": " ALIAS range\nGROUP Input\n\nCreates a decreasing right-exclusive range of integers from `self` to `n`.\n\nArguments:\n- n: The end of the range.\n- include_end: Specifies if the right end of the range should be included. By\n default, the range is right-exclusive.\n\n> Example\n Create a range containing the numbers 5, 4, 3, 2, 1.\n\n     5.down_to 0\n\n> Example\n Create a range containing elements 3, 2, 1.\n\n     3.down_to 1 include_end=True",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Polyglot_Helpers",
        "documentation": null,
        "reexport": "Standard.Base.Internal"
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Polyglot_Helpers",
        "name": "handle_polyglot_dataflow_errors",
        "arguments": [
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Polyglot_Helpers",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Prim_Text_Helper",
        "documentation": " Internal text utilities for inspecting text primitives.",
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Prim_Text_Helper",
        "name": "optimize",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Prim_Text_Helper",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nForces flattening of a text value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Prim_Text_Helper",
        "name": "compile_regex",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "options",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Prim_Text_Helper",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nCompile the regex using the Truffle regex library.\n\nReturns a Java RegexObject (Truffle)\n(See https://github.com/oracle/graal/blob/master/regex/docs/README.md)\n\nArguments:\n- pattern: the regex to compile\n- options: string containing traditional regex flags (for example, \"g\"\nas in \"/foo/g\"",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.File_Format",
        "documentation": null,
        "reexport": "Standard.Base.System"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "format_types",
        "arguments": [],
        "selfType": "Standard.Base.System.File_Format",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "get_format",
        "arguments": [
            {
                "name": "callback",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nGets the first format not returning Nothing from the callback",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File_Format",
        "name": "Auto_Detect",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Automatically detects the file format based on the file extension or mime-type.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.Auto_Detect",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Auto_Detect",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `File.read` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "get_reading_format",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Auto_Detect",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nFinds a matching format for reading the file.\n\nIt assumes that `file` already exists.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "get_writing_format",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Auto_Detect",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nFinds a matching format for reading the file.\n\nIt may not assume that the `file` exists, so it must only rely on the\nfile path (extension in particular), but not the contents.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "get_web_parser",
        "arguments": [
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Auto_Detect",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File_Format",
        "name": "File_Format",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Interface for all file formats.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "all",
        "arguments": [],
        "selfType": "Standard.Base.System.File_Format.File_Format",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nGets all the currently available file formats.\n\nThe available file formats are ones provided by libraries which are\nimported within the current project. Importing an new library may cause\nmore entries to show up on this list.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.File_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File_Format.File_Format",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `File.read` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "constructor_code",
        "arguments": [
            {
                "name": "type_obj",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.File_Format",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nCreate the constructor code for a File_Format type.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "default_widget",
        "arguments": [],
        "selfType": "Standard.Base.System.File_Format.File_Format",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File_Format",
        "name": "Plain_Text_Format",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A file format for plain text files.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File_Format",
        "name": "Plain_Text",
        "arguments": [
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.File_Format.Plain_Text_Format",
        "documentation": " A file format for plain text files with the specified encoding.",
        "annotations": [
            "encoding"
        ],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "encoding",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.Plain_Text_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_file_read",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Plain_Text_Format",
        "returnType": "Standard.Base.System.File_Format.Plain_Text_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_file_write",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Plain_Text_Format",
        "returnType": "Standard.Base.System.File_Format.Plain_Text_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf this File_Format should be used for writing to that file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_web",
        "arguments": [
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Plain_Text_Format",
        "returnType": "Standard.Base.System.File_Format.Plain_Text_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the web response, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.Plain_Text_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Plain_Text_Format",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `File.read` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.Plain_Text_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stream",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Plain_Text_Format",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `Data.parse` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File_Format",
        "name": "Bytes",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A file format for reading or writing files as a sequence of bytes.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_file_read",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Bytes",
        "returnType": "Standard.Base.System.File_Format.Bytes | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_file_write",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Bytes",
        "returnType": "Standard.Base.System.File_Format.Bytes | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf this File_Format should be used for writing to that file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_web",
        "arguments": [
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Bytes",
        "returnType": "Standard.Base.System.File_Format.Bytes | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the web response, return a configured instance.\nAs `Bytes`, does not support reading from the web returns `Nothing`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.Bytes",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Bytes",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `File.read` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.Bytes",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stream",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.Bytes",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `Data.parse` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File_Format",
        "name": "JSON_Format",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A file format for reading and writing files as JSON.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_file_read",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.JSON_Format",
        "returnType": "Standard.Base.System.File_Format.JSON_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_file_write",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.JSON_Format",
        "returnType": "Standard.Base.System.File_Format.JSON_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf this File_Format should be used for writing to that file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "for_web",
        "arguments": [
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.JSON_Format",
        "returnType": "Standard.Base.System.File_Format.JSON_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the web response, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.JSON_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File_Format.JSON_Format",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `File.read` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File_Format",
        "name": "read_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File_Format.JSON_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stream",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File_Format.JSON_Format",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `Data.parse` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File_Format",
        "name": "Infer",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A setting to infer the default behaviour of some option.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Locale",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Locale",
        "name": "Locale",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A type representing a locale.\n\nA locale consists of three parts:\n- A language, which is mandatory.\n- A country code, which is optional.\n- A variant, which is optional.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Locale",
        "name": "Value",
        "arguments": [
            {
                "name": "java_locale",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Locale.Locale",
        "documentation": " PRIVATE\nA type representing a locale.\n\nArguments:\n- java_locale: The Java locale representation used internally.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "java_locale",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "new",
        "arguments": [
            {
                "name": "language",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "country",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "variant",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " Construct a new locale.\n\nArguments:\n- language: The language tag for the locale.\n- country: The country tag for the locale.\n- variant: The variant for the locale.\n\n> Example\n A locale representing en-GB.UTF-8.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_new = Locale.new \"en\" \"GB\" \"UTF-8\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "from_java",
        "arguments": [
            {
                "name": "java",
                "reprType": "Standard.Base.Data.Locale.JavaLocale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nConvert a java locale to an Enso locale.\n\nArguments:\n- java: The java locale value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "from_language_tag",
        "arguments": [
            {
                "name": "tag",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " Returns the locale specified by the provided IETF BCP47 language tag string.\n\n? Language Tag Syntax\n If the specified language tag contains any ill-formed subtags, the first\n such subtag and all following subtags are ignored.\n\n The following conversions are performed:\n - The language code \"und\" is mapped to language \"\".\n - The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\", \"ji\", and\n   \"in\" respectively.\n - The portion of a private use subtag prefixed by \"lvariant\", if any, is\n   removed and appended to the variant field in the result locale (without\n   case normalization).\n - When the languageTag argument contains an extlang subtag, the first such\n   subtag is used as the language, and the primary language subtag and other\n   extlang subtags are ignored.\n - Case is normalized except for variant tags, which are left unchanged.\n   Language is normalized to lower case, script to title case, country to\n   upper case, and extensions to lower case.\n - If, after processing, the locale would exactly match either ja_JP_JP or\n   th_TH_TH with no extensions, the appropriate extensions are added.\n\n This implements the 'Language-Tag' production of BCP47, and so supports\n grandfathered (regular and irregular) as well as private use language tags.\n\n> Example\n Creating the locale en_US.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_from_tag = Locale.from_language_tag \"en_US\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "default",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " The default locale.\n\nThe default locale is a locale that does not specify any language, country,\nor variant and is used as the language/country-neutral setting for locale\nsensitive operations.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "bangladesh",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Bangladesh.\n\n> Example\n Get the Bangladeshi locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.bangladesh",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "brazil",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Brazil.\n\n> Example\n Get the Brazilian locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.brazil",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "canada_english",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Canada with language English.\n\n> Example\n Get the Canadian english locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.canada_english",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "canada_french",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Canada with language French.\n\n> Example\n Get the Canadian french locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.canada_french",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "china",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing the PRC.\n\n> Example\n Get the PRC locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.china",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "france",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing France.\n\n> Example\n Get the French locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.france",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "germany",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Germany.\n\n> Example\n Get the German locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.germany",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "india_hindi",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing India with language Hindi.\n\n> Example\n Get the Indian hindi locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.india_hindi",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "india_english",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing India with language English.\n\n> Example\n Get the Indian english locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.india_english",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "indonesia",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Indonesia.\n\n> Example\n Get the Indonesian locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.indonesia",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "italy",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Italy.\n\n> Example\n Get the Italian locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.italy",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "japan",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Japan.\n\n> Example\n Get the Japanese locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.japan",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "mexico",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Mexico.\n\n> Example\n Get the Mexican locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.mexico",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "nigeria",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Nigeria.\n\n> Example\n Get the Nigerian locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.nigeria",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "pakistan_urdu",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing paksitan with language Urdu.\n\n> Example\n Get the Pakistani urdu locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.pakistan_urdu",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "pakistan_english",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing paksitan with language English.\n\n> Example\n Get the Pakistani english locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.pakistan_english",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "poland",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Poland.\n\n> Example\n Get the Poland locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.poland",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "russia",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing Russia.\n\n> Example\n Get the Russian locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.russia",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "south_korea",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing South Korea.\n\n> Example\n Get the South Korean locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.south_korea",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "uk",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing the UK.\n\n> Example\n Get the british locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.uk",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "us",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": true,
        "documentation": " A locale representing the United States.\n\n> Example\n Get the US locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_locale = Locale.us",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "language",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Gets the language from the locale.\n\n> Example\n Get the language tag from the default locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_language = Locale.default.language",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "country",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Gets the country from the locale.\n\n> Example\n Get the country tag from the default locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_country = Locale.default.country",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "variant",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Gets the variant from the locale.\n\n> Example\n Get the variant tag from the default locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_variant = Locale.default.variant",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "display_language",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Gets a representation of the language in the locale that can be shown to\nthe user.\n\n> Example\n Get the display language tag from the default locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_display_language = Locale.default.display_language",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "display_country",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Gets a representation of the country in the locale that can be shown to\nthe user.\n\n> Example\n Get the display country tag from the default locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_display_country = Locale.default.display_country",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "display_variant",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Gets a representation of the variant in the locale that can be shown to\nthe user.\n\n> Example\n Get the display variant tag from the default locale.\n\n     import Standard.Base.Data.Locale.Locale\n\n     example_display_variant = Locale.default.display_variant",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the locale to text.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert Locale to a friendly string.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "default_widget",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nGets the default drop down option for this encoding.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "predefined_locale_fields",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Locale",
        "name": "widget_options",
        "arguments": [],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Metadata.Choice.Option",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Runtime.State",
        "documentation": " The runtime's integrated monadic state management.\nA container type for functionality for working with the runtime's\nintegrated state functionality.",
        "reexport": "Standard.Base.Runtime"
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.State",
        "name": "run",
        "arguments": [
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "local_state",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "computation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.State",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nExecutes a stateful computation in a local state environment.\n\nArguments:\n- key: The key to associate your local_state with in the environment.\n Use types as keys.\n- local_state: The value to associate with key.\n- computation: The computation to execute in the local state\n environment.\n\n> Example\n Print a value from the state.\n     import Standard.Base.Runtime.State\n\n     State.run Integer 0 <| IO.println (State.get Integer)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.State",
        "name": "get",
        "arguments": [
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.State",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns the current value for the provided key contained in the monadic\nstate.\n\nArguments:\n- key: The key into the state to get the associated value for.\n\nReturns an uninitialized state error if the user tries to read from an\nuninitialized slot.\n\n> Example\n Get the value of state for a key.\n     import Standard.Base.Runtime.State\n\n     State.get Float",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.State",
        "name": "put",
        "arguments": [
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "new_state",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.State",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nAssociates a new_state with the provided key in the runtime's monadic\nstate, returning the provided state.\n\nArguments:\n- key: The key with which to associate the new state.\n- new_state: The new state to store.\n\nReturns an uninitialized state error if the user tries to put into an\nuninitialized slot.\n\n> Example\n Store a new value in the state for a given key.\n     import Standard.Base.Runtime.State\n\n     State.put Text 2821",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Encoding",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "Encoding",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents a character encoding.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "Value",
        "arguments": [
            {
                "name": "character_set",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "documentation": " PRIVATE\nCreate a new Encoding object.\n\nArguments:\n- character_set: java.nio.charset name.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "character_set",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "default_widget",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nGets the default drop down option for this encoding.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "all_character_sets",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nGet all available character sets from Java as Encodings.\nUsed to provide auto completion in the UI.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "all_encodings",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nGet all available Encodings.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "from_name",
        "arguments": [
            {
                "name": "name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Create an Encoding from a Text.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "to_java_charset",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Charset",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert an Encoding to it's corresponding Java Charset",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "ascii",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for ASCII.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "utf_8",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Unicode UTF-8.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "utf_16_le",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Unicode UTF-16 Little Endian.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "utf_16_be",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Unicode UTF-16 Big Endian.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "utf_32_le",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Unicode UTF-32 Little Endian.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "utf_32_be",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Unicode UTF-32 Big Endian.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1250",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Central European (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1251",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Cyrillic (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1252",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " ALIAS iso-8859-1\nEncoding for Western European (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1253",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Greek (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1254",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " ALIAS iso-8859-9\nEncoding for Turkish (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1255",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Hebrew (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1256",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Arabic (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1257",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Baltic (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "windows_1258",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding",
        "isStatic": true,
        "documentation": " Encoding for Vietnamese (Windows).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Encoding",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert Encoding to a friendly string.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "Text_Ordering",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "Default",
        "arguments": [
            {
                "name": "sort_digits_as_numbers",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
        "documentation": " Specifies the ordering of text values.\n\nFor the In-memory backend, the default ordering is case-sensitive. In\ndatabases, the default ordering depends on the database configuration.\n\nArguments:\n- sort_digits_as_numbers: Sort digits in the text as numbers. Setting\n this to `True` results in a \"Natural\" ordering.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "Case_Sensitive",
        "arguments": [
            {
                "name": "sort_digits_as_numbers",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
        "documentation": " Case sensitive ordering of values.\n\nIt will ensure case-sensitive ordering regardless of backend defaults.\nThis may make database queries more complicated and may result in being\nunable to rely on existing indices, thus potentially making the queries\nmuch slower. The `Default` ordering is preferred wherever possible.\n\nArguments:\n- sort_digits_as_numbers: Sort digits in the text as numbers. Setting\n this to `True` results in a \"Natural\" ordering.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "Case_Insensitive",
        "arguments": [
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            },
            {
                "name": "sort_digits_as_numbers",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
        "documentation": " Case insensitive ordering of values.\n\nIt will ensure case-insensitive ordering regardless of backend defaults.\nThis may make database queries more complicated and may result in being\nunable to rely on existing indices, thus potentially making the queries\nmuch slower. The `Default` ordering is preferred wherever possible.\n\nArguments:\n- sort_digits_as_numbers: Sort digits in the text as numbers. Setting\n this to `True` results in a \"Natural\" ordering.",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "sort_digits_as_numbers",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "locale",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Locale.Locale",
        "returnType": "Standard.Base.Data.Locale.Locale",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "case_sensitivity",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
        "returnType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns this ordering's case sensitivity setting.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Ordering",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Ordering.Text_Ordering",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert Text_Ordering to a friendly string.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Statistics",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Statistics",
        "name": "Rank_Method",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Specifies how to handle ranking of equal values.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Average",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Rank_Method",
        "documentation": " Use the mean of all ranks for equal values.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Minimum",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Rank_Method",
        "documentation": " Use the lowest of all ranks for equal values.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Maximum",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Rank_Method",
        "documentation": " Use the highest of all ranks for equal values.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Dense",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Rank_Method",
        "documentation": " Use same rank value for equal values and next group is the immediate\nfollowing ranking number.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Ordinal",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Rank_Method",
        "documentation": " Equal values are assigned the next rank in order that they occur.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "compute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Rank_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Rank_Method",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Statistics\nAssigns a rank to each value of data, dealing with equal values according to the method.\n\nArguments:\n- data: Input data to rank.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Statistics",
        "name": "Statistic",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Count",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " Count the number of non-Nothing and non-NaN values.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Minimum",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " The minimum value.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Maximum",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " The maximum value.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Sum",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " Sum the non-Nothing and non-NaN values.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Mean",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " The sample mean of the values.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Variance",
        "arguments": [
            {
                "name": "population",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " The variance of the values.\nArguments:\n- population: specifies if data is a sample or the population.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Standard_Deviation",
        "arguments": [
            {
                "name": "population",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " The standard deviation of the values.\nArguments:\n- population: specifies if data is a sample or the population.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Skew",
        "arguments": [
            {
                "name": "population",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " The skewness of the values.\nArguments:\n- population: specifies if data is a sample or the population.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Kurtosis",
        "arguments": [],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " The sample kurtosis of the values.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Covariance",
        "arguments": [
            {
                "name": "series",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " Calculate the Covariance between data and series.\n\nArguments:\n- series: the series to compute the covariance with.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Pearson",
        "arguments": [
            {
                "name": "series",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " Calculate the Pearson Correlation between data and series.\n\nArguments:\n- series: the series to compute the correlation with.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Spearman",
        "arguments": [
            {
                "name": "series",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " Calculate the Spearman Rank Correlation between data and series.\n\nArguments:\n- series: the series to compute the correlation with.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "R_Squared",
        "arguments": [
            {
                "name": "predicted",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Statistic",
        "documentation": " Calculate the coefficient of determination between data and predicted\nseries.\n\nArguments:\n- predicted: the series to compute the r_squared with.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "population",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "series",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "predicted",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "order",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nGets the order needed to compute a statistic for a moment based statistic.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "compute",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistic",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Statistic.Count",
                "tagValues": [
                    "Standard.Base.Data.Statistics.Statistic.Count",
                    "Standard.Base.Data.Statistics.Statistic.Minimum",
                    "Standard.Base.Data.Statistics.Statistic.Maximum",
                    "Standard.Base.Data.Statistics.Statistic.Sum",
                    "Standard.Base.Data.Statistics.Statistic.Mean",
                    "Standard.Base.Data.Statistics.Statistic.Variance",
                    "Standard.Base.Data.Statistics.Statistic.Standard_Deviation",
                    "Standard.Base.Data.Statistics.Statistic.Skew",
                    "Standard.Base.Data.Statistics.Statistic.Kurtosis",
                    "Standard.Base.Data.Statistics.Statistic.Covariance",
                    "Standard.Base.Data.Statistics.Statistic.Pearson",
                    "Standard.Base.Data.Statistics.Statistic.Spearman",
                    "Standard.Base.Data.Statistics.Statistic.R_Squared"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCompute a single statistic on a vector like object.\n\nArguments:\n- data: Vector like object which has a `to_array` method.\n- statistic: Statistic to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "compute_bulk",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistics",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[((Count) Statistic), ((Sum) Statistic)]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCompute a set of statistics on a vector like object.\n\nArguments:\n- data: Vector like object which has a `to_array` method.\n- statistics: Set of statistics to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "running",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistic",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Statistic.Sum",
                "tagValues": [
                    "Standard.Base.Data.Statistics.Statistic.Count",
                    "Standard.Base.Data.Statistics.Statistic.Minimum",
                    "Standard.Base.Data.Statistics.Statistic.Maximum",
                    "Standard.Base.Data.Statistics.Statistic.Sum",
                    "Standard.Base.Data.Statistics.Statistic.Mean",
                    "Standard.Base.Data.Statistics.Statistic.Variance",
                    "Standard.Base.Data.Statistics.Statistic.Standard_Deviation",
                    "Standard.Base.Data.Statistics.Statistic.Skew",
                    "Standard.Base.Data.Statistics.Statistic.Kurtosis",
                    "Standard.Base.Data.Statistics.Statistic.Covariance",
                    "Standard.Base.Data.Statistics.Statistic.Pearson",
                    "Standard.Base.Data.Statistics.Statistic.Spearman",
                    "Standard.Base.Data.Statistics.Statistic.R_Squared"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCompute a running statistics on a vector like object.\n\nArguments:\n- data: Vector like object which has a `to_array` method.\n- statistics: Set of statistics to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "running_bulk",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistics",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[((Count) Statistic), ((Sum) Statistic)]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCompute a set running statistics on a vector like object.\n\nArguments:\n- data: Vector like object which has a `to_array` method.\n- statistics: Set of statistics to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "covariance_matrix",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " Calculate a variance-covariance matrix between the input series.\n\nArguments:\n- data: The input data sets",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "pearson_correlation",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " Calculate a Pearson correlation matrix between the input series.\n\nArguments:\n- data: The input data sets",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "spearman_correlation",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " Calculate a Spearman Rank correlation matrix between the input series.\n\nArguments:\n- data: The input data sets",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "rank_data",
        "arguments": [
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Data.Statistics.Rank_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Rank_Method.Average",
                "tagValues": [
                    "Standard.Base.Data.Statistics.Rank_Method.Average",
                    "Standard.Base.Data.Statistics.Rank_Method.Minimum",
                    "Standard.Base.Data.Statistics.Rank_Method.Maximum",
                    "Standard.Base.Data.Statistics.Rank_Method.Dense",
                    "Standard.Base.Data.Statistics.Rank_Method.Ordinal"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Statistic",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " PRIVATE\nAssigns a rank to each value of data, dealing with equal values according to the method.\n\nArguments:\n- data: Input data to rank.\n- method: Method used to deal with equal values.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "wrap_java_call",
        "arguments": [
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "calculate_correlation_statistics",
        "arguments": [
            {
                "name": "x_data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y_data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Data.Statistics.CorrelationStatistics",
        "isStatic": true,
        "documentation": " PRIVATE\nGiven two series, get a computed CorrelationStatistics object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "calculate_spearman_rank",
        "arguments": [
            {
                "name": "x_data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y_data",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Data.Numbers.Float",
        "isStatic": true,
        "documentation": " PRIVATE\nGiven two series, get a compute the Spearman Rank correlation",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "calculate_correlation_statistics_matrix",
        "arguments": [
            {
                "name": "data",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Statistics.CorrelationStatistics",
        "isStatic": true,
        "documentation": " PRIVATE\nGiven a set of series get CorrelationStatistics objects",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "compute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistic",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Statistic.Count",
                "tagValues": [
                    "Standard.Base.Data.Statistics.Statistic.Count",
                    "Standard.Base.Data.Statistics.Statistic.Minimum",
                    "Standard.Base.Data.Statistics.Statistic.Maximum",
                    "Standard.Base.Data.Statistics.Statistic.Sum",
                    "Standard.Base.Data.Statistics.Statistic.Mean",
                    "Standard.Base.Data.Statistics.Statistic.Variance",
                    "Standard.Base.Data.Statistics.Statistic.Standard_Deviation",
                    "Standard.Base.Data.Statistics.Statistic.Skew",
                    "Standard.Base.Data.Statistics.Statistic.Kurtosis",
                    "Standard.Base.Data.Statistics.Statistic.Covariance",
                    "Standard.Base.Data.Statistics.Statistic.Pearson",
                    "Standard.Base.Data.Statistics.Statistic.Spearman",
                    "Standard.Base.Data.Statistics.Statistic.R_Squared"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Statistics\nCompute a single statistic on the vector (ignoring Nothing and NaN values).\n\nArguments:\n- statistic: Statistic to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "compute_bulk",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistics",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[((Count) Statistic), ((Sum) Statistic)]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Compute statistics on the vector (ignoring Nothing and NaN values).\n\nArguments:\n- statistics: Set of statistics to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "running",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistic",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Statistic.Count",
                "tagValues": [
                    "Standard.Base.Data.Statistics.Statistic.Count",
                    "Standard.Base.Data.Statistics.Statistic.Minimum",
                    "Standard.Base.Data.Statistics.Statistic.Maximum",
                    "Standard.Base.Data.Statistics.Statistic.Sum",
                    "Standard.Base.Data.Statistics.Statistic.Mean",
                    "Standard.Base.Data.Statistics.Statistic.Variance",
                    "Standard.Base.Data.Statistics.Statistic.Standard_Deviation",
                    "Standard.Base.Data.Statistics.Statistic.Skew",
                    "Standard.Base.Data.Statistics.Statistic.Kurtosis",
                    "Standard.Base.Data.Statistics.Statistic.Covariance",
                    "Standard.Base.Data.Statistics.Statistic.Pearson",
                    "Standard.Base.Data.Statistics.Statistic.Spearman",
                    "Standard.Base.Data.Statistics.Statistic.R_Squared"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Statistics\nCompute a single running statistic on the vector (ignoring Nothing and NaN\nvalues).\n\nArguments:\n- statistic: Statistic to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "running_bulk",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistics",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[((Count) Statistic), ((Sum) Statistic)]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Compute a set running statistics on the vector (ignoring Nothing and NaN\nvalues).\n\nArguments:\n- statistics: Set of statistics to calculate.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "rank_data",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Data.Statistics.Rank_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Rank_Method.Average",
                "tagValues": [
                    "Standard.Base.Data.Statistics.Rank_Method.Average",
                    "Standard.Base.Data.Statistics.Rank_Method.Minimum",
                    "Standard.Base.Data.Statistics.Rank_Method.Maximum",
                    "Standard.Base.Data.Statistics.Rank_Method.Dense",
                    "Standard.Base.Data.Statistics.Rank_Method.Ordinal"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Statistics\nAssigns a rank to each value of data, dealing with equal values according to\nthe method.\n\nArguments:\n- method: Method used to deal with equal values.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "compute_fold",
        "arguments": [
            {
                "name": "current",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "check_if_empty",
        "arguments": [
            {
                "name": "count",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "empty_value",
        "arguments": [
            {
                "name": "statistic",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "is_valid",
        "arguments": [
            {
                "name": "v",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Statistics",
        "name": "Accumulator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Statistics",
        "name": "Value",
        "arguments": [
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "min_max",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "minimum",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "maximum",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "moments",
                "reprType": "Standard.Base.Data.Vector.Vector | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Statistics.Accumulator",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "count",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "min_max",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "minimum",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "maximum",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "moments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Vector.Vector | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "new",
        "arguments": [
            {
                "name": "min_max",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "moments",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Data.Statistics.Accumulator",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "increment",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nAdd a single value to the accumulator.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "perform_comparison",
        "arguments": [
            {
                "name": "current",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "bound",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "update_moments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "compute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistic",
                "reprType": "Standard.Base.Data.Statistics.Statistic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Statistics.Statistic.Count",
                    "Standard.Base.Data.Statistics.Statistic.Minimum",
                    "Standard.Base.Data.Statistics.Statistic.Maximum",
                    "Standard.Base.Data.Statistics.Statistic.Sum",
                    "Standard.Base.Data.Statistics.Statistic.Mean",
                    "Standard.Base.Data.Statistics.Statistic.Variance",
                    "Standard.Base.Data.Statistics.Statistic.Standard_Deviation",
                    "Standard.Base.Data.Statistics.Statistic.Skew",
                    "Standard.Base.Data.Statistics.Statistic.Kurtosis",
                    "Standard.Base.Data.Statistics.Statistic.Covariance",
                    "Standard.Base.Data.Statistics.Statistic.Pearson",
                    "Standard.Base.Data.Statistics.Statistic.Spearman",
                    "Standard.Base.Data.Statistics.Statistic.R_Squared"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "variance",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "population",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "skew",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "population",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "kurtosis",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Statistics",
        "name": "check_moments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Statistics.Accumulator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "statistic",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Statistics.Accumulator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text.Regex"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "Match",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "Value",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "internal_regex_result",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Match.Match",
        "documentation": " PRIVATE\ninternal_regex_result : RegexResult (Truffle)\n(See https://github.com/oracle/graal/blob/master/regex/docs/README.md)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Regex.Regex",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "input",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts this value to a JSON serializable object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nProvides a human-readable representation of the `Match`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "internal_start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns the start UTF16 character index of a group.\n\nThis method goes directly to the internal match object. It does not\ntake group names, and does not have a default.\n\nArguments:\n- group: the integer group number.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "internal_end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns the end UTF16 character index, plus one, of a group.\n\nThis method goes directly to the internal match object. It does not\ntake group names, and does not have a default.\n\nArguments:\n- group: the integer group number.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "utf_16_start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the start UTF16 character index of a group.\n\nArguments:\n- group: the group name or number. Marked groups defined in the regex are\n numbered starting at 1; group 0 refers to the entire match.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "utf_16_end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the end UTF16 character index, plus one, of a group.\n\nArguments:\n- group: the group name or number. Marked groups defined in the regex are\n numbered starting at 1; group 0 refers to the entire match.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the start grapheme index of a group.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\nArguments:\n- group: the group name or number. Marked groups defined in the regex are\n numbered starting at 1; group 0 refers to the entire match.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the end grapheme index, plus one, of a group.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\nArguments:\n- group: the group name or number. Marked groups defined in the regex are\n numbered starting at 1; group 0 refers to the entire match.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "utf_16_span",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "default",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the UTF16 span matched by the group with the provided identifier, or\na default value if the group did not participate in the match. If no such\ngroup exists for the provided identifier, a `No_Such_Group` is returned.\n\nArguments:\n- group: The integer index or name of that group.\n\n? The Full Match\n The group with index 0 is always the full match of the pattern.\n\n? Named Groups by Index\n If the regex contained named groups, these may also be accessed by\n index based on their position in the pattern.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n    \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get group 3,\nMatch.utf_16_span will return the default value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "span",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "default",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the grapheme span matched by the group with the provided identifier, or\na default value if the group did not participate in the match. If no such group\nexists for the provided identifier, a `No_Such_Group` is returned.\n\nArguments:\n- group: The integer index or name of that group.\n\n? The Full Match\n The group with index 0 is always the full match of the pattern.\n\n? Named Groups by Index\n If the regex contained named groups, these may also be accessed by\n index based on their position in the pattern.\n\n! What is a Character?\n A character is defined as an Extended Grapheme Cluster, see Unicode\n Standard Annex 29. This is the smallest unit that still has semantic\n meaning in most text-processing applications.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n    \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get\ngroup 3, Match.span will return the default value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "default",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the Text matched by the group with the provided identifier, or\na default value if the group did not participate in the match. If no such\ngroup exists for the provided identifier, a `No_Such_Group` is returned.\n\nArguments:\n- group: The integer index or name of that group.\n\n? The Full Match\n The group with index 0 is always the full match of the pattern.\n\n? Named Groups by Index\n If the regex contained named groups, these may also be accessed by\n index based on their position in the pattern.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n    \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get\ngroup 3, Match.text will return the default value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "groups",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "default",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets a vector containing the Text of _all_ of the capturing groups in\nthe pattern, replacing the value of groups that did not participate in\nthe match with `default`. This vector includes group 0, which contains\nthe entire match.\n\nArguments:\n- default: The value to return for a given index when the group at that\n index did not participate in the match.\n\n? The Full Match\n The group with index 0 is always the full match of the pattern.\n\n? Named Groups by Index\n If the regex contained named groups, these may also be accessed by\n index based on their position in the pattern.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n    \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. `groups` will return the\ndefault value for groups that do not participate.\n\n> Example\n Get a vector of the text matched by all of the groups in this match,\n replacing the value for groups that didn't match with \"UNMATCHED\".\n\n     import Standard.Examples\n\n     example_groups =\n         match = Examples.match\n         match.groups default=\"UNMATCHED\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "named_groups",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "default",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Map.Map Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets a map containing the named capturing groups for the pattern,\nreplacing the value for groups that did not participate in the match with\n`default`.\n\nArguments:\n- default: The value to return for a given name when the group at that\n index did not participate in the match.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n    \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. `named_groups` will map\na named group that does not participate to the default value.\n\n> Example\n Get the map of all of the named groups in this match, replacing the\n value for groups that didn't participate in the match with \"UNMATCHED\".\n\n    pattern = Regex.compile \"(.. .. )(?<letters>.+)()??(?<empty>)??\"\n    input = \"aa ab abc a bc bcd\"\n    match = pattern.match input\n    ## match.named_groups.keys.sort == [\"empty\", \"letters\"]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the grapheme span matched by the group with the provided index, or\na default value if the group did not participate in the match.\nIf the identifier is invalid then `if_missing` is returned.\n\nArguments:\n- id: The integer index or name of that group.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Match",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets the grapheme span matched by the group with the provided index, or\na default value if the group did not participate in the match.\nIf the identifier is invalid then Index_Out_Of_Bounds is thrown.\n\nArguments:\n- id: The integer index or name of that group.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Array_Proxy",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Array_Proxy",
        "name": "Array_Proxy",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nA helper type used for creating an array from a length and a callback\nproviding its elements.\n\nIt can be used to create an array from some non-standard underlying storage\nwithout copying. The created proxy is read only and behaves like any `Array`\ntype returned from polyglot calls to other languages. The most common\nuse-case for it is to pass it to `Vector.from_polyglot_array` to create a\nvector backed by such custom storage."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Array_Proxy",
        "name": "Value",
        "arguments": [
            {
                "name": "ignore",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Array_Proxy.Array_Proxy",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array_Proxy",
        "name": "ignore",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array_Proxy.Array_Proxy",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array_Proxy",
        "name": "new",
        "arguments": [
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array_Proxy.Array_Proxy",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreates a new `Array_Proxy` from a length and a callback.\n\nArguments:\n- length: The length of the array to create.\n- at: A function which returns each element of the array.\n\n> Example\n Create a Vector of 10 million elements without allocating any storage.\n\n     Vector.from_polyglot_array (Array_Proxy.new 10000000 (i -> i))",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array_Proxy",
        "name": "from_proxy_object",
        "arguments": [
            {
                "name": "proxy",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array_Proxy.Array_Proxy",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreates a new `Array_Proxy` from an object providing `length` and `at`\nmethods.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Time.Format",
        "documentation": null,
        "reexport": "Standard.Base.Internal.Time"
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Pair",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Pair",
        "name": "Pair",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A pair of elements.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Pair",
        "name": "Value",
        "arguments": [
            {
                "name": "first",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "second",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Pair.Pair",
        "documentation": " A simple pair of elements.\n\nArguments:\n- first: The first element.\n- second: The second element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "new",
        "arguments": [
            {
                "name": "first",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "second",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Pair.Pair",
        "isStatic": true,
        "documentation": " Create a new Pair from two elements.\n\nArguments:\n- first: The first element.\n- second: The second element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the last element of the pair.\n\n> Example\n The following code returns 4.\n\n     Pair.new 2 4 . last",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "fun",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Pair.Pair",
        "isStatic": false,
        "documentation": " Applies the provided function to both elements of the pair.\n\n> Example\n Adding one to two elements of the pair.\n\n (Pair 1 2).map (+1) == (Pair 2 3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the length of the Pair (which is always equal to 2).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " Returns the pair as a Vector.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets an element from the pair at a specified index (0-based).\n\nArguments:\n- index: The location in the pair to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the pair, i.e. -1 will correspond to the last element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets an element from the pair at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.\n\nArguments:\n- index: The location in the pair to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the pair, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "any",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a predicate holds for at least one element of this pair.\n\nArguments:\n- predicate: A function that takes a list element and returns a boolean\n value that says whether that value satisfies the conditions of the\n function.\n\n> Example\n Checking if any element of the list is larger than 3.\n\n     Pair.new 1 5 . any (> 3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a predicate holds for all elements in this pair.\n\nArguments:\n- predicate: A function that takes a list element and returns a boolean\n value that says whether that value satisfies the conditions of the\n function.\n\n> Example\n Check if all elements in the pair are less than zero.\n\n     Pair.new -1 3 . all (< 0)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "elem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether this pair contains a given value as an element.\n\nArguments:\n- elem: The item to see if it exists in the pair.\n\n> Example\n Checking if the vector contains the number 72.\n\n     Pair.new 1 42 . contains 72",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Not_Found.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the first element of the pair that satisfies the predicate or\nif no elements satisfy the predicate, returns `if_missing`.\n\nArguments:\n- predicate: A function that takes a list element and returns a boolean\n value that says whether that value satisfies the conditions of the\n function.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the pair.\n- if_missing: Value returned if no element satisfies the predicate.\n\n> Example\n Finding a first element of the pair that is larger than 3.\n\n     Pair.new 1 6 .find (> 3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "element",
                "reprType": "Standard.Base.Any.Any | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the index of an element in the pair.\nReturns Nothing if the element is not found.\n\nArguments:\n- element: The element to search for or a predicate function to test for\n each element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the pair.\n\n> Example\n Find the index of an element in a pair.\n\n     Pair.new 1 2 . index_of 2 == 1\n     Pair.new 2 2 . index_of 2 == 0",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "last_index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "element",
                "reprType": "Standard.Base.Any.Any | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the last index of an element in the pair.\nReturns Nothing if the element is not found.\n\nArguments:\n- element: The element to search for or a predicate function to test for\n each element.\n- start: The index to start searching backwards from. If the index is\n negative, it is counted from the end of the pair.\n\n> Example\n Find the last index of an element in a pair.\n\n     Pair.new 2 2 . last_index_of 2 == 1",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the pair, by iteratively applying the\npassed function with next elements of the pair.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking two elements and combining them.\n\n> Example\n Compute the sum of all of the elements in a pair.\n\n     Pair.new 10 20 . fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "reduce",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the pair using a binary operation.\n\nArguments:\n- function: A binary operation that takes two items and combines them.\n\n> Example\n Compute the sum of all the elements in a Pair.\n\n     Pair.new 10 20 . reduce (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "reverse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Pair.Pair",
        "isStatic": false,
        "documentation": " GROUP Selections\nReverses the pair, returning a pair with the same elements, but in\nthe opposite order.\n\n> Example\n Reverse a two-element vector.\n\n     Pair.new 1 2 . reverse",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the pair.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\nArguments:\n- function: A function to apply to each element of the pair.\n\n> Example\n Print each element in the vector to standard output.\n\n     Pair.new 1 2 . each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Pair.Pair",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair.Pair",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Pair.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Pair",
        "name": "check_start_valid",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "max",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "3",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Pair",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Ordering.Natural_Order",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering.Natural_Order",
        "name": "compare",
        "arguments": [
            {
                "name": "text1",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "text2",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Sensitive",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Natural_Order",
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCompares two text values according to the natural dictionary ordering.\n\n> Example\n Compare two texts according to the natural dictionary ordering.\n\n     Natural_Order.compare \"a2\" \"a100\" == Ordering.Less\n\n> Example\n Sort a vector of texts according to the natural dictionary ordering.\n\n     [\"a2\", \"a1\", \"a100\", \"a001\", \"a0001\"].sort by=Natural_Order.compare . should_equal [\"a0001\", \"a001\", \"a1\", \"a2\", \"a100\"]",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Map",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Map",
        "name": "Map",
        "params": [
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A key-value store. It is possible to use any type as keys and values and mix them in\none Map. Keys are checked for equality based on their hash code and `==` operator, which\nis both an internal part of Enso. Enso is capable of computing a hash code, and checking\nfor equality any objects that can appear in Enso - primitives, Atoms, values coming from\ndifferent languages, etc.\n\nFor keys that are not reflexive, like `Number.nan`,\n[Same Value equality specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality)\nis used. This means that both `Number.nan` and types with comparators that violate\nreflexivity (e.g. their `compare` method always returns `Nothing`) can be used as keys\nin the Map.\n\nA single key-value pair is called an *entry*.\n\nIt is possible to pass a Map created in Enso to foreign functions, where it will be treated\nas appropriate map structures - in Python that is a dictionary, and in JavaScript, it is\na `Map`. And likewise, it is possible to pass a foreign map into Enso, where it will be\ntreated as a Map.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "empty",
        "arguments": [],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Map.Map",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns an empty map.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "singleton",
        "arguments": [
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Map.Map",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns a single-element map with the given key and value.\nA Call to `Map.singleton key value` is the same as a call to\n`Map.empty.insert key value`.\n\nArguments:\n- key: The key to to use for `value` in the map.\n- value: The value to store under 'key' in the map.\n\n> Example\n Create a single element map storing the key \"my_key\" and the value 2.\n\n     import Standard.Base.Data.Map.Map\n\n     example_singleton = Map.singleton \"my_key\" 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "from_keys_and_values",
        "arguments": [
            {
                "name": "keys",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "values",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_on_duplicates",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS dictionary, lookup table\nGROUP Constants\nBuilds a map from two Vectors. The first vector contains the keys, and\nthe second vector contains the values. The two vectors must be of the\nsame length.\n\nArguments:\n- keys: A vector of keys.\n- values: A vector of values.\n- error_on_duplicates: A flag which specifies if duplicate keys on the\n input vector should result in an error. By default, set to `True`,\n meaning that if two entries in the vector share the same key, an\n `Illegal_Argument` error is raised. If set to `False`, the last entry\n with a given key will be kept.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "from_vector",
        "arguments": [
            {
                "name": "vec",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_on_duplicates",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS dictionary, lookup table\nGROUP Constants\nBuilds a map from a vector of key-value pairs, with each key-value pair\nrepresented as a 2 element vector.\n\nArguments:\n- vec: A vector of key-value pairs (2 element vectors).\n- error_on_duplicates: A flag which specifies if duplicate keys on the\n input vector should result in an error. By default, set to `True`,\n meaning that if two entries in the vector share the same key, an\n `Illegal_Argument` error is raised. If set to `False`, the last entry\n with a given key will be kept.\n\n> Example\n Building a map containing two key-value pairs.\n\n     import Standard.Base.Data.Map.Map\n\n     example_from_vector = Map.from_vector [[\"A\", 1], [\"B\", 2]]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nReturns True iff the Map is empty, i.e., does not have any entries.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nReturns True iff the Map is not empty, i.e., has at least one entry.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "size",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the number of entries in this map.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "insert",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Map.Map",
        "isStatic": false,
        "documentation": " GROUP Calculations\nInserts a key-value mapping into this map, overriding any existing\ninstance of `key` with the new `value`.\n\nNote that since the return type is also a `Map`, multiple `insert`\ncalls can be chained, e.g., `map.insert \"A\" 1 . insert \"B\" 2`.\n\nDue to the limitation of the current implementation, inserts with a\nkey that is already contained in the map, or insert on a map instance that\nis re-used in other computations, have a linear time complexity.\nFor all the other cases, the time complexity of this method is constant.\n\nArguments:\n- key: The key to insert the value for.\n- value: The value to associate with the `key`.\n\n> Example\n Insert the value \"seven\" into the map for the key 7.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_insert = Examples.map.insert 7 \"seven\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "remove",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nRemoves an entry specified by the given key from this map, and\nreturns a new map without this entry. Throw `No_Such_Key.Error`\nif `key` is not present.\n\nArguments:\n- key: The key to look up in the map.\n\n> Example\n Remove key \"A\" from a map\n\n     import Standard.Data.Map.Map\n\n     Examples.map.remove \"A\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets the value associated with `key` in this map, or throws a\n`No_Such_Key.Error` if `key` is not present.\n\nThis method has a constant time complexity.\n\nArguments:\n- key: The key to look up in the map.\n\n> Example\n Looks up the value for the key \"A\" in a map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_at = Examples.map.at \"A\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the value associated with `key` in this map, or returns\n`if_missing` if it isn't present.\n\nThis method has a constant time complexity.\n\nArguments:\n- key: The key to look up in the map.\n- if_missing: The value to use if the key isn't present.\n\n> Example\n Get the value for the key 2 in a map or instead return \"zero\" if it\n isn't present.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_get = Examples.map.get 2 \"zero\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "contains_key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nReturns True iff the Map contains the given `key`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "keys",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns an unsorted vector of all the keys in this Map.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "values",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns an unsorted vector of all the values in this Map.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Map.Map",
        "isStatic": false,
        "documentation": " Maps a function over each value in this map.\n\nArguments:\n- function: The function to apply to each value in the map, taking a\n value and returning a value.\n\n> Example\n Append \"_word\" to all values in the map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_map = Examples.map.map (+ \"_word\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "map_with_key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Map.Map",
        "isStatic": false,
        "documentation": " Maps a function over each key-value pair in the map, transforming the\nvalue.\n\nArguments:\n- function: The function to apply to each key and value in the map,\n taking a key and a value and returning a value.\n\n> Example\n Prepend the keys to the values in the map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_map_with_key =\n        Examples.map.map_with_key (k -> v -> k.to_text + \"-\" + v)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "map_keys",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Map.Map",
        "isStatic": false,
        "documentation": " Maps a function over each key in this map.\n\nArguments:\n- function: The function to apply to each key in the map, taking a key\n and returning a key.\n\n> Example\n Doubling all keys in the map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_map_keys = Examples.map.map_keys *2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "transform",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Map.Map",
        "isStatic": false,
        "documentation": " Transforms the map's keys and values to create a new map.\n\nArguments:\n- function: The function used to transform the map, taking a key and a\n value and returning a pair of `[key, value]`.\n\n! Error Conditions\n - If multiple map entries end up with duplicate keys after the\n   transformation, an `Illegal_Argument.Error` is thrown.\n\n> Example\n Turn all keys into `Text` and append \"_word\" to the values in the map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_transform =\n        Examples.map.transform (k -> v -> [k.to_text, v + \"_word\"])",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines the values in the map.\n\nArguments:\n- init: The initial value for the fold.\n- function: A binary function to apply to pairs of values in the map.\n\n> Example\n Find the length of the longest word in the map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_fold = Examples.map.fold 0 (l -> r -> l.max r.length)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "fold_with_key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines the key-value pairs in the map.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking the left value, the current key, and the\n current value, and combining them to yield a single value.\n\n> Example\n Glue the values in the map together with the keys.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_fold_with_key =\n        Examples.map.fold_with_key \"\" (l -> k -> v -> l + k.to_text + v)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each value in the map.\n\nArguments:\n- function: The function to apply to each value in the map, taking a\n value and returning anything.\n\nThis method does not return the results, so is only useful for performing\ncomputations with side-effects.\n\n> Example\n Printing each value in the map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_each = Examples.map.each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "each_with_key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each key-value pair in the map.\n\nArguments:\n- function: The function to apply to each key-value pair in the map,\n taking a key and a value and returning anything.\n\nThis method does not return the results, so is only useful for performing\ncomputations with side-effects.\n\n> Example\n Printing each key and value in the map.\n\n     import Standard.Base.Data.Map.Map\n     import Standard.Examples\n\n     example_each_with_key = Examples.map.each_with_key k->v->\n        IO.println k\n        IO.println v",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Conversions\nReturns an unsorted vector of key-value pairs (nested 2 element vectors).\n`Map.from_vector` method is an inverse method, so the following expression\nis true for all maps: `Map.from_vector map.to_vector == map`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns a text representation of this Map.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Map",
        "name": "get_builtin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.HTTP_Version",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.HTTP_Version",
        "name": "HTTP_Version",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Version",
        "name": "HTTP_1_1",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Version.HTTP_Version",
        "documentation": " Use HTTP version 1.1.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Version",
        "name": "HTTP_2",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Version.HTTP_Version",
        "documentation": " Use HTTP version 2.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "Problem_Behavior",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Specifies how to handle problems.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "Ignore",
        "arguments": [],
        "returnType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "documentation": " Ignore the problem and attempt to complete the operation",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "Report_Warning",
        "arguments": [],
        "returnType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "documentation": " Report the problem as a warning and attempt to complete the operation",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "Report_Error",
        "arguments": [],
        "returnType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "documentation": " Report the problem as a dataflow error and abort the operation",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "attach_problem_after",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decorated_value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nAttaches a problem to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problem\nattached as a warning.\nIf it is set to Report_Error, the problem is returned in the form of a\ndataflow error. If the value already contained any dataflow error, that\nerror takes precedence.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "attach_problem_before",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decorated_value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nAttaches a problem to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problem\nattached as a warning.\nIf it is set to Report_Error, the problem is returned in the form of\na dataflow error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "attach_problems_before",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problems",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decorated_value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nAttaches problems to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problems\nattached as warnings.\nIf it is set to Report_Error, the first problem is returned in the form\nof a dataflow error. The problem takes precedence over any errors that\nmay have been contained in the value - in this case the `decorated_value`\nis not computed at all.\n\n> Example\n Perform pre-flight checks and then compute the actual result only if needed.\n\n     problems = preflight_checks\n     problem_behavior.attach_problems_before problems <|\n         expensive_computation",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "attach_problems_after",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "decorated_value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problems",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nAttaches problems to the given value according to the expected problem\nbehavior.\n\nIf the problem behavior is set to Ignore, the value is returned as-is.\nIf it is set to Report_Warning, the value is returned with the problems\nattached as warnings.\nIf it is set to Report_Error, the first problem is returned in the form\nof a dataflow error. If the value already contained any dataflow error,\nthat error takes precedence.\n\n> Example\n First compute a result and then, only if the computation has succeeded,\n perform any postprocessing checks which may raise warnings/errors.\n\n     result = compute_result\n     problem_behavior.attach_problems_after result <|\n         perform_post_process_checks_and_return_problems",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "handle_errors",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "result",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "fallback",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nA helper method that will handle any errors contained within the result\naccording to the current problem behavior settings. If the `result` does\nnot contain an error, it is returned as-is. Otherwise, if the problem\nbehavior is `Report_Error`, the error will be passed as-is. If it is\n`Report_Warning`, the error is turned into a warning, and the fallback\nvalue is returned with that error attached to it as a warning. If it is\n`Ignore`, the fallback value is returned and the error is discarded.\n\nThe `error_type` parameter can be overridden to catch only some types of\nerrors. By default `Any` error is caught.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "escalate_warnings",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nChecks any warnings reported by the `action` and reports them according\nto this problem behavior - they may be kept as-is, ignored or escalated\nto errors.\n\nIf the `action` itself yields a dataflow error, that error is passed\nas-is, regardless of the problem behavior settings.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Problem_Behavior",
        "name": "to_number",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns a mapping of Problem_Behavior constructors to an integer.\nUsed for sending the number to Java, rather than sending the atom.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "documentation": null,
        "reexport": "Standard.Base.Internal.Time.Format"
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Text_Representation",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Short_Form",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Text_Representation",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Long_Form",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Text_Representation",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Numeric_Representation",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Value",
        "arguments": [
            {
                "name": "digits",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "digits",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Two_Digit_Year_Representation",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Value",
        "arguments": [
            {
                "name": "max_year",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "max_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Common_Nodes",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Literal",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Common_Nodes",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Optional_Section",
        "arguments": [
            {
                "name": "inner_nodes",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Common_Nodes",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Common_Nodes",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "inner_nodes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Common_Nodes",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Standard_Date_Patterns",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Year",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Quarter",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Month",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Text_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Short_Form",
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Long_Form"
                ]
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Day_Of_Month",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Day_Of_Week",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Text_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Short_Form",
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Long_Form"
                ]
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "representation",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "ISO_Week_Year_Patterns",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Week_Based_Year",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Week_Of_Year",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Day_Of_Week",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Text_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Short_Form",
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Long_Form"
                ]
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "representation",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation | Standard.Base.Internal.Time.Format.Parser.Two_Digit_Year_Representation",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Time_Patterns",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Hour",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "is_24h",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "AM_PM",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Minute",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Second",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Fraction_Of_Second",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "representation",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Time_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Numeric_Representation",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "is_24h",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Time_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Time_Zone_Patterns",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Time_Zone_Name",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Text_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Short_Form",
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Long_Form"
                ]
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Time_Zone_ID",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Time_Zone_Offset",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "zero",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Time_Zone_Localized_Offset",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Text_Representation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Short_Form",
                    "Standard.Base.Internal.Time.Format.Parser.Text_Representation.Long_Form"
                ]
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "representation",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Text_Representation",
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Text_Representation",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "zero",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Parser_Mode",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Simple",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Parser_Mode",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "ISO_Week_Year",
        "arguments": [],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Parser_Mode",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "pattern_format_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser_Mode",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser_Mode",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Parser",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "Instance",
        "arguments": [
            {
                "name": "tokens",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Tokenizer.Format_Token | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "position",
                "reprType": "Standard.Base.Runtime.Ref.Ref Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "mode",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser_Mode",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Internal.Time.Format.Parser.Parser_Mode.Simple",
                    "Standard.Base.Internal.Time.Format.Parser.Parser_Mode.ISO_Week_Year"
                ]
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "tokens",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Tokenizer.Format_Token | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Tokenizer.Format_Token | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "position",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Ref.Ref Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Runtime.Ref.Ref Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "mode",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser_Mode",
        "returnType": "Standard.Base.Internal.Time.Format.Parser.Parser_Mode",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "new",
        "arguments": [
            {
                "name": "tokens",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "mode",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "run",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "parse_common_token",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "token",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "fail_invalid_pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "character",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "extra_message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "consume_token",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "consume_curly_parameter_if_exists",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nChecks if the next token is a curly brace parameter.\nIf it is, it is consumed and its value (as Text) is returned.\nOtherwise, returns Nothing and does not move the cursor.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "resolve_year_representation",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "parse_simple_date_pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "character",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "parse_iso_week_year_pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "character",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "parse_time_or_timezone_pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Parser.Parser",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "character",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "default_max_year",
        "arguments": [],
        "selfType": "Standard.Base.Internal.Time.Format.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "parse_simple_date_pattern",
        "arguments": [
            {
                "name": "tokens",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Parser",
        "name": "parse_iso_week_year_pattern",
        "arguments": [
            {
                "name": "tokens",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Parser",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.IO",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.IO",
        "name": "print_err",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.IO",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nPrints the provided message to standard error.\n\nArguments:\n- message: The message to print. It will have to_text called on it to\n generate a textual representation that is then printed.\n\n> Example\n Print the message \"Oh no!\" to standard error.\n\n     IO.print_err \"Oh no!\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.IO",
        "name": "println",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.IO",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nPrints the provided message to standard output.\n\nArguments:\n- message: The message to print. It will have to_text called on it to\n generate a textual representation that is then printed.\n\n> Example\n Print the message \"Oh yes!\" to standard output.\n\n     IO.println \"Oh yes!\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.IO",
        "name": "readln",
        "arguments": [],
        "selfType": "Standard.Base.IO",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReads a line from standard input.\n\n> Example\n Read a line from standard input.\n\n     IO.readln",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Filter_Condition",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Filter_Condition",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Less",
        "arguments": [
            {
                "name": "than",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is less than a value (or another column, in case of Table operations)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Equal_Or_Less",
        "arguments": [
            {
                "name": "than",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is less than or equal to a value (or another column, in case of Table operations)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Equal",
        "arguments": [
            {
                "name": "to",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is equal to a value (or another column, in case of Table operations)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Equal_Or_Greater",
        "arguments": [
            {
                "name": "than",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is greater than or equal to a value (or another column, in case of Table operations)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Greater",
        "arguments": [
            {
                "name": "than",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is greater than a value (or another column, in case of Table operations)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Not_Equal",
        "arguments": [
            {
                "name": "to",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is not equal to a value (or another column, in case of Table operations)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Between",
        "arguments": [
            {
                "name": "lower",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "upper",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is between (inclusive) two values (or columns, in case of Table operations)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Starts_With",
        "arguments": [
            {
                "name": "prefix",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Default",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Does the value start with a prefix (Text only)?\n\n? Table Operations\n It accepts a Text value to check if the value contains it. In case of\n Table operations, it can accept another column - then the corresponding\n values from the source column and the provided column are checked.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Ends_With",
        "arguments": [
            {
                "name": "suffix",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Default",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Does the value end with a suffix (Text only)?\n\n? Table Operations\n It accepts a Text value to check if the value contains it. In case of\n Table operations, it can accept another column - then the corresponding\n values from the source column and the provided column are checked.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Contains",
        "arguments": [
            {
                "name": "substring",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Default",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Does the value contain the substring (Text only)?\n\n? Table Operations\n It accepts a Text value to check if the value contains it. In case of\n Table operations, it can accept another column - then the corresponding\n values from the source column and the provided column are checked.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Not_Contains",
        "arguments": [
            {
                "name": "substring",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Case_Sensitivity.Default",
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is the substring not present in the value (Text only)?\n\n? Table Operations\n It accepts a Text value to check if the value contains it. In case of\n Table operations, it can accept another column - then the corresponding\n values from the source column and the provided column are checked.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Is_Nothing",
        "arguments": [],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is equal to Nothing?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Not_Nothing",
        "arguments": [],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is not equal to Nothing?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Is_True",
        "arguments": [],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is the value equal to True (Boolean only)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Is_False",
        "arguments": [],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is the value equal to False (Boolean only)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Is_Empty",
        "arguments": [],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is equal to \"\" or Nothing (Text only)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Not_Empty",
        "arguments": [],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is not equal to \"\" and Nothing (Text only)?",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Like",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Does the value match the SQL pattern (Text only)?\n\nThe pattern is interpreted according to the standard SQL convention:\n- the `%` character matches any sequence of characters,\n- the `_` character matches any single character,\n- any other character is matched literally.\n\n? Table Operations\n It accepts a Text value to check if the value contains it. In case of\n Table operations, it can accept another column - then the corresponding\n values from the source column and the provided column are checked.\n\n! Known Limitations.\n The Truffle regex engine does not transparently handle normalization.\n Due to this limitation, Unicode normalization has been disabled for\n this function, so beware that some equivalent graphemes like 'ś' and\n 's\\u0301' will not be matched.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Not_Like",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Does the value not match the SQL pattern (Text only)?\n\nThe pattern is interpreted according to the standard SQL convention:\n- the `%` character matches any sequence of characters,\n- the `_` character matches any single character,\n- any other character is matched literally.\n\n? Table Operations\n It accepts a Text value to check if the value contains it. In case of\n Table operations, it can accept another column - then the corresponding\n values from the source column and the provided column are checked.\n\n! Known Limitations.\n The Truffle regex engine does not transparently handle normalization.\n Due to this limitation, Unicode normalization has been disabled for\n this function, so beware that some equivalent graphemes like 'ś' and\n 's\\u0301' will not be matched.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Is_In",
        "arguments": [
            {
                "name": "values",
                "reprType": "Standard.Base.Data.Vector.Vector | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is the value contained in `values`?\n\n? Table Operations\n It accepts a `Vector` of values. In case of Table operations, it can\n also accept another column - then it acts as if `column.to_vector` was\n passed - i.e. every element of the original table's column is checked\n if it is contained in the provided column. The columns can have\n different lengths.\n\n Using Columns can be particularly useful for Database operations, as\n uploading a temporary table and using its column for an `Is_In` check\n will likely be faster than using the vector directly.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "Not_In",
        "arguments": [
            {
                "name": "values",
                "reprType": "Standard.Base.Data.Vector.Vector | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "documentation": " Is the value not contained in `values`?\n\n? Table Operations\n It accepts a `Vector` of values. In case of Table operations, it can\n also accept another column - then it acts as if `column.to_vector` was\n passed - i.e. every element of the original table's column is checked\n if it is contained in the provided column. The columns can have\n different lengths.\n\n Using Columns can be particularly useful for Database operations, as\n uploading a temporary table and using its column for an `Not_In` check\n will likely be faster than using the vector directly.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "than",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "lower",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "upper",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "prefix",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "case_sensitivity",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "returnType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "suffix",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "substring",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "values",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector | Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Vector.Vector | Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "to_predicate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " Converts a `Filter_Condition` condition into a predicate taking an\nelement and returning a value indicating whether the element should be\naccepted by the filter.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Filter_Condition.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "default_widget",
        "arguments": [
            {
                "name": "include_comparable",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "include_text",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "include_boolean",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "include_nullable",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Filter_Condition.Filter_Condition",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a Single_Choice Widget for delimiters.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "sql_like_to_regex",
        "arguments": [
            {
                "name": "sql_pattern",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Filter_Condition",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "unify_condition_or_predicate",
        "arguments": [
            {
                "name": "condition_or_predicate",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Filter_Condition",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "unify_condition_predicate_or_element",
        "arguments": [
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Filter_Condition",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Filter_Condition",
        "name": "handle_constructor_missing_arguments",
        "arguments": [
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "continuation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Filter_Condition",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nChecks if the given `function` is actually a `Filter_Condition` constructor\nthat is just missing arguments. If so, it will report a more friendly error.\nOtherwise it will run the `continuation`.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.Request",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "Request",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "Value",
        "arguments": [
            {
                "name": "method",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "body",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "documentation": " PRIVATE\n\nA type representing an HTTP request.\n\nArguments:\n- method: The HTTP method represented by the request.\n- uri: The URI for the request.\n- headers: A vector containing headers for the request.\n- body: The body of the request.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "method",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "uri",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "headers",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "body",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "new",
        "arguments": [
            {
                "name": "method",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"
                ]
            },
            {
                "name": "url",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "body",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Request_Body.Empty",
                "tagValues": [
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Text",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Json",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": true,
        "documentation": " Create new HTTP request.\n\nArguments:\n- method: The HTTP method represented by the request.\n- url: The address for the request.\n- headers: A vector containing headers for the request.\n- body: The body of the request.\n\n> Example\n Create a new post request with no headers and no body.\n\n     import Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.URI.URI\n\n     example_new = Request.new Method.Post (URI.parse \"http://example.com\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "options",
        "arguments": [
            {
                "name": "url",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": true,
        "documentation": " Create an Options request.\n\nArguments:\n\n> Example\n Create a new options request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.URI.URI\n\n     example_options = Request.options (URI.parse \"http://example.com\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "get",
        "arguments": [
            {
                "name": "url",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": true,
        "documentation": " Create a Get request.\n\nArguments:\n- url: The address for the request.\n- headers: A vector containing headers for the request.\n\n> Example\n Create a new get request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.URI.URI\n\n     example_get = Request.get (URI.parse \"http://example.com\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "head",
        "arguments": [
            {
                "name": "url",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": true,
        "documentation": " Create a Head request.\n\nArguments:\n- url: The address for the request.\n- headers: A vector containing headers for the request.\n\n> Example\n Create a new head request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.URI.URI\n\n     example_head = Request.head (URI.parse \"http://example.com\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "post",
        "arguments": [
            {
                "name": "url",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "body",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Text",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Json",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": true,
        "documentation": " Create a Post request.\n\nArguments:\n- url: The address for the request.\n- body: The body for the request.\n- headers: A vector containing headers for the request.\n\n> Example\n Create a new post request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.Request_Body.Request_Body\n     import Standard.Base.Network.URI.URI\n\n     example_post = Request.post (URI.parse \"http://example.com\") Request_Body.Empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "put",
        "arguments": [
            {
                "name": "url",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "body",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Text",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Json",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": true,
        "documentation": " Create a Put request.\n\nArguments:\n- url: The address for the request.\n- body: The body for the request.\n- headers: A vector containing headers for the request.\n\n> Example\n Create a new put request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.HTTP.Request_Body.Request_Body\n     import Standard.Base.Network.URI.URI\n\n     example_put = Request.put (URI.parse \"http://example.com\") Request_Body.Empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "delete",
        "arguments": [
            {
                "name": "url",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": true,
        "documentation": " Create a Delete request.\n\nArguments:\n- url: The address for the request.\n- headers: A vector containing headers for the request.\n\n> Example\n Create a new delete request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.URI.URI\n\n     example_delete = Request.delete (URI.parse \"http://example.com\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "with_header",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "val",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": false,
        "documentation": " Sets the header for the request.\n\nArguments:\n- key: The name for the header in this request.\n- val: The value for the header in this request.\n\n> Example\n Create a request and add a new header to it.\n\n     import Standard.Base.Network.HTTP.Request.Request\n\n     example_with_header = Request.delete.with_header \"Foo\" \"bar\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "with_headers",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "new_headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": false,
        "documentation": " Sets the headers in the request.\n\nArguments:\n- new_headers: A vector of headers to put in the request. If `self` has\n any headers they will be replaced with new_headers.\n\n> Example\n Create a request and unset all the headers.\n\n     import Standard.Base.Network.HTTP.Request.Request\n\n     example_with_headers = Request.delete.with_headers []",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "with_body",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "new_body",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Text",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Json",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": false,
        "documentation": " Set the body for the request.\n\nArguments:\n- new_body: The body to insert into the request.\n\n> Example\n  Unsetting the body in a post request.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.HTTP.Request_Body.Request_Body\n     import Standard.Base.Network.URI.URI\n\n     example_with_body =\n         Request.post (URI.parse \"http://example.com\") Request_Body.Empty |> _.with_body Request_Body.Empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "with_json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "json_body",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": false,
        "documentation": " Set the body text in the request encoded as \"application/json\".\n\nArguments:\n- json_body: The body to add to the request. It must be textual JSON.\n\n> Example\n Setting the body in a post request to some JSON.\n\n    import Standard.Base.Network.HTTP.Request.Request\n    import Standard.Base.Network.HTTP.Request_Body.Request_Body\n    import Standard.Base.Network.URI.URI\n\n    example_with_json =\n        Request.post (URI.parse \"http://example.com\") Request_Body.Empty |> _.with_json '{ \"a\": \"b\" }'",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request",
        "name": "with_form",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "parts",
                "reprType": "Standard.Base.Data.Vector.Vector | Standard.Base.Data.Map.Map",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request.Request",
        "returnType": "Standard.Base.Network.HTTP.Request.Request",
        "isStatic": false,
        "documentation": " Set body as vector of parts encoded as \"application/x-www-form-urlencoded\".\n\nArguments:\n- parts: The parts of the form, or a form itself.\n\n> Example\n Create a delete request with an empty form.\n\n     import Standard.Base.Network.HTTP.Request.Request\n     import Standard.Base.Network.URI.URI\n\n     example_delete =\n        Request.delete (URI.parse \"http://example.com\") . with_form []",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Time",
        "documentation": null,
        "reexport": "Standard.Base.Internal"
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "Case_Sensitivity",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "Default",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "documentation": " Use the default case-sensitivity for the environment.\nFor in-memory operations, it will be case sensitive.\nFor database operations, it will follow the collation default.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "Sensitive",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "documentation": " Represents a case-sensitive comparison mode.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "Insensitive",
        "arguments": [
            {
                "name": "locale",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "documentation": " Represents a case-insensitive comparison mode.\n\nArguments:\n- locale: The locale used for the comparison.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "locale",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert Case_Sensitivity to a friendly string.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "folding_strategy",
        "arguments": [
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "returnType": "Standard.Base.Data.Text.Case_Sensitivity.TextFoldingStrategy",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a Java `TextFoldingStrategy` from the case sensitivity setting.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "is_case_insensitive_in_memory",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE\nIs case insensitive when in memory. This requires that, if\ncase-insensitive, that the locale be the default locale, and if it's not,\nthrows Illegal_Argument.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "to_explicit_sensitivity_in_memory",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "returnType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to either Sensitive or Insensitive, for the in-memory case.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Case_Sensitivity",
        "name": "disallow_non_default_locale",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nThrows an error if self is Insensitive with a non-default locale",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.Environment",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Environment",
        "name": "get",
        "arguments": [
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Environment",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " ALIAS Read Environment\n\nReturns a value of a specified environment variable or Nothing if such\nvariable is not defined.\n\nArguments:\n- key: The name of the environment variable to look up.\n- if_missing: The default fallback value.\n\n> Example\n Look up the value of the `PATH` environment variable.\n\n     import Standard.Base.System.Environment\n\n     example_get = Environment.get \"PATH\"",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Ordering.Vector_Lexicographic_Order",
        "documentation": null,
        "reexport": "Standard.Base.Data.Ordering"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering.Vector_Lexicographic_Order",
        "name": "compare",
        "arguments": [
            {
                "name": "vector1",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "vector2",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "element_comparator",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Data.Ordering.Ordering",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "<internal-624> <internal-625> -> ((compare) Ordering <internal-624> <internal-625>)",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Vector_Lexicographic_Order",
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCompares two Vectors according to the lexicographic ordering.\n\nArguments:\n- vector1: The first vector to compare.\n- vector2: The second vector to compare.\n- element_comparator (optional): A custom compare function defining the order\n between particular elements. Uses the default ordering by default.\n\nReturns whether `vector1` is less, equal or greater than `vector2` according\nto the lexicographic ordering. The ordering is defined as follows:\n- If `vector1` is empty and `vector2` is not, than `Less` is returned;\n similarly if `vector1` is non-empty, but `vector2` is empty, `Greater` is\n returned.\n- If the first element of `vector1` is less or greater than the first element\n of `vector2` than this is specifies the ordering between the vectors. If\n the first element is equal, the tails of both vectors are compared\n according to the same algorithm.\n\n> Example\n Compare two vectors lexicographically.\n\n     Vector_Lexicographic_Order.compare [1, 2, 3] [1, 3, 0] == Ordering.Less\n     Vector_Lexicographic_Order.compare [1, 2, 3] [1, 2] == Ordering.Greater\n     Vector_Lexicographic_Order.compare [] [1] == Ordering.Less\n     Vector_Lexicographic_Order.compare [1] [1] == Ordering.Equal",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.List",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.List",
        "name": "List",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Cons lists.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.List",
        "name": "Nil",
        "arguments": [],
        "returnType": "Standard.Base.Data.List.List",
        "documentation": " The type that indicates the end of a cons list.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.List",
        "name": "Cons",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "xs",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.List.List",
        "documentation": " A cons cell for a cons list.\n\nArguments:\n- x: The element at this position in the list.\n- xs: The rest of the list.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "x",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "xs",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " GROUP Metadata\nComputes the number of elements in the list.\n\n! Computational Complexity\n\n Note that this is a linear operation requiring O(n) time.\n\n> Example\n Get the length of a two item list.\n\n     import Standard.Examples\n\n     example_length = Examples.list.length",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets an element from the list at a specified index (0-based).\n\n! Computational Complexity\n\n Note that this is a linear operation requiring O(n) time.\n\nArguments:\n- index: The location in the List to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the final item, i.e. -1 will correspond to the last element.\n\n> Example\n Get the second item by index.\n\n     import Standard.Examples\n\n     example_length = Examples.list.length",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets an element from the list at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.\n\n! Computational Complexity\n\n Note that this is a linear operation requiring O(n) time.\n\nArguments:\n- index: The location in the List to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the final item, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the list, by iteratively applying the\npassed function with next elements of the list.\n\nArguments:\n- init: The initial value for the fold.\n- f: The binary function used to combine elements of the list.\n\nIn general, the result of\n   (Cons l0 <| Cons l1 <| ... <| Cons ln) . fold init f\nis the same as\n   f (...(f (f init l0) l1)...) ln\n\n> Example\n In the following example, we'll compute the sum of all elements of a\n list.\n\n     import Standard.Examples\n\n     example_fold = Examples.list.fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "reduce",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_empty",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.((Error) Empty_Error).throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of a non-empty list using a binary operation.\nIf the list is empty, it returns `if_empty`.\n\nArguments:\n- function: A binary operation that takes two items and combines them.\n- if_empty: Value returned if the list is empty.\n\n> Example\n Compute the sum of all the elements in a list.\n\n     import Standard.Examples\n\n     example_fold = Examples.list.reduce (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "any",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether any element of the list matches the given condition.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Check if any element of the list is larger than 5.\n\n     import Standard.Examples\n\n     example_any = Examples.list.any (Filter_Condition.Greater than=5)\n\n> Example\n Check if any element of the list is even.\n\n     import Standard.Examples\n\n     example_any = Examples.list.any (x-> x%2 == 0)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a condition holds for all elements in this list.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Check if all elements in the list are greater than zero.\n\n     import Standard.Examples\n\n     example_all = Examples.list.all (Filter_Condition.Greater than=0)\n\n> Example\n Check if all elements in the list are even.\n\n     import Standard.Examples\n\n     example_all = Examples.list.all (x-> x%2 == 0)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "elem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether this list contains a given value as an element.\n\nArguments:\n- elem: The element to check if it is in the list.\n\n> Example\n Checking if the list contains the number 3.\n\n     import Standard.Examples\n\n     example_contains = Examples.list.contains 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this list is empty.\n\n> Example\n Checking for emptiness.\n\n     import Standard.Examples\n\n     example_empty = Examples.list.is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the list is not empty.\n\n> Example\n Checking for emptiness.\n\n     import Standard.Examples\n\n     example_not_empty = Examples.list.not_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "filter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "filter",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.List.List Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nSelects all elements of this list which satisfy a condition.\n\nArguments:\n- filter: The filter to apply to the list. It can either be an instance\n of `Filter_Condition` or a predicate taking a value and returning a\n boolean value indicating whether the corresponding element should be\n kept or not.\n\n> Example\n Selecting all elements that are less than 3.\n\n     import Standard.Examples\n\n     example_filter = Examples.list.filter (< 3)\n     example_filter = Examples.list.filter (Filter_Condition.Less than=3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "partition",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Pair.Pair (Standard.Base.Data.List.List Standard.Base.Any.Any) (Standard.Base.Data.List.List Standard.Base.Any.Any)",
        "isStatic": false,
        "documentation": " GROUP Selections\nPartitions the list into lists of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the list of elements satisfying\nthe predicate and the `second` element is a list of elements which did\nnot satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Splitting a list into even and odd elements.\n\n     (Cons 1 (Cons 2 (Cons 3 Nil))).partition (x -> x % 2 == 0) == (Pair (Cons 2 Nil) (Cons 1 (Cons 3 Nil)))",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.List.List",
        "isStatic": false,
        "documentation": " Applies a function to each element of the list, returning the list of\nresults.\n\nArguments:\n- f: The function to apply to each element of the list.\n\n> Example\n Add `1` to each element of the list:\n\n     import Standard.Examples\n\n     example_map = Examples.list.map +1",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the list.\n\nArguments:\n- f: The function to apply to each element of the list.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\n> Example\n Print each of the list elements to the standard output.\n\n     import Standard.Examples\n\n     example_each = Examples.list.each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "reverse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.List.List",
        "isStatic": false,
        "documentation": " GROUP Selections\nReverses the list, returning a list with the same elements, but in the\nopposite order.\n\n> Example\n Reversing a small list.\n\n     import Standard.Examples\n\n     example_reverse = Examples.list.reverse",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "drop_start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.List.List",
        "isStatic": false,
        "documentation": " GROUP Selections\nCreates a new list with the first `count` elements at the start of `self`\nremoved.\n\nArguments:\n- count: The number of elements to take drop the start of `self`.\n\n> Example\n Removing the first element from a list.\n\n     import Standard.Examples\n\n     example_drop_start = Examples.list.drop_start 1",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "take_start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "count",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.List.List",
        "isStatic": false,
        "documentation": " GROUP Selections\nCreates a new list consisting of the first `count` elements at the start\nof `self`.\n\nArguments:\n- count: The number of elements to take from the start of `self`.\n\n> Example\n Obtaining the first 2 elements of a list.\n\n     import Standard.Examples\n\n     example_take_start = Examples.list.take_start 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "init",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet all elements from the list except the last.\n\n> Example\n Removing the last element of the list to give (Cons 1 Nil).\n\n     import Standard.Examples\n\n     example_init = Examples.list.init",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the last element of the list.\n\n> Example\n Getting the final element of the list.\n\n     import Standard.Examples\n\n     example_last = Examples.list.last",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the first element from the list.\n\n> Example\n Getting the first element in the list.\n\n     import Standard.Examples\n\n     example_first = Examples.list.first",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the second element from the list.\n\n> Example\n Getting the second element in the list.\n\n     import Standard.Examples\n\n     example_second = Examples.list.second",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "head",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the first element from the list.\n\n> Example\n This returns 1.\n\n     import Standard.Examples\n\n     example_head = Examples.list.x",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "tail",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet all elements from the list except the first.\n\n> Example\n This returns (Cons 2 Nil).\n\n     import Standard.Examples\n\n     example_tail = Examples.list.tail",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConvert this list to a vector with the same elements.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nGenerates a human-readable text representation of the list.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Not_Found.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the first element of the list that satisfies the condition or\nif no elements of the list satisfy the predicate, returns `if_missing`.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the vector.\n- if_missing: Value returned if no element satisfies the predicate.\n\n> Example\n Finding a first element of the list that is larger than 2.\n\n     import Standard.Examples\n\n     example_first = Examples.list.find (> 2)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the index of the element in the list.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the list.\n\n> Example\n Finding a first element of the vector that is larger than 3.\n\n     [1, 2, 3, 4, 5].find (> 3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "last_index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.List",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.List",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the last index of the element in the list.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n negative, it is counted from the end of the list.\n\n> Example\n Finding a first element of the vector that is larger than 3.\n\n     [1, 2, 3, 4, 5].find (> 3)",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.List",
        "name": "Empty_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " An error representing that the list is empty."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.List",
        "name": "Error",
        "arguments": [],
        "returnType": "Standard.Base.Data.List.Empty_Error",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.List.Empty_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List.Empty_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nPretty prints the empty error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "find_node_from_start",
        "arguments": [
            {
                "name": "list",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nGiven a positive index and a list, returns the node.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.List",
        "name": "find_node_from_end",
        "arguments": [
            {
                "name": "list",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.List",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nGiven a negative index and a list, returns the node that is represented and the index of it.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Array_Like_Helpers",
        "documentation": null,
        "reexport": "Standard.Base.Internal"
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Array_Like_Helpers",
        "name": "new_array_proxy_builtin",
        "arguments": [
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Array_Like_Helpers",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Array_Like_Helpers",
        "name": "new_vector_builder",
        "arguments": [
            {
                "name": "capacity",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Array_Like_Helpers",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Array_Like_Helpers",
        "name": "length",
        "arguments": [
            {
                "name": "array_like",
                "reprType": "Standard.Base.Data.Array.Array | Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Array_Like_Helpers",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Array_Like_Helpers",
        "name": "at",
        "arguments": [
            {
                "name": "array_like",
                "reprType": "Standard.Base.Data.Array.Array | Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Array_Like_Helpers",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Array_Like_Helpers",
        "name": "vector_to_array",
        "arguments": [
            {
                "name": "array_like",
                "reprType": "Standard.Base.Data.Vector.Vector | Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Array_Like_Helpers",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Array_Like_Helpers",
        "name": "vector_from_function",
        "arguments": [
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "constructor",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Array_Like_Helpers",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text.Regex.Internal"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "Match_Iterator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\n\nPerforms the regex match, and iterates through the results. Yields both\nthe matched parts of the string, and the 'filler' parts between them.\n\nThe 'filler' elements are `Utf_16_Span`s, not `Spans`. This is because\nmatches and replacement boundaries can fall in the middle of multi-\ncharacter graphemes, thereby splitting them apart.\n\nAt each step, it yields a Match_Iterator_Value, whivch has either a filler\nand a match, or just the final filler. A Match_Iterator_Value.Last value is\nreturn at the end, and only at the end.\n\nOptionally, you can call `early_exit` to have it return the remainder of\nthe string, unmatched, as a single Last value. (Used for `replace` with\n`only_first=True`.)"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "Value",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "cursor",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Regex.Regex",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "input",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "cursor",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "new",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "next",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator_Value",
        "isStatic": false,
        "documentation": " PRIVATE\nReturn the next match, or the last filler string if there is no\nadditional match.\n\nAlso returns the next iterator, if there was a match.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "early_exit",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator_Value",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns the remainder of the string, unmatched.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "Match_Iterator_Value",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "Next",
        "arguments": [
            {
                "name": "filler",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "match",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "next_iterator",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator_Value",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "Last",
        "arguments": [
            {
                "name": "filler",
                "reprType": "Standard.Base.Data.Text.Span.Utf_16_Span",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator_Value",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "filler",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator_Value",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "returnType": "Standard.Base.Data.Text.Span.Utf_16_Span",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "match",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator_Value",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Match.Match",
        "returnType": "Standard.Base.Data.Text.Regex.Match.Match",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator",
        "name": "next_iterator",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator_Value",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Array",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Array",
        "name": "Array",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " The type of primitive mutable arrays.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets an element from the array at a specified index (0-based).\n\nArguments:\n- index: The location in the array to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the array, i.e. -1 will correspond to the last element.\n\n> Example\n Get the second element of an array.\n\n     [1, 2, 3].to_array.at 1 == 2\n\n> Example\n Get the last element of an array.\n\n     [1, 2, 3].to_array.at -1 == 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the number of elements stored in this array.\n\n> Example\n Checking the length of an array.\n\n     [1, 2, 3, 4].to_array.length",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "to_array",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": false,
        "documentation": " PRIVATE\nIdentity.\nThis method is implemented purely for completeness with the runtime's\nprimitive array protocol.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "sort",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "order",
                "reprType": "Standard.Base.Data.Sort_Direction.Sort_Direction",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Sort_Direction.Ascending",
                "tagValues": [
                    "Standard.Base.Data.Sort_Direction.Sort_Direction.Ascending",
                    "Standard.Base.Data.Sort_Direction.Sort_Direction.Descending"
                ]
            },
            {
                "name": "on",
                "reprType": "(Standard.Base.Any.Any -> Standard.Base.Any.Any) | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "by",
                "reprType": "(Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Data.Ordering.Ordering | Standard.Base.Nothing.Nothing) | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "on_incomparable",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Ignore",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS order_by\nGROUP Calculations\nSort the array.\n\nArguments:\n- order: The order in which the array elements are sorted.\n- on: A projection from the element type to the value of that element\n being sorted on. If set to `Nothing` (the default),\n identity function will be used.\n- by: A function that compares the result of applying `on` to two\n elements, returning an an `Ordering` if the two elements are comparable\n or `Nothing` if they are not. If set to `Nothing` (the default argument),\n `Ordering.compare _ _` method will be used.\n- on_incomparable: A `Problem_Behavior` specifying what should happen if\n two incomparable values are encountered.\n\nBy default, elements are sorted in ascending order.\n\n\nThis is a stable sort, meaning that items that compare the same will not\nhave their order changed by the sorting process.\n\n! Computational Complexity\n The complexities for this sort are:\n - *Worst-Case Time:* `O(n * log n)`\n - *Best-Case Time:* `O(n)`\n - *Average Time:* `O(n * log n)`\n - *Worst-Case Space:* `O(n)` additional\n\n? Incomparable values\n Incomparable values are either values with different comparators or with\n the same comparator returning `Nothing` from its `compare` method.\n See the documentation of the `Ordering` module for more info.\n\n? Implementation Note\n The sort implementation is based upon an adaptive, iterative mergesort\n that requires far fewer than `n * log(n)` comparisons when the array\n is partially sorted. When the array is randomly ordered, the\n performance is equivalent to a standard mergesort.\n\n? Multiple comparators\n Elements with different comparators are incomparable by definition.\n This case is handled by first grouping the `self` array into groups\n with the same comparator, recursively sorting these groups, and then\n merging them back together. The order of the sorted groups in the\n resulting array is based on the order of fully qualified names of\n the comparators in the `self` array, with the exception of the group\n for the default comparator, which is always the first group.\n\n Additionally, an `Incomparable_Values` dataflow error will be returned\n if the `on_incomparable` parameter is set to `Problem_Behavior.Report_Error`,\n or a warning attached if the `on_incomparable` parameter is set to\n `Problem_Behavior.Report_Warning` in case of encountering incomparable\n values.\n\n It takes equal advantage of ascending and descending runs in the array,\n making it much simpler to merge two or more sorted arrays: simply\n concatenate them and sort.\n\n> Example\n Sorting an array of numbers.\n\n     [5, 2, 3, 45, 15].to_array.sort == [2, 3, 5, 15, 45].to_array\n\n> Example\n Sorting an array of `Pair`s on the first element, descending.\n\n     [Pair 1 2, Pair -1 8].to_array.sort Sort_Direction.Descending (_.first)\n\n> Example\n Sorting an array with elements with different comparators. Values `1`\n and `My_Type` have different comparators. `1` will be sorted before `My_Type`\n because it has the default comparator.\n\n     [My_Type.Value 'hello', 1].to_array.sort == [1, My_Type.Value 'hello'].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "take",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Index_Sub_Range.1.First",
                "tagValues": [
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS first, last, slice, sample\nGROUP Selections\nCreates a new `Vector` with only the specified range of elements from the\ninput, removing any elements outside the range.\n\nArguments:\n- range: The section of the this array to return.\n If an `Index_Sub_Range`, then the selection is interpreted following\n the rules of that type.\n If a `Range`, the selection is specified by two indices, from and to.",
        "annotations": [
            "range"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "drop",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Index_Sub_Range.1.First",
                "tagValues": [
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nCreates a new `Vector`, removing any elements from the specified range.\n\nArguments:\n- range: The section of the this array to return.\n If an `Index_Sub_Range`, then the selection is interpreted following\n the rules of that type.\n If a `Range`, the selection is specified by two indices, from and to.",
        "annotations": [
            "range"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "insert",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "self.length",
                "tagValues": null
            },
            {
                "name": "item",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Calculations\nInserts the given item into the array at the given index.\n\nArguments:\n- at: The index at which to insert the item before.\n If the index is less than 0, the index will be counted back from the\n end. If the index is equal to the length of the array, the item will\n be appended to the end of the array.\n- item: The item to insert into the array.\n\n> Example\n Insert 'X' into an array at different locations:\n\n    ['a', 'b', 'c'].to_array.insert 1 'X' == ['a', 'X', 'b', 'c'].to_array\n    ['a', 'b', 'c'].to_array.insert -1 'X' == ['a', 'b', 'X', 'c'].to_array\n    ['a', 'b', 'c'].to_array.insert item='X' == ['a', 'b', 'c', 'X'].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "remove",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Selections\nRemoves the item at the given index from the array.\n\nArguments:\n- at: The index at which to remove the item.\n If the index is less than 0, the index will be counted back from the\n end.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the first element from the array, or an `Index_Out_Of_Bounds` if the array\nis empty.\n\n> Example\n The following code returns 1.\n\n     [1, 2, 3, 4].to_array.first",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the second element from the array, or a `Index_Out_Of_Bounds` if the\narray doesn't have a second element.\n\nUseful when tuples are implemented as arrays.\n\n> Example\n The following code returns 2.\n\n     [1, 2, 3, 4].to_array.second",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the last element of the array, or an `Index_Out_Of_Bounds` if the array is\nempty.\n\n> Example\n The following code returns 4.\n\n     [1, 2, 3, 4].to_array.last",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the index of an element in the array.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the array.\n\n> Example\n Find the index of an element in an array.\n\n     [1, 2, 3].to_array.index_of 2 == 1\n\n> Example\n Find the index of the first palindrome.\n\n     [\"ab\", \"abab\", \"aba\", \"bbb\"].to_array.index_of (s-> s == s.reverse) == 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "last_index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the last index of an element in the array.\nReturns `Nothing` if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n negative, it is counted from the end of the array.\n\n> Example\n Find the last index of an element in an array.\n\n     [1, 2, 3, 1, 2, 3].to_array.last_index_of 2 == 4\n\n> Example\n Find the index of the last palindrome.\n\n     [\"ab\", \"abab\", \"aba\", \"bbb\"].to_array.last_index_of (s-> s == s.reverse) == 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this array is empty.\n\n> Example\n Checking for emptiness.\n\n     [].to_array.is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "to_list",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.List.List",
        "isStatic": false,
        "documentation": " Converts the array to a list with the same elements.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "distinct",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "x -> (FORCE x)",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nKeeps only unique elements within the array, removing any duplicates.\n\nArguments:\n- on: A projection from the element type to the value of that element\n     which determines the uniqueness criteria.\n\nThe returned unique elements are kept in the same order as they appeared\nin the input.\n\nOut of multiple equivalent (equal up to the `on` projection) elements,\nalways the one appearing first in the input is kept.\n\n> Example\n Removing repeating entries.\n\n     [1, 3, 1, 2, 2, 1].to_array . distinct == [1, 3, 2].to_array\n\n> Example\n Keeping only pairs whose first elements are unique.\n\n     [Pair 1 \"a\", Pair 2 \"b\", Pair 1 \"c\"].to_array . distinct (on = _.first) == [Pair 1 \"a\", Pair 2 \"b\"].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element of the array, returning the `Vector` of\nresults.\n\nArguments:\n- function: A function that takes an element in the array and returns\n some transformation of that element.\n\n> Example\n Add 1 to each element of the array.\n\n     [1, 2, 3].to_array . map +1",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "flat_map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element of the array, returning the `Vector`\nthat contains all results concatenated.\n\nArguments:\n- function: A function that takes an element in the array, transforms\n it, and returns a `Vector`.\n\n> Example\n Replace each number `n` in the array with itself repeated n times.\n\n    [0, 1, 2].to_array . flat_map (n -> Vector.fill n n)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "filter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "filter",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nSelects all elements of this array which satisfy a condition.\n\nArguments:\n- filter: The filter to apply to the array. It can either be an instance\n of `Filter_Condition` or a predicate taking a value and returning a\n boolean value indicating whether the corresponding element should be\n kept or not.\n\n> Example\n Selecting all elements that are greater than 3.\n\n     [1, 2, 3, 4, 5].to_array.filter (> 3)\n     [1, 2, 3, 4, 5].to_array.filter (Filter_Condition.Greater than=3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "flatten",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Calculations\nTransforms an array of arrays into a `Vector` of inner elements - removes\none layer of nesting from a stack of nested arrays.\n\n> Example\n Flatten an array of arrays of numbers.\n\n    [[1, 2, 3].to_array, [4, 10].to_array, [].to_array, [0].to_array, [0].to_array].to_array . flatten == [1, 2, 3, 4, 10, 0, 0].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "short_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "max_entries",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "10",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "running_fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the array, by iteratively applying the\npassed function with the next element of the array. After each step the\nvalue is stored resulting in a new array of the same size as self.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking two elements and combining them.\n\n> Example\n Compute the running sum of all of the elements in an array\n\n    [1, 2, 3].to_array.running_fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the array, by iteratively applying the\npassed function with next elements of the array.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking two elements and combining them.\n\nIn general, the result of\n   [l0, l1, ..., ln].to_array . fold init f\nis the same as\n   f (...(f (f init l0) l1)...) ln\n\n> Example\n Compute the sum of all of the elements in an array.\n\n     [0, 1, 2].to_array . fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "fold_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the array, by iteratively applying the\npassed function with next elements of the array.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking the current value, an index and an item\n and combining them.\n\n> Example\n Compute the sum of all of the elements and indexes in an array.\n\n     [0, 1, 2].to_array . fold_with_index 0 (s->i->e->s+i+e)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "pad",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "elem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Calculations\nExtend `self` array to the length of `n` appending elements `elem` to\nthe end.\n\nArguments:\n- n: The length to pad `self` out to.\n- elem: The element to fill the new padded slots with.\n\nIf the new length `n` is less than existing length, `self` array is\nreturned.\n\n> Example\n Extending array to the length of 5\n\n     [1, 2, 3].to_array.pad 5 0 == [1, 2, 3, 0, 0].to_array\n\n> Example\n Extending array to the length of 5\n\n     [1, 2, 3, 4, 5].to_array.pad 5 0 == [1, 2, 3, 4, 5].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "partition",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Pair.Pair (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any) (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
        "isStatic": false,
        "documentation": " GROUP Selections\nPartitions the array into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input array.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Splitting an array into elements that start with a prefix.\n\n     [\"a\", \"b\", \"ax\", \"bx\"].to_array.partition (Filter_Condition.Starts_With \"a\") == (Pair [\"a\", \"ax\"].to_array [\"b\", \"bx\"].to_array)\n\n> Example\n Splitting an array into even and odd elements.\n\n     [1, 2, 3, 4, 5].to_array.partition (x -> x % 2 == 0) == (Pair [2, 4].to_array [1, 3, 5].to_array)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "partition_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Pair.Pair (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any) (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
        "isStatic": false,
        "documentation": " Partitions the array into `Vector`s of elements which satisfy a given\npredicate and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input array.\n\nArguments:\n- predicate: A function that takes an index and an element and returns a\n boolean value.\n\n> Example\n Splitting an array into elements at even and odd positions.\n\n     [\"a\", \"b\", \"c\", \"d\"].to_array.partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair [\"a\", \"c\"].to_array [\"b\", \"d\"].to_array)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "map_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element of the array, returning the `Vector`\nof results.\n\nArguments:\n- function: A function that takes an index and an item and calculates a\n new value for at that index.\n\nThe function is called with both the element index as well as the\nelement itself.\n\n> Example\n Sum numbers with their indices in an array.\n\n     [1, 2, 3].to_array.map_with_index (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "slice",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nCreates a new array with the skipping elements until `start` and then\ncontinuing until `end` index.\n\nArguments:\n- start: The index of the first element to include.\n- end: The index to stop slicing at.\n\n> Example\n Remove the first 2 elements then continue until index 5 from the array.\n\n     [1, 2, 3, 4, 5, 6, 7, 8].to_array.slice 2 5 == [3, 4, 5].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Not_Found.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the first element of the array that satisfies the condition or\n`if_missing` if no elements of the array satisfy it.\n\nArguments:\n- condition: A `Filter_Condition` or a function that takes an element and\n returns a boolean value specifying if it satisfies the condition.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the array.\n- if_missing: Value returned if no element satisfies the predicate.\n\n> Example\n Finding a first element of the array that is larger than 3.\n\n     [1, 2, 3, 4, 5].to_array.find (> 3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets an element from the array at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.\n\nArguments:\n- index: The location in the array to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the array, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this array is not empty.\n\n> Example\n Checking for non-emptiness.\n\n     [1].to_array.not_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "filter_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nSelects all elements of this array which satisfy a predicate.\n\nArguments:\n- predicate: A function that takes an index and a list element and\n returns a boolean value that says whether that value should be included\n in the result.\n\n> Example\n Selecting all elements which are equal to their position in the array.\n\n     [0, 10, 2, 2].to_array.filter (==) == [0, 2].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "join",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "separator",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "prefix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "suffix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Calculations\nWhen `self` is an array of text values, concatenates all the values by\ninterspersing them with `separator`.\n\nArguments:\n- separator (optional): The text to use to join the textual elements of the array.\n- prefix (optional): The prefix to add at the beginning.\n- suffix (optional): The suffix to add at the end.\n\n> Example\n Join the elements of the array together as a string.\n\n     [\"foo\", \"bar\", \"baz\"].to_array.join \", \"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nGenerates a human-readable text representation of the array.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "reduce",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_empty",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Empty_Error.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of a non-empty array using a binary operation.\nIf the array is empty, it returns `if_empty`.\n\nArguments:\n- function: A binary operation that takes two items and combines them.\n- if_empty: Value returned if the array is empty.\n\n> Example\n Compute the sum of all the elements in an array.\n\n     [0, 1, 2].to_array . reduce (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "any",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a predicate holds for at least one element of self array.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Checking if any element of the array is larger than 3.\n\n     [1, 2, 3, 4, 5].to_array.any (Filter_Condition.Greater than=3)\n\n> Example\n Checking if any element of the array is even.\n\n     [1, 2, 3, 4, 5].to_array.any (x-> x%2 == 0)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a condition holds for all elements in this array.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Check if all elements in the array are less than zero.\n\n     [-1, 1, 5, 8].to_array.all (Filter_Condition.Less than=0)\n\n> Example\n Check if all elements in the array are even.\n\n     [-1, 1, 5, 8].to_array.all (x-> x%2 == 0)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "elem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether this array contains a given value as an element.\n\nArguments:\n- elem: The item to see if it exists in the array.\n\n> Example\n Checking if the array contains the number 72.\n\n     [1, 383, 72, 301].to_array.contains 72",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "zip",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "<internal-76> <internal-77> -> [(FORCE <internal-76>), (FORCE <internal-77>)]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS combine, merge, join by row position\nGROUP Calculations\nPerforms a pair-wise operation passed in `function` on consecutive\nelements of `self` and `that`.\n\nArguments:\n- that: The array to zip with `self`.\n- function: The function used to combine pairwise elements of `self` and\n `that`.\n\nThe result of this function is a `Vector` of length being the shorter of\n`self` and `that`, containing results of calling `function`.\n\n> Example\n Calculate the pairwise sum of two arrays.\n\n     [1, 2, 3].to_array.zip [4, 5, 6].to_array (+)\n\n> Example\n When the `function` is not provided, it defaults to creating a pair\n of both elements.\n\n     [1, 2, 3].to_array.zip [4, 5, 6].to_array == [[1, 4].to_array, [2, 5].to_array, [3, 6].to_array].to_array",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " Returns the array as a `Vector`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "reverse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReverses the array, returning a `Vector` with the same elements, but in\nthe opposite order.\n\n> Example\n Reverse a two-element array.\n\n     [1, 2].to_array.reverse",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the array.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\nArguments:\n- function: A function to apply to each element of the array.\n\n> Example\n Print each element in the array to standard output.\n\n     [1, 2, 3, 4, 5].to_array . each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "each_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the array.\n\nArguments:\n- function: A function to apply that takes an index and an item.\n\nThe function is called with both the element index as well as the\nelement itself.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\n> Example\n Print each element in the array to standard output.\n\n     [1, 2, 3, 4, 5].to_array . each_with_index (ix->elem-> IO.println Pair ix elem)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Array",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Array.Array",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS concatenate, union, append\nGROUP Operators\nConcatenates two arrays, resulting in a new `Vector`, containing all the\nelements of `self`, followed by all the elements of `that`.\n\nArguments:\n- that: The array to concatenate to the end of `self`.\n\n> Example\n Concatenate two single-element arrays.\n\n     [1].to_array + [2].to_array",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Regex.Internal",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text.Regex"
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Ordering",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Ordering",
        "name": "Comparable",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Provides custom ordering, equality check and hash code for types that need it.\n\nThe Enso runtime system offers default implementation of _equality_\nas well as capability to _compute hash code_ (e.g. for use in `Map`) automatically.\nThe default implementation is sufficient for most of the programming activities.\nEspecially when defining new type and its constructors, they get sensible\nimplementation of both functions.\n\nShould there be a need to redefine the default implementation, here is a way:\nDefine conversion function `Comparable.from` for your `type` and return pointer to\nanother `type` that satisfies the following definition:\n\n```\ntype Comparator T\n    compare : T -> T -> (Ordering|Nothing)\n    hash : T -> Integer\n```\n\nEvery type must provide exactly one comparator, i.e., the method of form\n`Comparable.from (_:My_Type)` must return the same comparator type for every\nvalue. Note that there is an implicit `Default_Comparator` assigned for every\ntype by default.\n\nA comparator has to implement `compare` and `hash` methods. `compare x y` method\nreturns `Ordering.Less` if x is ordered before y, `Ordering.Equal` if x is equal\nto y, `Ordering.Greater` if x is ordered after y, and `Nothing` if x and y are\nnot equal, and their relative ordering cannot be determined.\n\nThe signature of the `compare` method is designed so that it enables comparators\nto provide a _partial ordering_ for a specific type.\n\nA hash code must be provided for all the objects, therefore, the type signature\nof `hash` method does not allow `Nothing` as a return value.\n\nThe runtime expects the following semantics for all the comparators:\n- Hash consistency:\n  - If x == y then hash(x) == hash(y)\n  - If hash(x) != hash(y) then x != y\n- Consistency: if x == y then x == y for all the subsequent invocations.\n- Symmetry: if x == y then y == x\n- Reflexivity: x == x\n- Transitivity: if x < y and y < z then x < z\n- Antisymmetry: if x > y then y < x\n\nUsers are responsible for the compliance to the aforementioned semantics.\nShould the semantics be violated, an unexpected behavior may be encountered, e.g.,\n`Array.sort` may return unexpected results or fail with `Incomparable_Values`.\n\n\n> Example\n    Comparator for an unordered Pair `UPair`. In this example, we can see an\n    implementation of the `hash` method that delegates to hash methods of\n    fields.\n\n    ```\n    type UPair\n        Value x y\n\n    type UPair_Comparator\n        compare pair1 pair2 =\n            if pair1.x == pair2.x && pair1.y == pair2.y then Ordering.Equal else\n                if pair1.x == pair2.y && pair1.y == pair2.x then Ordering.Equal else\n                    Nothing\n\n        hash upair =\n            x_comp = Comparable.from upair.x\n            y_comp = Comparable.from upair.y\n            (x_comp.hash upair.x) + (y_comp.hash upair.y)\n\n    Comparable.from (_ : UPair) = UPair_Comparator\n    ```\n\n> Example\n    Representation of _rational numbers_ as a pair of integers needs a\n    special equality. Here is a way to define it:\n\n    ```\n    type Rational\n        Fraction (numerator:Integer) (denominator:Integer)\n\n    Comparable.from (_:Rational) = Rational_Ordering\n\n    type Rational_Ordering\n        compare self r1 r2 =\n            v1 = r1.numerator * r2.denominator\n            v2 = r2.numerator * r1.denominator\n            if v1 < v2 then Ordering.Less else\n                if v1 > v2 then Ordering.Greater else\n                    Ordering.Equal\n        hash self r1 = 42 # or something better\n    ```\n\n    By defining the `Rational_Ordering` and making it available via\n    `Comparable.from (_:Rational)` method, all parts of the Enso system will use\n    the custom comparator whenever equality or hash code is needed.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "hash_callback",
        "arguments": [
            {
                "name": "atom",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Comparable",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nCalled as a callback from internal engine code for an atom with a custom\ncomparator. It is assumed that the given atom has a custom comparator, that is\na comparator different than `Default_Comparator`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "compare_callback",
        "arguments": [
            {
                "name": "atom",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Comparable",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nA callback allowing to compare two atoms with a custom comparator.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Ordering",
        "name": "Default_Comparator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nDefault implementation of a _comparator_.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "compare",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Default_Comparator",
        "returnType": "Standard.Base.Data.Ordering.Ordering | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "hash",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Default_Comparator",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Ordering.Comparable",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Ordering",
        "name": "Ordering",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Types representing the ordering of values.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Ordering",
        "name": "Less",
        "arguments": [],
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "documentation": " A representation that the first value orders as less than the second.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Ordering",
        "name": "Equal",
        "arguments": [],
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "documentation": " A representation that the first value orders as equal to the second.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Ordering",
        "name": "Greater",
        "arguments": [],
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "documentation": " A representation that the first value orders as greater than the second.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "compare",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Ordering",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCompares values and returns an Ordering.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "to_sign",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Ordering.Ordering",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Ordering",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConverts the ordering to the signed notion of ordering based on integers.\n\n> Example\n Converting equal ordering to a signed number.\n\n     import Standard.Base.Data.Ordering\n\n     example_to_sign = Ordering.Equal.to_sign",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "and_then",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Ordering.Ordering",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other",
                "reprType": "Standard.Base.Data.Ordering.Ordering",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Ordering.Ordering.Less",
                    "Standard.Base.Data.Ordering.Ordering.Equal",
                    "Standard.Base.Data.Ordering.Ordering.Greater"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Ordering",
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "isStatic": false,
        "documentation": " A lexicographical comparison.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "from_sign",
        "arguments": [
            {
                "name": "sign",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Ordering",
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nConverts a sign-based representation of ordering to Enso's native ordering.\n\nArguments:\n- sign: The number representing the relative ordering of two entities.\n\n> Example\n Convert the number 0 to an Enso ordering.\n\n     Ordering.from_sign 0",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Ordering",
        "name": "Ordering_Comparator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "compare",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Ordering_Comparator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "hash",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Ordering_Comparator",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Ordering",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Ordering.Ordering",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Ordering.Ordering.Less",
                    "Standard.Base.Data.Ordering.Ordering.Equal",
                    "Standard.Base.Data.Ordering.Ordering.Greater"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Ordering.Ordering",
        "returnType": "Standard.Base.Data.Ordering.Comparable",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.File.File_Permissions",
        "documentation": null,
        "reexport": "Standard.Base.System.File"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "Permission",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "Read",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Permissions.Permission",
        "documentation": " Permission for read access for a given entity.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "Write",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Permissions.Permission",
        "documentation": " Permission for write access for a given entity.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "Execute",
        "arguments": [],
        "returnType": "Standard.Base.System.File.File_Permissions.Permission",
        "documentation": " Permission for execute access for a given entity.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "File_Permissions",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "Value",
        "arguments": [
            {
                "name": "owner",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "group",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "others",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "documentation": " PRIVATE\nAccess permissions for a file.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "owner",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "group",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "others",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.Permission",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "to_java",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File_Permissions.PosixFilePermission",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nConverts the Enso atom to its Java enum counterpart.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "owner_read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks if the given file can be read by the owner.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "owner_write",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks if the given file can be written by the owner.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "owner_execute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks if the given file can be executed by the owner.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "group_read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " Checks if the given file can be read by the group.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "group_write",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " Checks if the given file can be written by the group.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "group_execute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " Checks if the given file can be executed by the group.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "others_read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks if the given file can be read by others.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "others_write",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks if the given file can be written by others.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "others_execute",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Metadata\nChecks if the given file can be executed by others.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "from_java_set",
        "arguments": [
            {
                "name": "java_set",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nConverts a Java `Set` of Java `PosixFilePermission` to `File_Permissions`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.File_Permissions",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.File_Permissions.File_Permissions",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File_Permissions.File_Permissions",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this File_Permissions.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Widget_Helpers",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "method",
        "module": "Standard.Base.Widget_Helpers",
        "name": "make_regex_text_widget",
        "arguments": [],
        "selfType": "Standard.Base.Widget_Helpers",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a Regex / Text Widget for search and replace.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Widget_Helpers",
        "name": "make_delimiter_selector",
        "arguments": [],
        "selfType": "Standard.Base.Widget_Helpers",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a Single_Choice Widget for delimiters.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Widget_Helpers",
        "name": "make_date_format_selector",
        "arguments": [
            {
                "name": "date",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date.2012.3.14.new",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Widget_Helpers",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a Single_Choice Widget for parsing dates.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Widget_Helpers",
        "name": "make_date_time_format_selector",
        "arguments": [
            {
                "name": "date_time",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time.2012.3.14.15.9.26.123.new",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Widget_Helpers",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a Single_Choice Widget for parsing date times.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Widget_Helpers",
        "name": "make_time_format_selector",
        "arguments": [
            {
                "name": "time",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Time_Of_Day.13.30.55.123.new",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Widget_Helpers",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a Single_Choice Widget for parsing times.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.Common",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Not_Found",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " An error indicating that no value was found."
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Index_Out_Of_Bounds",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "index",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "length",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Index_Out_Of_Bounds",
        "documentation": " PRIVATE\nUNSTABLE\n\nAn error indicating that a requested index was out of bounds of a collection.\n\nArguments:\n- index: The requested index.\n- length: The length of the collection.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Index_Out_Of_Bounds",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Index_Out_Of_Bounds",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Index_Out_Of_Bounds",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Index_Out_Of_Bounds",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nPretty prints an index out of bounds error.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Syntax_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Syntax_Error",
        "documentation": " PRIVATE\nThe runtime representation of a syntax error.\n\nArguments:\n- message: A description of the erroneous syntax.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Syntax_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Syntax_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Syntax_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Syntax_Error error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Type_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "expected",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "actual",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "name",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Type_Error",
        "documentation": " PRIVATE\nThe runtime representation of a type error.\n\nArguments:\n- expected: The expected type at the error location.\n- actual: The actual type at the error location.\n- name: The name of the argument whose type is mismatched.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "expected",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Type_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "actual",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Type_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Type_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Type_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Type_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Type_Error error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Compile_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Compile_Error",
        "documentation": " PRIVATE\nThe runtime representation of a compilation error.\n\nArguments:\n- message: A description of the erroneous state.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Compile_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Compile_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Compile_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Compile_Error error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Assertion_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Assertion_Error",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Assertion_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Assertion_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Assertion_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Assertion_Error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Inexhaustive_Pattern_Match",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "scrutinee",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Inexhaustive_Pattern_Match",
        "documentation": " PRIVATE\nThe error thrown when a there is no pattern to match on the scrutinee.\n\nArguments:\n- scrutinee: The scrutinee that failed to match.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "scrutinee",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Inexhaustive_Pattern_Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Inexhaustive_Pattern_Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Inexhaustive_Pattern_Match",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Inexhaustive_Pattern_Match error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Arity_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "expected_min",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "expected_max",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "actual",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Arity_Error",
        "documentation": " PRIVATE\nThe error thrown when the number of arguments provided to an operation\ndoes not match the expected number of arguments.\n\nArguments:\n- expected_min: the minimum expected number of arguments.\n- expected_max: the maximum expected number of arguments.\n- actual: the actual number of arguments passed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "expected_min",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Arity_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "expected_max",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Arity_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "actual",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Arity_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Arity_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Arity_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Arity_Error error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Uninitialized_State",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Uninitialized_State",
        "documentation": " PRIVATE\nThe error thrown when the program attempts to read from a state slot that has\nnot yet been initialized.\n\nArguments:\n- key: The key for the state slot that was not initialized.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Uninitialized_State",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Uninitialized_State",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Uninitialized_State",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Uninitialized_State error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "No_Such_Method",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "target",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "symbol",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.No_Such_Method",
        "documentation": " PRIVATE\nThe error thrown when the specified symbol does not exist as a method on\nthe target.\n\nArguments:\n- target: The target on which the attempted method call was performed.\n- symbol: The symbol that was attempted to be called on target.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "target",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "symbol",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "method_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.No_Such_Method",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nReturns the method name of the method that could not be found.\n\n> Example\n Getting the method name from a no such method error.\n\n     import Standard.Examples\n\n     example_method_name =\n         error = Examples.no_such_method\n         error.method_name",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.No_Such_Method",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the No_Such_Method error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "No_Such_Field",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "field_name",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.No_Such_Field",
        "documentation": " PRIVATE\nThe error thrown when the specified symbol does not exist as a field on\nthe value.\n\nArguments:\n- target: The target on which the field was accessed.\n- field_name: The name of the field that was being accessed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Field",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "field_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Field",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Field",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.No_Such_Field",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the No_Such_Method error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Module_Not_In_Package_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [],
        "returnType": "Standard.Base.Errors.Common.Module_Not_In_Package_Error",
        "documentation": " An error that occurs when the enso_project function is called in a file\nthat is not part of a project.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Module_Not_In_Package_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Module_Not_In_Package_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Module_Not_In_Package_Error error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Arithmetic_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Arithmetic_Error",
        "documentation": " PRIVATE\nAn error for when an erroneous arithmetic computation takes place.\n\nArguments:\n- message: A description of the error condition.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Arithmetic_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Arithmetic_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Arithmetic_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Arithmetic_Error error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "handle_java_exception",
        "arguments": [],
        "selfType": "Standard.Base.Errors.Common.Arithmetic_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCapture a Java `ArithmeticException` and convert it to an Enso dataflow error - `Arithmetic_Error.Error`.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Incomparable_Values",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "left",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "right",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Incomparable_Values",
        "documentation": " An error that indicates that the two values are not comparable.\n\nArguments:\n- left: The left value (first operand).\n- right: The right value (second operand).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "left",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Incomparable_Values",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "right",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Incomparable_Values",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Incomparable_Values",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Incomparable_Values",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Incomparable_Values error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "handle_errors",
        "arguments": [
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Incomparable_Values",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCatches possible errors from comparing values and throws an\n`Incomparable_Values` if any occur.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Invalid_Array_Index",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "array",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Invalid_Array_Index",
        "documentation": " PRIVATE\nAn error that occurs when a program requests a read from an array index\nthat is out of bounds in the array.\n\nArguments:\n- array: The array in which the index was requested.\n- index: The index that was out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "array",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Invalid_Array_Index",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Invalid_Array_Index",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Invalid_Array_Index",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Invalid_Array_Index",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Forbidden_Operation error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Not_Invokable",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "target",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Not_Invokable",
        "documentation": " PRIVATE\nAn error that occurs when an object is used as a function in a function\ncall, but it cannot be called.\n\nArguments:\n- target: The called object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "target",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Not_Invokable",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Not_Invokable",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Not_Invokable",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Not_Invokable error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Unsupported_Argument_Types",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "arguments",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Unsupported_Argument_Types",
        "documentation": " PRIVATE\nAn error that occurs when arguments used in a function call are invalid\ntypes for the function.\n\nArguments:\n- arguments: The passed arguments.\n- message: A detailed message.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "arguments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Unsupported_Argument_Types",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Unsupported_Argument_Types",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Unsupported_Argument_Types",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Unsupported_Argument_Types",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Unsupported_Argument_Types error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Module_Does_Not_Exist",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "name",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Module_Does_Not_Exist",
        "documentation": " PRIVATE\nAn error that occurs when the specified module cannot be found.\n\nArguments:\n- name: The module searched for.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Module_Does_Not_Exist",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Module_Does_Not_Exist",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Module_Does_Not_Exist",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Module_Does_Not_Exist error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Invalid_Conversion_Target",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "target",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Invalid_Conversion_Target",
        "documentation": " PRIVATE\nAn error that occurs when the specified value cannot be converted to a given type.\n\nArguments:\n- target: the type trying to be converted to.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "target",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Invalid_Conversion_Target",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "No_Such_Conversion",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "target",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "conversion",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.No_Such_Conversion",
        "documentation": " PRIVATE\nAn error that occurs when the conversion from one type to another does not exist.\n\nArguments:\n- target: the type trying to be converted to.\n- that: the value to be converted.\n- conversion: the conversion that was attempted.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "target",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Conversion",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "that",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Conversion",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "conversion",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Conversion",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Such_Conversion",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.No_Such_Conversion",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the No_Such_Conversion error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "No_Conversion_Currying",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "has_this",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "has_that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "conversion",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.No_Conversion_Currying",
        "documentation": " PRIVATE\nAn error that occurs when an attempt is made to curry a conversion function.\n\nArguments:\n- has_this: true, when `this` argument is present\n- has_that: true, when `that` argument is present\n- conversion: the conversion that was attempted.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "has_this",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Conversion_Currying",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "has_that",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Conversion_Currying",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "conversion",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Conversion_Currying",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.No_Conversion_Currying",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.No_Conversion_Currying",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the No_Conversion_Currying error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Forbidden_Operation",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "operation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Forbidden_Operation",
        "documentation": " PRIVATE\nAn error that occurs when the action is not allowed to perform the operation in the given context.\n\nArguments:\n- operation: attempted context that is not allowed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "operation",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Forbidden_Operation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Forbidden_Operation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Forbidden_Operation",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Forbidden_Operation error to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Dry_Run_Operation",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Warning",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Dry_Run_Operation",
        "documentation": " PRIVATE\nA warning that the operation has only been performed in a test mode.\n\nArguments:\n- message: The message to be displayed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Dry_Run_Operation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Dry_Run_Operation",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Dry_Run_Operation",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Dry_Run_Operation to a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Out_Of_Memory",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "operation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Out_Of_Memory",
        "documentation": " PRIVATE\nAn error when Enso run's out of memory",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "operation",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Out_Of_Memory",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Out_Of_Memory",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Out_Of_Memory",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the Out_Of_Memory to a human-readable format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "handle_java_exception",
        "arguments": [
            {
                "name": "operation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Out_Of_Memory",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCatches possible `OutOfMemoryError` and throws an `Out_Of_Memory` error.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Common",
        "name": "Missing_Required_Argument",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Indicates that an expression cannot be evaluated because somewhere within it,\na function does not have all required arguments provided."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Common",
        "name": "Error",
        "arguments": [
            {
                "name": "argument_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "call_location",
                "reprType": "Standard.Base.Runtime.Source_Location.Source_Location | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "returnType": "Standard.Base.Errors.Common.Missing_Required_Argument",
        "documentation": " PRIVATE\nIndicates that an expression cannot be evaluated because somewhere within\nit, a function does not have all required arguments provided.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "argument_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Missing_Required_Argument",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "function_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Missing_Required_Argument",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "call_location",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Missing_Required_Argument",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Source_Location.Source_Location | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Runtime.Source_Location.Source_Location | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Common.Missing_Required_Argument",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Missing_Required_Argument",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Common",
        "name": "ensure_present",
        "arguments": [
            {
                "name": "argument_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Missing_Required_Argument.\"argument_name\".ensure_present",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Common.Missing_Required_Argument",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nThrows an error saying that a required argument has not been provided.\n\nThis function is supposed to be used as a default value for arguments\nthat are supposed to be required and should prevent errors stemming from\na not-fully-applied function being passed around. Instead, this error is\nraised and propagated to the top, so that the IDE can see that the node\nstill has some missing arguments within it.\n\n> Example\n\n my_function (arg1 = Missing_Required_Argument.ensure_present \"arg1\") (arg2 = 100) = arg1+arg2",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.Header",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "Header",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "Value",
        "arguments": [
            {
                "name": "name",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "documentation": " PRIVATE\n\nA type representing a header.\n\nArguments:\n- name: The header name.\n- value: The header value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "new",
        "arguments": [
            {
                "name": "name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " ALIAS Build a Header\n\nCreate a new Header.\n\nArguments:\n- name: The name of the header.\n- value: The value for the header.\n\n> Example\n Create a new header called \"My_Header\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_new = Header.new \"My_Header\" \"my header's value\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "accept",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Create an \"Accept\" header.\n\nArguments:\n- value: The value for the accept header.\n\n> Example\n Create an accept header.\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_accept = Header.accept \"my_field\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "accept_all",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Create a header that accepts all (`\"*/*\"`).\n\n> Example\n Create an accept all header.\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_accept_all = Header.accept_all",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "authorization",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " ALIAS Build an Auth Header\n\nCreate an \"Authorization\" header.\n\nArguments:\n- value: The value for the authorization header.\n\n> Example\n Create an auth header containing \"foo\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_auth = Header.authorization \"foo\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "authorization_basic",
        "arguments": [
            {
                "name": "user",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "pass",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Create HTTP basic auth header.\n\nArguments:\n- user: The username.\n- pass: The password.\n\n> Example\n Create basic auth header.\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_auth_basic = Header.authorization_basic \"user\" \"pass\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "authorization_bearer",
        "arguments": [
            {
                "name": "token",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Create bearer token auth header.\n\nArguments:\n- token: The token.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "content_type",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Create \"Content-Type\" header.\n\nArguments:\n- value: The value for the content type header.\n- encoding: The `Encoding` to use as the `charset` in the content-type\n value. If encoding is `Nothing`, then the `charset` is not added to the\n header valye.\n\n> Example\n Create a content type header containing \"my_type\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_content_type = Header.content_type \"my_type\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "application_json",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Header \"Content-Type: application/json\".\n\n> Example\n Create a header with content type \"application/json\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_app_json = Header.application_json",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "application_octet_stream",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Header \"Content-Type: application/octet-stream\".\n\n> Example\n Create a header with content type \"application/octet-stream\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_app_octet = Header.application_octet_stream",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "application_x_www_form_urlencoded",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Header \"Content-Type: application/x-www-form-urlencoded\".\n\n> Example\n Create a header with content type \"application/x-www-form-urlencoded\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_app_x_www = Header.application_x_www_form_urlencoded",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "multipart_form_data",
        "arguments": [
            {
                "name": "boundary",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Header \"Content-Type: multipart/form-data\".\n\nArguments:\n- boundary: The text that delimits boundaries between the parts of the form.\n\n> Example\n Create a header with content type \"multipart/form-data\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_multipart = Header.multipart_form_data",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "text_plain",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " Header \"Content-Type: text/plain\".\n\n> Example\n Create a header with the content type \"text/plain\".\n\n     import Standard.Base.Network.HTTP.Header.Header\n\n     example_header_text_plain = Header.text_plain",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Header.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "content_type_header_name",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " Gets the name for content_type",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "Header_Comparator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "compare",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "y",
                "reprType": "Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header_Comparator",
        "returnType": "Standard.Base.Data.Ordering.Ordering",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "hash",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header_Comparator",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Header",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Network.HTTP.Header.Header",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Header.Header",
        "returnType": "Standard.Base.Data.Ordering.Comparable",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.Proxy",
        "documentation": null,
        "reexport": "Standard.Base.Network"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.Proxy",
        "name": "Proxy",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Proxy settings."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.Proxy",
        "name": "None",
        "arguments": [],
        "returnType": "Standard.Base.Network.Proxy.Proxy",
        "documentation": " The proxy is disabled.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.Proxy",
        "name": "System",
        "arguments": [],
        "returnType": "Standard.Base.Network.Proxy.Proxy",
        "documentation": " Use the system proxy settings.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.Proxy",
        "name": "Address",
        "arguments": [
            {
                "name": "proxy_host",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "proxy_port",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "80",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.Proxy.Proxy",
        "documentation": " Use the provided proxy server.\n\nArguments:\n- host: The host address for the proxy.\n- port: The port number for the proxy server on `host`.\n\n> Example\n Create a new proxy running on localhost at port 80080.\n\n     import Standard.Base.Network.Proxy.Proxy\n\n     example_new = Proxy.Address \"localhost\" 80800",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.Proxy",
        "name": "proxy_host",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.Proxy.Proxy",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.Proxy",
        "name": "proxy_port",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.Proxy.Proxy",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Rounding_Helpers",
        "documentation": null,
        "reexport": "Standard.Base.Internal"
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Rounding_Helpers",
        "name": "round_max_long",
        "arguments": [],
        "selfType": "Standard.Base.Internal.Rounding_Helpers",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nThe largest smallInteger (Long) that integer round can handle. Above 14\ndigits, it is possible that the underlying long, converted to double in the\nrounding process, would lose precision in the least significant bits.\n(See https://en.wikipedia.org/wiki/Double-precision_floating-point_format.)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Rounding_Helpers",
        "name": "round_min_long",
        "arguments": [],
        "selfType": "Standard.Base.Internal.Rounding_Helpers",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nThe largest smallInteger (Long) that integer round can handle. Above 14\ndigits, it is possible that the underlying long, converted to double in the\nrounding process, would lose precision in the least significant bits.\n(See https://en.wikipedia.org/wiki/Double-precision_floating-point_format.)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Rounding_Helpers",
        "name": "check_round_input",
        "arguments": [
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Function.Function",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Rounding_Helpers",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nRestrict allowed range of input to rounding methods.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Rounding_Helpers",
        "name": "round_min_decimal_places",
        "arguments": [],
        "selfType": "Standard.Base.Internal.Rounding_Helpers",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nThe smallest allowed value for the `decimal_places` argument to `round`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Rounding_Helpers",
        "name": "round_max_decimal_places",
        "arguments": [],
        "selfType": "Standard.Base.Internal.Rounding_Helpers",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nThe largest allowed value for the `decimal_places` argument to `round`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Rounding_Helpers",
        "name": "check_decimal_places",
        "arguments": [
            {
                "name": "decimal_places",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Rounding_Helpers",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nRestrict rounding decimal_places parameter.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Location",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Location",
        "name": "Location",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Location",
        "name": "Start",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Location.Location",
        "documentation": " Indicates the beginning of a text.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Location",
        "name": "End",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Location.Location",
        "documentation": " Indicates the end of a text.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Location",
        "name": "Both",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Location.Location",
        "documentation": " Indicates both the beginning and end of a text.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System",
        "documentation": " Functionality for interacting with the host system.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "create_process",
        "arguments": [
            {
                "name": "command",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "redirect_in",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "redirect_out",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "redirect_err",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.System",
        "returnType": "Standard.Base.System.System_Process_Result",
        "isStatic": true,
        "documentation": " PRIVATE\n\nCreate a system process, returning the exit code, and the outputs to both\nstandard out and standard error.\n\nArguments:\n- command: The name of the system process.\n- arguments: An array of arguments to the system process.\n- input: The input to pass to the process via standard input.\n- redirect_in: Specifies if the standard input of the program should be\n redirected to the started process.\n- redirect_out: Specifies if the standard output of the started process\n should be redirected to the program's standard output.\n- redirect_err: Specifies if the standard error output of the started\n process should be redirected to the program's standard error output.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "exit",
        "arguments": [
            {
                "name": "code",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nExits the Enso program, returning the provided code to the parent\nprocess.\n\nArguments:\n- code: The numerical exit code for the Enso program.\n\n> Example\n Exit the Enso program with a failure.\n\n     System.exit 42",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "nano_time",
        "arguments": [],
        "selfType": "Standard.Base.System",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nGets the nanosecond resolution system time at the moment of the call.\n\n> Example\n Getting the current value of the nanosecond timer.\n\n     System.nano_time",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "os",
        "arguments": [],
        "selfType": "Standard.Base.System",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet the name of the current platform upon which the program is running.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "default_line_separator",
        "arguments": [],
        "selfType": "Standard.Base.System",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns the default line separator for the platform that the program is\ncurrently running on.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System",
        "name": "System_Process_Result",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nThe type representing the result of a process."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System",
        "name": "Result",
        "arguments": [
            {
                "name": "exit_code",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stdout",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stderr",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.System_Process_Result",
        "documentation": " PRIVATE\nCreate a System_Process_Result.\n\nArguments:\n- exit_code: The exit code of the child process.\n- stdout: Any values printed to standard out by the child process.\n- stderr: Any values printed to standard error by the child process.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "exit_code",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.System_Process_Result",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "stdout",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.System_Process_Result",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System",
        "name": "stderr",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.System_Process_Result",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.Output_Stream",
        "documentation": null,
        "reexport": "Standard.Base.System"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.Output_Stream",
        "name": "Output_Stream",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nAn output stream, allowing for interactive writing of contents."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.Output_Stream",
        "name": "Value",
        "arguments": [
            {
                "name": "stream_resource",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_handler",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.Output_Stream.Output_Stream",
        "documentation": " PRIVATE\nAn output stream, allowing for interactive writing of contents.\n\nArguments:\n- stream_resource: The internal resource that represents the underlying\n stream.\n- error_handler: An error handler for IOExceptions thrown when writing.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "stream_resource",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "error_handler",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "new",
        "arguments": [
            {
                "name": "java_stream",
                "reprType": "Standard.Base.System.Output_Stream.Java_Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_handler",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Output_Stream.Output_Stream",
        "returnType": "Standard.Base.System.Output_Stream.Output_Stream",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nGiven a Java OutputStream, wraps as a Managed_Resource and returns a new\nOutput_Stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "write_bytes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "contents",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Output_Stream.Output_Stream",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nWrites a vector of bytes in this stream at the current position.\n\nArguments:\n- contents: A vector of bytes to write.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "write_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "contents",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Output_Stream.Output_Stream",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nWrites an Input_Stream into this stream at the current position.\n\nArguments:\n- contents: An Input_Stream to write to this stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "close",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Output_Stream.Output_Stream",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nCloses this stream.\n\nEven though Streams are closed automatically upon garbage collection, it\nis still advised to close streams manually if they are not used within\na bracket pattern.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "with_java_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.System.Output_Stream.Java_Output_Stream -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Output_Stream.Output_Stream",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nExposes operations on the underlying Java output stream.\n\nUseful when integrating with polyglot functions requiring an\n`OutputStream` as an argument.\n\nArguments:\n- f: Applies a function over the internal java stream.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Output_Stream",
        "name": "with_stream_encoder",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            },
            {
                "name": "action",
                "reprType": "Standard.Base.System.Output_Stream.ReportingStreamEncoder -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Output_Stream.Output_Stream",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nRuns an action with a `ReportingStreamEncoder` encoding data to the\noutput stream with the specified encoding.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "HTTP_Status_Code",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "Value",
        "arguments": [
            {
                "name": "code",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "documentation": " An HTTP status code.\n\nArguments:\n- code: The numeric representation of the code.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "code",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "continue",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 100 Continue.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "switching_protocols",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 101 Switching Protocols.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "ok",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 200 OK.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "created",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 201 Created.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "accepted",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 202 Accepted.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "non_authoritative_information",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 203 Non-Authoritative Information.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "no_content",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 204 No Content.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "reset_content",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 205 Reset Content.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "partial_content",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 206 Partial Content.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "multiple_choices",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 300 Multiple Choices.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "moved_permanently",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 301 Moved Permanently.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "found",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 302 Found.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "see_other",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 303 See Other.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "not_modified",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 304 Not Modified.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "use_proxy",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 305 Use Proxy.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "temporary_redirect",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 307 Temporary Redirect.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "bad_request",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 400 Bad Request.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "unauthorized",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 401 Unauthorized.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "payment_required",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 402 Payment Required.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "forbidden",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 403 Forbidden.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "not_found",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 404 Not Found.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "method_not_allowed",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 405 Method Not Allowed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "not_acceptable",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 406 Not Acceptable.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "proxy_authentication_required",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 407 Proxy Authentication Required.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "request_timeout",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 408 Request Timeout.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "conflict",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 409 Conflict.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "gone",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 410 Gone.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "length_required",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 411 Length Required.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "precondition_failed",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 412 Precondition Failed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "request_entity_too_large",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 413 Request Entity Too Large.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "request_uri_too_long",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 414 Request-URI Too Long.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "unsupported_media_type",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 415 Unsupported Media Type.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "requested_range_not_satisfiable",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 416 Requested Range Not Satisfiable.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "expectation_failed",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 417 Expectation Failed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "internal_server_error",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 500 Internal Server Error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "not_implemented",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 501 Not Implemented.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "bad_gateway",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 502 Bad Gateway.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "service_unavailable",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 503 Service Unavailable.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "gateway_timeout",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 504 Gateway Timeout",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "http_version_not_supported",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": true,
        "documentation": " 505 HTTP Version Not Supported.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "is_success",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " Does the status code represent a successful response?",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.HTTP_Status_Code",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this HTTP_Status_Code.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.Unimplemented",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Unimplemented",
        "name": "Unimplemented",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Unimplemented",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Unimplemented.Unimplemented",
        "documentation": " PRIVATE\nUNSTABLE\n\nA type used to represent that something has not yet been implemented.\n\nArguments:\n- message: The message describing what implementation is missing.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Unimplemented",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Unimplemented.Unimplemented",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Unimplemented",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Unimplemented.Unimplemented",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Unimplemented.Unimplemented",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the unimplemented error to a human-readable error message.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Unimplemented",
        "name": "throw",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Unimplemented.Unimplemented",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nA function that can be used to indicate that something hasn't been\nimplemented yet.\n\nArguments:\n- message: A description of what implementation is missing.\n\n> Example\n Throwing an error to show that something is unimplemented.\n\n     import Standard.Base.Errors.Common as Errors\n\n     example_unimplemented = Errors.Unimplemented.throw",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Errors",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "Date_Time_Format_Parse_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Time.Errors.Date_Time_Format_Parse_Error",
        "documentation": " PRIVATE\nIndicates an error during parsing of a date time format pattern.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Errors.Date_Time_Format_Parse_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Errors.Date_Time_Format_Parse_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Errors.Date_Time_Format_Parse_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "Suspicious_Date_Time_Format",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A warning indicating an unexpected date time format pattern."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "Warning",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Time.Errors.Suspicious_Date_Time_Format",
        "documentation": " PRIVATE\nIndicates a warning when parsing a date time format.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Errors.Suspicious_Date_Time_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Errors",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Errors.Suspicious_Date_Time_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Errors.Suspicious_Date_Time_Format",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.Extensions",
        "documentation": null,
        "reexport": "Standard.Base.Network"
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.Extensions",
        "name": "to_uri",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS parse_uri, uri from text\nGROUP Conversions\nConvert Text to a URI.\n\nThrows a `Syntax_Error` when `self` cannot be parsed as a URI.\n\n> Example\n Parse URI text.\n\n     import Standard.Base.Network.URI.Extensions\n\n     example_parse = \"http://example.com\".to_uri",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.Extensions",
        "name": "fetch",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "HTTP_Method.Get",
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "try_auto_parse_response",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS download, http get\nGROUP Input\nFetches from the URI and returns the response, parsing the body if the\ncontent-type is recognised. Returns an  error if the status code does not\nrepresent a successful response.\n\nArguments:\n- method: The HTTP method to use. Must be one of `HTTP_Method.Get`,\n `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.\n Defaults to `HTTP_Method.Get`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- try_auto_parse_response:  If successful should the body be attempted to be\n parsed to an Enso native object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.Extensions",
        "name": "post",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.URI.URI",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "body",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Request_Body.Empty",
                "tagValues": [
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Text",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Json",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"
                ]
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "HTTP_Method.Post",
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "try_auto_parse_response",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.URI.URI",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS upload, http post\nGROUP Input\nWrites the provided data to the provided URI. Returns the response,\nparsing the body if the content-type is recognised. Returns an  error if the\nstatus code does not represent a successful response.\n\nArguments:\n- body: The data to write. See `Supported Body Types` below.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Post`,\n `HTTP_Method.Put`, `HTTP_Method.Patch`. Defaults to `HTTP_Method.Post`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- try_auto_parse_response:  If successful should the body be attempted to be\n parsed to an Enso native object.\n\n! Specifying Content Types\n\n If the `body` parameter specifies an explicit content type, then it is an\n error to also specify additional `Content-Type` headers in the `headers`\n parameter. (It is not an error to specify multiple `Content-Type` values in\n `headers`, however.)\n\n! Supported Body Types\n\n - Request_Body.Text: Sends a text string, with optional encoding and content\n   type.\n - Request_Body.Json: Sends an Enso object, after converting it to JSON.\n - Request_Body.Binary: Sends a file.\n - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys\n   must be `Text`, and the values must be `Text` or `File`.\n - Request_Body.Empty: Sends an empty body.\n\n Additionally, the following types are allowed as the `body` parameter:\n\n - Text: shorthand for `Request_Body.Text that_text`.\n - File: shorthand for `Request_Body.Binary that_file`.\n - Any other Enso object: shorthand for `Request_Body.Json that_object`.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP",
        "documentation": null,
        "reexport": "Standard.Base.Network"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP",
        "name": "HTTP",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP",
        "name": "Value",
        "arguments": [
            {
                "name": "timeout",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "follow_redirects",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "proxy",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "version",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.HTTP",
        "documentation": " PRIVATE\nAn HTTP client.\n\nArguments:\n- timeout: The length of time the client will wait for responses.\n- follow_redirects: Whether or not the client should follow redirects.\n- proxy: The proxy that the client should use, if any.\n- version: The HTTP version supported by the client.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "timeout",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "follow_redirects",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "proxy",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "version",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "new",
        "arguments": [
            {
                "name": "timeout",
                "reprType": "Standard.Base.Data.Time.Duration.Duration",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Duration.10.new",
                "tagValues": null
            },
            {
                "name": "follow_redirects",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "proxy",
                "reprType": "Standard.Base.Network.Proxy.Proxy",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Proxy.System",
                "tagValues": [
                    "Standard.Base.Network.Proxy.Proxy.None",
                    "Standard.Base.Network.Proxy.Proxy.System",
                    "Standard.Base.Network.Proxy.Proxy.Address"
                ]
            },
            {
                "name": "version",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Version.HTTP_Version",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "HTTP_Version.HTTP_1_1",
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Version.HTTP_Version.HTTP_1_1",
                    "Standard.Base.Network.HTTP.HTTP_Version.HTTP_Version.HTTP_2"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP",
        "returnType": "Standard.Base.Network.HTTP.HTTP",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreate a new instance of the HTTP client.\n\nArguments:\n- timeout: The length of time the client will wait for responses.\n- follow_redirects: Whether or not the client should follow redirects.\n- proxy: The proxy that the client should use, if any.\n- version: The HTTP version supported by the client.\n\n> Example\n Create an HTTP client with default settings.\n     HTTP.new\n\n> Example\n Create an HTTP client with extended timeout.\n     HTTP.new timeout=(Duration.new seconds=30)\n\n> Example\n Create an HTTP client with extended timeout and proxy settings.\n\n     import Standard.Base.Data.Time.Duration.Duration\n     import Standard.Base.Network.HTTP.HTTP\n     import Standard.Base.Network.Proxy.Proxy\n\n     example_new =\n        HTTP.new (timeout = (Duration.new seconds=30)) (proxy = Proxy.Address \"example.com\" 8080)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "request",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "req",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_on_failure_code",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ADVANCED\nSends a request using the HTTP client.\nThe response body will contain a raw Input_Stream which can be read once.\nPlease note, this must be closed after use (either directly or via the\nhelpers on Response_Body).\n\nArguments:\n- req: The HTTP request to send using `self` HTTP client.\n- error_on_failure_code: Whether or not to throw an error if the response\n code is not a success code.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "fetch",
        "arguments": [
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "HTTP_Method.Get",
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nStatic helper for get-like methods",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "post",
        "arguments": [
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "body",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Request_Body.Empty",
                "tagValues": [
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Text",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Json",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"
                ]
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "HTTP_Method.Post",
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nStatic helper for post-like methods",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "internal_http_client",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.HTTP",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.HTTP",
        "returnType": "Standard.Base.Network.HTTP.HttpClient",
        "isStatic": false,
        "documentation": " PRIVATE\n\nBuild an HTTP client.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "parse_headers",
        "arguments": [
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "resolve_headers",
        "arguments": [
            {
                "name": "req",
                "reprType": "Standard.Base.Network.HTTP.Request.Request",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header",
        "isStatic": true,
        "documentation": " PRIVATE\nIf either encoding or content type is specified in the Request_Body, that is used as the content type header.\nIf encoding is specified without content type, \"text/plain\" is used as the content type.\nIt is an error to specify the content type in both the request body and the header list.\nIf the body is not Request_Body.Empty, and no content type is specified, a default is used.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "build_form_body_publisher",
        "arguments": [
            {
                "name": "form_data",
                "reprType": "Standard.Base.Data.Map.Map Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "url_encoded",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Network.HTTP",
        "returnType": "Standard.Base.Data.Pair.Pair Standard.Base.Network.HTTP.BodyPublisher Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nBuild a BodyPublisher from the given form data.\nThe pair's second value is a content boundary in the case of a `multipart/form-data` form; otherwise, Nothing",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "fetch_methods",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP",
        "returnType": "Standard.Base.Data.Set.Set Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "post_methods",
        "arguments": [],
        "selfType": "Standard.Base.Network.HTTP",
        "returnType": "Standard.Base.Data.Set.Set Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "check_method",
        "arguments": [
            {
                "name": "allowed_methods",
                "reprType": "Standard.Base.Data.Set.Set Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP",
        "name": "Request_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nAn error when sending an HTTP request.\n\nArguments:\n- error_type: The type of the error.\n- message: The message for the error."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP",
        "name": "Error",
        "arguments": [
            {
                "name": "error_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Request_Error",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "error_type",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert a request error to a human-readable form.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "documentation": null,
        "reexport": "Standard.Base.Internal.Time.Format"
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "name": "interpret",
        "arguments": [
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "nodes",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Parser.Common_Nodes | Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns | Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "prepare_defaults",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "returnType": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter.DateTimeFormatter",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "name": "get_field_for",
        "arguments": [
            {
                "name": "node",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "name": "append_field",
        "arguments": [
            {
                "name": "builder",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "field",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "representation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "name": "text_representation_to_java_style",
        "arguments": [
            {
                "name": "representation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.As_Java_Formatter_Interpreter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "module",
        "module": "Standard.Base.Panic",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Panic",
        "name": "Panic",
        "params": [],
        "documentation": " A panic is an error condition that is based _outside_ of the normal\nprogram control flow.\n\nPanics \"bubble up\" through the program until they reach either an\ninvocation of Panic.recover Any or the program's main method. An unhandled\npanic in main will terminate the program.\n\n? Dataflow Errors or Panics\n Panics are designed to be used for unrecoverable situations that need\n to be handled through non-linear control flow mechanisms.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "throw",
        "arguments": [
            {
                "name": "payload",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Panic.Panic",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nThrows a new panic with the provided payload.\n\nArguments:\n- payload: The contents of the panic to be thrown. If the payload is a\n `Caught_Panic` or a raw Java exception, instead of throwing a new panic\n with it as a payload, the original exception is rethrown, preserving\n its stacktrace.\n\n> Example\n Throwing a panic containing the text \"Oh no!\".\n\n     Panic.throw \"Oh no!\"\n\n> Example\n Use together with `Panic.catch` to catch only specific types of errors\n and rethrow any others, without affecting their stacktraces.\n\n     Panic.catch Any (Panic.throw \"foo\") caught_panic-> case caught_panic.payload of\n         Illegal_Argument.Error message _ -> \"Illegal arguments were provided: \"+message\n         other_panic -> Panic.throw other_panic",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "primitive_get_attached_stack_trace",
        "arguments": [
            {
                "name": "throwable",
                "reprType": "Standard.Base.Panic.Throwable",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\n\nReturns a raw representation of the stack trace attached to the provided\nthrowable. It can be a dataflow error, a panic or a native Java exception.\nYou probably want `Panic.get_attached_stack_trace` instead.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "get_attached_stack_trace",
        "arguments": [
            {
                "name": "error",
                "reprType": "Standard.Base.Panic.Caught_Panic | Standard.Base.Panic.Throwable",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Panic.Throwable"
                ]
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Runtime.Stack_Trace_Element",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nReturns the attached stack trace of the given throwable. Can be used to get\nan Enso friendly stack trace from native Java exceptions.\n\nThe ordering of the resulting vector is such that the top stack frame is the\nfirst element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "rethrow",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nTakes any value, and if it is a dataflow error, throws it as a Panic,\notherwise, returns the original value unchanged.\n\nArguments:\n- value: The value to rethrow any errors on as a panic.\n\n> Example\n Rethrowing a dataflow error as a panic.\n\n     import Standard.Examples\n\n     example_rethrow = Panic.rethrow Examples.throw_error",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "catch",
        "arguments": [
            {
                "name": "panic_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "handler",
                "reprType": "Standard.Base.Panic.Caught_Panic -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ADVANCED\nExecutes the provided action and if a panic matching the provided type was\nthrown, calls the provided callback.\n\nIf action executes successfully, the result of `Panic.catch` is the result of\nthat action. Otherwise, if a matching panic is thrown from within the action,\nthe result is obtained by calling the provided handler callback. Any\nnon-matching panics are forwarded without changes.\n\nArguments:\n- panic_type: The expected panic type. It can either be an Enso type or a\n Java class.\n- action: The code to execute that potentially panics.\n- handler: The callback to handle the panics. The callback will be provided\n with a `Caught_Panic` instance encapsulating the `payload` of the caught\n panic and its stacktrace.\n\n> Example\n Handling a specific type of panic.\n\n     Panic.catch Illegal_Argument (Panic.throw (Illegal_Argument.Error \"Oh no!\" Nothing)) error->\n         \"Caught an `Illegal_Argument`: \"+error.payload.message\n\n> Example\n Handling any panic.\n\n     Panic.catch Any (Panic.throw (Illegal_Argument.Error \"Oh no!\" Nothing)) error->\n         \"Caught some panic!\"\n\n> Example\n Convert a string to an integer, catching the Java `NumberFormatException`\n and converting it to a more Enso-friendly dataflow error.\n\n     polyglot java import java.lang.Long\n     polyglot java import java.lang.NumberFormatException\n     parse str =\n         Panic.catch NumberFormatException (Long.parseLong str) caught_panic->\n             Error.throw (Illegal_Argument.Error \"The provided string is not a valid number: \"+caught_panic.payload.getMessage)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "with_finalizer",
        "arguments": [
            {
                "name": "finalizer",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nRuns the provided `action` ensuring that the `finalize` block is called\nregardless of if the action succeeds or fails.\n\nThis emulates the `finally` clause in Java.\n\nIf an exception occurs in the `finalizer`, it is propagated. If `action`\nthrows an exception and the `finalizer` also throws an exception, the\nexception thrown by `finalizer` takes precedence.\n\n> Example\n Print the `Cleaning...` message regardless of if the action succeeds.\n     do_cleanup =\n         IO.println \"Cleaning...\"\n     Panic.with_finalizer do_cleanup <|\n         Panic.throw (Illegal_State.Error \"Foo\")",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "recover",
        "arguments": [
            {
                "name": "expected_types",
                "reprType": "(Standard.Base.Data.Vector.Vector Standard.Base.Any.Any) | Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ADVANCED\nExecutes the provided action and converts a possible panic matching any of\nthe provided types into a dataflow Error.\n\nIf action executes successfully, the result of `Panic.recover` is the result\nof that action. Otherwise, if it panicked with a type matching one of the\nexpected error types, that panic is returned as a dataflow error. Unexpected\npanics are passed through as-is. it is the panic that was thrown after\nconversion to a dataflow error.\n\nArguments:\n- expected_types: The types of expected panics which should be recovered.\n This can either be a Vector of types or a single type.\n- action: The code to execute that potentially panics.\n\n> Example\n Converting an expected panic to a dataflow error.\n\n     Panic.recover Illegal_Argument (Panic.throw (Illegal_Argument.Error \"Oh!\" Nothing))\n\n> Example\n Converting one of many expected panic types to a dataflow error.\n\n     Panic.recover [Illegal_Argument, Illegal_State] (Panic.throw (Illegal_Argument.Error \"Oh!\" Nothing))",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "throw_wrapped_if_error",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nIf a dataflow error had occurred, wrap it in a `Wrapped_Dataflow_Error` and promote to a Panic.\n\nArguments:\n- value: value to return if not an error, or rethrow as a Panic.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "handle_wrapped_dataflow_error",
        "arguments": [
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Panic",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCatch any `Wrapped_Dataflow_Error` Panic and rethrow it as a dataflow error.\n\nArguments:\n- action: The code to execute that potentially raised a Wrapped_Dataflow_Error.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Panic",
        "name": "Caught_Panic",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Panic",
        "name": "Panic",
        "arguments": [
            {
                "name": "payload",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "internal_original_exception",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Panic.Caught_Panic",
        "documentation": " PRIVATE\nA wrapper for a caught panic.\n\nArguments:\n- payload: the payload carried by the error.\n- internal_original_exception (private): the original Java exception that is\n the source of this panic. Only for internal use.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "payload",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Panic.Caught_Panic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "convert_to_dataflow_error",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Panic.Caught_Panic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Caught_Panic",
        "returnType": "Standard.Base.Error.Error",
        "isStatic": false,
        "documentation": " Converts this caught panic into a dataflow error containing the same\npayload and stack trace.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "stack_trace",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Panic.Caught_Panic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Caught_Panic",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Runtime.Stack_Trace_Element",
        "isStatic": false,
        "documentation": " Returns the stack trace of the caught panic.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Panic",
        "name": "Wrapped_Dataflow_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nWraps a dataflow error lifted to a panic, making possible to distinguish it\nfrom other panics."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Panic",
        "name": "Error",
        "arguments": [
            {
                "name": "payload",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Panic.Wrapped_Dataflow_Error",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "payload",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Panic.Wrapped_Dataflow_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Panic",
        "name": "unwrap",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Panic.Wrapped_Dataflow_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Wrapped_Dataflow_Error",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nThrows the original error.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "documentation": null,
        "reexport": "Standard.Base.System.File"
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Existing_File_Behavior",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Specifies the behavior of a write operation when the destination file\nalready exists.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Overwrite",
        "arguments": [],
        "returnType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
        "documentation": " Replace the existing file in-place, with the new file.\n\nNote: There is a risk of data loss if a failure occurs during the write\noperation.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Backup",
        "arguments": [],
        "returnType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
        "documentation": " Creates a backup of the existing file (by appending a `.bak` suffix to\nthe name) before replacing it with the new contents.\n\nNote: This requires sufficient storage to have two copies of the file.\n     If an existing `.bak` file exists, it will be replaced.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Append",
        "arguments": [],
        "returnType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
        "documentation": " Appends data to the existing file.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Error",
        "arguments": [],
        "returnType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
        "documentation": " If the file already exists, a `File_Error.Already_Exists` error is\nraised.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "get_effective_behavior",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "is_enabled",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "((Output) Context).is_enabled",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nAdjust the Existing_File_Behavior to take account of Context enablement.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "write",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.Existing_File_Behavior.Existing_File_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nRuns the `action` which is given a file output stream and should write\nthe required contents to it.\n\nThe handle is configured depending on the specified behavior, it may\npoint to a temporary file, for example. The stream may only be used while\nthe action is being executed and it should not be stored anywhere for\nlater.\n\nThe `action` may not be run at all in case the `Error` behavior is\nselected.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "write_file_backing_up_old_one",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.System.Output_Stream.Output_Stream -> Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.Existing_File_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Internal_Write_Operation_Panicked",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Panic",
        "arguments": [
            {
                "name": "cause",
                "reprType": "Standard.Base.Panic.Caught_Panic",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.File.Existing_File_Behavior.Internal_Write_Operation_Panicked",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "cause",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.Existing_File_Behavior.Internal_Write_Operation_Panicked",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Panic.Caught_Panic",
        "returnType": "Standard.Base.Panic.Caught_Panic",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Internal_Write_Operation_Errored",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "Error",
        "arguments": [
            {
                "name": "cause",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.System.File.Existing_File_Behavior.Internal_Write_Operation_Errored",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "cause",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.System.File.Existing_File_Behavior.Internal_Write_Operation_Errored",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "catch_already_exists",
        "arguments": [
            {
                "name": "handler",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.Existing_File_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.File.Existing_File_Behavior",
        "name": "recover_io_and_not_found",
        "arguments": [],
        "selfType": "Standard.Base.System.File.Existing_File_Behavior",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Warning",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Warning",
        "name": "Warning",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A representation of a dataflow warning attached to a value.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "attach",
        "arguments": [
            {
                "name": "warning",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nAttaches a new warning to the value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "has_warnings",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warning_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nAre any warnings attached to the value?",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "remove_warnings",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warning_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nRemove the warnings (either all or of a specified type) attached to the value.\n\nArguments:\n- warning_type: The type to remove if attached to the value. Defaults to all warnings.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "throw_on_warning",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Warning.Warning",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warning_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Any",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Errors\nThrows the first matching warning (either all or of a specified type) as a data flow error.\n\nArguments:\n- warning_type: The type to throw if attached to the value. Defaults to all warnings.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "get_all",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Warning.Warning",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nGets all the warnings attached to the given value. Warnings are returned in the\nreverse-chronological order with respect to their attachment time.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "limit_reached",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns `True` if the maximal number of reported warnings for a value has been reached, `False` otherwise.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "set",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warnings",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Warning.Warning",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nSets a new list of warnings for the given value. Any warnings already present\nin `value` will be lost.\n\nArguments:\n- value: the value to which warnings should be set to.\n- warnings: vector of warnings to set to the value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "clear",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nReturns the provided value with any warnings removed from it.\n\nArguments:\n- value: the value from which warnings should be removed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "with_suspended",
        "arguments": [
            {
                "name": "arg",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nExecutes the provided function with the given argument with its warnings\nsuspended.\n\nInside of the provided function, the argument value will have no warnings\nattached. The result will inherit the warnings from the original argument\nas well as any warnings that were attached to it inside of the function.\n\nArguments:\n- arg: the value to pass to the function whose warnings should be\n suspended.\n- function: the function to execute with the given argument.\n\n> Example\n Detect warnings reported during a call to `bar` and raise them as\n errors, but also ensure that the result inherits any warnings\n originally attached to `foo`.\n\n     Warning.with_suspended foo foo->\n        result = bar foo\n        ## This will contain warnings reported during execution of\n           `bar`, but it will not be tainted with earlier warnings\n           coming from `foo`.\n        inner_warnings = Warning.get_all result . map .value\n        if inner_warnings.is_empty then result else\n            Error.throw inner_warnings.first",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "map_attached_warnings",
        "arguments": [
            {
                "name": "mapper",
                "reprType": "Standard.Base.Any.Any -> (Standard.Base.Data.Maybe.Maybe Standard.Base.Any.Any)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nMaps warnings attached to a value.\n\nArguments:\n- mapper: the function to apply to all warnings. If it returns `Some` value,\n the given warning is replaced with the new value. If it returns `Nothing`\n the original warning remains unaffected.\n- value: the value whose warnings should be modified.\n\n> Example\n Map all `No_Match_Found` warnings to more specific messages. Any other\n attached warnings are unaffected.\n\n     mapper warning = case warning of\n         Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns.Error criteria)\n         _ -> Nothing\n     Warning.map_attached_warnings mapper value",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "map_warnings_and_errors",
        "arguments": [
            {
                "name": "mapper",
                "reprType": "Standard.Base.Any.Any -> (Standard.Base.Data.Maybe.Maybe Standard.Base.Any.Any)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nAn utility function which applies the mapping function both to any attached\nwarnings and dataflow errors.\n\nArguments:\n- mapper: the function to apply to all warnings or errors. If it returns\n `Some` value, the given warning or error is replaced with the new value. If\n it returns `Nothing` the original warning or error remains unaffected.\n- value: the value whose errors or warnings should be modified.\n\n> Example\n Map all `No_Match_Found` warnings or errors to more specific messages. Any\n other attached warnings or errors are unaffected.\n\n     mapper error = case error of\n         Matching.No_Matches_Found criteria -> Maybe.Some (Missing_Input_Columns.Error criteria)\n         _ -> Nothing\n     Warning.map_warnings_and_errors mapper value",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "detach_selected_warnings",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Data.Pair.Pair Standard.Base.Any.Any Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nA helper function which selects warnings matching a predicate and returns a\npair whose first element is the original value with the matched warnings\nremoved and the second element is the list of matched warnings.\n\nArguments:\n- value: the value whose warnings are to be filtered.\n- predicate: a predicate specifying which warnings to detach. The predicate\n receives the warnings' payloads as its argument.\n\n> Example\n Detach warnings of a specific type.\n\n     result = Warning.detach_selected_warnings value (_.is_a Illegal_State)\n     result.first  # `value` with the matched warnings removed\n     result.second # the list of matched warnings",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "merge_matched_warnings",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "matcher",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "merger",
                "reprType": "Standard.Base.Data.Vector.Vector -> Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nA helper function which gathers warnings matching some predicate and passes\nthem into a function which can aggregate them.\n\nThe merger function will not be called at all if no warnings match the\ncriteria.\n\nArguments:\n- value: the value whose warnings will be transformed.\n- matcher: a predicate selecting warnings to merge.\n- merger: a function taking a list of found payloads which should return a\n list of new warnings that should be attached. It returns a list to not\n limit it to merging warnings into a single warning.\n\n> Example\n Merge `No_Matches_Found` warnings into a single such warning.\n\n     Warning.merge_matched_warnings value (_.is_a No_Matches_Found) warnings->\n         all_criteria = warnings.flat_map .criteria\n         [No_Matches_Found all_criteria]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Warning.Warning",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the warning value – usually its explanation or other contents.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "origin",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Warning.Warning",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Runtime.Stack_Trace_Element",
        "isStatic": false,
        "documentation": " ADVANCED\n\nA stack trace for the original warning creation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "reassignments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Warning.Warning",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Runtime.Stack_Trace_Element",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nA list of locations where the warning was reassigned in the order of\nlatest-first.\n\nWarnings are reassigned whenever they interact with specific language\nelements:\n- When pattern matching, the warnings of the scrutinee will be reassigned\n to the `case` expression result.\n- When calling a method, warnings assigned to `self` will be reassigned to\n the method return value.\n- When calling a polyglot function or method, warnings assigned to any\n arguments will be accumulated in the return value.\n- The standard library methods reassign warnings such that their dataflow\n nature is preserved.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "get_reassignments",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Warning.Warning",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning.Warning",
        "returnType": "Standard.Base.Data.Array.Array Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\n\nBuiltin method for getting the list of locations where the warnings was reassigned.\nShould use `Warning.reassignments` instead.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "create",
        "arguments": [
            {
                "name": "payload",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "origin",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning",
        "returnType": "Standard.Base.Warning.Warning",
        "isStatic": true,
        "documentation": " PRIVATE\n\nCreates a new instance of the primitive warning value.\nArguments:\n- payload: value to which a Warning will be associated with.\n- origin: stacktrace representing the location where the warning is being created at.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "attach_with_stacktrace",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warning",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "origin",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Runtime.Stack_Trace_Element",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nBuiltin utility function which attaches a new warning to the value\nand, compared to `Warning.attach` requires an explicit stacktrace associated with it.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "get_all_array",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning",
        "returnType": "Standard.Base.Data.Array.Array Standard.Base.Warning.Warning",
        "isStatic": true,
        "documentation": " PRIVATE\n\nBuiltin function that gets all the warnings attached to the given value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "set_array",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "warnings",
                "reprType": "Standard.Base.Data.Array.Array Standard.Base.Warning.Warning",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nSets a new list of warnings for the given value. Any warnings already present\nin `value` will be lost.\n\nArguments:\n- value: the value to which warnings should be set to.\n- warnings: array of warnings to set to the value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Warning",
        "name": "map_attached_warnings_helper",
        "arguments": [
            {
                "name": "mapper",
                "reprType": "Standard.Base.Any.Any -> (Standard.Base.Data.Maybe.Maybe Standard.Base.Any.Any)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "frames_to_drop",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Warning",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nMaps warnings attached to a value.\n\nAn internal helper function to avoid repeating the implementation.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.Response",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "Response",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "Value",
        "arguments": [
            {
                "name": "internal_http_response",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "body_object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Response.Response",
        "documentation": " PRIVATE\n\nA type representing an HTTP response.\n\nArguments:\n- internal_http_response: The internal representation of the HTTP\n response.\n- body_object: The body of the response. If nothing will be read from the\n internal_http_response. Allows for materialization.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "body_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "with_materialized_body",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Network.HTTP.Response.Response",
        "isStatic": false,
        "documentation": " PRIVATE\nCreates a new Response with the body materialized.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "uri",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Network.URI.URI",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the uri for the response.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "headers",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the response headers.\n\n> Example\n Getting the headers from a response.\n Note: This example will make a network request.\n\n     import Standard.Examples\n\n     example_headers = Examples.get_response.headers",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "content_type",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Get the response content type.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "content_length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Get the response content length in bytes.\nThis method uses the `Content-Length` header, and does not read the body.\nIf the header is not present will return Nothing.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "body",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Network.HTTP.Response_Body.Response_Body",
        "isStatic": false,
        "documentation": " Get the response body.\n\n> Example\n Getting the body from a response.\n Note: This example will make a network request.\n\n     import Standard.Examples\n\n     example_body = Examples.get_response.body",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "code",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Network.HTTP.HTTP_Status_Code.HTTP_Status_Code",
        "isStatic": false,
        "documentation": " Get the response status code.\n\n> Example\n Getting the code from a response.\n Note: This example will make a network request.\n\n     import Standard.Examples\n\n     example_code = Examples.get_response.code",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "decode",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.System.File_Format.File_Format",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Auto_Detect",
                "tagValues": [
                    "Standard.Base.System.File_Format.File_Format"
                ]
            },
            {
                "name": "if_unsupported",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.((Error) Unsupported_Content_Type ((content_type) self)).throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS parse\nGROUP Conversions\nUses the format to decode the body.\nIf using `Auto_Detect`, the content-type will be used to determine the\nformat.",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "decode_as_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ALIAS parse as text\nGROUP Conversions\nDecodes the body to a Text value.",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "decode_as_json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Data.Json.JS_Object | Standard.Base.Data.Boolean.Boolean | Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text | Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " ALIAS parse as json, parse json\nGROUP Conversions\nDecodes the body as JSON.\n\n> Example\n Convert a response from JSON.\n\n     import Standard.Examples\n\n     example_to_text = Examples.get_geo_data.decode_as_json",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Response",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Response.Response",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Response.Response",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing this Response.\n\n> Example\n Convert a response to JS_Object.\n Note: This example will make a network request.\n\n     import Standard.Examples\n\n     example_to_json = Examples.get_response.to_js_object",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Boolean",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Boolean",
        "name": "Boolean",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A type with only two possible values.\n\nThe boolean type represents the two truth values of boolean logic. It is\nprimarily used for control-flow.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Boolean",
        "name": "True",
        "arguments": [],
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "documentation": " The boolean value representing true.",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Boolean",
        "name": "False",
        "arguments": [],
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "documentation": " The boolean value representing false.",
        "annotations": [],
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Boolean",
        "name": "&&",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS and\nGROUP Logical\nComputes the logical and (conjunction) of two booleans.\n\nArguments:\n- that: The boolean to compute the conjunction of this with.\n\n! Short Circuiting\n This method is implemented in a short-circuiting manner. This means\n that if this is False, it will no longer evaluate that.\n\n> Example\n Computing the conjunction of False and True (to get False).\n\n     False && True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Boolean",
        "name": "||",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ALIAS or\nGROUP Logical\nComputes the logical or (disjunction) of two booleans.\n\nArguments:\n- that: The boolean to compute the disjunction of this with.\n\n! Short Circuiting\n This method is implemented in a short-circuiting manner. This means\n that if this is True, it will no longer evaluate that.\n\n> Example\n Computing the disjunction of True and False (to get True).\n\n     True || False",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Boolean",
        "name": "not",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nComputes the logical negation of this.\n\n> Example\n Negating True to get False.\n\n     True.not",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Boolean",
        "name": "if_then_else",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_true",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_false",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Logical\nThe if-then-else control flow operator that executes one of two branches\nbased on a conditional.\n\nArguments:\n- on_true: The computation to evaluate if this evaluates to True.\n- on_false: The computation to evaluate if this evaluates to False.\n\nBoth of the arguments to this method are _lazy_, meaning that they will\nonly be evaluated if they are needed (based on the condition).\n\n> Example\n Telling the user if a number 27 is divisible by three.\n\n     if (27 % 3) == 0 then IO.println \"Yes\" else IO.println \"No\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Boolean",
        "name": "if_then",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_true",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Logical\nThe if-then control flow operator that executes a branch if the condition\nis true, and otherwise returns Nothing.\n\nArguments:\n- on_true: The computation to evaluate if this evaluates to True.\n\nThe argument to this method is _lazy_, meaning that it will only be\nevaluated if the this evaluates to True.\n\n> Example\n Printing a message to the user only if a number is divisible by three.\n\n     if (27 % 3) == 0 then IO.println \"Fizz\"",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Vector",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Vector",
        "name": "Vector",
        "params": [
            {
                "name": "a",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "parentType": "Standard.Base.Any.Any",
        "documentation": "  The basic, immutable, vector type.\nA vector allows to store an arbitrary number of elements, in linear memory.\nIt is the recommended data structure for most applications.\n\n> Example\n  A vector containing the elements `1`, `2`, and `3`, in this order is:\n      [1, 2, 3]\n\n> Example\n  A vector containing 50 elements, each being the number `42`, can be\n  created by:\n      Vector.fill length=50 item=42",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "new",
        "arguments": [
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "constructor",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreates a new vector of the given length, initializing elements using\nthe provided constructor function.\n\nArguments:\n- length: The length of the vector (>= 0).\n- constructor: A function taking the index in the vector and returning an\n item for that index in the vector.\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.\n\n> Example\n Create a vector containing the numbers 1 through 50.\n     Vector.new 50 (ix -> ix + 1)\n\n> Example\n Create a copy of the given vector (`my_vec`).\n\n     Vector.new my_vec.length (ix -> my_vec.at ix)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "collect",
        "arguments": [
            {
                "name": "seq",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "element",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "next",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "limit",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            },
            {
                "name": "stop_at",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "<internal-684> -> ((==) <internal-684> Nothing)",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCollects elements of a sequence into a new vector. Various structures can be\nconverted into vector of elements. This helper methods allows to do so in an\niterative fashion. Enough to describe how to extract value from current item\nand how to advance to next item.\n\nArguments:\n- seq: the sequence to process.\n- element: A function taking the `seq` and follow ups and extracting the value to put into the vector\n- next: A function to advance to next _item_ of the sequence\n- limit: maximal number of elements to collect. Defaults to infinity.\n- stop_at: optional function like `(_==List.Nil)` to check for _end of sequence condition_.\n  By default checks for `Nothing` being the terminal element of a collection.\n\n> Example\n Turn a list into a vector.\n     Vector.collect (List.Cons 1 <| List.Cons 2 <| List.Nil) .x .xs stop_at=(_==List.Nil)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "from_array",
        "arguments": [
            {
                "name": "array",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nConverts an array into a vector by copying content of the array.\n\nArguments:\n- array: The array with content to copy into the new vector.\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "unify_vector_or_element",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nA helper method that takes a vector or an array or a single element and\nreturns a vector.\n\nIf it got a vector or array, a vector containing the same elements is\nreturned.\nIf it got a single element, a vector containing this element is returned.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "fill",
        "arguments": [
            {
                "name": "length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "item",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS repeat\nGROUP Constants\nCreates a new vector of the given length, filling the elements with\nthe provided constant.\n\nArguments:\n- length: The length of the vector (>= 0).\n- item: A value to be placed into each element of the vector.\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.\n\n> Example\n Create a vector containing 50 elements, each being the number `42`.\n\n     Vector.fill length=50 item=42",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "new_builder",
        "arguments": [
            {
                "name": "capacity",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "10",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Builder",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreates a new vector builder instance.\n\nA vector builder is a mutable data structure, that allows for gathering\na number of elements and then converting them into a vector. This is\nparticularly useful when the number of elements is not known upfront.\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.\n\nArguments:\n- capacity: Initial capacity of the Vector.Builder\n\n> Example\n Construct a vector using a builder that contains the items 1 to 5.\n\n     example_new_builder =\n          builder = Vector.new_builder 5\n          do_build start stop =\n              builder.append start\n              if start >= stop then Nothing else\n                  @Tail_Call do_build start+1 stop\n          do_build 1 5\n          builder.to_vector",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "from_polyglot_array",
        "arguments": [
            {
                "name": "array",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nConverts a polyglot value representing an array into a vector.\n\nArguments:\n- arr: The polyglot array value to wrap into a vector.\n\nThis is useful when wrapping polyglot APIs for further use in Enso.\n\nA vector allows to store an arbitrary number of elements in linear memory. It\nis the recommended data structure for most applications.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "to_array",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nCopies content of a vector into an Array.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the number of elements stored in this vector.\n\n> Example\n Checking the length of a vector.\n\n     [1, 2, 3, 4].length",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets an element from the vector at a specified index (0-based).\n\nArguments:\n- index: The location in the vector to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the vector, i.e. -1 will correspond to the last element.\n\n> Example\n Get the second element of a vector.\n\n     [1, 2, 3].at 1 == 2\n\n> Example\n Get the last element of a vector.\n\n     [1, 2, 3].at -1 == 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets an element from the vector at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.\n\nArguments:\n- index: The location in the vector to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the vector, i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the vector, by iteratively applying the\npassed function with next elements of the vector.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking two elements and combining them.\n\nIn general, the result of\n   [l0, l1, ..., ln] . fold init f\nis the same as\n   f (...(f (f init l0) l1)...) ln\n\n> Example\n Compute the sum of all of the elements in a vector.\n\n     [0, 1, 2] . fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "fold_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the vector, by iteratively applying the\npassed function with next elements of the vector.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking the current value, an index and an item\n and combining them.\n\n> Example\n Compute the sum of all of the elements and indexes in a vector.\n\n     [0, 1, 2] . fold_with_index 0 (s->i->e->s+i+e)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "running_fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the vector, by iteratively applying the\npassed function with the next element of the vector. After each step the\nvalue is stored resulting in a new vector of the same size as self.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking two elements and combining them.\n\n> Example\n Compute the running sum of all of the elements in a vector\n\n    [1, 2, 3].running_fold 0 (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "reduce",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_empty",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Empty_Error.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of a non-empty vector using a binary operation.\nIf the vector is empty, it returns `if_empty`.\n\nArguments:\n- function: A binary operation that takes two items and combines them.\n- if_empty: Value returned if the vector is empty.\n\n> Example\n Compute the sum of all the elements in a vector.\n\n     [0, 1, 2] . reduce (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Not_Found.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the first element of the vector that satisfies the condition or\n`if_missing` if no elements of the vector satisfy it.\n\nArguments:\n- condition: A `Filter_Condition` or a function that takes an element and\n returns a boolean value specifying if it satisfies the condition.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the vector.\n- if_missing: Value returned if no element satisfies the predicate.\n\n> Example\n Finding a first element of the vector that is larger than 3.\n\n     [1, 2, 3, 4, 5].find (> 3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the index of an element in the vector.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the vector.\n\n> Example\n Find the index of an element in a vector.\n\n     [1, 2, 3].index_of 2 == 1\n\n> Example\n Find the index of the first palindrome.\n\n     [\"ab\", \"abab\", \"aba\", \"bbb\"].index_of (s-> s == s.reverse) == 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "last_index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the last index of an element in the vector.\nReturns `Nothing` if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n negative, it is counted from the end of the vector.\n\n> Example\n Find the last index of an element in a vector.\n\n     [1, 2, 3, 1, 2, 3].last_index_of 2 == 4\n\n> Example\n Find the index of the last palindrome.\n\n     [\"ab\", \"abab\", \"aba\", \"bbb\"].last_index_of (s-> s == s.reverse) == 3",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "any",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a predicate holds for at least one element of self vector.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Checking if any element of the vector is larger than 3.\n\n     [1, 2, 3, 4, 5].any (Filter_Condition.Greater than=3)\n\n> Example\n Checking if any element of the vector is even.\n\n     [1, 2, 3, 4, 5].any (x-> x%2 == 0)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a condition holds for all elements in this vector.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Check if all elements in the vector are less than zero.\n\n     [-1, 1, 5, 8].all (Filter_Condition.Less than=0)\n\n> Example\n Check if all elements in the vector are even.\n\n     [-1, 1, 5, 8].all (x-> x%2 == 0)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "elem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether this vector contains a given value as an element.\n\nArguments:\n- elem: The item to see if it exists in the vector.\n\n> Example\n Checking if the vector contains the number 72.\n\n     [1, 383, 72, 301].contains 72",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this vector is empty.\n\n> Example\n Checking for emptiness.\n\n     [].is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this vector is not empty.\n\n> Example\n Checking for non-emptiness.\n\n     [1].not_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "filter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "filter",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nSelects all elements of this vector which satisfy a condition.\n\nArguments:\n- filter: The filter to apply to the vector. It can either be an instance\n of `Filter_Condition` or a predicate taking a value and returning a\n boolean value indicating whether the corresponding element should be\n kept or not.\n\n> Example\n Selecting all elements that are greater than 3.\n\n     [1, 2, 3, 4, 5].filter (> 3)\n     [1, 2, 3, 4, 5].filter (Filter_Condition.Greater than=3)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "filter_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nSelects all elements of this vector which satisfy a predicate.\n\nArguments:\n- predicate: A function that takes an index and a list element and\n returns a boolean value that says whether that value should be included\n in the result.\n\n> Example\n Selecting all elements which are equal to their position in the vector.\n\n     [0, 10, 2, 2].filter (==) == [0, 2]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "partition",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Pair.Pair (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any) (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
        "isStatic": false,
        "documentation": " GROUP Selections\nPartitions the vector into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input vector.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Splitting a vector into elements that start with a prefix.\n\n     [\"a\", \"b\", \"ax\", \"bx\"].partition (Filter_Condition.Starts_With \"a\") == (Pair [\"a\", \"ax\"] [\"b\", \"bx\"])\n\n> Example\n Splitting a vector into even and odd elements.\n\n     [1, 2, 3, 4, 5].partition (x -> x % 2 == 0) == (Pair [2, 4] [1, 3, 5])",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "partition_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Pair.Pair (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any) (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
        "isStatic": false,
        "documentation": " Partitions the vector into `Vector`s of elements which satisfy a given\npredicate and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of elements\nwhich did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input vector.\n\nArguments:\n- predicate: A function that takes an index and an element and returns a\n boolean value.\n\n> Example\n Splitting a vector into elements at even and odd positions.\n\n     [\"a\", \"b\", \"c\", \"d\"].partition_with_index (ix -> _ -> ix % 2 == 0) == (Pair [\"a\", \"c\"] [\"b\", \"d\"])",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element of the vector, returning the `Vector` of\nresults.\n\nArguments:\n- function: A function that takes an element in the vector and returns\n some transformation of that element.\n\n> Example\n Add 1 to each element of the vector.\n\n     [1, 2, 3] . map +1",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "flat_map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> (Standard.Base.Data.Vector.Vector Standard.Base.Any.Any)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element of the vector, returning the `Vector`\nthat contains all results concatenated.\n\nArguments:\n- function: A function that takes an element in the vector, transforms\n it, and returns a `Vector`.\n\n> Example\n Replace each number `n` in the vector with itself repeated n times.\n\n    [0, 1, 2] . flat_map (n -> Vector.fill n n)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "flatten",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Calculations\nTransforms a vector of vectors into a `Vector` of inner elements - removes\none layer of nesting from a stack of nested vectors.\n\n> Example\n Flatten a vector of vectors of numbers.\n\n    [[1, 2, 3], [4, 10], [], [0], [0]] . flatten == [1, 2, 3, 4, 10, 0, 0]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "map_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element of the vector, returning the `Vector`\nof results.\n\nArguments:\n- function: A function that takes an index and an item and calculates a\n new value for at that index.\n\nThe function is called with both the element index as well as the\nelement itself.\n\n> Example\n Sum numbers with their indices in a vector.\n\n     [1, 2, 3].map_with_index (+)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the vector.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\nArguments:\n- function: A function to apply to each element of the vector.\n\n> Example\n Print each element in the vector to standard output.\n\n     [1, 2, 3, 4, 5] . each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "each_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "f",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the vector.\n\nArguments:\n- function: A function to apply that takes an index and an item.\n\nThe function is called with both the element index as well as the\nelement itself.\n\nUnlike `map`, this method does not return the individual results,\ntherefore it is only useful for side-effecting computations.\n\n> Example\n Print each element in the vector to standard output.\n\n     [1, 2, 3, 4, 5] . each_with_index (ix->elem-> IO.println Pair ix elem)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "reverse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReverses the vector, returning a `Vector` with the same elements, but in\nthe opposite order.\n\n> Example\n Reverse a two-element vector.\n\n     [1, 2].reverse",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nGenerates a human-readable text representation of the vector.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "short_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "max_entries",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "10",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nGenerates a human-readable text representation of the vector, keeping its\nlength limited.\n\nArguments:\n- max_entries: The maximum number of entries that are displayed. If the\n vector contains more elements, the number of hidden elements is also\n displayed.\n\n> Example\n Convert a large vector of numbers to a short text.\n\n     (0.up_to 100).to_vector.short_display_text max_entries=2 == \"[0, 1 and 98 more elements]\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS concatenate, union, append\nGROUP Operators\nConcatenates two vectors, resulting in a new `Vector`, containing all the\nelements of `self`, followed by all the elements of `that`.\n\nArguments:\n- that: The vector to concatenate to the end of `self`.\n\n> Example\n Concatenate two single-element vectors.\n\n     [1] + [2]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "insert",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "self.length",
                "tagValues": null
            },
            {
                "name": "item",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Calculations\nInserts the given item into the vector at the given index.\n\nArguments:\n- at: The index at which to insert the item before.\n If the index is less than 0, the index will be counted back from the\n end. If the index is equal to the length of the vector, the item will\n be appended to the end of the vector.\n- item: The item to insert into the vector.\n\n> Example\n Insert 'X' into a vector at different locations:\n\n    ['a', 'b', 'c'].insert 1 'X' == ['a', 'X', 'b', 'c']\n    ['a', 'b', 'c'].insert -1 'X' == ['a', 'b', 'X', 'c']\n    ['a', 'b', 'c'].insert item='X' == ['a', 'b', 'c', 'X']",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "insert_builtin",
        "arguments": [
            {
                "name": "vec",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "values",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "remove",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Selections\nRemoves the item at the given index from the vector.\n\nArguments:\n- at: The index at which to remove the item.\n If the index is less than 0, the index will be counted back from the\n end.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "remove_builtin",
        "arguments": [
            {
                "name": "vec",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "join",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "separator",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "prefix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            },
            {
                "name": "suffix",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Calculations\nWhen `self` is a vector of text values, concatenates all the values by\ninterspersing them with `separator`.\n\nArguments:\n- separator (optional): The text to use to join the textual elements of the vector.\n- prefix (optional): The prefix to add at the beginning.\n- suffix (optional): The suffix to add at the end.\n\n> Example\n Join the elements of the vector together as a string.\n\n     [\"foo\", \"bar\", \"baz\"].join \", \"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "slice",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nCreates a new vector with the skipping elements until `start` and then\ncontinuing until `end` index.\n\nArguments:\n- start: The index of the first element to include.\n- end: The index to stop slicing at.\n\n> Example\n Remove the first 2 elements then continue until index 5 from the vector.\n\n     [1, 2, 3, 4, 5, 6, 7, 8].slice 2 5 == [3, 4, 5]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "take",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Index_Sub_Range.1.First",
                "tagValues": [
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS first, last, slice, sample\nGROUP Selections\nCreates a new `Vector` with only the specified range of elements from the\ninput, removing any elements outside the range.\n\nArguments:\n- range: The section of the this vector to return.\n If an `Index_Sub_Range`, then the selection is interpreted following\n the rules of that type.\n If a `Range`, the selection is specified by two indices, from and to.",
        "annotations": [
            "range"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "drop",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Index_Sub_Range.1.First",
                "tagValues": [
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nCreates a new `Vector`, removing any elements from the specified range.\n\nArguments:\n- range: The section of the this vector to return.\n If an `Index_Sub_Range`, then the selection is interpreted following\n the rules of that type.\n If a `Range`, the selection is specified by two indices, from and to.",
        "annotations": [
            "range"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "zip",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "<internal-689> <internal-690> -> [(FORCE <internal-689>), (FORCE <internal-690>)]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS combine, merge, join by row position\nGROUP Calculations\nPerforms a pair-wise operation passed in `function` on consecutive\nelements of `self` and `that`.\n\nArguments:\n- that: The vector to zip with `self`.\n- function: The function used to combine pairwise elements of `self` and\n `that`.\n\nThe result of this function is a `Vector` of length being the shorter of\n`self` and `that`, containing results of calling `function`.\n\n> Example\n Calculate the pairwise sum of two vectors.\n\n     [1, 2, 3].zip [4, 5, 6] (+)\n\n> Example\n When the `function` is not provided, it defaults to creating a pair\n of both elements.\n\n     [1, 2, 3].zip [4, 5, 6] == [[1, 4], [2, 5], [3, 6]]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "pad",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "elem",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Calculations\nExtend `self` vector to the length of `n` appending elements `elem` to\nthe end.\n\nArguments:\n- n: The length to pad `self` out to.\n- elem: The element to fill the new padded slots with.\n\nIf the new length `n` is less than existing length, `self` vector is\nreturned.\n\n> Example\n Extending vector to the length of 5\n\n     [1, 2, 3].pad 5 0 == [1, 2, 3, 0, 0]\n\n> Example\n Extending vector to the length of 5\n\n     [1, 2, 3, 4, 5].pad 5 0 == [1, 2, 3, 4, 5]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the first element from the vector, or an `Index_Out_Of_Bounds` if the vector\nis empty.\n\n> Example\n The following code returns 1.\n\n     [1, 2, 3, 4].first",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the last element of the vector, or an `Index_Out_Of_Bounds` if the vector is\nempty.\n\n> Example\n The following code returns 4.\n\n     [1, 2, 3, 4].last",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the second element from the vector, or a `Index_Out_Of_Bounds` if the\nvector doesn't have a second element.\n\nUseful when tuples are implemented as vectors.\n\n> Example\n The following code returns 2.\n\n     [1, 2, 3, 4].second",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "sort",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "order",
                "reprType": "Standard.Base.Data.Sort_Direction.Sort_Direction",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Sort_Direction.Ascending",
                "tagValues": [
                    "Standard.Base.Data.Sort_Direction.Sort_Direction.Ascending",
                    "Standard.Base.Data.Sort_Direction.Sort_Direction.Descending"
                ]
            },
            {
                "name": "on",
                "reprType": "(Standard.Base.Any.Any -> Standard.Base.Any.Any) | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "by",
                "reprType": "(Standard.Base.Any.Any -> Standard.Base.Any.Any -> Standard.Base.Data.Ordering.Ordering | Standard.Base.Nothing.Nothing) | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "on_incomparable",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Ignore",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS order_by\nGROUP Calculations\nSort the vector.\n\nArguments:\n- order: The order in which the vector elements are sorted.\n- on: A projection from the element type to the value of that element\n being sorted on. If set to `Nothing` (the default),\n identity function will be used.\n- by: A function that compares the result of applying `on` to two\n elements, returning an an `Ordering` if the two elements are comparable\n or `Nothing` if they are not. If set to `Nothing` (the default argument),\n `Ordering.compare _ _` method will be used.\n- on_incomparable: A `Problem_Behavior` specifying what should happen if\n two incomparable values are encountered.\n\nBy default, elements are sorted in ascending order.\n\n\nThis is a stable sort, meaning that items that compare the same will not\nhave their order changed by the sorting process.\n\n! Computational Complexity\n The complexities for this sort are:\n - *Worst-Case Time:* `O(n * log n)`\n - *Best-Case Time:* `O(n)`\n - *Average Time:* `O(n * log n)`\n - *Worst-Case Space:* `O(n)` additional\n\n? Incomparable values\n Incomparable values are either values with different comparators or with\n the same comparator returning `Nothing` from its `compare` method.\n See the documentation of the `Ordering` module for more info.\n\n? Implementation Note\n The sort implementation is based upon an adaptive, iterative mergesort\n that requires far fewer than `n * log(n)` comparisons when the vector\n is partially sorted. When the vector is randomly ordered, the\n performance is equivalent to a standard mergesort.\n\n? Multiple comparators\n Elements with different comparators are incomparable by definition.\n This case is handled by first grouping the `self` vector into groups\n with the same comparator, recursively sorting these groups, and then\n merging them back together. The order of the sorted groups in the\n resulting vector is based on the order of fully qualified names of\n the comparators in the `self` vector, with the exception of the group\n for the default comparator, which is always the first group.\n\n Additionally, an `Incomparable_Values` dataflow error will be returned\n if the `on_incomparable` parameter is set to `Problem_Behavior.Report_Error`,\n or a warning attached if the `on_incomparable` parameter is set to\n `Problem_Behavior.Report_Warning` in case of encountering incomparable\n values.\n\n It takes equal advantage of ascending and descending runs in the array,\n making it much simpler to merge two or more sorted arrays: simply\n concatenate them and sort.\n\n> Example\n Sorting a vector of numbers.\n\n     [5, 2, 3, 45, 15].sort == [2, 3, 5, 15, 45]\n\n> Example\n Sorting a vector of `Pair`s on the first element, descending.\n\n     [Pair 1 2, Pair -1 8].sort Sort_Direction.Descending (_.first)\n\n> Example\n Sorting a vector with elements with different comparators. Values `1`\n and `My_Type` have different comparators. `1` will be sorted before `My_Type`\n because it has the default comparator.\n\n     [My_Type.Value 'hello', 1].sort == [1, My_Type.Value 'hello']",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "distinct",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "x -> (FORCE x)",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nKeeps only unique elements within the vector, removing any duplicates.\n\nArguments:\n- on: A projection from the element type to the value of that element\n     which determines the uniqueness criteria.\n\nThe returned unique elements are kept in the same order as they appeared\nin the input.\n\nOut of multiple equivalent (equal up to the `on` projection) elements,\nalways the one appearing first in the input is kept.\n\n> Example\n Removing repeating entries.\n\n     [1, 3, 1, 2, 2, 1] . distinct == [1, 3, 2]\n\n> Example\n Keeping only pairs whose first elements are unique.\n\n     [Pair 1 \"a\", Pair 2 \"b\", Pair 1 \"c\"] . distinct (on = _.first) == [Pair 1 \"a\", Pair 2 \"b\"]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " Returns the vector as a `Vector`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "to_list",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector",
        "returnType": "Standard.Base.Data.List.List",
        "isStatic": false,
        "documentation": " Converts the vector to a list with the same elements.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Vector",
        "name": "Builder",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Vector",
        "name": "Value",
        "arguments": [
            {
                "name": "java_builder",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Vector.Builder",
        "documentation": " PRIVATE\n\nA builder type for Enso vectors.\n\nArguments:\n- java_builder: The accumulator for the new vector.\n\nA vector builder is a mutable data structure, that allows to gather a\nnumber of elements and then convert them to a vector. This is\nparticularly useful when the number of elements is not known upfront.\n\n> Example\n In the following example we'll read items from the standard input,\n until the string \"end\" is entered by the user and then return a vector\n containing all items.\n\n     Construct a vector using a builder that contains the items 1 to 10.\n\n         example_new_builder =\n             do_build builder start stop =\n                 new_builder = builder.append start\n                 if start >= stop then new_builder else\n                     @Tail_Call do_build new_builder start+1 stop\n             builder = do_build Vector.new_builder 1 10\n             builder.to_vector\n\n! TODO\n We may want to revisit the fold pattern - it is required for correct\n propagation of dataflow errors, but it is very easy to forget about it\n and get wrong error propagation. Instead we may want to have a `Ref`\n inside of the Builder. Any error detected during `append` could set\n that `Ref` and then `to_vector` could propagate that error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "java_builder",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "new",
        "arguments": [
            {
                "name": "capacity",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "10",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Data.Vector.Builder",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a new builder.\n\nArguments:\n- capacity: Initial capacity of the Vector.Builder\n\n> Example\n Make a new builder\n\n     Vector.new_builder",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this builder is empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this builder is not empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the current length of the builder.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "append",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "item",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Appends a new element into this builder and returns it, propagating any\nerrors that the provided element could have contained.\n\nArguments:\n- item: The item to append to the vector builder.\n\n> Example\n Append two items.\n\n     builder = Vector.new_builder\n     builder . append 10 . append 20",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "append_vector_range",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "vector",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "vector.length",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Appends a part of a given vector to this builder\n\nArguments:\n- vector: The vector from which the elements are sourced.\n- start: The start index of the range to append.\n- end: The end index (the first index after the last element to be\n appended) of the range to be appended.\n\n> Example\n Append a part of the vector.\n\n     builder = Vector.new_builder\n     builder . append_vector_range [20, 30, 40, 50] 1 3 . to_vector == [30, 40]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "unsafe_append",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "item",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nAppends a new element into this builder.\n\n? Propagating Dataflow Errors\n Since this is an imperative operation which returns Nothing, if the\n item to be appended contained a dataflow error, the operation will fail\n and unless its result is inspected, the error can very easily be\n ignored. To avoid this, prefer to use the `append` operation and\n consume the returned builder which will contain any dataflow errors if\n they need to be propagated.\n\nArguments:\n- item: The item to append to the vector builder.\n\n> Example\n Append an item to a vector builder.\n\n     Vector.new_builder.unsafe_append 10",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets an element from the vector builder at a specified index (0-based).\n\nArguments:\n- index: The location in the vector to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back\n of the vector, i.e. -1 will correspond to the last element.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the first element from the vector, or an `Index_Out_Of_Bounds` if the vector\nis empty.\n\n> Example\n The following code returns 1.\n\n     [1, 2, 3, 4].first",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet the last element of the vector, or an `Index_Out_Of_Bounds` if the vector is\nempty.\n\n> Example\n The following code returns 4.\n\n     [1, 2, 3, 4].last",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "any",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Any.Any -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a predicate holds for at least one element of this builder.\n\nArguments:\n- condition: A `Filter_Condition` or a function that takes a vector\n element and returns a boolean value that says whether that value\n satisfies a condition.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Builder",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Builder",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConverts this builder to a vector containing all the appended elements.\n\n> Example\n Use a builder to add elements to and then create a vector.\n\n    example_to_vector =\n        bldr = Vector.new_builder\n        bldr.append 1\n        bldr.append 10\n        bldr.append 100\n        bldr.to_vector",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Vector",
        "name": "Empty_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nAn error that indicates that the vector is empty."
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Vector.Empty_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Empty_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nPretty prints the empty error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "slice_ranges",
        "arguments": [
            {
                "name": "vector",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "ranges",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a new vector where for each range, a corresponding section of the\nsource vector is added to the result.\n\nAssumes that the ranges have been already bounds-checked (for example by\npassing them through `resolve_ranges`).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "slice_many_ranges",
        "arguments": [
            {
                "name": "vector",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "ranges",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nSee `slice_ranges`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Vector",
        "name": "check_start_valid",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "length",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Date",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "new_builtin",
        "arguments": [
            {
                "name": "year",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "month",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "day",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": true,
        "documentation": " PRIVATE\nConstructs a new Date from a year, month, and day.\n\nArguments\n- year: The year to represent.\n- month: The month-of-year to represent, from 1 (January) to 12 (December).\n- day: The day-of-month to represent, from 1 to 31. It must be valid for the\n year and month.\n\nRecommended to use `Date.new` instead which handles potential exceptions.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Date",
        "name": "Date",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " This type represents a date, often viewed as year-month-day.\n\nFor example, the value \"2nd October 2007\" can be stored in a `Date`.\n\nThis class does not store or represent a time or timezone. Instead, it\nis a description of the date, as used for birthdays. It cannot represent\nan instant on the time-line without additional information such as an\noffset or timezone.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "today",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": true,
        "documentation": " ALIAS current date, now\nGROUP DateTime\n\nObtains the current date from the system clock in the system timezone.\n\n> Example\n Get the current date.\n\n     example_today = Date.today",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "new",
        "arguments": [
            {
                "name": "year",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "month",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            },
            {
                "name": "day",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " GROUP DateTime\nConstructs a new Date from a year, month, and day.\n\nArguments\n- year: The year to represent.\n- month: The month-of-year to represent, from 1 (January) to 12 (December).\n- day: The day-of-month to represent, from 1 to 31. It must be valid for the\n year and month.\n\nReturns a `Time_Error` if the provided time is not valid.\n\n> Example\n Create a new local date at Unix epoch.\n\n     from Standard.Base import Date\n\n     example_new = Date.new 1970\n\n> Example\n Get the local date of 5th August 1986.\n\n     example_new = Date.new 1986 8 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "parse",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time_Formatter.iso_date",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS date from text\nGROUP Conversions\n\nConverts text containing a date into a Date object.\n\nArguments:\n- text: The text to try and parse as a date.\n- format: A pattern describing how to parse the text,\n or a `Date_Time_Formatter`.\n\nReturns a `Time_Error` if the provided `text` cannot be parsed using the\nprovided `format`.\n\n? Default Date Formatting\n Unless you provide a custom format, the text must represent a valid date\n that can be parsed using the ISO-8601 extended local date format. The\n format consists of:\n\n - Four digits or more for the year. Years in the range 0000 to 9999\n   will be pre-padded by zero to ensure four digits. Years outside\n   that range will have a prefixed positive or negative symbol.\n - A dash\n - Two digits for the month-of-year. This is pre-padded by zero to ensure\n   two digits.\n - A dash\n - Two digits for the day-of-month. This is pre-padded by zero to ensure two\n   digits.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - y: Year. The number of pattern letters determines the minimum number of\n   digits.\n   - y: The year using any number of digits.\n   - yy: The year, using at most two digits. The default range is\n     1950-2049, but this can be changed by including the end year in\n     braces e.g. `yy{2099}`.\n   - yyyy: The year, using exactly four digits.\n - M: Month of year. The number of pattern letters determines the format:\n   - M: Any number (1-12).\n   - MM: Month number with zero padding required (01-12).\n   - MMM: Short name of the month (Jan-Dec).\n   - MMMM: Full name of the month (January-December).\n   The month names depend on the selected locale.\n - d: Day. The number of pattern letters determines the format:\n   - d: Any number (1-31).\n   - dd: Day number with zero padding required (01-31).\n   - ddd: Short name of the day of week (Mon-Sun).\n   - dddd: Full name of the day of week (Monday-Sunday).\n   The weekday names depend on the selected locale.\n   Both day of week and day of month may be included in a single pattern -\n   in such case the day of week is used as a sanity check.\n - Q: Quarter of year.\n   If only year and quarter are provided in the pattern, when parsing a\n   date, the result will be the first day of that quarter.\n\n> Example\n Parse the date of 23rd December 2020.\n\n     from Standard.Base import Date\n\n     example_parse = Date.parse \"2020-12-23\"\n\n> Example\n Recover from an error due to a wrong format.\n\n     from Standard.Base import Date\n     from Standard.Base.Errors.Common import Time_Error\n\n     example_parse_err = Date.parse \"my birthday\" . catch Time_Error _->\n         Date.new 2000 1 1\n\n> Example\n Parse \"1999-1-1\" as Date using a custom format.\n\n     from Standard.Base import Date\n\n     example_parse = Date.parse \"1999-1-1\" \"yyyy-M-d\"\n\n> Example\n Recover from the parse error.\n\n     from Standard.Base import Date\n     from Standard.Base.Errors.Common import Time_Error\n\n     example_parse_err =\n         date = Date.parse \"1999-1-1\" \"yyyy-MM-dd\"\n         date.catch Time_Error (_->Date.new 2000 1 1)",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the year field.\n\n> Example\n Get the current year.\n\n     from Standard.Base import Date\n\n     example_year = Date.today.year",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "month",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the month of year field, as a number from 1 to 12.\n\n> Example\n Get the current month.\n\n     example_month = Date.today.month",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "day",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the day of month field.\n\n> Example\n Get the current day.\n\n     from Standard.Base import Date\n\n     example_day = Date.today.day",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "week_of_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the number of week of year this date falls into.\n\nProduces a warning for a Date that is before epoch start.\n\nArguments:\n- locale: the locale used to define the notion of weeks of year.\n If no locale is provided, then the ISO 8601 week of year is used.\n\n! Locale Dependency\n Note that this operation is locale-specific. It varies both by the\n local definition of the first day of week and the definition of the\n first week of year. For example, in the US, the first day of the week\n is Sunday and week 1 is the week containing January 1. In the UK on the\n other hand, the first day of the week is Monday, and week 1 is the week\n containing the first Thursday of the year. Therefore it is important to\n properly specify the `locale` argument.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "is_leap_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns if the date is in a leap year.\n\nProduces a warning for a Date that is before epoch start.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "length_of_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the number of days in the year represented by this date.\n\nProduces a warning for a Date that is before epoch start.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "century",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the century of the date.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "quarter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the quarter of the year the date falls into.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "length_of_month",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the number of days in the month represented by this date.\n\nProduces a warning for a Date that is before epoch start.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "day_of_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Returns the day of the year.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "day_of_week",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Day_Of_Week.Day_Of_Week",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturns the day of the week.\n\nProduces a warning for a Date that is before epoch start.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "start_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Period.Month",
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the first date within the `Date_Period` containing self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "end_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Period.Month",
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the last date within the `Date_Period` containing self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "next",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Period.Day",
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the next date adding the `Date_Period` to self.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- period: the period to add to self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "previous",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Period.Day",
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns the previous date subtracting the `Date_Period` from self.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- period: the period to add to self.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "until",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Period.Period",
        "isStatic": false,
        "documentation": " GROUP DateTime\nCreates a `Period` between self and the provided end date.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- end: the end date of the interval to count workdays in.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "days_until",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_end_date",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nCounts the days between self (inclusive) and the provided end date\n(exclusive, or inclusive if include_end_date=True).\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- end: the end date of the interval to count workdays in.\n- include_end_date: whether to include the end date in the count.\n By default the end date is not included in the interval.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "date_part",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nReturns a requested date part as integer.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "date_diff",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nComputes a time difference between the two dates.\n\nIt returns an integer expressing how many periods fit between the two\ndates.\n\nThe difference will be positive if `end` is greater than `self`.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- end: A date to compute the difference from.\n- period: The period to compute the difference in.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "date_add",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "period",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP DateTime\nShifts the date by a specified period.\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- amount: An integer specifying by how many periods to shift the date.\n- period: The period by which to shift.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "work_days_until",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "holidays",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "include_end_date",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nCounts workdays between self (inclusive) and the provided end date\n(exclusive).\n\nProduces a warning for a Date that is before epoch start.\nSee `Date_Time.enso_epoch_start`.\n\nArguments:\n- end: the end date of the interval to count workdays in.\n- holidays: dates of holidays to skip when counting workdays.\n- include_end_date: whether to include the end date in the count.\n By default the end date is not included in the interval.\n\n? Including the end date\n To be consistent with how we usually represent intervals (in an\n end-exclusive manner), by default the end date is not included in the\n count. This has the nice property that for example to count the work\n days within the next week you can do\n `date.work_days_until (date + (Period.new days=7))` and it will look at\n the 7 days starting from the current `date` and not 8 days. This also\n gives us a property that\n `date.work_days_until (date.add_work_days N) == N` for any non-negative\n N. On the other hand, sometimes we may want the end date to be included\n in the count, so we provide the `include_end_date` argument for that\n purpose. Setting it to `True` should make the result consistent with\n the `NETWORKDAYS` function in Excel and similar products.\n\n> Example\n Count the number of workdays between two dates.\n\n     from Standard.Base import Date\n\n     example_workdays = Date.new 2020 1 1 . work_days_until (Date.new 2020 1 5)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "to_date_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "time_of_day",
                "reprType": "Standard.Base.Data.Time.Time_Of_Day.Time_Of_Day",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Time_Of_Day.new",
                "tagValues": null
            },
            {
                "name": "zone",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Time_Zone.system",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date_Time.Date_Time",
        "isStatic": false,
        "documentation": " ALIAS date to time\nGROUP Conversions\n\nCombine this date with time of day to create a point in time.\n\nArguments:\n- time_of_day: The time to combine with the date to create a time.\n- zone: The time-zone in which to create the time.\n\n> Example\n Convert this date to midnight UTC time.\n\n     from Standard.Base import Date, Time_Of_Day, Time_Zone\n\n     example_to_time = Date.new 2020 2 3 . to_date_time Time_Of_Day.new Time_Zone.utc",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Time.Period.Period | Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS add period\nGROUP Operators\nAdd the specified amount of time to this instant to get another date.\n\nArguments:\n- amount: The amount of time to add to this instant. It can be a\n `Period` or `Date_Period`.\n\n> Example\n Add 6 months to a local date.\n\n     import Standard.Base.Data.Time.Duration\n\n     example_add = Date.new 2020 + (Period.new months=6)\n\n> Example\n Add a month to a local date.\n\n     import Standard.Base.Data.Time.Date_Period\n\n     example_add = Date.new 2020 + Date_Period.Month",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "up_to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_end",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "isStatic": false,
        "documentation": " ALIAS date range\nGROUP Input\nCreates an increasing range of dates from `self` to `end`.\n\nArguments:\n- end: The end of the range.\n- include_end: Specifies if the right end of the range should be included. By\n default, the range is right-exclusive.\n\n> Example\n Create a range of dates.\n\n     (Date.new 2021 12 05).up_to (Date.new 2021 12 10)\n\n> Example\n Create a range containing dates [2021-12-05, 2021-12-06].\n\n     (Date.new 2021 12 05).up_to (Date.new 2021 12 06) include_end=True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "down_to",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "include_end",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "isStatic": false,
        "documentation": " ALIAS date range\nGROUP Input\nCreates a decreasing range of dates from `self` to `end`.\n\nArguments:\n- end: The end of the range.\n- include_end: Specifies if the right end of the range should be included. By\n default, the range is right-exclusive.\n\n> Example\n Create a reverse range of dates.\n\n     (Date.new 2021 12 10).down_to (Date.new 2021 12 05)\n\n> Example\n Create a range containing dates [2021-12-06, 2021-12-05].\n\n     (Date.new 2021 12 06).down_to (Date.new 2021 12 05) include_end=True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "add_work_days",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "days",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            },
            {
                "name": "holidays",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP DateTime\nShift the date by the specified amount of business days.\n\nFor the purpose of this method, the business days are defined to be\nMonday through Friday.\n\nProduces a warning for a Date that is before epoch start. See\n`Date_Time.enso_epoch_start`.\n\nThis method always returns a day which is a business day - if the shift\namount is zero, the closest following business day is returned. For the\npurpose of calculating the shift, the holidays are treated as if we were\nstarting at the next business day after them, for example counting the\nshift starting on Saturday or Sunday works as if we were counting the\nshift from Monday (for positive shifts). So shifting Sunday by zero days\nwill return Monday, but shifting it by one day will return a Tuesday\n(so that there is the full work day - Monday) within the interval. For\nnegative shifts, shifting either Saturday or Sunday one day backwards\nwill return Friday, but shifting Monday one day backwards will return a\nFriday. The whole logic is made consistent with `work_days_until`, so\nthat the following properties hold:\n   date.work_days_until (date.add_work_days N) == N for any N >= 0\n   (date.add_work_days N).work_days_until date == -N for any N < 0\n\nArguments:\n- amount: The number of business days to shift the date by. If `amount`\n is zero, the current date is returned, unless it is a weekend or a\n holiday, in which case the next business day is returned.\n- holidays: An optional list of dates of custom holidays that should also\n be skipped. If it is not provided, only weekends are skipped.\n\n> Example\n Shift the date by 5 business days.\n\n     example_shift = Date.new 2020 2 3 . add_work_days 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "internal_add_work_days",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "days",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "1",
                "tagValues": null
            },
            {
                "name": "holidays",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " PRIVATE\n\nensure_in_epoch breaks tail call annotation and causes\nstack overflow. That is why `add_work_days` method is split into\ntwo methods.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "amount",
                "reprType": "Standard.Base.Data.Time.Period.Period | Standard.Base.Data.Time.Date_Period.Date_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS subtract period\nGROUP Operators\nSubtract the specified amount of time from this instant to get another\ndate.\n\nArguments:\n- amount: The amount of time to add to this instant. It can be a\n `Period` or `Date_Period`.\n\n> Example\n Subtract 7 days from a local date.\n\n     from Standard.Base import Date\n     import Standard.Base.Data.Time.Duration\n\n     example_subtract = Date.new 2020 - (Period.new days=7)\n\n> Example\n Subtract a month from a local date.\n\n     import Standard.Base.Data.Time.Date_Period\n\n     example_add = Date.new 2020 - Date_Period.Month",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Date.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JS_Object representing this Date.\n\n> Example\n Convert the current date to a JS_Object.\n\n     example_to_json = Date.today.to_js_object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "format",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Time_Formatter.iso_date",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Conversions\nFormat this date using the provided format specifier.\n\nArguments:\n- format: A pattern describing how to format the text,\n or a `Date_Time_Formatter`.\n\n? Pattern Syntax\n If the pattern is provided as `Text`, it is parsed using the format\n described below. See `Date_Time_Formatter` for more options.\n - y: Year. The number of pattern letters determines the minimum number of\n   digits.\n   - y: The year using any number of digits.\n   - yy: The year, using at most two digits. The default range is\n     1950-2049, but this can be changed by including the end year in\n     braces e.g. `yy{2099}`.\n   - yyyy: The year, using exactly four digits.\n - M: Month of year. The number of pattern letters determines the format:\n   - M: Any number (1-12).\n   - MM: Month number with zero padding required (01-12).\n   - MMM: Short name of the month (Jan-Dec).\n   - MMMM: Full name of the month (January-December).\n   The month names depend on the selected locale.\n - d: Day. The number of pattern letters determines the format:\n   - d: Any number (1-31).\n   - dd: Day number with zero padding required (01-31).\n   - ddd: Short name of the day of week (Mon-Sun).\n   - dddd: Full name of the day of week (Monday-Sunday).\n   The weekday names depend on the selected locale.\n   Both day of week and day of month may be included in a single pattern -\n   in such case the day of week is used as a sanity check.\n - Q: Quarter of year.\n   If only year and quarter are provided in the pattern, when parsing a\n   date, the result will be the first day of that quarter.\n\n> Example\n Format \"2020-06-02\" as \"2 Jun 2020\"\n\n     from Standard.Base import Date\n\n     example_format = Date.new 2020 6 2 . format \"d MMMM yyyy\"\n\n> Example\n Format \"2020-06-02\" as \"2 Jun 20\"\n\n     example_format = Date.new 2020 6 2 . format \"d MMMM yy\"\n\n> Example\n Format \"2020-06-02\" as \"Tuesday, 02 Jun 2020\"\n\n     example_format = Date.new 2020 6 2 . format \"EEEE, dd MMMM yyyy\"\n\n> Example\n Format \"2020-06-02\" as \"Tue Jun 2\"\n\n     example_format = Date.new 2020 6 2 . format \"EEE MMM d\"\n\n> Example\n Format \"2020-06-02\" as \"2020AD\"\n\n     example_format = Date.new 2020 6 2 . format \"yyyyGG\"\n\n> Example\n Format \"2020-06-21\" with French locale as \"21. juin 2020\"\n\n     example_format = Date.new 2020 6 21 . format (Date_Time_Formatter.from \"d. MMMM yyyy\" (Locale.new \"fr\"))",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "week_days_between",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "is_weekend",
        "arguments": [
            {
                "name": "date",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "fits_in_range",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "new_builtin",
        "arguments": [
            {
                "name": "hours",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "minutes",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "seconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": true,
        "documentation": " PRIVATE\nObtains an instance of `Time_Zone` using an offset in hours, minutes and seconds\nfrom the UTC zone.\n\nArguments:\n- hours: The timezone offset in hours from UTC, from -18 to +18.\n- minutes: The timezone offset in minutes from the nearest hour, from 0 to\n ±59. The sign must match that of the hours argument.\n- seconds: The timezone offset in seconds from the nearest minute, from 0 to\n ±59. The sign must match that of the minutes argument.\n\nRecommended to use `Time_Zone.new` instead which provides defaults.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "parse_builtin",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": true,
        "documentation": " PRIVATE\n\nThis method parses the ID producing a `Time_Zone`.\n\nArguments:\n- text: The text representing a zone identifier.\n\nRecommended to use `Time_Zone.parse` instead which handles potential exceptions.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "Time_Zone",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A type representing a time zone.\n\nArguments:\n- internal_zone_id: The identifier for the internal zone of the\n representation.\n\nA time zone can be eiter offset-based like \"-06:00\" or id-based like\n\"Europe/Paris\".",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "system",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": true,
        "documentation": " The system default timezone.\n\n> Example\n Get the system default timezone.\n\n     from Standard.Base import Time_Zone\n\n     example_system = Time_Zone.system",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "local",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": true,
        "documentation": " ALIAS current time zone\n\nThe system's local timezone.\n\n> Example\n Get the system's local timezone.\n\n     from Standard.Base import Time_Zone\n\n     example_local = Time_Zone.local",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "utc",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": true,
        "documentation": " ALIAS utc time zone\n\nThe UTC timezone.\n\n> Example\n Get the UTC timezone.\n\n     from Standard.Base import Time_Zone\n\n     example_utc = Time_Zone.utc",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "new",
        "arguments": [
            {
                "name": "hours",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "minutes",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "seconds",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": true,
        "documentation": " Obtains an instance of `Time_Zone` using an offset in hours, minutes and seconds\nfrom the UTC zone.\n\nArguments:\n- hours: The timezone offset in hours from UTC, from -18 to +18.\n- minutes: The timezone offset in minutes from the nearest hour, from 0 to\n ±59. The sign must match that of the hours argument.\n- seconds: The timezone offset in seconds from the nearest minute, from 0 to\n ±59. The sign must match that of the minutes argument.\n\n> Example\n Get time zone 1 hour 1 minute and 50 seconds from UTC.\n\n     from Standard.Base.Time.Time_Zone import Time_Zone\n\n     example_new = Time_Zone.new 1 1 50",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "parse",
        "arguments": [
            {
                "name": "id",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS time zone from text\nGROUP Conversions\n\nThis method parses the ID producing a `Time_Zone`.\n\nArguments:\n- id: The text representing a zone identifier.\n\n> Example\n Get Central European Time.\n\n     from Standard.Base import Time_Zone\n\n     example_parse = Time_Zone.parse \"CET\"\n\n> Example\n Get Moscow time.\n\n     from Standard.Base import Time_Zone\n\n     example_parse = Time_Zone.parse \"Europe/Moscow\"\n\n> Example\n Get time zone -06:00.\n\n     from Standard.Base import Time_Zone\n\n     example_parse = Time_Zone.parse \"-06:00\"\n\n> Example\n Get custom offset +03:02:01 of 3 hours 2 minutes an 1 second.\n\n     from Standard.Base import Time_Zone\n\n     example_parse = Time_Zone.parse \"+03:02:01\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "zone_id",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP DateTime\nGet the unique timezone ID.\n\n> Example\n Get the unique identifier for your system's current timezone.\n\n     from Standard.Base import Time_Zone\n\n     example_zone_id = Time_Zone.system.zone_id",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "offset",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "at",
                "reprType": "Standard.Base.Data.Time.Date_Time.Date_Time",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Get the offset in seconds at given date time.\nArguments:\n- at: The date to compute offset at.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing this Time_Zone.\n\n> Example\n Convert your system's current timezone to a JS_Object.\n\n     from Standard.Base import Time_Zone\n\n     example_to_json = Time_Zone.system.to_js_object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Time_Zone.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Time_Zone",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Time.Time_Zone.Time_Zone",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Runtime.Managed_Resource",
        "documentation": " An API for manual resource management.",
        "reexport": "Standard.Base.Runtime"
    },
    {
        "type": "type",
        "module": "Standard.Base.Runtime.Managed_Resource",
        "name": "Managed_Resource",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A managed resource is a special type of resource that is subject to\nautomated cleanup when it is no longer in use.\n\nThis API is intended for use by developers to provide easy-to-use\nabstractions, and is not expected to be used by end-users."
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Managed_Resource",
        "name": "bracket",
        "arguments": [
            {
                "name": "constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "destructor",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Nothing.Nothing",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nAcquires a resource, performs an action on it, and destroys it safely,\neven in the presence of panics.\n\nArguments:\n- constructor: The computation responsible for acquiring the resource.\n- destructor: The computation responsible for destroying the resource\n once it is done being used.\n- action: The computation to perform on the acquired resource.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Managed_Resource",
        "name": "register",
        "arguments": [
            {
                "name": "resource",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "returnType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nRegisters a resource with the resource manager to be cleaned up using\nfunction once it is no longer in use.\n\nArguments:\n- function: The action to be executed on resource to clean it up when\n it is no longer in use.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Managed_Resource",
        "name": "finalize",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nForces finalization of a managed resource using the registered finalizer,\neven if the resource is still reachable.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Managed_Resource",
        "name": "with",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nExecutes the provided action on the resource managed by the managed\nresource object.\n\nArguments:\n- action: The action that will be applied to the resource managed by\n resource.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Managed_Resource",
        "name": "take",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Managed_Resource.Managed_Resource",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nTakes the value held by the managed resource and unregisters the\nfinalization step for this resource, effectively removing it from the\nmanaged resources system.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Nothing",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "type",
        "module": "Standard.Base.Nothing",
        "name": "Nothing",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " The type that has only a singleton value. Nothing in Enso is used as an\nuniversal value to indicate the lack of presence of a value.\n\nIt is often used alongside a value of type a to provide a Maybe or\nOption abstraction.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Nothing",
        "name": "is_nothing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the type is an instance of `Nothing`.\n\n> Example\n Checking if the value 1 is nothing.\n\n     1.is_nothing",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Nothing",
        "name": "if_nothing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Logical\nIf this is Nothing then returns `function`.\n\n> Example\n If the value \"Hello\" is nothing return \"\".\n\n     \"Hello\".if_nothing \"\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Nothing",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " Get a value for the key of the object.\nAs `Nothing` has no keys, returns `if_missing`.\n\nArguments:\n- key: The key to get.\n- if_missing: The value to return if the key is not found.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Meta",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Type",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Type",
        "documentation": " PRIVATE\nADVANCED\n\nType meta-representation.\n\nArguments:\n- value: The value of the type in the meta representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Type",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "constructors",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Type",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Type",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " ADVANCED\n\nReturns a vector of `Meta.Constructor` for this type",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "methods",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Type",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Type",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns a vector of method names that can be invoked\non instances of this type.\n? Static Methods\n\n To obtain list of _static methods_ on a given type\n use `Meta.type_of`.\n\n> Example\n All instance methods to invoke on `Integer` as\n `(v:Integer) v.method_name...`:\n\n     Meta.meta Integer . methods\n\n> Example\n All static methods to invoke on `Integer` as\n `Integer.method_name...`:\n\n    Meta.meta (Meta.type_of Integer) . methods",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "qualified_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Type",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Type",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns the fully qualified name of the type.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Type",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Type",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns the short name of the type.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "find",
        "arguments": [
            {
                "name": "qualified_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Type",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ADVANCED\nGROUP Metadata\n\nFinds type specified by fully qualified name. Searches\nall the types known to the system by transitive closure\nof import statements in executing modules.\n\nArguments:\n- qualified_name: fully qualified name.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Atom",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Atom",
        "documentation": " PRIVATE\nADVANCED\n\nAn Atom meta-representation.\n\nArguments:\n- value: The value of the atom in the meta representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "fields",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Atom",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns a vector of field values of the given atom.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "constructor",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Atom",
        "returnType": "Standard.Base.Meta.Constructor",
        "isStatic": false,
        "documentation": " ADVANCED\n\nReturns a constructor value of the given atom.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Constructor",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Constructor",
        "documentation": " PRIVATE\nADVANCED\n\nA constructor meta-representation.\n\nArguments:\n- value: The value of the constructor in the meta representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Constructor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "fields",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Constructor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Constructor",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns a vector of field names defined by a constructor.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Constructor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Constructor",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns the name of a constructor.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "new",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Constructor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "fields",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Constructor",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ADVANCED\n\nCreates a new atom of the given constructor.\n\nArguments:\n- fields: A vector of arguments to pass to the constructor when creating the\n new atom.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "declaring_type",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Constructor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Constructor",
        "returnType": "Standard.Base.Meta.Type",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\nReturns the type that this constructor is a part of.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Primitive",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Primitive",
        "documentation": " PRIVATE\nADVANCED\n\nA primitive value meta-representation.\n\nArguments:\n- value: The value of the primitive object in the meta representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Primitive",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Unresolved_Symbol",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Unresolved_Symbol",
        "documentation": " PRIVATE\nADVANCED\n\nAn unresolved symbol meta-representation.\n\nArguments:\n- value: The value of the unresolved symbol in the meta representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Unresolved_Symbol",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "rename",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Unresolved_Symbol",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "new_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Unresolved_Symbol",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nReturns a new unresolved symbol with its name changed to the provided\nargument.\n\nArguments:\n- new_name: The new name for the unresolved symbol.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Unresolved_Symbol",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Unresolved_Symbol",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns the name of an unresolved symbol.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "scope",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Unresolved_Symbol",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Unresolved_Symbol",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns the definition scope of an unresolved symbol.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "instrument",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Unresolved_Symbol",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Unresolved_Symbol",
        "returnType": "Standard.Base.Meta.Instrumentor",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nStarts building an instrumentation for a given node",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Error",
        "documentation": " PRIVATE\nADVANCED\n\nAn error meta-representation, containing the payload of a dataflow error.\n\nArguments:\n- value: The payload of the error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Polyglot",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Polyglot",
        "documentation": " PRIVATE\nADVANCED\n\nA polyglot value meta-representation.\n\nArguments:\n- value: The polyglot value contained in the meta representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "value",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Polyglot",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_language",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Polyglot",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Polyglot",
        "returnType": "Standard.Base.Meta.Language",
        "isStatic": false,
        "documentation": " ADVANCED\nGROUP Metadata\n\nReturns the language with which a polyglot value is associated.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_same_object_as",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ADVANCED\n\nChecks whether `self` represents the same underlying reference as `value`.\n\nArguments:\n- value_1: The first value.\n- value_2: The second value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_a",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "typ",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ADVANCED\n\nChecks if `self` is an instance of `typ`.\n\nArguments:\n- typ: The type to check `self` against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_a",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Error.Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "typ",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Error.Error",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " ADVANCED\n\nChecks if `self` is an instance of `typ`.\n\nArguments:\n- typ: The type to check `self` against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_atom_constructor",
        "arguments": [
            {
                "name": "atom",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGets the atom constructor instance for the provided atom.\n\nArguments:\n- atom: The atom to obtain the constructor for.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_atom_fields",
        "arguments": [
            {
                "name": "atom",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet the fields for the provided atom.\n\nArguments:\n- atom: The atom to obtain the fields for.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_type_constructors",
        "arguments": [
            {
                "name": "typ",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "factory",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet the constructors for the provided type.\n\nArguments:\n- typ: The type to obtain the constructors for.\n- factory: function to use to wrap constructors in",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_type_methods",
        "arguments": [
            {
                "name": "typ",
                "reprType": "Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet the methods for the provided type.\n\nArguments:\n- typ: The type to obtain the methods for.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_polyglot_language",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet a textual representation of the language from which an object comes.\n\nArguments:\n- value: The value to obtain the source language for.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "create_unresolved_symbol",
        "arguments": [
            {
                "name": "name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "scope",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Meta.Unresolved_Symbol",
        "isStatic": true,
        "documentation": " PRIVATE\n\nCreates an unresolved symbol for the name name in the scope.\n\nArguments:\n- name: The name of the unresolved symbol.\n- scope: The scope in which the symbol name is unresolved.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_unresolved_symbol_name",
        "arguments": [
            {
                "name": "symbol",
                "reprType": "Standard.Base.Meta.Unresolved_Symbol",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nObtains the name of the provided unresolved symbol.\n\nArguments:\n- symbol: The unresolved symbol from which to get the name.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_unresolved_symbol_scope",
        "arguments": [
            {
                "name": "symbol",
                "reprType": "Standard.Base.Meta.Unresolved_Symbol",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nObtains the scope in which the provided unresolved symbol was created.\n\nArguments:\n- symbol: The unresolved symbol from which to get the scope.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_constructor_fields",
        "arguments": [
            {
                "name": "atom_constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Array.Array",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet the fields of an atom constructor.\n\nArguments:\n- atom_constructor: The constructor from which to get the fields.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_constructor_name",
        "arguments": [
            {
                "name": "atom_constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nGet the name of an atom constructor.\n\nArguments:\n- atom_constructor: The atom constructor from which to obtain the name.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "new_atom",
        "arguments": [
            {
                "name": "constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "fields",
                "reprType": "Standard.Base.Data.Array.Array",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Meta.Atom",
        "isStatic": true,
        "documentation": " PRIVATE\n\nConstructs a new atom using the provided constructor and fields.\n\nArguments:\n- constructor: The constructor for the atom to create.\n- fields: The arguments to pass to constructor.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "atom_with_hole",
        "arguments": [
            {
                "name": "factory",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Meta.Atom",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\n\nConstructs a new atom with a \"hole\". Returns an object with `value` and\n`fill` properties. Value contains the created atom and `fill` holds a\nfunction to \"fill the hole\" later.\n\nArguments:\n- factory: a function that takes the \"hole\" element and returns newly created atom",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "meta",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Meta.Atom | Standard.Base.Meta.Constructor | Standard.Base.Meta.Primitive | Standard.Base.Meta.Polyglot | Standard.Base.Meta.Unresolved_Symbol | Standard.Base.Meta.Error",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nReturns a meta-representation of a given runtime entity.\n\nArguments:\n- value: The runtime entity to get the meta representation of.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_same_object",
        "arguments": [
            {
                "name": "value_1",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value_2",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nChecks whether two objects are represented by the same underlying reference.\n\nArguments:\n- value_1: The first value.\n- value_2: The second value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_a",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "typ",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nChecks if `value` is an instance of `typ`.\n\nArguments:\n- value: The value to check for being an instance of `typ`.\n- typ: The type to check `self` against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "java_instance_check",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "typ",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "type_of",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nReturns the type of the given value.\n\nArguments:\n- value: The value to get the type of.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_annotation",
        "arguments": [
            {
                "name": "target",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "parameter_name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\n\nGiven a type object, method name and a parameter name, return the associated annotation if it exists.\n\nArguments:\n- target: The value or type to get the attribute from.\n- method: The symbol representing method or constructor to get the attribute for.\n- parameter_name: The name of the parameter to get the attribute for.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Language",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nRepresents a polyglot language."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Java",
        "arguments": [],
        "returnType": "Standard.Base.Meta.Language",
        "documentation": " PRIVATE\nADVANCED\n\nThe Java language.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Unknown",
        "arguments": [],
        "returnType": "Standard.Base.Meta.Language",
        "documentation": " PRIVATE\nADVANCED\n\nAn unknown language.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_atom_constructor",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\n\nChecks if the provided value is an atom constructor.\n\nArguments:\n- value: The value to check.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_atom",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\n\nChecks if the provided value is an atom.\n\nArguments:\n- value: The value to check.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_error",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\n\nChecks if the provided value is a runtime error.\n\nArguments:\n- value: The value to check.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_type",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\n\nChecks if the provided value is a type.\n\nArguments:\n- value: The value to check.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_polyglot",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\n\nChecks if the provided value is a polyglot value.\n\nArguments:\n- value: The value to check.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "is_unresolved_symbol",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": true,
        "documentation": " PRIVATE\n\nChecks if the provided value is an unresolved symbol.\n\nArguments:\n- value: The value to check.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_source_location",
        "arguments": [
            {
                "name": "skip_frames",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nReturns a Text representing the source location of a stack frame above\nthe call.\n\nArguments:\n- skip_frames: how many frames on the stack to skip.\n\nIf the function is called with 0 it will return the location of that call.\nNote that not only function calls, but also things like pattern matching add\nframes to the stack and there is no guarantee that the amount of frames that\nneed to be skipped will not change between versions, so this method should be\nused carefully.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_source_location_builtin",
        "arguments": [
            {
                "name": "frames_to_skip",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nReturns a Text representing the source location of a stack frame above\nthe call.\n\nArguments:\n- frames_to_skip: how many frames on the stack to skip. Called with 0\n will return exact location of the call.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_simple_type_name",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nDisplays the type of the provided value as text.\n\nArguments:\n- value: The value for which to display the type.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_qualified_type_name",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\n\nReturns the fully qualified type name of the given value.\n\nArguments:\n- value: the value to get the type of.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_short_type_name",
        "arguments": [
            {
                "name": "typ",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns a short name of a type (the last part of its qualified name).\n\nArguments:\n- typ: the type to get the short name of.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "get_constructor_declaring_type",
        "arguments": [
            {
                "name": "constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns the type that this constructor is a part of.\n\nArguments:\n- constructor: the constructor to get the declaring type of.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "instrumentor_builtin",
        "arguments": [
            {
                "name": "op",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "args",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Meta",
        "name": "Instrumentor",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nADVANCED\n\nBuilder to create instrumentation for a function"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Meta",
        "name": "Value",
        "arguments": [
            {
                "name": "impl",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Meta.Instrumentor",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "impl",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Instrumentor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "on_enter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Instrumentor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "fn",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Instrumentor",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nRegisters callback to be executed at the begining of node/expression\nexecution. The callback `fn` gets UUID of the node/expression that is\nbeing executed and can return `Nothing` to continue regular execution\nor anything else to skip the execution and just return given value.\n\nArguments:\n- fn: The callback function accepting UUID.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "on_return",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Instrumentor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "fn",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Instrumentor",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nRegisters callback to be executed when a node/expression evaluation\nis over. The callback `fn` gets UUID and the computed value. Usually\nthe value is _cached_ and returned from `on_enter` callback next time\nthe same expression is evaluated.\n\nArguments:\n- fn: The callback function accepting UUID and computed value",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "on_call",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Instrumentor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "fn",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Instrumentor",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nRegisters callback to be executed when a node/expression representing function is about to be called.\nThe callback `fn` shall accept three arguments. The UUID to identify the expression, the function to be\ninvoked and the arguments to pass to the function. The callback can return `Nothing`\n(in such case the function gets executed with provided arguments) or some other value,\nwhich is then returned instead of calling the function.\n\nArguments:\n- fn: The callback function accepting UUID and function value",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "activate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Meta.Instrumentor",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta.Instrumentor",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\n\nActivates configured instrumentor. Returns managed resource to\ndeactivate the instrumentor later.\n\nArguments:\n- value: The value of the atom in the meta representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Meta",
        "name": "find_type_by_qualified_name",
        "arguments": [
            {
                "name": "fqn",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Meta",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns type specified by fully qualified name.\n\nArguments:\n- fqn: fully qualified name.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Period",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "ensure_period",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "error_msg",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Cannot use Duration as a parameter",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Period",
        "name": "Period",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A date-based amount of time in the ISO-8601 calendar system, such as\n'2 years, 3 months and 4 days'.\n\nThis type models an amount of time in terms of years, months and days.\n`Duration` is its time-based equivalent. Moreover, `Period` counts with\ndaylight saving time. This means that a Period of 1 day does not necessarily\nhave to be 24 hours of Duration.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Period",
        "name": "Value",
        "arguments": [
            {
                "name": "internal_period",
                "reprType": "Standard.Base.Data.Time.Period.Java_Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Time.Period.Period",
        "documentation": " PRIVATE\n\nArguments:\n- internal_period: An internal representation of period of type\n java.time.Period.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "between",
        "arguments": [
            {
                "name": "start_date_inclusive",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end_date_exclusive",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Time.Period.Period",
        "isStatic": true,
        "documentation": " Create a Period representing the time interval between two dates.\n\nArguments:\n- start_date_inclusive: The start date of the period, included.\n- end_date_exclusive: The end date of the period, excluded.\n\n> Example\n Get a Period between 2022-10-21 and 2022-09-12\n\n     import Standard.Base.Data.Time.Period\n\n     example_period = Period.between (Date.new 2022 10 21) (Date.new 2022 9 12)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "new",
        "arguments": [
            {
                "name": "years",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "months",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "days",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Time.Period.Period",
        "isStatic": true,
        "documentation": " GROUP DateTime\nCreate a new Period from years, months and days.\n\nArguments:\n- years: Amount of years.\n- months: Amount of months.\n- days: Amount of days.\n\n> Example\n Create a Period of 2 years and 5 days\n\n     import Standard.Base.Data.Time.Period\n\n     example_period = Period.new 2 0 5",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "years",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nGet the portion of the period expressed in years.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "months",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nGet the portion of the period expressed in months.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "total_months",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nGet the portion of the period coming from months and years as months\n(every year is translated to 12 months).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "days",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP DateTime\nGet the portion of the period expressed in days.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "+",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other_period",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS add period\nGROUP Operators\nAdd the specified amount of time to this period.\n\nArguments:\n- other_period: The period to add to `self`. Note that this cannot be a\n `Duration`, neither `Date_Time`.\n\n> Example\nAdd 1 day to 1 month.\n\n   import Standard.Base.Data.Time.Period\n\n   example_add = (Period.new months=1) + (Period.new days=1)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "-",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "other_period",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS subtract period\nGROUP Operators\nSubtract a specified amount of time from this period.\n\nArguments:\n- other_period: Other Period to add to this Period. Note that this\n cannot be a `Duration`, neither `Date_Time`.\n\n> Example\n Subtract 11 months from a period of 3 years\n\n     import Standard.Base.Data.Time.Period\n\n     example_subtract = (Period.new years=3) - (Period.new months=11)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "*",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "factor",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " ALIAS multiply, times\nGROUP Operators\nMultiply the amount of time in this period by the specified scalar.\n\nArguments:\n- factor: The scalar to multiply by.\n\n> Example\n Multiply a period of 1 year and 2 months by 2\n\n     import Standard.Base.Data.Time.Period\n\n     example_multiply = (Period.new years=1 months=2) * 2",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "negate",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Time.Period.Period",
        "isStatic": false,
        "documentation": " GROUP Operators\nNegate all amounts in the period.\n\nThis is useful when a period used for going forward in time needs to be\nused for going backwards instead.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert Period to a friendly string.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JavaScript Object representing a Period.\n\n> Example\n Convert a period of 10 months to a JS_Object.\n\n     example_to_json = (Period.new months=10).to_js_object",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Period",
        "name": "catch_java_exceptions",
        "arguments": [
            {
                "name": "operation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.Encoding_Error",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Encoding_Error",
        "name": "Encoding_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Encoding_Error",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Encoding_Error.Encoding_Error",
        "documentation": " One or more byte sequences were not decodable using the Encoding.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Encoding_Error",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Encoding_Error.Encoding_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Encoding_Error",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Encoding_Error.Encoding_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Encoding_Error.Encoding_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nProvides a human-readable representation of the encoding error.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Normalization",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "Normalization",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Enso representations of `com.ibm.icu.text.Normalizer2.Mode`. Does not\ninclude all values of `Mode`.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "NFC",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Normalization.Normalization",
        "documentation": " Unicode NFC normalization mode.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "NFD",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Normalization.Normalization",
        "documentation": " Unicode NFD normalization mode.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "NFKC",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Normalization.Normalization",
        "documentation": " Unicode NFKC normalization mode.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "NFKD",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Normalization.Normalization",
        "documentation": " Unicode NFKD normalization mode.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "NFKCCasefold",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Normalization.Normalization",
        "documentation": " Unicode NFKC_CF normalization mode.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "get_java_mode",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Normalization.Normalization",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Normalization.Normalization",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Normalization",
        "name": "get_mode_name",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Normalization.Normalization",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Normalization.Normalization",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "documentation": null,
        "reexport": "Standard.Base.Internal.Time.Format"
    },
    {
        "type": "type",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "Analyzer",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "Value",
        "arguments": [
            {
                "name": "nodes",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Parser.Common_Nodes | Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns | Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "flattened",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "documentation": " PRIVATE\n\nFields:\n- nodes: The raw list of nodes as returned from the parser.\n- flattened: The list of nodes after flattening the optional sections and\n removing literals - so it just contains raw patterns.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "nodes",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Parser.Common_Nodes | Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns | Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Internal.Time.Format.Parser.Common_Nodes | Standard.Base.Internal.Time.Format.Parser.Standard_Date_Patterns | Standard.Base.Internal.Time.Format.Parser.ISO_Week_Year_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Patterns | Standard.Base.Internal.Time.Format.Parser.Time_Zone_Patterns",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "flattened",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "new",
        "arguments": [
            {
                "name": "nodes",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "has_required",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "constructor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE\nChecks if the given node is contained as one of the nodes, ignoring the optional ones.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "validate_after_parsing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "continuation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nRuns basic validations that can happen on construction of the formatter, regardless of the context.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "get_parsing_only_warnings",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " PRIVATE\nPrepares a list of warnings that are only reported when parsing using the\nformatter.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "check_possible_m_mismatches",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problem_builder",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "check_possible_seconds_aliasing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problem_builder",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "has_24h",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "has_12h",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "has_am_pm",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "check_24h_and_am_pm_collision",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problem_builder",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "check_missing_am_pm_in_hour_parse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problem_builder",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "has_day_and_month_but_not_year",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Internal.Time.Format.Analyzer",
        "name": "check_missing_year_in_date_parse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "problem_builder",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Internal.Time.Format.Analyzer.Analyzer",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.Time_Error",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.Time_Error",
        "name": "Time_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.Time_Error",
        "name": "Error",
        "arguments": [
            {
                "name": "error_message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "cause",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.Time_Error.Time_Error",
        "documentation": " PRIVATE\nUNSTABLE\n\nAn error produced while working with time- and date-related methods.\n\nArguments:\n- error_message: The message for the error.\n- cause: An optional exception that caused this error (usually a Java Exception).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Time_Error",
        "name": "error_message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Time_Error.Time_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Time_Error",
        "name": "cause",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Time_Error.Time_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Time_Error",
        "name": "epoch_start",
        "arguments": [],
        "selfType": "Standard.Base.Errors.Time_Error.Time_Error",
        "returnType": "Standard.Base.Errors.Time_Error.Time_Error",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.Time_Error",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.Time_Error.Time_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.Time_Error.Time_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nProvides a human-readable representation of the time error.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network",
        "documentation": null,
        "reexport": null
    },
    {
        "type": "module",
        "module": "Standard.Base.Data",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data",
        "name": "read",
        "arguments": [
            {
                "name": "path",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.System.File_Format.File_Format",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Auto_Detect",
                "tagValues": [
                    "Standard.Base.System.File_Format.File_Format"
                ]
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Warning",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS load, open\nGROUP Input\nReads a file into Enso.\nUses the specified file format to parse the file into an Enso type. If not\nspecified will use the file's extension to determine the file format.\n\nArguments:\n- path: The path to the file to read. If the path is a URI, then the data\n will be fetched if from a supported protocol.\n- format: A `File_Format` object used to read file into memory.\n If `Auto_Detect` is specified; the provided file determines the specific\n type and configures it appropriately. If there is no matching type then\n a `File_Error.Unsupported_Type` error is returned.\n You can use `File_Format.all` to get a list of currently loaded\n formats.\n- on_problems: Specifies the behavior when a problem occurs during the\n function.\n By default, a warning is issued, but the operation proceeds.\n If set to `Report_Error`, the operation fails with a dataflow error.\n If set to `Ignore`, the operation proceeds without errors or warnings.\n\n> Example\n Read the first sheet of an XLSX from disk and convert it into a table.\n\n     from Standard.Table import all\n     import Standard.Examples\n\n     example_xlsx_to_table = Data.read Examples.xlsx\n\n> Example\n Read the sheet named `Dates` from an XLS and convert it to a table.\n\n     from Standard.Table import all\n     from Standard.Table import Excel, Worksheet\n     import Standard.Examples\n\n     example_xls_to_table = Data.read Examples.xls (Excel (Worksheet 'Dates'))",
        "annotations": [
            "format"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data",
        "name": "read_text",
        "arguments": [
            {
                "name": "path",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Encoding.utf_8",
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Problem_Behavior.Report_Warning",
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " ALIAS load text, open text\nGROUP Input\nOpen and read the file at the provided `path`.\n\nArguments:\n- path: The path of the file to open and read the contents of. It will\n accept a textual path or a file.\n- encoding: The text encoding to decode the file with. Defaults to UTF-8.\n- on_problems: Specifies the behavior when a problem occurs during the\n function.\n By default, a warning is issued, but the operation proceeds.\n If set to `Report_Error`, the operation fails with a dataflow error.\n If set to `Ignore`, the operation proceeds without errors or warnings.\n\n> Example\n Read the `data.csv` file in the project directory's `data` directory. You\n will need to create the file `data.csv` manually in that directory.\n\n     import Standard.Base.Data\n     import Standard.Examples\n\n     example_read = Data.read_text Examples.csv_path",
        "annotations": [
            "encoding"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data",
        "name": "list_directory",
        "arguments": [
            {
                "name": "directory",
                "reprType": "Standard.Base.System.File.File | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "name_filter",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            },
            {
                "name": "recursive",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.System.File.File",
        "isStatic": true,
        "documentation": " GROUP Input\nLists files contained in the provided directory.\n\nArguments:\n- name_filter: A glob pattern that can be used to filter the returned files.\n If it is not specified, all files are returned.\n- recursive: Specifies whether the returned list of files should include also\n files from the subdirectories. If set to `False` (the default), only the\n immediate children of the listed directory are considered.\n\nThe `name_filter` can contain the following special characters:\n- `\"?\"` - which matches a single filename character (so it will not match a\n `\"/\"`).\n- `\"*\"` - which matches any number of characters, but again does not cross\n directories.\n- `\"**\"` - which matches any number of characters and can cross directories.\n- `\"\\\"` - can be used to escape the characters with special meaning; to get a\n single backslash, you need to specify it twice; you also need to keep in\n mind that the interpolating string literal also uses `\"\\\"` as an escape\n sequence, so you need to type `'\\\\\\\\'` to get a single backslash for the\n glob pattern, unless you use the raw strings, where you only need to escape\n once: `\"\\\\\"`.\n- Brackets can be used to match exactly one character from some set of\n characters. For example `\"[xy]\"` matches `\"x\"` or `\"y\"`. Character ranges\n can also be specified: `\"[a-z]\"` matches any character from `\"a\"` to `\"z\"`.\n An exclamation mark can be used to negate the match, i.e. `\"[!xz]\"` will\n match any characters except for `\"x\"` and `\"z\"`. Moreover the ranges and\n single characters can be used together, so for example `\"[a-cxy]\"` will\n match `\"a\"`, `\"b\"`, `\"c\"`, `\"x\"` or `\"y\"`. Within the brackets, the special\n characters `\"*\"`, `\"?\"` and `\"\\\"` stand for themselves instead of their\n special meanings.\n- Braces allow to specify multiple patterns (separated with a comma), one of\n which must be matched. For example: `\"{abc,x*}\"` will match either the name\n `\"abc\"` or any name starting with `\"x\"`. The groups cannot be nested.\n\nKeep in mind that if `recursive` is set to True and a `name_filter` is used,\nthe function will return files from subdirectories only if the set\n`name_filter` allows crossing directories. So even with `recursive=True` a\nfilter `\"*.txt\"` will only return files that are immediate children of the\nlisted directory, to list files recursively you need to use a filter like\n`\"**.txt\"` or `\"*/*\"` (which will match only files that are exactly one\ndirectory down from the listed directory) or no filter at all.\n\n> Example\n List all files with `.md` extension in the example directory and any of its\n subdirectories.\n\n     import Standard.Examples\n\n     example_list_files =\n         Data.list_directory Examples.data_dir name_filter=\"**.md\" recursive=True",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data",
        "name": "fetch",
        "arguments": [
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "HTTP_Method.Get",
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "try_auto_parse_response",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS download, http get\nGROUP Input\nFetches from the provided URI and returns the response, parsing the body if\nthe content-type is recognised. Returns an  error if the status code does not\nrepresent a successful response.\n\nArguments:\n- uri: The URI to fetch.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Get`,\n `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.\n Defaults to `HTTP_Method.Get`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- try_auto_parse_response:  If successful should the body be attempted to be\n parsed to an Enso native object.\n\n> Example\n Read from an HTTP endpoint.\n\n     import Standard.Base.Data\n     response = Data.fetch URL\n\n> Example\n Read from an HTTP endpoint and write the results to a file.\n\n     import Standard.Base.Data\n     file = enso_project.data / \"spreadsheet.xls\"\n     Data.fetch URL . body . to_file file",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data",
        "name": "post",
        "arguments": [
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "body",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Request_Body.Empty",
                "tagValues": [
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Text",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Json",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Binary",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Form_Data",
                    "Standard.Base.Network.HTTP.Request_Body.Request_Body.Empty"
                ]
            },
            {
                "name": "method",
                "reprType": "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "HTTP_Method.Post",
                "tagValues": [
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Options",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Get",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Head",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Post",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Put",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Patch",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Delete",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Trace",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Connect",
                    "Standard.Base.Network.HTTP.HTTP_Method.HTTP_Method.Custom"
                ]
            },
            {
                "name": "headers",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Network.HTTP.Header.Header | (Standard.Base.Data.Pair.Pair Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text)",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "try_auto_parse_response",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "True",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS http post, upload\nGROUP Input\nWrites the provided data to the provided URI. Returns the response,\nparsing the body if the content-type is recognised. Returns an  error if the\nstatus code does not represent a successful response.\n\nArguments:\n- uri: The URI to fetch.\n- body: The data to write. See `Supported Body Types` below.\n- method: The HTTP method to use. Must be one of `HTTP_Method.Post`,\n `HTTP_Method.Put`, `HTTP_Method.Patch`. Defaults to `HTTP_Method.Post`.\n- headers: The headers to send with the request. Defaults to an empty vector.\n- try_auto_parse:  If successful should the body be attempted to be parsed to\n an Enso native object.\n\n! Supported Body Types\n\n - Request_Body.Text: Sends a text string, with optional encoding and content\n   type.\n - Request_Body.Json: Sends an Enso object, after converting it to JSON.\n - Request_Body.Binary: Sends a file.\n - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys\n   must be `Text`, and the values must be `Text` or `File`.\n - Request_Body.Empty: Sends an empty body.\n\n Additionally, the following types are allowed as the `body` parameter:\n\n - Text: shorthand for `Request_Body.Text that_text`.\n - File: shorthand for `Request_Body.Binary that_file`.\n - Any other Enso object: shorthand for `Request_Body.Json that_object`.\n\n! Specifying Content Types\n\n If the `body` parameter specifies an explicit content type, then it is an\n error to also specify additional `Content-Type` headers in the `headers`\n parameter. (It is not an error to specify multiple `Content-Type` values in\n `headers`, however.)\n\n! Default Content Types\n\n The following specifies the default content type for each `Request_Body`\n type.\n\n - Request_Body.Text: `text/plain`\n - Request_Body.Json: `application/json`\n - Request_Body.Binary: `application/octet-stream`\n - Request_Body.Form_Data:\n       If `url_encoded` is True: `application/x-www-form-urlencoded`\n       If `url_encoded` is False: `multipart/form-data`\n - Request_Body.Empty: No content type is sent\n - Text: `text/plain`\n - File: `application/octet-stream`\n - Any other Enso object: `application/json`\n\n! Specifying Text Encodings\n\n Text encoding can be specified in the `encoding` parameter to the\n `Request_Body.Text` constructor. This value will be added to the\n `Content-Type` header.\n\n If a value for `encoding` is specified, but no value for `content_type` is\n specified, then `\"text/plain\"` is used as the content type.\n\n> Example\n Write a text string to an HTTP endpoint.\n\n     import Standard.Base.Data\n     response = Data.post url_post (Request_Body.Text \"hello world\")\n\n> Example\n Write JSON to an HTTP endpoint.\n\n     import Standard.Base.Data\n     json = Json.parse '{\"a\": \"asdf\", \"b\": 123}'\n     response = Data.post url_post json\n\n> Example\n Write an Enso object to an HTTP endpoint.\n\n     import Standard.Base.Data\n     response = Data.post url_post (My_Type.Value 12)\n\n> Example\n Write a text string to an HTTP endpoint, with a specific text encoding.\n\n     import Standard.Base.Data\n     body = Request_Body.Text 'Hello World!' encoding=Encoding.utf_16_le\n     response = Data.post url_post body\n\n> Example\n Write a text string to an HTTP endpoint, with a specific content type.\n\n     import Standard.Base.Data\n     body = Request_Body.Text 'a,b,c\\n' content_type=\"text/csv\"\n     response = Data.post url_post body\n\n> Example\n Write the contents of a file to an HTTP endpoint.\n\n     import Standard.Base.Data\n     test_file = enso_project.data / \"sample.png\"\n     response = Data.post url_post (Request_Body.Binary test_file)\n\n> Example\n Write a multipart form to an HTTP endpoint.\n\n     import Standard.Base.Data\n     test_file = enso_project.data / \"sample.png\"\n     form_data = Map.from_vector [[\"key\", \"val\"], [\"a_file\", test_file]]\n     response = Data.post url_post (Request_Body.Form_Data form_data)\n\n> Example\n Write a URL-encoded form to an HTTP endpoint.\n\n     import Standard.Base.Data\n     test_file = enso_project.data / \"sample.txt\"\n     form_data = Map.from_vector [[\"key\", \"val\"], [\"a_file\", test_file]]\n     response = Data.post url_post (Request_Body.Form_Data form_data url_encoded=True)",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Runtime.Ref",
        "documentation": null,
        "reexport": "Standard.Base.Runtime"
    },
    {
        "type": "type",
        "module": "Standard.Base.Runtime.Ref",
        "name": "Ref",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE\nADVANCED\nA mutable reference type."
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Ref",
        "name": "new",
        "arguments": [
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Ref.Ref",
        "returnType": "Standard.Base.Runtime.Ref.Ref",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreates a new reference containing the provided value.\n\nArguments:\n- value: The value to be contained in the ref.\n\n> Example\n Creating a new reference containing the value 7.\n\n     Ref.new 7",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Ref",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Ref.Ref",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Ref.Ref",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets the contents of this mutable reference ref.\n\n> Example\n Getting the contents of a reference.\n\n     (Ref.new 0) . get",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Runtime.Ref",
        "name": "put",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Runtime.Ref.Ref",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "new_value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Runtime.Ref.Ref",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Puts a new value into this reference, returning the old value.\n\nArguments:\n- new_value: The new value to store in this ref.\n\n> Example\n Storing the value 10 in a reference.\n\n     (Ref.new 0) . put 10",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "Date_Time_Formatter",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "Value",
        "arguments": [
            {
                "name": "underlying",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.EnsoDateTimeFormatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "deferred_parsing_warnings",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "underlying",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.EnsoDateTimeFormatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.EnsoDateTimeFormatter",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "deferred_parsing_warnings",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "from_simple_pattern",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Creates a formatter from a simple date-time format pattern.\n\nEvery letter in the pattern is interpreted as a pattern character as\ndescribed in the table below. Any character that is not a letter in the\npattern is treated as a literal character. If a sequence of letters needs\nto be put in as a literal, it can be escaped using single quotes. Use two\nsingle quotes in a row to represent a single quote in the result. As\nexplained below, curly braces can have special meaning (see 'yy'); to\nenter a literal curly brace, put it inside a quoted literal.\n\nPattern characters are interpreted case insensitively, with the exception\nof `M/m' and 'H/h'.\n\nDate pattern characters:\n- y: Year. The number of pattern letters determines the minimum number of\n digits.\n - y: The year using any number of digits.\n - yy: The year, using at most two digits. The default range is\n   1950-2049, but this can be changed by including the end year in\n   braces e.g. `yy{2099}`.\n - yyyy: The year, using exactly four digits.\n- M: Month of year. The number of pattern letters determines the format:\n - M: Any number (1-12).\n - MM: Month number with zero padding required (01-12).\n - MMM: Short name of the month (Jan-Dec).\n - MMMM: Full name of the month (January-December).\n The month names depend on the selected locale.\n- d: Day. The number of pattern letters determines the format:\n - d: Any number (1-31).\n - dd: Day number with zero padding required (01-31).\n - ddd: Short name of the day of week (Mon-Sun).\n - dddd: Full name of the day of week (Monday-Sunday).\n The weekday names depend on the selected locale.\n Both day of week and day of month may be included in a single pattern -\n in such case the day of week is used as a sanity check.\n- e: An alternative notation: single `e` maps to `ddd` and `ee` or more\n map to `dddd` meaning name of day of week.\n- Q: Quarter of year.\n If only year and quarter are provided in the pattern, when parsing a\n date, the result will be the first day of that quarter.\n\nTime pattern characters:\n- H: 24h hour of day (0-23).\n- h: 12h hour of day (0-12). The `a` pattern is needed to disambiguate\n between AM and PM.\n- m: Minute of hour.\n- s: Second of minute.\n- f: Fractional part of the second. The number of pattern letters\n determines the number of digits. If one letter is used, any number of\n digits will be accepted.\n- a: AM/PM marker.\n\nTime zone pattern characters:\n- T: If repeated 3 or less times - Time zone ID (e.g. Europe/Warsaw, Z,\n -08:30), otherwise - Time zone name (e.g. Central European Time, CET).\n- Z: Zone offset.\n - Z, ZZ, ZZZ: A short offset form (+HHmm).\n   No offset is indicated by \"+0000\". This can be customized by setting\n   an alternative no offset string in curly braces, e.g. `zz{Z}`.\n - ZZZZ: Localized offset (e.g. GMT-08:00).\n - ZZZZZ: A full offset form (+HH:mm:ss).\n   No offset is indicated by \"Z\". This can be customized as above, e.g.\n   `ZZZZZ{0}`.\n- v: Time zone name (same as TTTT).\n- V: Time zone ID (same as T).\n\nSome parts, like fractions of a second may not be required. The square\nbrackets `[]` can be used to surround such optional sections.\n\n> Example\n Parsing date/time values\n\n     Date_Time.parse \"2021-10-12T12:34:56.789+0200\" \"yyyy-MM-dd'T'HH:mm:ss.fZ\" == (Date_Time.new 2021 10 12 12 34 56 millisecond=789 zone=(Time_Zone.new hours=2))\n     Date.parse \"Tue, 12 Oct 2021\" \"ddd, d MMM yyyy\" == (Date.new 2021 10 12)\n     Date_Time.parse \"12/10/2021 5:34 PM\" \"d/M/Y h:mm a\" == (Date_Time.new 2021 10 12 17 34 00)\n\n> Example\n Note that the default locale may not support full-length day/month names, so you may need to set a specific locale for this to work.\n\n     Date.parse \"Thursday, 1 October '98\" (Date_Time_Formatter.from \"dddd, d MMMM ''yy\" Locale.uk) == (Date.new 1998 10 01)\n\n> Example\n Omitting the day will yield the first day of the month.\n\n     Date.parse \"2021-10\" \"yyyy-MM\" == (Date.new 2021 10 01)\n\n> Example\n Omitting the year will yield the current year.\n\n     Date.parse \"10-12\" \"MM-dd\" == (Date.new (Date.today.year) 10 12)\n\n> Example\n Parsing a two-digit year with a custom base year.\n\n     Date.parse \"1 Nov '95\" \"d MMM ''yy{2099}\" == (Date.new 2095 11 01)",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "from_iso_week_date_pattern",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Creates a formatter from a pattern for the ISO 8601 leap week calendar.\n\nThe ISO 8601 leap week calendar is a variation of the ISO 8601 calendar\nthat defines a leap week as the week that contains the 29th of February.\nThis calendar is used by some European and Middle Eastern countries.\n\nThe pattern is a sequence of letters and symbols that are interpreted as\nfollows:\n- Y: The week based year.\n - In case the year is parsed in two digit mode (`YY`), the default\n   range is 1950-2049, but this can be changed by including the end year\n   in braces e.g. `YY{2099}`\n- w: Week of year.\n- d: Day of week.\n - d: Numeric day of week (1-7). 1 is Monday.\n - dd: Numeric day of week with zero padding (01-07).\n - ddd: Short name of the day of week (Mon-Sun).\n - dddd: Full name of the day of week (Monday-Sunday).\n The weekday names depend on the selected locale.\n- e: An alternative notation: single `e` maps to `ddd` and `ee` or more\n map to `dddd` meaning name of day of week.\n\nMoreover, all time and timezone pattern characters like in `Simple` case\nare supported too - in case you need to parse a date time value with the\ndate part in ISO week date format.\n\nThe same as in the `Simple` pattern, the single quotes can be used to\nescape letter literals and square brackets can be used to indicate\noptional sections.\n\n> Example\n Parsing a date in the ISO week date format\n\n     Date.parse \"1976-W53-6\" (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW-d\") == (Date.new 1977 01 01)\n     Date.parse \"1978-W01, Mon\" (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW, eee\") == (Date.new 1978 01 02)\n     Date_Time.parse \"1978-W01-4 12:34:56\" (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW-d HH:mm:ss\") == (Date_Time.new 1978 01 05 12 34 56)\n\n> Example\n Omitting the day of the week will result in the first day of that week.\n\n     Date.parse (Date_Time_Formatter.from_iso_week_date_pattern \"YYYY-'W'WW\") \"1978-W01\" == (Date.new 1978 01 02)",
        "annotations": [
            "locale"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "from_java",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Time.Date_Time_Formatter.DateTimeFormatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Time_Formatter.DateTimeFormatter"
                ]
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ADVANCED\nCreates a formatter from a Java `DateTimeFormatter` instance or a text\npattern parsed using the Java parser: `DateTimeFormatter.ofPattern`.\n\nSee the Java documentation for explanation of the pattern format:\nhttps://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#patterns\n\nArguments:\n- pattern: The pattern string to parse using the Java pattern rules, or\n an existing `DateTimeFormatter` instance.\n- locale: A locale to use when constructing the formatter from a text\n pattern. If not specified, defaults to `Locale.default`. If passing a\n `DateTimeFormatter` instance and this argument is set, it will\n overwrite the original locale of that formatter.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "default_enso_zoned_date_time",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": true,
        "documentation": " The default format for date-time used in Enso.\nIt acts as `ISO_Zoned_Date_Time` but both offset and timezone are optional.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30+01:00[Europe/Paris]`,\nas well as `2011-12-03T10:15:30` assuming the default timezone.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "iso_zoned_date_time",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": true,
        "documentation": " The ISO 8601 format for date-time with offset and timezone.\nThe date and time parts may be separated by a single space or a `T`.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30+01:00[Europe/Paris]`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "iso_offset_date_time",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": true,
        "documentation": " The ISO 8601 format for date-time with offset.\nThe date and time parts may be separated by a single space or a `T`.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30+01:00`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "iso_local_date_time",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": true,
        "documentation": " The ISO 8601 format for date-time without a timezone.\nThe date and time parts may be separated by a single space or a `T`.\n\nFor example, it may parse date of the form `2011-12-03 10:15:30`. The\ntimezone will be set to `Time_Zone.system`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "iso_date",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": true,
        "documentation": " The ISO 8601 format for date.\n\nFor example, it may parse date of the form `2011-12-03`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "iso_time",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": true,
        "documentation": " The ISO 8601 format for time.\n\nFor example, it may parse time of the form `10:15:30`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " Returns a text representation of this formatter.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " Parses a human-readable representation of this formatter.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "with_locale",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": false,
        "documentation": " Returns a copy of this formatter with a changed locale.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "handle_java_errors",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "action",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "parse_date",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "parse_date_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "parse_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "format_date",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "format_date_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "date_time",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "format_time",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "time",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "with_parsing_warnings",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "continuation",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nAdds parsing warnings, if any, to the result of `continuation`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "get_java_formatter_for_parsing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.EnsoDateTimeFormatter",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns the `underlying` formatter, also ensuring that parse-only\nwarnings are attached to it, to be propagated.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "pattern_approximation_as_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns a pattern that is associated with this formatter.\n\nFor formatters created using `from_simple_pattern` and\n`from_iso_week_date_pattern` or `from_java` with a Text pattern this will\njust be the pattern. For constants, it will be a pattern that best\nresembles that constant. For formatters created from a Java formatter\ninstance, this will be the text representation of that formatter.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Time_Formatter",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "locale",
                "reprType": "Standard.Base.Data.Locale.Locale",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Locale.default",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Time.Date_Time_Formatter.Date_Time_Formatter",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.XML.XML_Format",
        "documentation": null,
        "reexport": "Standard.Base.Data.XML"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.XML.XML_Format",
        "name": "XML_Format",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A `File_Format` for reading and writing XML files.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML.XML_Format",
        "name": "for_file_read",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Format.XML_Format",
        "returnType": "Standard.Base.Data.XML.XML_Format.XML_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML.XML_Format",
        "name": "for_file_write",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Format.XML_Format",
        "returnType": "Standard.Base.Data.XML.XML_Format.XML_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf this File_Format should be used for writing to that file, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML.XML_Format",
        "name": "for_web",
        "arguments": [
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "uri",
                "reprType": "Standard.Base.Network.URI.URI | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Format.XML_Format",
        "returnType": "Standard.Base.Data.XML.XML_Format.XML_Format | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nIf the File_Format supports reading from the web response, return a configured instance.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML.XML_Format",
        "name": "read",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Format.XML_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "on_problems",
                "reprType": "Standard.Base.Errors.Problem_Behavior.Problem_Behavior",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Ignore",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Warning",
                    "Standard.Base.Errors.Problem_Behavior.Problem_Behavior.Report_Error"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Format.XML_Format",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `File.read` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.XML.XML_Format",
        "name": "read_stream",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.XML.XML_Format.XML_Format",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "stream",
                "reprType": "Standard.Base.System.Input_Stream.Input_Stream",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.XML.XML_Format.XML_Format",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nImplements the `Data.parse` for this `File_Format`",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Regex",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "Regex",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "Value",
        "arguments": [
            {
                "name": "case_insensitive",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "internal_regex_object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Regex",
        "documentation": " PRIVATE\n\ninternal_regex_object : RegexObject (Truffle)\n(See https://github.com/oracle/graal/blob/master/regex/docs/README.md)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "case_insensitive",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "compile",
        "arguments": [
            {
                "name": "expression",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_insensitive",
                "reprType": "Standard.Base.Data.Boolean.Boolean | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False",
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " Compile the provided `expression` into a `Regex` that can be used for\nmatching.\n\nArguments\n- expression: The text representing the regular expression that you want to\n compile. Must be non-empty.\n- case_insensitive: Enables or disables case-insensitive matching. Case\n insensitive matching behaves as if it normalises the case of all input\n text before matching on it.\n\nIf an empty regex is used, `compile` throws an Illegal_Argument error.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "pattern",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the original pattern used to create this `Regex`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts this value to a JSON serializable object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nProvides a human-readable representation of the `Regex`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "matches",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Boolean.Boolean | Standard.Base.Errors.Common.Type_Error",
        "isStatic": false,
        "documentation": " GROUP Text\nReturns `True` if the input matches against the pattern described by\n`self`, otherwise `False`.\n\nArguments:\n- input: The text to check for matching.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "match",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Regex.Match.Match | Standard.Base.Nothing.Nothing | Standard.Base.Errors.Common.Type_Error",
        "isStatic": false,
        "documentation": " GROUP Text\nTries to match the provided `input` against the pattern `self`.\n\nReturns a `Match` containing the matched text and its match groups, or\n`Nothing` if the match failed.\n\nArguments:\n- input: The text to match the pattern described by `self` against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "match_all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Text\nTries to match the provided `input` against the pattern `self`.\n\nReturns a `Vector Match` object, each containing the matched text\nand its match groups.\n\nArguments:\n- input: The text to match the pattern described by `self` against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing | Standard.Base.Errors.Common.Type_Error",
        "isStatic": false,
        "documentation": " GROUP Selections\nTries to match the provided `input` against the pattern `self`.\n\nReturns a `Text` containing the matched text, or `Nothing` if the match\nfailed.\n\nArguments:\n- input: The text to match the pattern described by `self` against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "find_all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nTries to match the provided `input` against the pattern `self`.\n\nReturns a `Vector Text`, each containing the matched text.\nIf the pattern does not match, an empty `Vector` is returned.\n\nArguments:\n- input: The text to match the pattern described by `self` against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "split",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "only_first",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "(Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text) | Standard.Base.Errors.Common.Type_Error",
        "isStatic": false,
        "documentation": " GROUP Conversions\nSplits the `input` text based on the pattern described by `self`.\n\nArguments:\n- input: The text to split based on the pattern described by `self`.\n- only_first: If true, only split at the first occurrence.\n\nThis method will _always_ return a vector. If no splits take place, the\nvector will contain a single element (equal to the original string).\n\n> Example\n Split on the first instance of the pattern.\n     pattern = Regex.compile \"cd\"\n     input = \"abcdefcdghij\"\n     texts = pattern.split input only_first=True\n     texts . should_equal [\"ab\", \"efcdghij\"]\n\n> Example\n Split on the all instances of the pattern in the input.\n    pattern = Regex.compile \"a\"\n    input = \"bacadaeaf\"\n    texts = pattern.split input\n    texts . should_equal [\"b\", \"c\", \"d\", \"e\", \"f\"]\n\n> Example\n Returns the original text if there are no matches.\n     pattern = Regex.compile \"aa\"\n     input = \"abcdefghij\"\n     texts = pattern.split input\n     texts . should_equal [\"abcdefghij\"]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "tokenize",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Conversions\nTakes an input string and returns all the matches as a `Vector Text`.\nIf the pattern contains marked groups, the values are concatenated\ntogether; otherwise the whole match is returned. Non-participating\ngroups are omitted.\n\nArguments:\n- input: The text to tokenize.\n\n> Example\n Split to blocks of 3 characters.\n\n     Regex.compile '...' . tokenize 'ABCDEF' == ['ABC','DEF']\n\n> Example\n Split to blocks of 3 characters taking first and third letters.\n\n     Regex.compile '(.).(.)' . tokenize 'ABCDEF' == ['AC','DF']\n\n> Example\n Split a text on any white space.\n\n     Regex.compile '(\\S+)(?:\\s+|$)' . tokenize 'Hello Big\\r\\nWide\\tWorld\\nGoodbye!'\n         == ['Hello','Big','Wide','World','Goodbye!']",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "replace",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "replacement",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "only_first",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Errors.Common.Type_Error",
        "isStatic": false,
        "documentation": " GROUP Text\nReplace all occurrences of the pattern described by `self` in the `input`\nwith the specified `replacement`.\n\nArguments:\n- input: The text in which to perform the replacement(s).\n- replacement: The literal text with which to replace any matches.\n- only_first: If True, only replace the first match.\n\nIf this method performs no replacements it will return the `input` text\nunchanged.\n\nThe replacement string can contain references to groups matched by the\nregex. The following syntaxes are supported:\n   $0: the entire match string\n   $&: the entire match string\n   $n: the nth group\n   $<foo>: Named group `foo`\n\n> Example\n Replace letters in the text \"aa\".\n\n     pattern = Regex.compile 'aa'\n     pattern.replace 'aaa' 'b' == 'ba'\n\n> Example\n Replace all occurrences of letters 'l' and 'o' with '#'.\n\n      pattern = Regex.compile '[lo]'\n      pattern.replace 'Hello World!' '#' == 'He### W#r#d!'\n\n> Example\n Replace the first occurrence of letter 'l' with '#'.\n\n     pattern = Regex.compile 'l'\n     pattern.replace 'Hello World!' '#' only_first=True == 'He#lo World!'\n\n> Example\n Replace texts in quotes with parentheses.\n\n      pattern = Regex.compile '\"(.*?)\"'\n      pattern.replace '\"abc\" foo \"bar\" baz' '($1)' == '(abc) foo (bar) baz'\n\n> Example\n Replace a literal string with a replacement value.\n\n     pattern = Regex.compile \"aa\"\n     input = \"aa ab aa ac ad aa aa ax\"s\n     match = pattern.replace input \"xyz\"\n     match == \"xyz ab xyz ac ad xyz xyz ax\"\n\n> Example\n Replace each word with the same word surrounded by `[]`.\n\n     pattern = Regex.compile \"([a-z]+)\"\n     pattern.replace \"foo bar, baz\" \"[$1]\" == \"[foo] [bar], [baz]\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "lookup_group",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "id",
                "reprType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\n\nLook up a match group name or number, and check that it is valid.\n\nArguments:\n- id: The name or number of the group that was asked for.\n\nReturns: a group number.\n\nA group number is invalid if it is outside the range of groups\nthat were in the original pattern.\n\nA group name is invalid if it was not defined in the original pattern.\n\nA group name is an alias for a group number; if a name is passed to\nthis method, it returns the corresponding group number.\n\nIf a group number is passed to `lookup_group` and it is valid, it will\nsimply return the group number.\n\nNote that it is possible for a group to \"not participate in the match\",\nfor example with a disjunction. In the example below, the \"(d)\" group\ndoes not participate -- it neither matches nor fails.\n\n    \"ab((c)|(d))\".find \"abc\"\n\nIn this case, the group id for \"(d)\", which is 3, is a valid group id and\n(Regex.lookup_group 3) will return 3. If the caller tries to get group 3,\nMatch.group will return Nothing.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "iterator",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "input",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Regex.Internal.Match_Iterator.Match_Iterator",
        "isStatic": false,
        "documentation": " PRIVATE\n\nReturn a lazy iterator over matches against a string.\n\nArguments\n- text: the string to match against.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "group_count",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " Return the number of groups in the underlying RegexObject.\nNote, the count includes group 0 (the whole match) as well.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "named_groups",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " GROUP Metadata\nReturn a vector of all named group names.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "group_nums_to_names",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Map.Map Standard.Base.Data.Numbers.Integer Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " Return a map from group number to group name. Only includes named groups.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "escape",
        "arguments": [
            {
                "name": "expression",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " Escape the special characters in `expression` such that the result is a\nvalid literal pattern for the original string.\n\nArguments:\n- expression: The expression to escape metacharacters in.\n\n> Example\n Turn a Text into a regex that matches that string exactly.\n\n     example_escape =\n         literal_string = \"\\!\\.|abcde\"\n         Regex.escape literal_string",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "recompile",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "case_sensitivity",
                "reprType": "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Default",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Sensitive",
                    "Standard.Base.Data.Text.Case_Sensitivity.Case_Sensitivity.Insensitive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\n\nRecompile the underlying regex string; used to change the\ncase-sensitivity of a compiled Regex.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "pattern_string",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nGet the original pattern string as a `Text`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "polyglot_map_to_map",
        "arguments": [
            {
                "name": "map",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex",
        "returnType": "Standard.Base.Data.Map.Map Standard.Base.Any.Any Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nConvert the polyglot map to a Map.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "read_group_map",
        "arguments": [
            {
                "name": "polyglot_map",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "name",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE\nGet the named group from the polyglot map.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "match_to_group_maybe",
        "arguments": [
            {
                "name": "match",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "build_tokenization_output_from_match",
        "arguments": [
            {
                "name": "pattern",
                "reprType": "Standard.Base.Data.Text.Regex.Regex",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "match",
                "reprType": "Standard.Base.Data.Text.Regex.Match.Match",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nBuild an output string from a Match resulting from `tokenize`.\nSee `tokenize`.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "No_Such_Group",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " An error that is emitted when there is no such group in the match for the\nprovided `id`.\n\nArguments:\n- id: The identifier of the group that was asked for but does not exist."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "Error",
        "arguments": [
            {
                "name": "id",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.No_Such_Group",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "id",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.No_Such_Group",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.No_Such_Group",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.No_Such_Group",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nProvides a human-readable representation of the `No_Such_Group`.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "Regex_Syntax_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A syntax error reported by the Truffle regex compiler."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Regex.Regex_Syntax_Error",
        "documentation": " PRIVATE\n\nArguments:\n- message: A description of the erroneous syntax.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex_Syntax_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Regex",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Regex.Regex_Syntax_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Regex.Regex_Syntax_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nProvides a human-readable representation of the `Regex_Syntax_Error`.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time.Date_Range",
        "documentation": null,
        "reexport": "Standard.Base.Data.Time"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "Date_Range",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Represents a range of dates.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "Internal_Constructor",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "increasing",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "cached_length",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "documentation": " PRIVATE\nNever use the constructor directly to construct a range, as it does not\nallow to verify invariants and may lead to unexpected behavior.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date.Date",
        "returnType": "Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "step",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Period.Period",
        "returnType": "Standard.Base.Data.Time.Period.Period",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "increasing",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "cached_length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Numbers.Integer",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "new",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date.today",
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date.today",
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Date_Period.Day",
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "isStatic": true,
        "documentation": " Create a representation of a right-exclusive range of dates.\n\nThe range is increasing or decreasing, depending on if the start date is\nbefore or after the end date.\n\nArguments:\n- start: The left boundary of the range. Its value is included.\n- end: The right boundary of the range. Its value is excluded.\n- step: The step between dates. It must be positive - to construct a\n decreasing range, flip the start and the end or use `down_to`, but\n keeping the positive step.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "new_internal",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "increasing",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "with_step",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "new_step",
                "reprType": "Standard.Base.Data.Time.Date_Period.Date_Period | Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Year",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Quarter",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Month",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Week",
                    "Standard.Base.Data.Time.Date_Period.Date_Period.Day"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Metadata\nCreates a copy of this range with a changed step.\n\nArguments:\n- new_step: The new step to use. It can either be a `Date_Period` or\n `Period`. The provided `Period` must be positive, i.e. all of `years`,\n `months` and `days` must be non-negative and at least one of them has\n to be positive.\n\n> Example\n Create a range representing the first day of every month in a year.\n\n     (Date.new 2020 1 1).up_to (Date.new 2020 12 31) . with_step Date_Period.Month\n\n> Example\n Create a a decreasing range of every other day between two dates.\n\n     (Date.new 2022 10 23).down_to (Date.new 2022 10 1) . with_step (Period.new days=2)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a textual representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "pretty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a human-readable representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts this value to a JSON serializable object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "first",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the first element that is included within the range or `Nothing`\nif the range is empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "second",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the second element that is included within the range or `Nothing`\nif the range has less than 2 element",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "last",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns the last element that is included within the range or `Nothing`\nif the range is empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the number of elements in the range.\n\n> Example\n The following range has 2 elements.\n\n    (Date.new 2023 04 05) . up_to (Date.new 2023 04 07) . length",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets an element from the range at a specified index (0-based).\n\nArguments:\n- index: The location in the range to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back,\n i.e. -1 will correspond to the last element.\n\n> Example\n Get the second element of a range.\n\n      (Date.new 2023 04 05) . up_to (Date.new 2023 04 07) . get 1 == (Date.new 2023 04 06)\n\n> Example\n Get the last element of a range with step.\n\n    (Date.new 2023 04 05) . up_to (Date.new 2023 10 07) . with_step Date_Period.Month . get -1 == (Date.new 2023 10 05)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "index",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Gets an element from the range at a specified index (0-based).\nIf the index is invalid then `if_missing` is returned.\n\nArguments:\n- index: The location in the range to get the element from. The index is\n also allowed be negative, then the elements are indexed from the back,\n i.e. -1 will correspond to the last element.\n- if_missing: The value to return if the index is out of bounds.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "internal_at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "i",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " PRIVATE\nGenerates the i-th element of the range.\n\nThis method does no bounds checking, it should be used only internally.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "map",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Time.Date.Date -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Applies a function to each element in the range, producing a vector of\nresults.\n\nArguments:\n- function: The function to apply to each date in the range.\n\n> Example\n Create a vector that contains the numbers twice that of the numbers in\n the range.\n\n     1.up_to 10 . map (*2)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConverts the range to a vector containing the dates in the range.\n\n> Example\n Getting a vector of dates from 2021-05-07 to 2021-05-10 (exclusive).\n\n     (Date.new 2021 05 07).up_to (Date.new 2021 05 10) . to_vector",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this range is empty.\n\n> Example\n Checking if the range of days from start of 2020 to start of 2023 is empty.\n\n     (Date.new 2020).up_to (Date.new 2023) . is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if this range is not empty.\n\n> Example\n Checking if the range of days from start of 2020 to start of 2023 is not empty.\n\n     (Date.new 2020).up_to (Date.new 2023) . is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "filter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "filter",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP Selections\nReturns a vector of all elements of this range which satisfy a condition.\n\nArguments:\n- filter: The filter to apply to the range. It can either be an instance\n of `Filter_Condition` or a predicate taking a value and returning a\n boolean value indicating whether the corresponding element should be\n kept or not.\n\n> Example\n Selecting all elements that are greater than 2020-10-12.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 15) . filter (> (Date.new 2020 10 12))\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 15) . filter (Filter_Condition.Greater than=(Date.new 2020 10 12))",
        "annotations": [
            "filter"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "partition",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Pair.Pair (Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date) (Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date)",
        "isStatic": false,
        "documentation": " GROUP Selections\nPartitions the range into `Vector`s of elements which satisfy a given\ncondition and ones that do not.\n\nReturns a `Pair` whose `first` element is the `Vector` of elements\nsatisfying the predicate and the `second` element is a `Vector` of\nelements which did not satisfy it.\n\nThe relative order of elements kept in each returned list is the same as\nin the input.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Splitting a range into weekends and weekdays.\n\n     is_weekend day =\n        [Day_Of_Week.Saturday, Day_Of_Week.Sunday].contains day.day_of_week\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 15).partition is_weekend",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "each",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Time.Date.Date -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function for each element in the range.\n\nArguments:\n- function: The function to apply to each integer in the range.\n\n> Example\n To print all dates from 2020-10-01 to 2020-10-05.\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 05) include_end=True . each IO.println",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "each_with_index",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Numbers.Integer -> Standard.Base.Data.Time.Date.Date -> Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nADVANCED\nApplies a function to each element of the range.\n\nEssentially acts like `range.to_vector.each_with_index`, but it is more\nefficient.\n\nArguments:\n- function: A function to apply that takes two parameters: first the\n index of a given range element and then the actual range element.\n\n> Example\n Print range elements with their indices within the range.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 05).each_with_index ix-> elem-> IO.println (Pair ix elem)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Time.Date.Date -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the range, by iteratively applying the\npassed function with next elements of the range.\n\nArguments:\n- init: The initial value for the fold.\n- function: A binary function taking an item and a date, and returning\n an item.\n\n> Example\n In the following example, we'll compute how many days in the range are\n a Monday.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . fold 0 acc-> date->\n        if date.day_of_week == Day_Of_Week.Monday then acc+1 else acc",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "running_fold",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "init",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Any.Any -> Standard.Base.Data.Time.Date.Date -> Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of the range, by iteratively applying the\npassed function with the next element of the range. After each step the\nvalue is stored resulting in a new Vector of the same size as self.\n\nArguments:\n- init: The initial value for the fold.\n- function: A function taking two elements and combining them.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "all",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a condition is satisfied for all dates in this range.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Checking that all dates in the range are after 2020-10-01.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . all (> (Date.new 2020 10 01))",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "any",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks whether a condition is satisfied for any date in this range.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n\n> Example\n Checking that at least one date in the range is after 2020-10-01.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . any (> (Date.new 2020 10 01))",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "find",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGets the first index when a condition is satisfied this range.\nIf no index satisfies the predicate, returns `if_missing`.\n\nArguments:\n- condition: A `Filter_Condition` or a predicate function to test each\n element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the range.\n- if_missing: Value returned if no element satisfies the predicate.\n\n> Example\n Get the first date in the range that is a Monday.\n\n        (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . find (d-> d.day_of_week == Day_Of_Week.Monday)",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the range contains the specified value.\n\n> Example\n Check if a particular date is in the range.\n\n      (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . with_step (Period.new days=2) . contains (Date.new 2020 10 15)",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Time.Date.Date | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the index of an element in the range.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching from. If the index is negative, it\n is counted from the end of the range.\n\n> Example\n Find the index of a first day that is a Monday.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . index_of (d-> d.day_of_week == Day_Of_Week.Monday)",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "last_index_of",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "condition",
                "reprType": "Standard.Base.Data.Time.Date.Date | Standard.Base.Data.Filter_Condition.Filter_Condition | (Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Boolean.Boolean)",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Less",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Equal_Or_Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Greater",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Equal",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Between",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Starts_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Ends_With",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Contains",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Nothing",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_True",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_False",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Empty",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_Like",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Is_In",
                    "Standard.Base.Data.Filter_Condition.Filter_Condition.Not_In"
                ]
            },
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "-1",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Numbers.Integer | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " GROUP Values\nReturns the last index of an element in the range.\nReturns Nothing if the element is not found.\n\nArguments:\n- condition: Either the element to search for, a `Filter_Condition` or a\n predicate function to test each element.\n- start: The index to start searching backwards from. If the index is\n negative, it is counted from the end of the range.\n\n> Example\n Find the index of a first day that is a Monday.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . last_index_of (d-> d.day_of_week == Day_Of_Week.Monday)",
        "annotations": [
            "condition"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "reverse",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Time.Date.Date",
        "isStatic": false,
        "documentation": " GROUP Selections\nReverses the range, returning a vector with the same elements as the\noriginal range, but in the opposite order.\n\n> Example\n Reverse a range of dates.\n\n     (Date.new 2020 10 01).up_to (Date.new 2020 10 31) . reverse\n\n? Returning a `Vector`\n\n This method cannot return back a `Date_Range`, as some ranges are not\n reversible. For example, the range `(Date.new 2020 02 29).up_to (Date.new 2023) . with_step Date_Period.Year`\n will have `2022-02-28` as its last entry. But if we create a\n range starting at `2022-02-28` and going backwards by a year, its last\n element will be `2020-02-28` and not `2020-02-29` as in the original.\n Thus, to preserve the contents we need to return a vector.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "reduce",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "function",
                "reprType": "Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Time.Date.Date -> Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_empty",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Error.Empty_Error.throw",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Combines all the elements of a non-empty range using a binary operation.\nIf the range is empty, returns `if_empty`.\n\nArguments:\n- function: A binary operation that takes two dates and combines them\n into a new date.\n- if_empty: Value returned if the range is empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "compute_length_and_verify",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Time.Period.Period",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "increasing",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nComputes the length of the range and verifies its invariants.\n\nIf any of the invariants are violated, a dataflow error is raised.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "is_period_positive",
        "arguments": [
            {
                "name": "period",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "compute_length_step_days",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Time.Date.Date",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "increasing",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE\nAssumes that the range is not empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "compute_length_step_months",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "increasing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nAssumes that the range is not empty.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "nth_element_of_range",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "increasing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "n",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "compute_length_step_brute_force",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "step",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "increasing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "unify_condition_for_index_of",
        "arguments": [
            {
                "name": "condition",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nThis adds an additional type check.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "date_range_default_filter_condition_widget",
        "arguments": [],
        "selfType": "Standard.Base.Data.Time.Date_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Time.Date_Range",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Time.Date_Range.Date_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Time.Date_Range.Date_Range",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Time",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "module",
        "module": "Standard.Base.System.Process",
        "documentation": null,
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process",
        "name": "run",
        "arguments": [
            {
                "name": "command",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "stdin",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process",
        "returnType": "Standard.Base.System.Process.Process_Builder.Process_Result",
        "isStatic": true,
        "documentation": " ALIAS run a command\nGROUP Input\n\nCall a command with a list of arguments.\n\nArguments:\n- command: The command to execute.\n- arguments: The arguments to pass to `command`.\n\n> Example\n Call the \"echo\" command.\n\n     import Standard.Base.System.Platform\n     import Standard.Base.System.Process\n\n     example_run = case Platform.os of\n         Platform.OS.Windows -> Process.run \"PowerShell\" [\"-Command\", \"exit 42\"]\n         _ -> Process.run \"bash\" [\"-c\", \"exit 42\"]",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.System.Process",
        "name": "new_builder",
        "arguments": [
            {
                "name": "command",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "arguments",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "[]",
                "tagValues": null
            },
            {
                "name": "stdin",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.Process",
        "returnType": "Standard.Base.System.Process.Process_Builder.Process_Builder",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nCreate a new process builder.\n\nArguments:\n- command: The command to execute on the system.\n- arguments: The arguments to pass to `command`. These must be text.\n- stdin: Any content to pass to the standard input for `command`.\n\n> Example\n Create a new builder for a command \"echo\".\n\n     import Standard.Base.System.Process\n\n     example_new_builder = Process.new_builder \"echo\"",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "Text_Sub_Range",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Type defining a substring of a Text",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "Before",
        "arguments": [
            {
                "name": "delimiter",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
        "documentation": " Select characters until the first instance of `delimiter`.\nSelect an empty string if `delimiter` is empty.\nSelect the entire string if the input does not contain `delimiter`.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "Before_Last",
        "arguments": [
            {
                "name": "delimiter",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
        "documentation": " Select characters until the last instance of `delimiter`.\nSelect an empty string if `delimiter` is empty.\nSelect the entire string if the input does not contain `delimiter`.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "After",
        "arguments": [
            {
                "name": "delimiter",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
        "documentation": " Select characters after the first instance of `delimiter`.\nSelect an empty string if the input does not contain `delimiter`.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "After_Last",
        "arguments": [
            {
                "name": "delimiter",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
        "documentation": " Select characters after the last instance of `delimiter`.\nSelect an empty string if the input does not contain `delimiter`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "delimiter",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this `Text_Sub_Range`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "default_options",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Metadata.Choice.Option",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "default_widget",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nThe widget for `Text_Sub_Range` also displays options for\n`Index_Sub_Range` since the former is supposed to 'expand' the latter and\nis always used together with it.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "Codepoint_Ranges",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "Value",
        "arguments": [
            {
                "name": "ranges",
                "reprType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "is_sorted_and_distinct",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Text.Text_Sub_Range.Codepoint_Ranges",
        "documentation": " PRIVATE\nA list of codepoint ranges corresponding to the matched parts of the\ninput.\n\nArguments:\n- ranges: the list of ranges. Each `Range` has `step` equal to 1.\n- is_sorted_and_distinct: A helper value specifying if the ranges are\n already sorted and non-intersecting.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "ranges",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Codepoint_Ranges",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "is_sorted_and_distinct",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Codepoint_Ranges",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "sorted_and_distinct_ranges",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Codepoint_Ranges",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range.Codepoint_Ranges",
        "returnType": "Standard.Base.Data.Vector.Vector Standard.Base.Data.Range.Range",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns a new sorted list of ranges where intersecting ranges have been\nmerged.\n\nEmpty ranges are not discarded.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "resolve",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "range",
                "reprType": "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range | Standard.Base.Data.Index_Sub_Range.Index_Sub_Range | Standard.Base.Data.Range.Range | Standard.Base.Data.Numbers.Integer",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.Before",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.Before_Last",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.After",
                    "Standard.Base.Data.Text.Text_Sub_Range.Text_Sub_Range.After_Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.First",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Last",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.While",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.By_Index",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Sample",
                    "Standard.Base.Data.Index_Sub_Range.Index_Sub_Range.Every"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range.Codepoint_Ranges",
        "returnType": "Standard.Base.Data.Range.Range | Standard.Base.Data.Text.Text_Sub_Range.Codepoint_Ranges",
        "isStatic": true,
        "documentation": " PRIVATE\nFinds code-point indices corresponding to the part of the input matching the\nrange specified by one of the types: `Text_Sub_Range`, `Index_Sub_Range`,\n`Range`.\n\nThis method may return either a single range instance or a vector of ranges.\n\nWhile the input ranges may have varying steps, they are processed and split\nin such a way that the ranges returned by this method always have a step\nequal to 1.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "find_sub_range_end",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "predicate",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nUtility function to find char indices for Text_Sub_Range.\nArguments:\n- text: Text to search\n- predicate: Function to test each character, receives:\n - index: current index\n - start: index the char array to start of grapheme cluster\n - end: index the char array to start of next grapheme cluster\n If the predicate returns True for a given character, the loop will exit.\nReturns: either a Pair of char indices for current grapheme cluster or\n Pair Nothing (char array length) if not found.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "resolve_index_or_range",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "descriptor",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "character_ranges",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nReturns an array of UTF-16 code-unit indices corresponding to the beginning\nand end of each consecutive grapheme cluster.\n\nThese indices are consistent with the vector returned by `Text.char_vector`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "batch_resolve_indices_or_ranges",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "descriptors",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "panic_on_non_positive_step",
        "arguments": [],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Text_Sub_Range",
        "name": "normalize_range",
        "arguments": [
            {
                "name": "range",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "length",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text_Sub_Range",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nEnsures that the range is valid and trims it to the length of the collection.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "documentation": null,
        "reexport": "Standard.Base.Network.HTTP"
    },
    {
        "type": "type",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "Request_Body",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " The HTTP POST request body."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "Text",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "encoding",
                "reprType": "Standard.Base.Data.Text.Encoding.Encoding | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            },
            {
                "name": "content_type",
                "reprType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": [
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "documentation": " Request body with text.\n\nArguments:\n- text: The plain text in the request body.\n- encoding: the text encoding to send as a Content-Encoding header\n- content_type: the content_type to send as a Content-Type header",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "Json",
        "arguments": [
            {
                "name": "x",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "documentation": " Request body with an object to be sent as JSON.\n\nArguments:\n- x: The object to convert to JSON using `.to_json`.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "Binary",
        "arguments": [
            {
                "name": "file",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "documentation": " Request body with an object to be sent as a binary file.\n\nArguments:\n- file: The file to send.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "Form_Data",
        "arguments": [
            {
                "name": "form_data",
                "reprType": "Standard.Base.Data.Map.Map Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "url_encoded",
                "reprType": "Standard.Base.Data.Boolean.Boolean",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "False",
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False"
                ]
            }
        ],
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "documentation": " Request body with form data.\n\nArguments:\n- form_data: the form fields (text or file) to be sent\n- url_encoded: if true, use a URL-encoded form; otherwise, use a\n multi-part encoding.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "Empty",
        "arguments": [],
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "documentation": " Empty request body; used for GET",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "encoding",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Encoding.Encoding | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Text.Encoding.Encoding | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "content_type",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "returnType": "Standard.Base.Data.Text.Text | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "x",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "file",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.System.File.File",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "form_data",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Map.Map Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
        "returnType": "Standard.Base.Data.Map.Map Standard.Base.Data.Text.Text Standard.Base.Data.Text.Text | Standard.Base.System.File.File",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "url_encoded",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Boolean.Boolean",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "default_content_type_header",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "returnType": "Standard.Base.Network.HTTP.Header.Header | Standard.Base.Nothing.Nothing",
        "isStatic": false,
        "documentation": " PRIVATE\nFor `Request_Body.Form_Data url_encoded=False`, this returns `Nothing`,\nbecause the content type must include a content boundary.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Text",
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.System.File.File",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.System.File.File",
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Network.HTTP.Request_Body",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Network.HTTP.Request_Body.Request_Body",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Text.Line_Ending_Style",
        "documentation": null,
        "reexport": "Standard.Base.Data.Text"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Text.Line_Ending_Style",
        "name": "Line_Ending_Style",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " An enumeration of different line ending styles.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Line_Ending_Style",
        "name": "Unix",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Line_Ending_Style.Line_Ending_Style",
        "documentation": " Unix-style endings. Used, among others, on Linux and modern MacOS.\nThe text equivalent is `'\\n'`.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Line_Ending_Style",
        "name": "Windows",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Line_Ending_Style.Line_Ending_Style",
        "documentation": " Windows-style endings. The text equivalent is `'\\r\\n'`.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Text.Line_Ending_Style",
        "name": "Mac_Legacy",
        "arguments": [],
        "returnType": "Standard.Base.Data.Text.Line_Ending_Style.Line_Ending_Style",
        "documentation": " Legacy MacOS endings. Only used on very old Mac systems.\nThe text equivalent is `'\\r\\n'`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Text.Line_Ending_Style",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Text.Line_Ending_Style.Line_Ending_Style",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Text.Line_Ending_Style.Line_Ending_Style",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nReturns the text equivalent of the line ending.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Errors.No_Such_Key",
        "documentation": null,
        "reexport": "Standard.Base.Errors"
    },
    {
        "type": "type",
        "module": "Standard.Base.Errors.No_Such_Key",
        "name": "No_Such_Key",
        "params": [],
        "parentType": "Standard.Base.Any.Any"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Errors.No_Such_Key",
        "name": "Error",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Errors.No_Such_Key.No_Such_Key",
        "documentation": " PRIVATE\nUNSTABLE\n\nAn error for getting a missing value from a map.\n\nArguments:\n- object: The object that was being accessed.\n- key: The key that was asked for.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.No_Such_Key",
        "name": "object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.No_Such_Key.No_Such_Key",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.No_Such_Key",
        "name": "key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.No_Such_Key.No_Such_Key",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Errors.No_Such_Key",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Errors.No_Such_Key.No_Such_Key",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Errors.No_Such_Key.No_Such_Key",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\n\nConverts the error into a human-readable representation.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Interval",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Interval",
        "name": "Bound",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A type representing an interval bound over any order-able type.\n\nAn order-able type is one that has a\n[total order](https://en.wikipedia.org/wiki/Total_order) defined for it.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Interval",
        "name": "Inclusive",
        "arguments": [
            {
                "name": "n",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Interval.Bound",
        "documentation": " A bound that includes the value `n`.\n\nArguments:\n- n: The value defining the inclusive bound.\n\n> Example\n Create a bound that includes the value 2.\n\n     import Standard.Base.Data.Interval.Bound\n\n     example_bound_inclusive = Bound.Inclusive 2",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Interval",
        "name": "Exclusive",
        "arguments": [
            {
                "name": "n",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Interval.Bound",
        "documentation": " A bound that excludes the value `n`.\n\nArguments:\n- n: The value defining the exclusive bound.\n\n> Example\n Create a bound that excludes the value 2.\n\n     import Standard.Base.Data.Interval.Bound\n\n     example_bound_exclusive = Bound.Exclusive 2.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "n",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Interval.Bound",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Interval",
        "name": "Interval_Type",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Interval",
        "name": "Inclusive",
        "arguments": [],
        "returnType": "Standard.Base.Data.Interval.Interval_Type",
        "documentation": " Both the start and end bounds are included.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Interval",
        "name": "Start_Exclusive",
        "arguments": [],
        "returnType": "Standard.Base.Data.Interval.Interval_Type",
        "documentation": " The start bound is included, but the end bound is excluded.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Interval",
        "name": "End_Exclusive",
        "arguments": [],
        "returnType": "Standard.Base.Data.Interval.Interval_Type",
        "documentation": " The start bound is excluded, but the end bound is included.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Interval",
        "name": "Exclusive",
        "arguments": [],
        "returnType": "Standard.Base.Data.Interval.Interval_Type",
        "documentation": " Both the start and end bounds are excluded.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Interval",
        "name": "Interval",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A type representing an interval over real numbers.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Interval",
        "name": "Between",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Interval.Bound",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Interval.Bound.Inclusive",
                    "Standard.Base.Data.Interval.Bound.Exclusive"
                ]
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Interval.Bound",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Interval.Bound.Inclusive",
                    "Standard.Base.Data.Interval.Bound.Exclusive"
                ]
            }
        ],
        "returnType": "Standard.Base.Data.Interval.Interval",
        "documentation": " PRIVATE\n\nA type representing an interval over real numbers.\n\nArguments:\n- start: The start of the interval.\n- end: The end of the interval.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "start",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Interval.Bound",
        "returnType": "Standard.Base.Data.Interval.Bound",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "end",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Interval.Bound",
        "returnType": "Standard.Base.Data.Interval.Bound",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "new",
        "arguments": [
            {
                "name": "start",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "end",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "interval_type",
                "reprType": "Standard.Base.Data.Interval.Interval_Type",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Interval_Type.End_Exclusive",
                "tagValues": [
                    "Standard.Base.Data.Interval.Interval_Type.Inclusive",
                    "Standard.Base.Data.Interval.Interval_Type.Start_Exclusive",
                    "Standard.Base.Data.Interval.Interval_Type.End_Exclusive",
                    "Standard.Base.Data.Interval.Interval_Type.Exclusive"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Interval.Interval",
        "returnType": "Standard.Base.Data.Interval.Interval",
        "isStatic": true,
        "documentation": " GROUP DateTime\nCreates an interval.\n\nArguments:\n- start: The start of the interval. (Included by default)\n- end: The end of the interval. (Excluded by default)\n- interval_type: The type of interval to create. (End_Exclusive by default)\n\n> Example\n Create the bounds-exclusive range from 0.1 to 0.5.\n\n     import Standard.Base.Data.Interval.Interval\n     import Standard.Base.Data.Interval.Interval_Type\n\n     example_exclusive = Interval.new 0.1 0.5 Interval_Type.Exclusive\n> Example\n Create the start-exclusive range from 1 to 5.\n\n     import Standard.Base.Data.Interval.Interval\n     import Standard.Base.Data.Interval.Interval_Type\n\n     example_start_exclusive = Interval.new 1 5 Interval_Type.Start_Exclusive\n> Example\n Create the end-exclusive range from 1 to 5.\n\n     import Standard.Base.Data.Interval.Interval\n     import Standard.Base.Data.Interval.Interval_Type\n\n     example_end_exclusive = Interval.new 1 5 Interval_Type.End_Exclusive\n> Example\n Create the inclusive range from 0 to 0.\n\n     import Standard.Base.Data.Interval.Interval\n     import Standard.Base.Data.Interval.Interval_Type\n\n     example_inclusive = Interval.new 0 0 Interval_Type.Inclusive",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "contains",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Numbers.Number",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Interval.Interval",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nChecks if the interval contains `that`.\n\nArguments:\n- that: The item to check if it is contained in the interval.\n\n> Example\n Checking if the interval 0.1 to 1 contains 0.33.\n\n     import Standard.Base.Data.Interval\n\n     example_contains = (Interval.new 0.1 1 include_end=True) . contains 0.33",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "is_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Interval.Interval",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nCheck if this interval is empty.\n\n> Example\n Check if the interval from 0 to 0 is empty.\n\n     import Standard.Base.Data.Interval\n\n     example_is_empty = Interval.new 0 0 include_start=False . is_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "not_empty",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Interval.Interval",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nCheck if this interval is not empty.\n\n> Example\n Check if the interval from 0 to 0.001 is not empty.\n\n     import Standard.Base.Data.Interval\n\n     example_not_empty = Interval.new 0 0.001 . not_empty",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Interval",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Interval.Interval",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Interval.Interval",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a display representation of this Interval.",
        "annotations": []
    },
    {
        "type": "module",
        "module": "Standard.Base.Data.Json",
        "documentation": null,
        "reexport": "Standard.Base.Data"
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Json",
        "name": "Json",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " Methods for serializing from and to JSON.",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "parse",
        "arguments": [
            {
                "name": "json",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " ALIAS from text\nGROUP Conversions\n\nParse a Text value into a `JS_Object` or an Enso primitive value (like\n`Text`, `Number`, `Boolean`, `Nothing`), or a `Vector` of values.\n\n> Example\nParse the text \"[null, null, true, false]\".\n\n    Json.parse \"[null, null, true, false]\"",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "stringify",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Data.Json.JS_Object | Standard.Base.Data.Boolean.Boolean | Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text | Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": [
                    "Standard.Base.Data.Boolean.Boolean.True",
                    "Standard.Base.Data.Boolean.Boolean.False",
                    "Standard.Base.Nothing.Nothing"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Json.Json",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nADVANCED\nSerialize an Object to JSON.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "from_pairs",
        "arguments": [
            {
                "name": "pairs",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.Json",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": true,
        "documentation": " PRIVATE\nConvert a Vector of Keys and Values to JSON.\nKeys must be `Text` values.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Json",
        "name": "Invalid_JSON",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A failure indicating malformed text input into the JSON parser.\n\nCheck the `message` field for detailed information on the specific failure."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Json",
        "name": "Error",
        "arguments": [
            {
                "name": "message",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Json.Invalid_JSON",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "message",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.Invalid_JSON",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.Invalid_JSON",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.Invalid_JSON",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConverts the error to a display representation.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Json",
        "name": "Marshalling_Error",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " A failure indicating the inability to marshall a `Json` object into the\nspecified format."
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Json",
        "name": "Type_Mismatch",
        "arguments": [
            {
                "name": "json",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Json.Marshalling_Error",
        "documentation": " PRIVATE\n\nThe `json` object could not be converted into `format`, due to a type\nmismatch.\n\nArguments:\n- json: The JSON that could not be marshalled.\n- format: The type format that did not match.\n\nThis can occur e.g. when trying to reinterpret a number as a `Text`, etc.",
        "annotations": []
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Json",
        "name": "Missing_Field",
        "arguments": [
            {
                "name": "json",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "field",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "format",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Json.Marshalling_Error",
        "documentation": " PRIVATE\nThe `json` object could not be converted into `format`, due to a field\nmissing in the `json` structure.\n\nArguments:\n- json: The json that had a missing field.\n- field: The field name that was missing.\n- format: The type format that diud not match.\n\nThis can occure when trying to reinterpret a JSON object into an atom,\nwhen the JSON does not contain all the fields required by the atom.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.Marshalling_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "format",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.Marshalling_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "field",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.Marshalling_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.Marshalling_Error",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.Marshalling_Error",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the marshalling error into a human-readable format.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Json",
        "name": "JS_Object",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE",
        "reexport": "Standard.Base.Main"
    },
    {
        "type": "constructor",
        "module": "Standard.Base.Data.Json",
        "name": "Value",
        "arguments": [
            {
                "name": "js_object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Any.Any",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "from_pairs",
        "arguments": [
            {
                "name": "pairs",
                "reprType": "Standard.Base.Data.Vector.Vector",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": true,
        "documentation": " PRIVATE\nCreates a JS_Object from a list of key-value pairs.\nKeys must be `Text` values.\nValues will be recursively converted to JSON serializable as needed.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "contains_key",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Boolean.Boolean",
        "isStatic": false,
        "documentation": " GROUP Logical\nReturns True iff the objects contains the given `key`.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "get",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "if_missing",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": true,
                "hasDefault": true,
                "defaultValue": "Nothing",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Json.JS_Object | Standard.Base.Data.Boolean.Boolean | Standard.Base.Data.Numbers.Number | Standard.Base.Nothing.Nothing | Standard.Base.Data.Text.Text | Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " Get a value for a key of the object, or a default value if that key is not present.\n\nArguments:\n- key: The key to get.\n- if_missing: The value to return if the key is not found.",
        "annotations": [
            "key"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "at",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Data.Text.Text",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " GROUP Selections\nGet a value for a key of the object.\nIf the key is not found, throws a `No_Such_Key` error.\n\nArguments:\n- key: The key to get.",
        "annotations": [
            "key"
        ]
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "field_names",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGet the keys of the object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "length",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Numbers.Number",
        "isStatic": false,
        "documentation": " GROUP Metadata\nGets the number of keys in the object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_vector",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Vector.Vector",
        "isStatic": false,
        "documentation": " GROUP Conversions\nConvert the object to a Vector of Pairs.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_js_object",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Json.JS_Object",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert the object to a JS_Object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a Text.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_display_text",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert JS_Object to a friendly string.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_json",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nConvert to a JSON representation.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "to_default_visualization_data",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Text.Text",
        "isStatic": false,
        "documentation": " PRIVATE\nTransform the vector into text for displaying as part of its default\nvisualization.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "into",
        "arguments": [
            {
                "name": "self",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "target_type",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": false,
        "documentation": " Creates an Enso object from the JS_Object.",
        "annotations": []
    },
    {
        "type": "type",
        "module": "Standard.Base.Data.Json",
        "name": "JS_Object_Comparator",
        "params": [],
        "parentType": "Standard.Base.Any.Any",
        "documentation": " PRIVATE"
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "compare",
        "arguments": [
            {
                "name": "obj1",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "obj2",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object_Comparator",
        "returnType": "Standard.Base.Data.Ordering.Ordering | Standard.Base.Nothing.Nothing",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "hash",
        "arguments": [
            {
                "name": "obj",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object_Comparator",
        "returnType": "Standard.Base.Data.Numbers.Integer",
        "isStatic": true,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "from",
        "arguments": [
            {
                "name": "that",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json.JS_Object",
        "returnType": "Standard.Base.Data.Ordering.Comparable",
        "isStatic": false,
        "documentation": " PRIVATE",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "render",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "depth",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "0",
                "tagValues": null
            },
            {
                "name": "max_depth",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "5",
                "tagValues": null
            },
            {
                "name": "max_length",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "100",
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nRender the JS_Object to Text with truncated depth.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "make_enso",
        "arguments": [
            {
                "name": "js_object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nInternal function ensuring that a JavaScript object is presented appropriately to Enso.\njs_object must be a Native JS Object, Text, Boolean, Nothing, Number, Vector, Array, JS_Object.\nChildren of these types will be recursively passed through this function.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "make_javascript",
        "arguments": [
            {
                "name": "enso_object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nInternal function to convert any JS_Objects into their native JS objects before passing to JS.\nenso_object must be Text, Boolean, Nothing, Number, Vector, Array, JS_Object (and children as well).",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "make_field_name_selector",
        "arguments": [
            {
                "name": "js_object",
                "reprType": "Standard.Base.Data.Json.JS_Object",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "display",
                "reprType": "Standard.Base.Metadata.Display",
                "isSuspended": false,
                "hasDefault": true,
                "defaultValue": "Display.Always",
                "tagValues": [
                    "Standard.Base.Metadata.Display.Always",
                    "Standard.Base.Metadata.Display.When_Modified",
                    "Standard.Base.Metadata.Display.Expanded_Only"
                ]
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Metadata.Widget",
        "isStatic": true,
        "documentation": " PRIVATE\nMake a field name selector",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "new_object",
        "arguments": [],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nMake a new JavaScript object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "json_parse",
        "arguments": [
            {
                "name": "text",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nParse a text value into JavaScript object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "json_stringify",
        "arguments": [
            {
                "name": "js_object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nConvert a JavaScript object to a text value.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "has_property",
        "arguments": [
            {
                "name": "js_object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nCheck a JavaScript object has a given property.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "get_value",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nGet a value from a JavaScript object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "set_value",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "key",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            },
            {
                "name": "value",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nSet a value on a JavaScript object and return the new object.",
        "annotations": []
    },
    {
        "type": "method",
        "module": "Standard.Base.Data.Json",
        "name": "get_property_names",
        "arguments": [
            {
                "name": "object",
                "reprType": "Standard.Base.Any.Any",
                "isSuspended": false,
                "hasDefault": false,
                "defaultValue": null,
                "tagValues": null
            }
        ],
        "selfType": "Standard.Base.Data.Json",
        "returnType": "Standard.Base.Any.Any",
        "isStatic": true,
        "documentation": " PRIVATE\nGets all the property names of a JavaScript object.",
        "annotations": []
    }
]