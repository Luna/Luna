Aug 02, 2023 8:26:11 AM org.jline.utils.Log logr
WARNING: Unable to create a system terminal, creating a dumb terminal (enable debug logging for more information)
Construction:  [9/9, 4779ms]
    - should allow creating a table from rows [70ms]
    - should allow creating a table from columns [26ms]
    - should handle error scenarios gracefully [91ms]
    - should be internally guarded against creating a table without columns [22ms]
    - should correctly infer storage types [46ms]
    - should work with polyglot values coming from Python [3765ms]
    - should work with polyglot values coming from JS [617ms]
    - should work with a Text value split into lines [26ms]
    - should handle Unicode normalization when accessing table columns [112ms]
Vector conversion:  [1/1, 14ms]
    - should allow converting columns to valid vectors [14ms]
Mapping Operations:  [7/7, 494ms]
    - should allow mapping a function over a column [32ms]
    - should correctly handle storage of results [7ms]
    - should allow zipping columns with a custom function [40ms]
    - should handle vectorized equality and fall back on non-vectorized if needed [103ms]
    - should switch between maps and zips based on argument type [124ms]
    - should handle Text operations [103ms]
    - should take Unicode normalization into account in Text operations [83ms]
Masking Tables:  [3/3, 343ms]
    - should allow selecting table rows based on a boolean column [280ms]
    - should treat NA values in the mask as false and extend the mask with NAs [34ms]
    - should work correctly if a mask is bigger than the table itself [28ms]
Counting Values:  [1/1, 2ms]
    - should count missing and non-missing values [2ms]
Dropping Missing Values:  [1/1, 486ms]
    - should correctly handle NaNs with mixed type columns [486ms]
Info:  [1/1, 38ms]
    - should return Table information [38ms]
Sorting Tables:  [2/2, 197ms]
    - should respect defined comparison operations for custom types [65ms]
    - should correctly reorder all kinds of columns and leave the original columns untouched [132ms]
Sorting Columns:  [4/4, 62ms]
    - should sort columns with specified ordering and missing placement [19ms]
    - should respect defined comparison operations for custom types [4ms]
    - should allow passing a custom comparator [35ms]
    - should handle Unicode characters correctly [3ms]
Slicing Tables:  [4/4, 282ms]
    - should allow taking first n rows [85ms]
    - should allow taking the last n rows [33ms]
    - should allow taking/dropping a prefix of rows that satisfy a predicate [119ms]
    - should allow reversing the table [44ms]
fill:  [6/6, 287ms]
    - should allow to fill_nothing from a value [73ms]
    - should allow to fill_nothing from other columns [50ms]
    - should allow to fill_empty from a value [53ms]
    - should allow to fill_empty from other columns [28ms]
    - fill_nothing should leave other columns alone [50ms]
    - fill_nothing should work with integer column selectors [31ms]
Use First Row As Names:  [5/5, 308ms]
    - should work happily with mixed types [70ms]
    - should correctly handle problems: invalid names '' [78ms]
    - should correctly handle problems: invalid names Nothing [52ms]
    - should correctly handle problems: multiple invalid names [57ms]
    - should correctly handle problems: duplicate names [49ms]
[In-Memory] Table.aggregate:  [3/3, 412ms]
    - should return columns with correct types [301ms]
    - should take Unicode normalization into account when grouping by Text [46ms]
    - should be able to aggregate over enso Types [63ms]
[In-Memory] Table.distinct:  [6/6, 168ms]
    - should allow to select distinct rows based on a subset of columns, returning the first row from each group [26ms]
    - should handle nulls correctly and preserve original ordering [12ms]
    - should handle Unicode normalization of keys correctly [10ms]
    - should allow to control case-sensitivity of keys, correctly handling Unicode folding [32ms]
    - should report a warning if the key contains floating point values [70ms]
    - should be able to create distinct on Enso objects [15ms]
[In-Memory] Table.filter:  [5/5, 1194ms]
    - by a custom predicate [26ms]
    - by custom object comparisons [96ms]
    - by a boolean mask of varying length [14ms]
    - by an Is_In check, on various types of columns [585ms]
    - should perform `Is_In` efficiently for builtin types [471ms]
[In-Memory-specific] Table.join:  [1/1, 560ms]
    - should correctly report unsupported cross-backend joins [560ms]
[In-Memory-specific] Table.set:  [2/2, 64ms]
    - should allow using vector and range for a new column [43ms]
    - should fail if there is a length mismatch on a new column [20ms]
Columns:  [13/13, 74ms]
    - should allow getting specific elements [6ms]
    - should be able to take the first n elements [3ms]
    - should be able to take the first n elements by Integer [2ms]
    - should be able to take the last n elements [3ms]
    - should be able to get the first element [2ms]
    - should be able to get the last element [3ms]
    - should be able to be reversed [2ms]
    - should allow to count duplicate value occurences [1ms]
    - should result in correct Storage if operation allows it [19ms]
    - should forward dataflow error if constructed from one [5ms]
    - should not allow invalid column names [8ms]
    - will coerce integers to decimals by default, to get a numeric column [8ms]
    - will preserve the types if the column is Mixed [5ms]
    - [PENDING] will preserve the types if the column is Mixed (2)
        Reason: TODO: disabled due to issue #7352
Rounding:  [7/7, 602ms]
    - should be able to round a column of decimals [376ms]
    - decimal rounding should return the correct column type [88ms]
    - should be able to round a column of integers [61ms]
    - integer rounding should return the correct column type [27ms]
    - rounding should not attach a warning by default [2ms]
    - should report out-of-range values as warnings [41ms]
    - should throw an error on decimal places out of range [3ms]
truncate:  [3/3, 12ms]
    - should be able to truncate a column of floats [4ms]
    - should also work on ints [4ms]
    - Should error on input of the wrong type [3ms]
ceil:  [3/3, 14ms]
    - should be able to take the ceil of a column of floats [6ms]
    - should also work on ints [4ms]
    - Should error on input of the wrong type [4ms]
floor:  [3/3, 10ms]
    - should be able to take the floor of a column of floats [3ms]
    - should also work on ints [4ms]
    - Should error on input of the wrong type [2ms]
round/truncate/ceil/floor:  [3/3, 471ms]
    - round returns the correct type [111ms]
    - round returns the correct type [29ms]
    - nan/inf [330ms]
Date_Time truncate:  [1/1, 15ms]
    - should be able to truncate a column of Date_Times [15ms]
Date Column.format, with format string:  [4/4, 106ms]
    - Date column [11ms]
    - Date with locale [51ms]
    - Empty/Nothing format [24ms]
    - Bad format [19ms]
Date Column.format, with format Column:  [6/6, 64ms]
    - Date column [24ms]
    - Date with locale [7ms]
    - Empty/Nothing format, with format Column [6ms]
    - Bad format [6ms]
    - Bad format column type [12ms]
    - column length mismatch [6ms]
Date_Time Column.format, with format string:  [4/4, 66ms]
    - Date_Time column [9ms]
    - Date_Time with locale [29ms]
    - Empty/Nothing format [14ms]
    - Bad format [12ms]
Date_Time Column.format, with format Column:  [6/6, 47ms]
    - Date_Time column [5ms]
    - Date_Time with locale [17ms]
    - Empty/Nothing format, with format Column [5ms]
    - Bad format [6ms]
    - Bad format column type [9ms]
    - column length mismatch [3ms]
Time_Of_Day Column.format, with format string:  [5/5, 82ms]
    - Time_Of_Day column [12ms]
    - Time_Of_Day with locale [24ms]
    - Empty/Nothing format [21ms]
    - Bad format [10ms]
    - Format for wrong date type [13ms]
Time_Of_Day Column.format, with format Column:  [6/6, 31ms]
    - Time_Of_Day column [4ms]
    - Time_Of_Day with locale [4ms]
    - Empty/Nothing format, with format Column [4ms]
    - Bad format [7ms]
    - Bad format column type [6ms]
    - column length mismatch [5ms]
Boolean Column.format, with format string:  [3/3, 73ms]
    - Boolean column [43ms]
    - Empty/Nothing format [19ms]
    - Bad format [11ms]
Boolean Column.format, with format Column:  [3/3, 21ms]
    - Time_Of_Day column [10ms]
    - Empty/Nothing format, with format Column [4ms]
    - Bad format [7ms]
Integer:  [3/3, 57ms]
    - Column [31ms]
    - Column with locale [10ms]
    - Bad format [15ms]
Integer, with format Column:  [3/3, 25ms]
    - Column [8ms]
    - Column with locale [7ms]
    - Bad format [9ms]
Float:  [3/3, 21ms]
    - Column [6ms]
    - Column with locale [4ms]
    - Bad format [10ms]
Float, with format Column:  [3/3, 13ms]
    - Column [4ms]
    - Column with locale [3ms]
    - Bad format [4ms]
Integer:  [1/1, 10ms]
    - Integer Column (constructing the column directly from Integers) [10ms]
Numeric, empty/Nothing:  [4/4, 74ms]
    - Integer [26ms]
    - Float [33ms]
    - Integer, with format Column [7ms]
    - Float, with format Column [7ms]
Errors:  [2/2, 9ms]
    - Unsupported column type [5ms]
    - Format is not text [3ms]
Edge cases:  [1/1, 4ms]
    - empty table is ok [4ms]
[In-Memory] Table.at:  [3/3, 25ms]
    - should allow selecting columns by name [4ms]
    - should allow selecting columns by index [11ms]
    - should fail with Type Error is not an Integer or Text [9ms]
[In-Memory] Table.get:  [3/3, 15ms]
    - should allow selecting columns by name [4ms]
    - should allow selecting columns by index [6ms]
    - should fail with Type Error is not an Integer or Text [4ms]
[In-Memory] Table.set:  [7/7, 581ms]
    - should allow adding a column [3ms]
    - should not allow illegal column names [6ms]
    - should allow replacing a column [5ms]
    - should allow adding a column [7ms]
    - should not affect existing columns that depended on the old column being replaced [291ms]
    - should gracefully handle expression failures [33ms]
    - should forward expression problems [232ms]
[In-Memory] Table.column_names:  [2/2, 19ms]
    - should return the names of all columns [1ms]
    - should allow weird column names in all backends [17ms]
[In-Memory] Table.column_count:  [1/1, 0ms]
    - should allow getting the column count [0ms]
[In-Memory] Table.rows:  [6/6, 58ms]
    - should allow to get a Vector of Table rows [25ms]
    - should let you get the first row [5ms]
    - should let you get the second row [5ms]
    - should let you get the last row [6ms]
    - should fetch rows up to the specified limit [2ms]
    - should correctly handle errors [12ms]
[In-Memory] Table.select_columns:  [15/15, 656ms]
    - should work as shown in the doc examples [43ms]
    - should allow to reorder columns if asked to [5ms]
    - should correctly handle regex matching [17ms]
    - should allow negative indices [1ms]
    - should allow mixed names and indexes [36ms]
    - should correctly handle exact matches matching multiple names due to case insensitivity [11ms]
    - should correctly handle regexes matching multiple names [25ms]
    - should correctly handle problems: out of bounds indices [90ms]
    - should correctly handle edge-cases: duplicate indices [65ms]
    - should correctly handle edge-cases: aliased indices [28ms]
    - should correctly handle edge-cases: duplicate names [92ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [54ms]
    - should correctly handle problems: unmatched names [104ms]
    - should correctly handle problems in mixed case [23ms]
    - should correctly handle problems: no columns in the output [55ms]
[In-Memory] Table.remove_columns:  [12/12, 306ms]
    - should work as shown in the doc examples [48ms]
    - should correctly handle regex matching [30ms]
    - should allow negative indices [4ms]
    - should correctly handle exact matches matching multiple names due to case insensitivity [15ms]
    - should correctly handle regexes matching multiple names [4ms]
    - should correctly handle problems: out of bounds indices [36ms]
    - should correctly handle edge-cases: duplicate indices [20ms]
    - should correctly handle edge-cases: aliased indices [16ms]
    - should correctly handle edge-cases: duplicate names [13ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [20ms]
    - should correctly handle problems: unmatched names [48ms]
    - should correctly handle problems: no columns in the output [46ms]
[In-Memory] Table.reorder_columns:  [10/10, 242ms]
    - should work as shown in the doc examples [52ms]
    - should correctly handle regex matching [22ms]
    - should allow negative indices [2ms]
    - should correctly handle exact matches matching multiple names due to case insensitivity [13ms]
    - should correctly handle regexes matching multiple names [4ms]
    - should correctly handle problems: out of bounds indices [32ms]
    - should correctly handle edge-cases: duplicate indices [16ms]
    - should correctly handle edge-cases: aliased indices [16ms]
    - should correctly handle edge-cases: duplicate names [17ms]
    - should correctly handle problems: unmatched names [63ms]
[In-Memory] Table.sort_columns:  [4/4, 158ms]
    - should work as shown in the doc examples [115ms]
    - should correctly handle case-insensitive sorting [5ms]
    - should correctly handle natural order sorting [21ms]
    - should correctly handle various combinations of options [15ms]
[In-Memory] Table.rename_columns:  [20/20, 527ms]
    - should work as shown in the doc examples [86ms]
    - should work by index [9ms]
    - should work by position [5ms]
    - should work by Vector [5ms]
    - should work by Vector of Pairs [11ms]
    - should work by name [8ms]
    - should work by mixed Map [7ms]
    - should work by name case-insensitively [7ms]
    - should work by name using regex [8ms]
    - should work by name using regex substitution [12ms]
    - should correctly handle problems: unmatched names [40ms]
    - should correctly handle problems: out of bounds indices [32ms]
    - should correctly handle edge-cases: aliased indices [29ms]
    - should correctly handle edge-cases: aliased selectors [92ms]
    - should correctly handle problems: invalid names '' [24ms]
    - should correctly handle problems: invalid names Nothing [15ms]
    - should correctly handle problems: invalid names null character [18ms]
    - should correctly handle problems: duplicate names [23ms]
    - should correctly handle problems: new name is clashing with existing name of existing column [55ms]
    - should correctly handle problems: too many input names [28ms]
[In-Memory] Boolean Column Operations:  [4/4, 799ms]
    - iif [219ms]
    - iif on Columns [277ms]
    - [PENDING] iif should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
    - should allow to compute &&, || and not [213ms]
    - [PENDING] should return null if one of arguments is missing
        Reason: TODO null handling
    - should check types [89ms]
[In-Memory] Column Operations - Equality & Null Handling:  [4/4, 182ms]
    - [PENDING] should provide basic == and != comparisons
        Reason: TODO figure out proper null handling
    - should allow to check which values are null [57ms]
    - [PENDING] Column equality should handle nulls correctly
        Reason: TODO
    - equals_ignore_case for ASCII strings [38ms]
    - equals_ignore_case should check types [32ms]
    - [PENDING] Text Column equality (including case-insensitive) should handle nulls correctly
        Reason: TODO
    - should report a warning if checking equality on floating point columns [53ms]
[In-Memory] Column.fill_nothing/empty:  [4/4, 161ms]
    - should allow to fill_nothing from a value [28ms]
    - should allow to fill_nothing from another column [29ms]
    - should allow to fill_empty from a value [82ms]
    - should allow to fill_empty from another column [20ms]
[In-Memory] Table.fill_nothing/empty:  [6/6, 29ms]
    - should allow to fill_nothing from a value [4ms]
    - should allow to fill_nothing from other columns [4ms]
    - should allow to fill_empty from a value [8ms]
    - should allow to fill_empty from other columns [5ms]
    - fill_nothing should leave other columns alone [3ms]
    - fill_nothing should work with integer column selectors [3ms]
[In-Memory] Table.replace:  [3/3, 61ms]
    - should allow to replace values in a table [34ms]
    - should allow to replace values in a table with a regex [15ms]
    - should allow to replace values in a table with a column [12ms]
[In-Memory] Column Comparisons:  [5/5, 319ms]
    - should allow to compare numbers [171ms]
    - should allow to compare texts [33ms]
    - should allow to compare booleans [18ms]
    - should report error if incomparable types are compared [31ms]
    - should allow comparing Mixed columns [65ms]
    - [PENDING] Between should return null if any of the values are null
        Reason: TODO
[In-Memory] Arithmetic Column Operations:  [12/12, 109ms]
    - should allow basic operations [2ms]
    - should allow combining a column with a scalar [2ms]
    - should work with mixed types [22ms]
    - should correctly infer the types [8ms]
    - should check types [21ms]
    - should support is_nan [2ms]
    - should support is_infinite [2ms]
    - should support is_blank [3ms]
    - division should be aligned with the Enso arithmetic [7ms]
    - should allow division by 0 and report warnings [27ms]
    - should limit the number of rows listed in the message [5ms]
    - should return null if one of arguments is missing [3ms]
[In-Memory] Rounding-like operations:  [15/15, 201ms]
    - should name a rounding column correctly [25ms]
    - should allow round on a (Float 64 bits) column [20ms]
    - should allow round on a float column (to >0 decimal places) [18ms]
    - should allow round on a float column (to <0 decimal places) [19ms]
    - should allow truncate on a (Float 64 bits) column [1ms]
    - should allow ceil on a (Float 64 bits) column [1ms]
    - should allow floor on a (Float 64 bits) column [1ms]
    - should allow round on an int column [17ms]
    - should allow truncate on an int column [0ms]
    - should allow ceil on an int column [0ms]
    - should allow floor on an int column [0ms]
    - should fail on decimal_places out of range [1ms]
    - should allow Nothing/NULL [17ms]
    - should fail on bad column type [1ms]
    - should work with mixed type columns [73ms]
[In-Memory] Rounding numeric tests:  [17/17, 2348ms]
    - Can round positive decimals correctly [127ms]
    - Can round negative decimals correctly [106ms]
    - Explicit and implicit 0 decimal places work the same [67ms]
    - Can round zero and small decimals correctly [44ms]
    - Can round decimals to a specified number of decimal places [156ms]
    - Can round positive decimals to a specified negative number of decimal places [148ms]
    - Can round negative decimals to a specified negative number of decimal places [160ms]
    - Banker's rounding handles half-way values correctly [184ms]
    - Banker's rounding handles non-half-way values just like normal rounding [135ms]
    - Can round correctly near the precision limit [231ms]
    - Can round correctly near the precision limit, using banker's rounding [208ms]
    - Decimal places out of range [1ms]
    - Floating point imperfect representation counter-examples [23ms]
    - Can round small integers to a specified number of decimal places correctly (value is unchanged) [3ms]
    - Can round integers to a specified number of negative places correctly [266ms]
    - Can round negative integers to a specified number of negative places correctly [258ms]
    - Can round negative integers to a specified number of negative places with banker's rounding correctly [223ms]
[In-Memory] Text Column Operations:  [5/5, 145ms]
    - should handle operations like starts_with, ends_with, contains [75ms]
    - should handle operations like is_empty, is_blank, fill_empty [31ms]
    - should check types [16ms]
    - should return right types [13ms]
    - should support text concatenation with the + operator [8ms]
[In-Memory] Min/Max Operations:  [2/2, 59ms]
    - should allow one or more args and return the correct type [48ms]
    - should check types [11ms]
[In-Memory] replace: literal text pattern and replacement:  [4/4, 28ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=false [4ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=true [3ms]
    - case_sensitivity=insensitive use_regex=false only_first=false [11ms]
    - case_sensitivity=insensitive use_regex=false only_first=true [9ms]
[In-Memory] replace: literal regex pattern and replacement:  [5/5, 23ms]
    - case_sensitivity=sensitive/default use_regex=True only_first=false [5ms]
    - case_sensitivity=sensitive/default use_regex=True only_first=true [4ms]
    - case_sensitivity=insensitive use_regex=True only_first=false [7ms]
    - case_sensitivity=insensitive use_regex=True only_first=true [3ms]
    - can properly escape complex regexes [2ms]
[In-Memory] replace: pattern and replacement columns:  [4/4, 16ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=false [8ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=true [2ms]
    - case_sensitivity=insensitive use_regex=false only_first=false [3ms]
    - case_sensitivity=insensitive use_regex=false only_first=true [1ms]
[In-Memory] Column Operations - Text Replace:  [0/0, 0ms]
[In-Memory] Column Operations - Text Replace (in-memory only):  [7/7, 66ms]
    - should allow simple replacing [15ms]
    - should allow regex based replacing [33ms]
    - should handle unicode [3ms]
    - should take pattern and replacement string columns [3ms]
    - should only allow replace on Text columns [6ms]
    - should not replace if Empty term [2ms]
    - should infer correct return type [2ms]
    - [PENDING] should infer correct return type (2)
        Reason: Fixed-length Char columns are not supported by this backend.
[In-Memory] Column Operations - Text Trim:  [3/3, 28ms]
    - should trim whitespace by default [14ms]
    - should trim custom characters [9ms]
    - should only allow trim on Text columns [4ms]
[In-Memory] Other Column Operations:  [1/1, 3ms]
    - is_in [3ms]
[In-Memory] Colum Operations - Names:  [10/10, 59ms]
    - arithmetic [7ms]
    - comparison [10ms]
    - logical [5ms]
    - text [10ms]
    - nulls [8ms]
    - misc [5ms]
    - composed operations [3ms]
    - sort [0ms]
    - parse [4ms]
    - map and zip [2ms]
[In-Memory] Column.rename:  [1/1, 5ms]
    - should not allow illegal names [5ms]
[In-Memory] Column.const:  [3/3, 8ms]
    - Should allow the creation of constant columns [5ms]
    - Should create the correct column name [1ms]
    - Should not allow the creation of a constant column of columns [1ms]
[In-Memory] Date-Time support:  [3/3, 48ms]
    - should allow to create Table with Date columns and round-trip them back to Enso [13ms]
    - should allow to create Table with Time Of Day columns and round-trip them back to Enso [12ms]
    - should allow to create Table with Date Time columns and round-trip them back to Enso, preserving the exact instant in time (even if losing the timezone) [22ms]
[In-Memory] Date-Time operations:  [22/22, 736ms]
    - should allow to get the year/month/day of a Date [81ms]
    - should allow to get the year/month/day of a Date_Time [55ms]
    - should allow to evaluate expressions with year/month/day [53ms]
    - should allow to get hour/minute/second of a Time_Of_Day [51ms]
    - should allow to get hour/minute/second of a Date_Time [42ms]
    - should allow to get millisecond/nanosecond of Time_Of_Day through date_part [57ms]
    - should allow to get week/quarter of Date through date_part [32ms]
    - should allow to get various date_part of Date_Time [6ms]
    - should allow to compare dates [29ms]
    - should allow to compare date-times [26ms]
    - should allow to compare time-of-day [29ms]
    - should not allow to mix types in ordering comparisons [11ms]
    - should allow to subtract two Dates [6ms]
    - should allow to subtract two Date_Times [4ms]
    - should allow to subtract two Time_Of_Days [2ms]
    - should report an Invalid_Value_Type error when subtracting mixed date/time types [7ms]
    - should allow computing a SQL-like difference [124ms]
    - date_diff should return integers [16ms]
    - should not allow mixing types in date_diff [10ms]
    - should allow an SQL-like shift [71ms]
    - should check shift_amount type in date_add [2ms]
    - date_diff and date_add should work correctly with DST [11ms]
[In-Memory] Table/Column.cast - to text:  [3/3, 95ms]
    - should allow to cast columns of various basic types to text [36ms]
    - should allow to cast date/time columns to text [42ms]
    - should allow to cast a column of objects to text [16ms]
[In-Memory] Table/Column.cast - numeric:  [4/4, 106ms]
    - should allow to cast a boolean column to integer [16ms]
    - should allow to cast an integer column to floating point [15ms]
    - [PENDING] should allow to cast an integer column to a smaller bit-width and larger bit-width
        Reason: TODO: #5159
    - should allow to cast a floating point column to integer [31ms]
    - should report Conversion_Failure if converting a huge float to an integer overflows it [43ms]
[In-Memory] Table/Column.cast - date/time:  [3/3, 52ms]
    - should allow to get the Date part from a Date_Time [19ms]
    - should allow to get the Time_Of_Day part from a Date_Time [16ms]
    - should allow to convert a Date into Date_Time [16ms]
[In-Memory] Table/Column.cast - checking invariants:  [10/10, 91ms]
    - should report an error for unsupported conversions [10ms]
    - should report an error pointing to the Table.parse method where applicable [11ms]
    - should report missing columns [7ms]
    - should work if the first row is NULL [2ms]
    - should not lose the type after further operations were performed on the result [4ms]
    - should not lose the type after further operations were performed on the result, even if the first row is NULL [3ms]
    - Table.cast should cast the columns "in-place" and not reorder them [3ms]
    - should allow converting a Mixed type back to a specific type [12ms]
    - will extract matching values from a mixed column and replace unconvertible ones with Nothing [27ms]
    - should fail if there is no conversion available for a given type [8ms]
[In-Memory] Simple variant of Table/Column.parse in all backends:  [5/5, 46ms]
    - should be able to parse simple integers [17ms]
    - should be able to parse simple floats [2ms]
    - should be able to parse dates using a default format [4ms]
    - should be able to parse booleans with default format [3ms]
    - should report missing columns [19ms]
[In-Memory] Table.aggregate should summarize whole table:  [13/13, 366ms]
    - should be able to count [19ms]
    - should be able to count missing values [34ms]
    - should be able to count distinct values [27ms]
    - should be able to count distinct values over multiple columns [14ms]
    - should be able to compute sum and average of values [49ms]
    - should be able to compute standard deviation of values [29ms]
    - should be able to create median, mode and percentile values [55ms]
    - should be able to get first and last values [29ms]
    - should be able to get first and last values with mixed ordering [22ms]
    - should be able to get first and last values with default row order [14ms]
    - should be able to get minimum and maximum values [20ms]
    - should be able to get shortest and longest text values [24ms]
    - should be able to get concatenated text values [24ms]
[In-Memory] Table.aggregate should summarize empty table:  [11/11, 186ms]
    - should be able to count [22ms]
    - should be able to count missing values [33ms]
    - should be able to count distinct values [25ms]
    - should be able to compute sum and average of values [13ms]
    - should be able to compute standard deviation of values [13ms]
    - should be able to create median, mode and percentile values [14ms]
    - should be able to get first and last values [14ms]
    - should be able to get first and last values with default row order [12ms]
    - should be able to get minimum and maximum values [12ms]
    - should be able to get shortest and longest text values [13ms]
    - should be able to get concatenated text values [10ms]
[In-Memory] Table.aggregate should not summarize empty table when grouped:  [11/11, 149ms]
    - should be able to count [16ms]
    - should be able to count missing values [14ms]
    - should be able to count distinct values [12ms]
    - should be able to compute sum and average of values [12ms]
    - should be able to compute standard deviation of values [12ms]
    - should be able to create median values [13ms]
    - should be able to get first and last values [13ms]
    - should be able to get first and last values with default row order [12ms]
    - should be able to get minimum and maximum values [13ms]
    - should be able to get shortest and longest text values [15ms]
    - should be able to get concatenated text values [12ms]
[In-Memory] Table.aggregate should be able to group on single field:  [13/13, 392ms]
    - should be able to count [22ms]
    - should be able to count missing values [28ms]
    - should be able to count distinct values [21ms]
    - should be able to count distinct values over multiple columns [16ms]
    - should be able to compute sum and average of values [23ms]
    - should be able to compute standard deviation of values [43ms]
    - should be able to create median values [50ms]
    - should be able to get first and last values [31ms]
    - should be able to get first and last values with mixed ordering [30ms]
    - should be able to get first and last values with default row order [28ms]
    - should be able to get minimum and maximum values [36ms]
    - should be able to get shortest and longest text values [28ms]
    - should be able to get concatenated text values [29ms]
[In-Memory] Table.aggregate should be able to group on multiple fields not in left columns:  [13/13, 259ms]
    - should be able to count [31ms]
    - should be able to count missing values [39ms]
    - should be able to count distinct values [35ms]
    - should be able to count distinct values over multiple columns [45ms]
    - should be able to compute sum and average of values [22ms]
    - should be able to compute standard deviation of values [13ms]
    - should be able to create median values [17ms]
    - should be able to get first and last values [7ms]
    - should be able to get first and last values with mixed ordering [8ms]
    - should be able to get first and last values with default row order [6ms]
    - should be able to get minimum and maximum values [10ms]
    - should be able to get shortest and longest text values [12ms]
    - should be able to get concatenated text values [6ms]
[In-Memory] Table.aggregate Shortest:  [1/1, 4ms]
    - should correctly handle empty strings versus missing (null) strings [4ms]
[In-Memory] Table.aggregate Concatenate:  [6/6, 37ms]
    - should insert the separator, add prefix and suffix [5ms]
    - should correctly escape separator and quote characters but only if necessary [3ms]
    - should correctly handle missing values and empty values with quote character [2ms]
    - will not be able to distinguish missing values from empty values without quote character [16ms]
    - should work with empty separator [5ms]
    - should work with empty separator but non-empty quote [3ms]
[In-Memory] Table.aggregate Count_Distinct:  [2/2, 26ms]
    - should correctly count missing values [22ms]
    - should correctly count all-null keys in multi-column mode [4ms]
[In-Memory] Table.aggregate Standard_Deviation:  [1/1, 6ms]
    - should correctly handle single elements [6ms]
[In-Memory] Table.aggregate should correctly select result types:  [4/4, 28ms]
    - widening to decimals on Average [11ms]
    - widening to decimals on Median [4ms]
    - widening to decimals on Percentile [4ms]
    - widening to decimals on Standard_Deviation [7ms]
[In-Memory] Table.aggregate should correctly handle infinities:  [4/4, 39ms]
    - on Average [8ms]
    - on Median [16ms]
    - on Percentile [8ms]
    - on Standard_Deviation [5ms]
[In-Memory] Table.aggregate should correctly handle NaN:  [5/5, 16ms]
    - on Average [5ms]
    - on Median [2ms]
    - on Percentile [1ms]
    - on Mode [2ms]
    - on Standard_Deviation [4ms]
[In-Memory] Table.aggregate Mode:  [1/1, 2ms]
    - should ignore missing values [2ms]
[In-Memory] Table.aggregate First and Last:  [1/1, 3ms]
    - should not return the same value for groups with different values but equal ordering keys [3ms]
[In-Memory] Table.aggregate:  [3/3, 21ms]
    - should work even if no aggregations apart from groupings are specified [4ms]
    - should correctly handle Unicode normalization within grouping [6ms]
    - should allow grouping by dates [11ms]
[In-Memory] Table.aggregate+Expressions:  [2/2, 54ms]
    - should allow expressions in aggregates [9ms]
    - should warn when encountering invalid expressions, but try to perform the aggregations that are still valid [45ms]
[In-Memory] Table.aggregate should raise warnings when there are issues:  [7/7, 141ms]
    - should fail if there are no output columns, and promote any warnings to errors [16ms]
    - should raise a warning when can't find a column by name, but a hard error if the missing column is in a Group_By [67ms]
    - should raise a warning when a duplicate column name [11ms]
    - should raise a warning when a duplicate column name and rename default names first [12ms]
    - should raise a warning when duplicate column names [11ms]
    - should allow partial matches on Count_Distinct [10ms]
    - should ignore Count_Distinct if no columns matched [12ms]
[In-Memory] Table.aggregate should report warnings and errors based on types:  [4/4, 87ms]
    - should warn if grouping on a floating point [13ms]
    - should warn if computing an aggregation relying on floating point equality [10ms]
    - should check types [54ms]
    - should return predictable types [9ms]
[In-Memory] Table.aggregate should raise warnings when there are issues computing aggregation:  [3/3, 37ms]
    - should not fail if trying concatenate unquoted delimiters with no separator [2ms]
    - should warn if can't compare value for Min or Max [17ms]
    - should warn if trying concatenate unquoted delimiters [17ms]
[In-Memory] Table.aggregate should merge warnings when issues computing aggregation:  [2/2, 11ms]
    - should merge Invalid Aggregation warnings [6ms]
    - should merge Floating Point Grouping warnings [4ms]
[In-Memory] Table.filter:  [20/20, 471ms]
    - by integer comparisons [153ms]
    - [PENDING] Not_Equal test cases
        Reason: Specification needs clarifying, see: https://github.com/enso-org/enso/issues/5241#issuecomment-1480167927
    - by text comparisons [63ms]
    - by text search (contains, starts_with, ends_with, not_contains) [77ms]
    - by text search (like, not_like) [25ms]
    - text operations should also match newlines [10ms]
    - text operations should support Unicode normalization [7ms]
    - [PENDING] text operations should support Unicode normalization (like)
        Reason: There is a bug with Java Regex in Unicode normalized mode (CANON_EQ) with quoting.
https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8032926
    - by empty text [2ms]
    - should check types for text operations [36ms]
    - by nulls [4ms]
    - by an Is_In check [21ms]
    - by a boolean mask [1ms]
    - should correctly mask all kinds of columns [1ms]
    - should check types of boolean operations [2ms]
    - by a custom expression built from table's columns [2ms]
    - should handle selection errors: unknown column name [2ms]
    - should handle selection errors: out of bounds index [1ms]
    - should handle illegal arguments [5ms]
    - should nicely handle Filter_Condition with unapplied arguments [10ms]
    - should report issues: floating point equality [12ms]
    - already existing warnings should not be escalated to errors in error handling mode [27ms]
[In-Memory] Table.filter_by_expression:  [5/5, 147ms]
    - by a boolean column [9ms]
    - by an integer comparison [5ms]
    - fail gracefully [45ms]
    - should report issues: floating point equality [32ms]
    - should report issues: arithmetic error [54ms]
[In-Memory] Column.map:  [4/4, 40ms]
    - should allow to map a column with an arbitrary function [15ms]
    - should forward dataflow errors that occur within the map [14ms]
    - should forward panics that occur within the map [8ms]
    - should forward warnings that are attached to results of function invocation [2ms]
[In-Memory] Column.zip:  [4/4, 7ms]
    - should allow to zip two columns with an arbitrary function [0ms]
    - should forward dataflow errors that occur within the zip [1ms]
    - should forward panics that occur within the zip [1ms]
    - should forward warnings that are attached to results of function invocation [4ms]
[In-Memory] Dropping Missing Values:  [8/8, 251ms]
    - filter_blank_rows should drop rows that contain at least one missing cell [51ms]
    - filter_blank_rows should drop rows that are all blank [7ms]
    - filter_blank_rows should deal with edge cases [38ms]
    - should allow to select blank columns [27ms]
    - should allow to remove blank columns [22ms]
    - should not treat NaNs as blank by default [36ms]
    - should allow to treat NaNs as blank if asked [53ms]
    - select_blank_columns and remove_blank_columns should deal with edge cases [13ms]
[In-Memory] Filling Missing Values:  [3/3, 28ms]
    - should coerce long and double types to double [13ms]
    - should keep String, Boolean, Long and Double type [7ms]
    - should not allow mixing types by default [7ms]
    - [PENDING] may allow mixed types if explicitly retyped
        Reason: TODO: cast #6112
    - [PENDING] should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
[In-Memory] Table.order_by:  [23/23, 366ms]
    - should work as shown in the doc examples [25ms]
    - should work with single column name [5ms]
    - should work with single Sort_Column [22ms]
    - should allow the selector to mix regex and case insensitive matching [11ms]
    - should correctly handle regexes matching multiple names [13ms]
    - should correctly handle problems: out of bounds indices [37ms]
    - should correctly handle edge-cases: duplicate selectors [38ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [14ms]
    - should correctly handle edge-cases: duplicate matches due to regexes [15ms]
    - should correctly handle edge-cases: mixed selector types [34ms]
    - should correctly handle problems: unmatched names [53ms]
    - should report a problem if no columns are selected for ordering [13ms]
    - should stack consecutive ordering operations [7ms]
    - should give priority to the first selected column and use the next ones for breaking ties [11ms]
    - should deal with real numbers [1ms]
    - should deal with nulls [5ms]
    - should behave as expected with Unicode normalization, depending on the defaults settings [2ms]
    - should support natural ordering [11ms]
    - should support case insensitive ordering [10ms]
    - should support natural and case insensitive ordering at the same time [20ms]
    - text ordering settings should not affect numeric columns [1ms]
    - should allow ordering enso objects with a comparator [2ms]
    - should raise Incomparable_Values if ordering by incomparable values [6ms]
[In-Memory] Table.take/drop:  [6/6, 446ms]
    - should allow selecting first or last N rows [62ms]
    - should allow selecting rows by ranges or indices [206ms]
    - should allow selecting every Nth row [52ms]
    - should allow sampling rows [69ms]
    - should allow selecting rows as long as they satisfy a predicate [21ms]
    - should gracefully handle missing constructor arguments [34ms]
[In-Memory] Column.take/drop:  [6/6, 116ms]
    - should allow selecting first or last N rows [21ms]
    - should allow selecting rows by ranges or indices [51ms]
    - should allow selecting every Nth row [15ms]
    - should allow sampling rows [16ms]
    - should allow selecting rows as long as they satisfy a predicate [4ms]
    - should gracefully handle missing constructor arguments [6ms]
[In-Memory] Expression Integer literals:  [0/1, 34ms]
    - [FAILED] should be able to add an integer column [34ms]
        Reason: {expr = {-3}}: An unexpected panic was thrown: org.enso.table.error.UnexpectedTypeException: Unexpected value type. Expected a Number.
        at <Unknown Location> related to com.oracle.truffle.host.HostObject.doInvoke
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:2102:17-113)
        at <enso> Panic.catch(Internal)
        at <enso> Polyglot_Helpers.handle_polyglot_dataflow_errors(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Base/0.0.0-dev/src/Internal/Polyglot_Helpers.enso:8-9)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:2101-2102)
        at <enso> Column.run_vectorized_binary_op(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:2092-2103)
        at <enso> Column.*<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:473:13-69)
        at <enso> Value_Type_Helpers.check_binary_numeric_op<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type_Helpers.enso:148:13-18)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:362-363)
        at <enso> Value_Type.type.expect_type(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:357-363)
        at <enso> Value_Type.type.expect_numeric(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:319:9-70)
        at <enso> Value_Type_Helpers.check_binary_numeric_op<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type_Helpers.enso:147-148)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:362-363)
        at <enso> Value_Type.type.expect_type(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:357-363)
        at <enso> Value_Type.type.expect_numeric(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:319:9-70)
        at <enso> Value_Type_Helpers.check_binary_numeric_op(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type_Helpers.enso:146-148)
        at <enso> Column.*(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:472-473)
        at <java> org.graalvm.polyglot.Value<Function>.execute(Internal)
        at <Unknown Location> related to com.oracle.truffle.host.HostObject.doInvoke
        at <enso> Expression.evaluate<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:31:13-119)
        at <enso> Panic.catch(Internal)
        at <enso> Expression.evaluate<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:30-31)
        at <enso> Panic.catch(Internal)
        at <enso> Expression.evaluate<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:30-31)
        at <enso> Panic.catch(Internal)
        at <enso> Expression.evaluate(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:30-31)
        at <enso> Table.evaluate_expression(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Table.enso:1360:22-152)
        at <enso> tester<arg-1>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:36:22-62)
        at <enso> Test.with_clue(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:186:18-25)
        at <enso> tester(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:35-51)
        at <enso> <anonymous>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:68:13-35)
        at <enso> case_branch<arg-2>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:62:41-62)
        at <enso> Test.run_spec<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:199:18-25)
        at <enso> Panic.catch(Internal)
        at <enso> Panic.type.recover(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Base/0.0.0-dev/src/Panic.enso:186-191)
        at <enso> Test.run_spec(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:198-202)
        at <enso> case_branch<arg-3>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:76:73-89)
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:76:49-90)
        at <enso> Runtime.no_inline(Internal)
        at <enso> Duration.type.time_execution(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Base/0.0.0-dev/src/Data/Time/Duration.enso:125:18-43)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:76:24-91)
        at <enso> Test.specify(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:75-77)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:62:21-63)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:55-62)
        at <enso> specify_test(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:53-63)
        at <enso> Expression_Spec.spec<arg-1>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:66-69)
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:39:29-37)
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:38-40)
        at <enso> Panic.catch(Internal)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:37-40)
        at <enso> Test.group<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:30-45)
        at <enso> Test.group(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:29-45)
        at <enso> Expression_Spec.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:65-69)
        at <enso> Main.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Main.enso:121:5-45)
        at <enso> Common_Spec.run_common_spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/In_Memory/Common_Spec.enso:18:5-14)
        at <enso> Common_Spec.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/In_Memory/Common_Spec.enso:21:5-53)
        at <enso> Main.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/In_Memory/Main.enso:22:5-20)
        at <enso> Main.main<arg-1>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Main.enso:12:5-23)
        at <enso> Test_Suite.type.run<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:69:17-21)
        at <enso> Test_Suite.type.run<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:68-70)
        at <enso> Test_Reporter.wrap_junit_testsuites(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Reporter.enso:18:14-19)
        at <enso> Test_Suite.type.run(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:67-70)
        at <enso> Test_Suite.type.run_main(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:40:13-39)
        at <enso> Main.main(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Main.enso:11-16)
[In-Memory] Expression Decimal literals:  [0/1, 21ms]
    - [FAILED] should be able to add an decimal column [21ms]
        Reason: {expr = {-3.1415}}: An unexpected panic was thrown: org.enso.table.error.UnexpectedTypeException: Unexpected value type. Expected a Number..
        at <Unknown Location> related to com.oracle.truffle.host.HostObject.doInvoke
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:2102:17-113)
        at <enso> Panic.catch(Internal)
        at <enso> Polyglot_Helpers.handle_polyglot_dataflow_errors(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Base/0.0.0-dev/src/Internal/Polyglot_Helpers.enso:8-9)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:2101-2102)
        at <enso> Column.run_vectorized_binary_op(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:2092-2103)
        at <enso> Column.*<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:473:13-69)
        at <enso> Value_Type_Helpers.check_binary_numeric_op<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type_Helpers.enso:148:13-18)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:362-363)
        at <enso> Value_Type.type.expect_type(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:357-363)
        at <enso> Value_Type.type.expect_numeric(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:319:9-70)
        at <enso> Value_Type_Helpers.check_binary_numeric_op<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type_Helpers.enso:147-148)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:362-363)
        at <enso> Value_Type.type.expect_type(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:357-363)
        at <enso> Value_Type.type.expect_numeric(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type.enso:319:9-70)
        at <enso> Value_Type_Helpers.check_binary_numeric_op(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Type/Value_Type_Helpers.enso:146-148)
        at <enso> Column.*(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Column.enso:472-473)
        at <java> org.graalvm.polyglot.Value<Function>.execute(Internal)
        at <Unknown Location> related to com.oracle.truffle.host.HostObject.doInvoke
        at <enso> Expression.evaluate<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:31:13-119)
        at <enso> Panic.catch(Internal)
        at <enso> Expression.evaluate<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:30-31)
        at <enso> Panic.catch(Internal)
        at <enso> Expression.evaluate<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:30-31)
        at <enso> Panic.catch(Internal)
        at <enso> Expression.evaluate(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Expression.enso:30-31)
        at <enso> Table.evaluate_expression(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Table/0.0.0-dev/src/Data/Table.enso:1360:22-152)
        at <enso> tester<arg-1>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:36:22-62)
        at <enso> Test.with_clue(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:186:18-25)
        at <enso> tester(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:35-51)
        at <enso> <anonymous>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:74:13-45)
        at <enso> case_branch<arg-2>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:62:41-62)
        at <enso> Test.run_spec<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:199:18-25)
        at <enso> Panic.catch(Internal)
        at <enso> Panic.type.recover(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Base/0.0.0-dev/src/Panic.enso:186-191)
        at <enso> Test.run_spec(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:198-202)
        at <enso> case_branch<arg-3>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:76:73-89)
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:76:49-90)
        at <enso> Runtime.no_inline(Internal)
        at <enso> Duration.type.time_execution(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Base/0.0.0-dev/src/Data/Time/Duration.enso:125:18-43)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:76:24-91)
        at <enso> Test.specify(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:75-77)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:62:21-63)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:55-62)
        at <enso> specify_test(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:53-63)
        at <enso> Expression_Spec.spec<arg-1>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:72-75)
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:39:29-37)
        at <enso> case_branch<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:38-40)
        at <enso> Panic.catch(Internal)
        at <enso> case_branch(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:37-40)
        at <enso> Test.group<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:30-45)
        at <enso> Test.group(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test.enso:29-45)
        at <enso> Expression_Spec.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Expression_Spec.enso:71-75)
        at <enso> Main.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Common_Table_Operations/Main.enso:121:5-45)
        at <enso> Common_Spec.run_common_spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/In_Memory/Common_Spec.enso:18:5-14)
        at <enso> Common_Spec.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/In_Memory/Common_Spec.enso:21:5-53)
        at <enso> Main.spec(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/In_Memory/Main.enso:22:5-20)
        at <enso> Main.main<arg-1>(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Main.enso:12:5-23)
        at <enso> Test_Suite.type.run<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:69:17-21)
        at <enso> Test_Suite.type.run<arg-1>(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:68-70)
        at <enso> Test_Reporter.wrap_junit_testsuites(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Reporter.enso:18:14-19)
        at <enso> Test_Suite.type.run(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:67-70)
        at <enso> Test_Suite.type.run_main(/home/devel/NetBeansProjects/enso/enso/built-distribution/enso-engine-0.0.0-dev-linux-amd64/enso-0.0.0-dev/lib/Standard/Test/0.0.0-dev/src/Test_Suite.enso:40:13-39)
        at <enso> Main.main(/home/devel/NetBeansProjects/enso/enso/test/Table_Tests/src/Main.enso:11-16)
[In-Memory] Expression Boolean literals:  [1/1, 90ms]
    - should be able to add a boolean column [90ms]
[In-Memory] Expression Text literals:  [1/1, 69ms]
    - should be able to add a text column [69ms]
[In-Memory] Expression Text literals:  [2/2, 10ms]
    - should be able to get a Column [5ms]
    - should sanitize names [4ms]
[In-Memory] Expression Nothing literals:  [3/3, 42ms]
    - should be able to add an nothing column [15ms]
    - should allow to create a NULL column [4ms]
    - a null column may fail typechecks that expect a concrete type [21ms]
[In-Memory] Expression Date and Time literals:  [5/5, 48ms]
    - should be able to add a date or time column [14ms]
    - should be able to add a date-time column [8ms]
    - should be able to add a time column with sub-millisecond accuracy [5ms]
    - should be able to add a date time column with timezone [14ms]
    - should correctly handle timezones [6ms]
[In-Memory] Expression Arithmetic:  [3/3, 101ms]
    - should be able to do basic arithmetic [50ms]
    - should be able to do basic arithmetic with order [22ms]
    - should be able to do basic arithmetic with whitespace [27ms]
[In-Memory] Expression Column Arithmetic:  [2/2, 75ms]
    - should be able to perform arithmetic on columns [49ms]
    - should be able to perform arithmetic on columns with order [25ms]
[In-Memory] Expression Comparison Operators:  [6/6, 137ms]
    - should be able to compare equality [28ms]
    - should be able to compare ordering [17ms]
    - should be able to use between [37ms]
    - should be able to use in [23ms]
    - should be able to check null [20ms]
    - should be able to check empty [10ms]
[In-Memory] Expression Text Operators:  [2/2, 42ms]
    - should be able to concatenate text [11ms]
    - should be able to use like [30ms]
[In-Memory] Expression Boolean Operators:  [4/4, 50ms]
    - should be able to AND booleans [19ms]
    - should be able to OR booleans [12ms]
    - should be able to NOT booleans [4ms]
    - should be able to use IF [13ms]
[In-Memory] Function invocation:  [2/2, 19ms]
    - should be able to call a function with arguments [11ms]
    - should be able to call a variable args function [8ms]
[In-Memory] Expression Errors should be handled:  [4/4, 37ms]
    - should fail with Syntax_Error if badly formed [13ms]
    - should fail with Unsupported_Operation if not sufficient arguments [5ms]
    - should fail with Argument_Mismatch if not sufficient arguments [3ms]
    - should fail with Argument_Mismatch if too many arguments [15ms]
[In-Memory] Expression Warnings should be reported:  [4/4, 127ms]
    - should report floating point equality [54ms]
    - should report arithmetic errors [18ms]
    - already existing warnings should not be escalated to errors in error handling mode (1) [25ms]
    - already existing warnings should not be escalated to errors in error handling mode (2) [29ms]
[In-Memory] Table.join:  [33/33, 697ms]
    - should by default do a Left Outer join on equality of first column in the left table, correlated with column of the same name in the right one [77ms]
    - should allow Inner join [19ms]
    - should allow Full join [17ms]
    - should allow Right Outer join [17ms]
    - should allow to perform anti-joins [29ms]
    - should allow to join on equality of multiple columns and drop redundant columns if Inner join [35ms]
    - should support same-name column join shorthand [13ms]
    - should allow to join on text equality ignoring case [63ms]
    - should correctly handle Unicode equality [50ms]
    - should correctly handle Enso Decimal-Integer equality [20ms]
    - should allow equality joins for custom objects [11ms]
    - should allow range-based joins (using Between) for numbers [8ms]
    - should allow range-based joins (using Between) for text [5ms]
    - should allow range-based joins (using Between) for text with Unicode normalization [4ms]
    - should allow range-based joins (using Between) for custom objects [7ms]
    - should allow to mix join conditions of various kinds [5ms]
    - should work fine if the same condition is specified multiple times [20ms]
    - should correctly handle joining a table with itself [11ms]
    - should gracefully handle unmatched columns in Join_Conditions [20ms]
    - should report Invalid_Value_Type if non-text columns are provided to Equals_Ignore_Case [7ms]
    - should report Invalid_Value_Type if incompatible types are correlated [4ms]
    - should report Invalid_Value_Type if incompatible columns types are correlated in Between [10ms]
    - should warn when joining on equality of Decimal columns [56ms]
    - should correctly handle nulls in equality conditions [7ms]
    - should correctly handle nulls in case-insensitive equality conditions [5ms]
    - should correctly handle nulls in Between conditions [5ms]
    - should rename columns of the right table to avoid duplicates [33ms]
    - should warn about renamed columns [24ms]
    - should pass dataflow errors through [2ms]
    - should correctly handle all null rows [61ms]
    - should work correctly when composing multiple join operations [7ms]
    - should work correctly when the join is performed on a transformed table [15ms]
    - should allow full joins with more complex join conditions [18ms]
[In-Memory] Table.cross_join:  [8/8, 85ms]
    - should allow to create a cross product of two tables in the right order [39ms]
    - should work correctly with empty tables [11ms]
    - should respect the right row limit [7ms]
    - should ensure 1-1 mapping even with duplicate rows [3ms]
    - should allow self-joins [2ms]
    - should rename columns of the right table to avoid duplicates [12ms]
    - should respect the column ordering [4ms]
    - Cross join is not possible via call to .join [3ms]
[In-Memory] Table.zip:  [11/11, 165ms]
    - should allow to zip two tables, preserving memory layout order [39ms]
    - should allow to zip two tables, preserving the order defined by `order_by` [39ms]
    - should report unmatched rows if the row counts do not match and pad them with nulls [38ms]
    - should allow to keep the unmatched rows padded with nulls without reporting problems [2ms]
    - should allow to drop the unmatched rows [3ms]
    - should work when zipping with an empty table [9ms]
    - should not report unmatched rows for rows that simply are all null [3ms]
    - should rename columns of the right table to avoid duplicates [13ms]
    - should report both row count mismatch and duplicate column warnings at the same time [3ms]
    - should allow to zip the table with itself [2ms]
    - should correctly pad/truncate all kinds of column types [9ms]
[In-Memory] Table.union:  [20/20, 437ms]
    - should merge columns from multiple tables [158ms]
    - should fill unmatched columns (by name matching) with nulls and report a warning by default [91ms]
    - should drop unmatched columns if asked to [11ms]
    - should keep unmatched columns without errors if asked to [8ms]
    - should fail if asked to drop unmatched columns but the set of common columns is empty [5ms]
    - should ignore column names when matching by position [13ms]
    - should fill extra columns (positional matching) with nulls and report a warning by default [19ms]
    - should keep the least number of columns with positional matching if asked to drop unmatched ones [5ms]
    - should keep the greatest number of columns with positional matching if asked to keep unmatched ones, filling missing values with null and reporting no problems [6ms]
    - should use column names from the first table that has enough columns in positional matching mode [14ms]
    - should allow to merge a table with itself [4ms]
    - should not de-duplicate rows [4ms]
    - should gracefully handle the case where no tables to union were provided [12ms]
    - [PENDING] should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
    - should find a common type that will fit the merged columns [3ms]
    - should resort to Mixed value type only if at least one column is already Mixed [12ms]
    - if no common type can be found, should report error and drop the problematic column [23ms]
    - if type widening is not allowed, should use the type from first table that contained the given column [10ms]
    - if type widening is not allowed and types do not match, should report error and drop the problematic column [20ms]
    - even if type widening is not allowed, if the first column is mixed, it should accept any column to be concatenated to it [5ms]
    - if type mismatches cause all columns to be dropped, fail with No_Output_Columns [6ms]
[In-Memory] Table.distinct:  [7/7, 139ms]
    - should group by all columns by default [37ms]
    - should allow to select distinct rows based on a subset of columns, returning any row from each group [35ms]
    - should allow to select distinct rows based on a subset of columns, returning any first from each group if the table was ordered [6ms]
    - should allow to control case-sensitivity of keys [7ms]
    - should report a warning if the key contains floating point values [9ms]
    - should handle nulls correctly [5ms]
    - should report missing input columns [38ms]
[In-Memory] Table.cross_tab:  [22/22, 312ms]
    - should cross_tab counts by default using first column as names [67ms]
    - should allow a different aggregate [10ms]
    - should allow a custom expression for the aggregate [11ms]
    - should allow a chosen column [32ms]
    - should allow a grouping [7ms]
    - should allow a grouping by Aggregate_Column [9ms]
    - should allow a grouping by text [30ms]
    - should allow multiple values aggregates [27ms]
    - should fail if name_column is not found [8ms]
    - should fail if group-by contains missing columns [3ms]
    - should fail if aggregate values contain missing columns [10ms]
    - should fail if aggregate values contain invalid expressions [7ms]
    - should not allow Group_By for values [1ms]
    - should gracefully handle duplicate aggregate names [14ms]
    - should allow non-Text columns to be used as name [2ms]
    - should correctly handle uncommon characters in fields becoming column names [4ms]
    - should report Floating_Point_Equality if the group or name column is floating point [7ms]
    - should check types of aggregates [14ms]
    - should return predictable types [7ms]
    - should fail gracefully if an effective column name would contain invalid characters [5ms]
    - should fail gracefully if an effective column name would be empty or null [5ms]
    - should fail gracefully if producing too many columns in a table [23ms]
[In-Memory] Table.transpose:  [8/8, 91ms]
    - should transpose all columns by default [34ms]
    - should allow custom names [14ms]
    - should allow id fields [3ms]
    - should allow single id field [2ms]
    - should allow fields selected by index [2ms]
    - should allow all current columns to become id fields, without warning [2ms]
    - should handle missing columns [16ms]
    - should warn on column name clashes [14ms]
[In-Memory] Table.add_row_number (common):  [6/6, 160ms]
    - should rename existing column upon a name clash [100ms]
    - should allow to order the row numbers by some columns [26ms]
    - should allow mixing grouping with ordering and custom start and step [8ms]
    - should report floating point equality warning when grouping on float columns [18ms]
    - should fail if columns provided in ordering/grouping do not exist [4ms]
    - will respect the row order of order_by [2ms]
[In-Memory] Table.add_row_number (in-memory specific):  [6/6, 38ms]
    - should add a row numbering column [2ms]
    - should allow customizing the starting index and step [3ms]
    - should allow to assign row numbers separately within each group [15ms]
    - should allow to assign row numbers separately within scattered groups, preserving the row layout [3ms]
    - should allow mixing grouping with ordering and custom start and step, preserving the original row layout [6ms]
    - should allow to order the row numbers by some columns, keeping the row ordering intact [6ms]
[In-Memory]  Interactions Between various operations:  [8/8, 1242ms]
    - using weird column names with operations and filtering [1210ms]
    - aggregates and joins [7ms]
    - aggregates and distinct [5ms]
    - aggregates and filtering [4ms]
    - aggregates and ordering [3ms]
    - distinct and ordering [3ms]
    - distinct and ordering if first row is returned after ordering [2ms]
    - distinct and filtering [4ms]
File.read (Delimited) should work with Dates:  [3/3, 9ms]
    - should be able to read in a table with dates [5ms]
    - should be able to treat a single value as a Date [1ms]
    - should be able to compare columns and table [3ms]
Should be able to serialise a table with Dates to Text:  [2/2, 46ms]
    - should serialise back to input [31ms]
    - should serialise dates with format [15ms]
File.read (Delimited) should work with Date_Time:  [3/3, 13ms]
    - should be able to read in a table with dates [8ms]
    - should be able to treat a single value as a Date_Time [1ms]
    - should be able to compare columns and table [2ms]
Should be able to serialise a table with DateTimes to Text:  [2/2, 5ms]
    - should serialise back to input [3ms]
    - should serialise dates with format [2ms]
File.read (Delimited) should work with Time_Of_Days:  [3/3, 10ms]
    - should be able to read in a table with dates [6ms]
    - should be able to treat a single value as a Time_Of_Days [2ms]
    - should be able to compare columns and table [2ms]
Should be able to serialise a table with Time_Of_Days to Text:  [2/2, 5ms]
    - should serialise back to input [3ms]
    - should serialise dates with format [1ms]
Aggregate Columns:  [23/23, 121ms]
    - should be able to count a set [7ms]
    - should be able to count missing values in a set [5ms]
    - should be able to count non missing values in a set [2ms]
    - should be able to count empties in a set of Texts [3ms]
    - should be able to count non empties in a set of Texts [2ms]
    - should be able to total a set of values [2ms]
    - should be able to average a set of values [4ms]
    - should be able to compute standard deviation a set of values [3ms]
    - should be able to compute standard deviation of a population a set of values [2ms]
    - should be able to compute median a set of values [2ms]
    - should be able to compute first of a set of values including missing [3ms]
    - should be able to compute first of a set of values excluding missing [2ms]
    - should be able to compute last of a set of values including missing [2ms]
    - should be able to compute last of a set of values excluding missing [2ms]
    - should be able to concatenate a set of values excluding missing [2ms]
    - should be able to count distinct items on a single set of values [9ms]
    - should be able to count distinct items on a multiple sets of values [5ms]
    - should be able to get the minimum of a set of values [2ms]
    - should be able to get the maximum of a set of values [2ms]
    - should be able to get the shortest of a set of texts [2ms]
    - should be able to get the longest of a set of texts [2ms]
    - should be able to get the mode of a set of numbers [15ms]
    - should be able to get the percentile of a set of numbers [28ms]
[In-Memory] Storage Builders:  [1/1, 34ms]
    - should correctly incrementally build a table in presence of lots of null values [34ms]
[In-Memory] Table.join performance:  [3/3, 1144ms]
    - should efficiently compute equality joins [308ms]
    - should efficiently compute equality joins mixed with other secondary conditions [266ms]
    - should efficiently compute case-insensitive equality joins [569ms]
    - [PENDING] should efficiently compute Between joins
        Reason: TODO in task https://www.pivotaltracker.com/story/show/183913337
Table.split:  [5/5, 145ms]
    - can do split_to_columns [76ms]
    - can do split_to_rows [59ms]
    - can do split_to_columns with some Nothings [3ms]
    - can do split_to_rows with some Nothings [3ms]
    - can do split_to_columns with one output column, no column suffix added [3ms]
Table.tokenize:  [12/12, 119ms]
    - can do tokenize_to_columns [19ms]
    - can do tokenize_to_rows [15ms]
    - can do tokenize_to_columns with some nothings [5ms]
    - can do tokenize_to_rows with some Nothings [6ms]
    - can do tokenize_to_columns with one output column, no column suffix needed [4ms]
    - can do tokenize_to_rows with some rows that have no matches [7ms]
    - can do tokenize_to_columns with groups [14ms]
    - can do tokenize_to_rows with groups [11ms]
    - can do tokenize_to_columns case-insensitively [8ms]
    - can do tokenize_to_rows case-insensitively [7ms]
    - can do tokenize_to_rows with at_least_one_row=True [6ms]
    - can do tokenize_to_rows with at_least_one_row=True, with groups [12ms]
Table.split/tokenize column count:  [4/4, 50ms]
    - should generate extra empty columns if column_count is set [7ms]
    - split should limit columns and return problems when exceeding the column limit [10ms]
    - tokenize should limit columns and return problems when exceeding the column limit [29ms]
    - should generate extra empty columns if column_count is set (with rows in a different order) [3ms]
Table.split/tokenize errors:  [4/4, 8ms]
    - won't work on a non-text column [3ms]
    - won't work on a mixed column [3ms]
    - *_to_columns handles missing input column [0ms]
    - *_to_rows handles missing input column [0ms]
Table.split/tokenize name conflicts:  [2/2, 35ms]
    - split will make column names unique [14ms]
    - tokenize will make column names unique [20ms]
Table.split/tokenize column order:  [1/1, 3ms]
    - preserves column order [3ms]
Table.parse_to_columns:  [14/14, 165ms]
    - can parse to columns [40ms]
    - no regex groups [13ms]
    - named groups [15ms]
    - non-participating groups [11ms]
    - case-insensitive [9ms]
    - no post-parsing [6ms]
    - column name clash [9ms]
    - column and group name clash [10ms]
    - empty table [4ms]
    - empty table, with regex groups [4ms]
    - empty table, with named and unnamed regex groups [6ms]
    - input with no matches [20ms]
    - input with no matches, with regex groups [6ms]
    - input with no matches, with named and unnamed regex groups [6ms]
Text.parse_to_table:  [2/2, 48ms]
    - text_to_table [41ms]
    - text_to_table with a regex [6ms]
Text.parse_to_table with groups:  [2/2, 26ms]
    - with groups [15ms]
    - with named groups [10ms]
Text.parse_to_table with case-insensitivity:  [1/1, 8ms]
    - case insensitivity [8ms]
Text.parse_to_table parsing:  [3/3, 24ms]
    - parsing on [7ms]
    - parsing on, with a mixed column [10ms]
    - parsing off [5ms]
Text.parse_to_table errors:  [3/3, 14ms]
    - Regex_Syntax_Error [11ms]
    - enpty pattern [2ms]
    - bad arg [0ms]
Table.from Text:  [1/1, 13ms]
    - should create a table from a textual CSV [13ms]
File.read (Delimited):  [3/3, 51ms]
    - should create a table from a CSV in a file [13ms]
    - should correctly infer types of varied-type columns [28ms]
    - should handle duplicated columns [8ms]
Writing:  [4/4, 93ms]
    - should properly serialize simple tables [13ms]
    - should properly handle quoting of records and allow specifying separators [3ms]
    - should allow forced quoting of records [6ms]
    - should write CSV to a file [69ms]
Integration:  [1/1, 84ms]
    - should be able to round-trip a table with all kinds of weird characters to CSV and back [84ms]
Delimited File Parsing:  [27/27, 1140ms]
    - should load a simple table with headers [23ms]
    - should load a simple table without headers [20ms]
    - should work in presence of missing headers [45ms]
    - should infer headers based on the first two rows [74ms]
    - should not use the first row as headers if it is the only row, unless specifically asked to [19ms]
    - should raise an informative error when loading an empty file [5ms]
    - should correctly handle file opening issues [10ms]
    - should work with all kinds of line endings [49ms]
    - should allow to override line endings style [92ms]
    - should work with Windows-1252 encoding [21ms]
    - should work with UTF-16 encoding [17ms]
    - should report errors when encountering malformed characters [105ms]
    - should handle duplicated columns [36ms]
    - should handle quotes [34ms]
    - should support rows spanning multiple lines if quoted [11ms]
    - should fail in presence of a mismatched quote [119ms]
    - [PENDING] should fail in presence of a mismatched quote (2)
        Reason: TODO: To be fixed in https://github.com/enso-org/enso/issues/5839
    - [PENDING] should handle quotes if they are opened in the middle of an unquoted cell in a sane way
        Reason: TODO: To be fixed in https://github.com/enso-org/enso/issues/5839
    - should handle too long and too short rows [180ms]
    - should aggregate invalid rows over some limit [57ms]
    - should allow to skip rows [14ms]
    - should allow to set a limit of rows to read [47ms]
    - should check arguments [25ms]
    - should correctly guess column types [44ms]
    - should be able to detect types automatically [36ms]
    - should be able to parse raw text [11ms]
    - should be able to read column names starting with # [11ms]
    - should be able to handle comments if enabled [19ms]
    - [PENDING] should manage to parse a file containing null characters
        Reason: Parsing NULL character in CSV currently does not handle some edge cases. It may need to be revised. See issue https://github.com/enso-org/enso/issues/5655
    - should allow to build the Delimited configuration using builders [6ms]
Delimited File Writing:  [33/33, 1194ms]
    - should correctly write a simple table and return the written file object on success [24ms]
    - should allow to specify line ending style [30ms]
    - should quote values that contain the delimiter, newline or quotes, in the [,""] variant [20ms]
    - should quote values that contain the delimiter, newline or quotes, in the [;\"] variant [17ms]
    - should quote values that contain the delimiter, newline or quotes, in the [\t''] variant [15ms]
    - should correctly distinguish empty text from a missing value [16ms]
    - should quote values containing the comment symbol if comments are enabled [20ms]
    - should not quote values if quoting is disabled [34ms]
    - should allow to always quote text and custom values, but for non-text primitives only if absolutely necessary [21ms]
    - should correctly handle alternative encodings [18ms]
    - should correctly handle encoding errors [24ms]
    - should allow only text columns if no formatter is specified [33ms]
    - should create a new file in append mode if it didn't exist [48ms]
    - should correctly append to an empty file [41ms]
    - should correctly append to a file with a missing newline at EOF [19ms]
    - should append to a file, matching columns by name (headers=Infer) [27ms]
    - should append to a file, matching columns by name (headers=True) [25ms]
    - should fail when appending and matching columns by name but column names are not available in the file (headers=Infer) [15ms]
    - should fail when appending and matching columns by name but headers are disabled (headers=False) [11ms]
    - should fail on column mismatch when appending to a file by name [19ms]
    - should append to a file, matching columns by position [72ms]
    - should fail on column count mismatch when appending to a file by position [31ms]
    - should use the same line ending style as existing data when appending [41ms]
    - should use Unix line ending style when appending to an empty or nonexistent file [50ms]
    - should use the existing line ending style when appending to a file consisting of only comments [37ms]
    - should use the existing line ending style when appending to a file consisting of only comments missing last EOL [50ms]
    - should correctly handle append edge cases [301ms]
    - should use the existing line ending style when appending to a file consisting of only one comment with EOL [26ms]
    - should use the Unix line ending style when appending to a file consisting of only one comment and missing the EOL [10ms]
    - should fail if explicitly provided line endings do not match line endings in the file when appending [9ms]
    - should fail if the target file is read-only [25ms]
    - should fail if the parent directory does not exist [4ms]
    - should warn about not-encodable characters according to the problem behaviour [46ms]
Excel Range:  [9/9, 121ms]
    - should be able to parse A1 format [16ms]
    - should be able to parse RC format [1ms]
    - should fail gracefully for invalid patterns [4ms]
    - should allow Range creation for a cell [20ms]
    - should allow Range creation for a range [46ms]
    - should allow Range creation for a column [11ms]
    - should allow Range creation for columns [12ms]
    - should allow Range creation for a row [4ms]
    - should allow Range creation for rows [4ms]
ERROR StatusLogger Log4j2 could not find a logging implementation. Please add log4j-core to the classpath. Using SimpleLogger to log to the console...
Read XLSX / XLS Files:  [12/12, 2414ms]
    - should let you read the workbook with Auto_Detect [1288ms]
    - should let you read the workbook with Excel [150ms]
    - workbook should look like a database connection [152ms]
    - should let you read the sheet names [99ms]
    - should let you read the range names [91ms]
    - should let you read by sheet index [120ms]
    - should let you read by sheet name [147ms]
    - should let you read XLS by sheet index [23ms]
    - should let you read XLS by sheet name [22ms]
    - should let you read by range [177ms]
    - should let you read by range name [49ms]
    - should let you restrict number of rows read and skip rows [89ms]
Problems:  [3/3, 19ms]
    - should handle non-existing file gracefully [1ms]
    - should handle wrong xls_format gracefully [5ms]
    - should handle malformed XLS files gracefully [12ms]
XLSX reading:  [7/7, 258ms]
    - should read a workbook in [45ms]
    - should read the specified sheet by index and use correct headers [27ms]
    - should read the specified sheet by index and properly format a table [41ms]
    - should read the specified sheet by name and properly handle dates [26ms]
    - should give an informative error when reading an empty table [21ms]
    - should gracefully handle duplicate column names and formulas [27ms]
    - should allow reading with cell range specified [67ms]
XLS reading:  [7/7, 52ms]
    - should read a workbook in [15ms]
    - should read the specified sheet by index and use correct headers [6ms]
    - should read the specified sheet by index and properly format a table [6ms]
    - should read the specified sheet by name and properly handle dates [5ms]
    - should give an informative error when reading an empty table [3ms]
    - should gracefully handle duplicate column names and formulas [4ms]
    - should allow reading with cell range specified [8ms]
Reading single cells correctly:  [7/7, 348ms]
    - Simple table [108ms]
    - Patchy table [83ms]
    - Single cell [27ms]
    - Single line [18ms]
    - Growing table [45ms]
    - Should handle blank headers without warnings [16ms]
    - Should handle duplicate headers with warnings [47ms]
Write xlsx Files:  [36/36, 2203ms]
    - should write a table to non-existent file as a new sheet with headers; and return the file object on success [183ms]
    - should write a table to non-existent file in append mode as a new sheet with headers [45ms]
    - should write a table to existing file overriding EnsoSheet [77ms]
    - should write a table to existing file in overwrite mode as a new sheet with headers [89ms]
    - should write a table to existing file in overwrite mode as a new sheet without headers [87ms]
    - should create new sheets at the start if index is 0 [111ms]
    - should write a table to specific single cell location of an existing sheet [79ms]
    - should clear out an existing fixed range and replace [77ms]
    - should clear out an existing range and replace [77ms]
    - should result in Invalid_Location error if trying to write in a bad location [80ms]
    - should result in Range_Exceeded error if trying to write in too small a range [29ms]
    - should result in Existing_Data error if in Error mode and trying to replace [117ms]
    - should not allow adding a new sheet if in Error mode and not clashing [37ms]
    - should write a table to non-existent file as a new sheet without headers [61ms]
    - should be able to append to a sheet by name [140ms]
    - should be able to append to a sheet by position [89ms]
    - should be able to append to a sheet by name out of order [59ms]
    - should be able to append to a single cell by name [64ms]
    - should be able to append to a single cell by position [67ms]
    - should be able to append to a single cell by name out of order [68ms]
    - should be able to append to a range by name [63ms]
    - should be able to append to a range by position [58ms]
    - should be able to append to a range by name not in top left [41ms]
    - should be able to append to a range by name after deduplication of names [48ms]
    - should be able to append to a range by position not in top left [57ms]
    - should be able to append to a range by name out of order [61ms]
    - should fail to append to a sheet by name if missing columns [19ms]
    - should fail to append to a sheet by name if extra columns [22ms]
    - should fail to append to a sheet by name if no headers [32ms]
    - should fail to append to a sheet by position if too few columns [12ms]
    - should fail to append to a sheet by position if too many columns [13ms]
    - should fail to append to a range by name if not large enough [13ms]
    - should fail to append to a range by name if it hits another table [17ms]
    - should fail if the target file is read-only [59ms]
    - should fail if the parent directory does not exist [5ms]
    - should allow to write and read-back Unicode characters [30ms]
Write xls Files:  [36/36, 730ms]
    - should write a table to non-existent file as a new sheet with headers; and return the file object on success [42ms]
    - should write a table to non-existent file in append mode as a new sheet with headers [10ms]
    - should write a table to existing file overriding EnsoSheet [51ms]
    - should write a table to existing file in overwrite mode as a new sheet with headers [59ms]
    - should write a table to existing file in overwrite mode as a new sheet without headers [26ms]
    - should create new sheets at the start if index is 0 [26ms]
    - should write a table to specific single cell location of an existing sheet [29ms]
    - should clear out an existing fixed range and replace [25ms]
    - should clear out an existing range and replace [28ms]
    - should result in Invalid_Location error if trying to write in a bad location [13ms]
    - should result in Range_Exceeded error if trying to write in too small a range [5ms]
    - should result in Existing_Data error if in Error mode and trying to replace [23ms]
    - should not allow adding a new sheet if in Error mode and not clashing [7ms]
    - should write a table to non-existent file as a new sheet without headers [11ms]
    - should be able to append to a sheet by name [26ms]
    - should be able to append to a sheet by position [21ms]
    - should be able to append to a sheet by name out of order [25ms]
    - should be able to append to a single cell by name [26ms]
    - should be able to append to a single cell by position [21ms]
    - should be able to append to a single cell by name out of order [24ms]
    - should be able to append to a range by name [25ms]
    - should be able to append to a range by position [20ms]
    - should be able to append to a range by name not in top left [18ms]
    - should be able to append to a range by name after deduplication of names [26ms]
    - should be able to append to a range by position not in top left [30ms]
    - should be able to append to a range by name out of order [25ms]
    - should fail to append to a sheet by name if missing columns [4ms]
    - should fail to append to a sheet by name if extra columns [4ms]
    - should fail to append to a sheet by name if no headers [8ms]
    - should fail to append to a sheet by position if too few columns [4ms]
    - should fail to append to a sheet by position if too many columns [4ms]
    - should fail to append to a range by name if not large enough [4ms]
    - should fail to append to a range by name if it hits another table [5ms]
    - should fail if the target file is read-only [28ms]
    - should fail if the parent directory does not exist [4ms]
    - should allow to write and read-back Unicode characters [6ms]
Various File Format support on Table:  [8/8, 1178ms]
    - should be able to be written as CSV, Excel [15ms]
    - should be able to be written as JSON using Table.write [130ms]
    - should write JSON tables [107ms]
    - should append to JSON tables [75ms]
    - should fail to append to JSON non-arrays [13ms]
    - should fail gracefully when provided with an unsupported format [20ms]
    - should write to a temporary CSV file part of the data if context disabled [57ms]
    - should write to a temporary JSON file part of the data if context disabled [756ms]
JSON conversion:  [2/2, 89ms]
    - should convert tables to a format compatible with Table.from_objects [76ms]
    - should allow converting a JSON array into a table [12ms]
DataFormatter.parse:  [10/10, 225ms]
    - should parse numbers [23ms]
    - should allow customizing the decimal point and thousand separator [28ms]
    - should support exponential notation, but only if explicitly enabled [34ms]
    - handle leading zeros, only if enabled [19ms]
    - should parse booleans [8ms]
    - should allow custom boolean formats [12ms]
    - should parse dates [62ms]
    - should fallback to Text [4ms]
    - should report Invalid_Format errors [27ms]
    - should not allow unexpected types [2ms]
DataFormatter.format:  [9/9, 87ms]
    - should handle Nothing [0ms]
    - should format numbers [7ms]
    - should allow customizing the decimal point and thousand separator [13ms]
    - should format booleans [2ms]
    - should allow custom boolean formats [15ms]
    - should format dates [10ms]
    - should allow custom date formats [30ms]
    - should act as identity on Text [3ms]
    - should work with custom types, falling back to the `.to_text` method [4ms]
    - [PENDING] should correctly pass through errors from custom type's `.to_text` method
        Reason: TODO: figure out the desired behavior, see: https://www.pivotaltracker.com/story/show/182522644
DataFormatter builders:  [4/4, 51ms]
    - should allow changing number formatting settings [12ms]
    - should allow changing datetime formats [21ms]
    - should allow changing the datetime locale [8ms]
    - should allow changing booleans' representations [9ms]
Table.parse:  [22/22, 481ms]
    - should correctly parse integers [24ms]
    - should correctly parse decimals [57ms]
    - should parse leading zeros in numbers [83ms]
    - should correctly parse booleans [38ms]
    - should correctly parse date and time [77ms]
    - should parse date and time in various formats [11ms]
    - should warn when cells do not fit the expected format [56ms]
    - should leave not selected columns unaffected [1ms]
    - should guess the datatype for columns [15ms]
    - should allow to specify a thousands separator and a custom decimal point [7ms]
    - should allow to specify custom values for booleans [5ms]
    - should trim input values by default [19ms]
    - should fail to parse if whitespace is present and trimming is turned off [23ms]
    - should fallback to text if whitespace is present and trimming is turned off [3ms]
    - should allow selecting columns by regex [6ms]
    - should correctly handle problems: missing input columns [14ms]
    - should correctly handle problems: out of bounds indices [8ms]
    - should allow mixed column selectors [3ms]
    - should handle edge-cases: overlapping selectors [6ms]
    - should error if invalid target type is provided [2ms]
    - should error if the input column is not text [2ms]
    - should error if no input columns selected, unless error_on_missing_columns=False [8ms]
Column.parse:  [13/13, 68ms]
    - should correctly parse integers [2ms]
    - should correctly parse integers in US formats [9ms]
    - should correctly parse integers in European formats [7ms]
    - should correctly parse decimals [3ms]
    - should correctly parse decimals in US formats [8ms]
    - should correctly parse decimals in European formats [5ms]
    - should correctly parse booleans [4ms]
    - should correctly parse date and time [5ms]
    - should correctly parse date and time with format [2ms]
    - should handle invalid format strings gracefully [5ms]
    - should correctly work in Auto mode [11ms]
    - should error if invalid target type is provided [0ms]
    - should error if the input column is not text [1ms]
[Codegen] JSON serialization:  [0/0, 0ms]
    - [PENDING] should serialize Tables and Columns to their SQL representation
        Reason: TODO: decide on how we handle ==, see https://github.com/enso-org/enso/issues/5241
[Codegen] Basic Select:  [3/3, 92ms]
    - should select columns from a table [81ms]
    - should fail if at is called for a non-existent column [3ms]
    - should allow to limit the amount of returned results [6ms]
[Codegen] Masking Tables and Columns:  [2/2, 184ms]
    - should generate a single BETWEEN expression [101ms]
    - should generate an IN expression [83ms]
[Codegen] Handling Missing Values:  [2/2, 82ms]
    - fill_nothing should allow to replace missing values in a column with a constant [21ms]
    - filter_blank_rows should drop rows that contain at least one missing column in a Table [61ms]
[Codegen] Sorting:  [4/4, 61ms]
    - should allow sorting by a single column name [34ms]
    - should allow sorting by multiple column names [10ms]
    - should allow sorting with specific by-column rules [9ms]
    - should return warnings and errors when passed a non-existent column [7ms]
Helpers:  [1/1, 2ms]
    - fresh_names should provide fresh names [2ms]
[Codegen] Aggregation:  [2/2, 135ms]
    - should allow to count rows [107ms]
    - should allow to group by multiple fields [28ms]
[SQLite File] Basic Table Access:  [3/3, 460ms]
    - should allow to materialize tables and columns into local memory [58ms]
    - should allow to materialize columns directly into a Vector [6ms]
    - should handle bigger result sets [394ms]
[SQLite File] Table.query:  [8/8, 198ms]
    - should allow to access a Table by name [13ms]
    - should allow to access a Table by an SQL query [14ms]
    - should allow to access a Table by an SQL query [11ms]
    - should use labels for column names [6ms]
    - should allow a shorthand trying to deduce if the query is a table name or an SQL query [70ms]
    - should report an error depending on input SQL_Query type [22ms]
    - should not allow interpolations in raw user-built queries [5ms]
    - should make a best-effort attempt at returning a reasonable error for the short-hand [53ms]
[SQLite File] Masking Tables:  [1/1, 37ms]
    - should allow to select rows from a table or column based on an expression [37ms]
[SQLite File] Missing Values:  [2/2, 66ms]
    - fill_nothing should replace nulls [27ms]
    - should correctly be counted [38ms]
[SQLite File] Sorting:  [5/5, 116ms]
    - should allow sorting by a single column name [17ms]
    - should allow sorting by multiple column names [15ms]
    - should allow sorting with specific by-column rules [8ms]
    - should correctly reorder all kinds of columns and leave the original columns untouched [58ms]
    - should sort columns with specified ordering and missing placement [17ms]
[SQLite File] Aggregation:  [2/2, 71ms]
    - should allow counting group sizes and elements [35ms]
    - should allow simple arithmetic aggregations [36ms]
[SQLite File] Table.filter:  [1/1, 1ms]
    - report error when trying to filter by a custom predicate [1ms]
[SQLite File] Table.default_ordering:  [4/4, 114ms]
    - will return Nothing if no primary key is defined [17ms]
    - will return the key for a table with a primary key [31ms]
    - will return Nothing for composite tables (join, aggregate) [61ms]
    - will return the ordering determined by order_by [4ms]
[SQLite File] Schemas and Databases:  [3/3, 11ms]
    - should be able to get current database and list databases [2ms]
    - should be able to get current schema and list schemas [2ms]
    - does not allow changing schema or database [5ms]
[SQLite File] Tables and Table Types:  [4/4, 206ms]
    - should be able to list table types [20ms]
    - should be able to list tables [65ms]
    - should be able to filter tables by name [90ms]
    - should be able to filter tables by type [29ms]
[SQLite File] Error Handling:  [1/1, 31ms]
    - should wrap errors [31ms]
[SQLite File] Metadata:  [2/2, 48ms]
    - should return Table information [30ms]
    - should infer standard types correctly [17ms]
[SQLite File] Dialect-specific codegen:  [1/1, 24ms]
    - should generate queries for the Distinct operation [24ms]
[SQLite File] math functions:  [6/6, 1582ms]
    - round, trunc, ceil, floor [541ms]
    - Can round correctly near the precision limit [128ms]
    - Can round correctly near the precision limit, using banker's rounding [446ms]
    - Can handle NaN/Infinity [237ms]
    - round returns the correct type [111ms]
    - round returns the correct type [117ms]
[SQLite File] Table.at:  [3/3, 18ms]
    - should allow selecting columns by name [3ms]
    - should allow selecting columns by index [13ms]
    - should fail with Type Error is not an Integer or Text [0ms]
[SQLite File] Table.get:  [3/3, 12ms]
    - should allow selecting columns by name [3ms]
    - should allow selecting columns by index [7ms]
    - should fail with Type Error is not an Integer or Text [1ms]
[SQLite File] Table.set:  [7/7, 125ms]
    - should allow adding a column [3ms]
    - should not allow illegal column names [1ms]
    - should allow replacing a column [2ms]
    - should allow adding a column [1ms]
    - should not affect existing columns that depended on the old column being replaced [43ms]
    - should gracefully handle expression failures [21ms]
    - should forward expression problems [51ms]
[SQLite File] Table.column_names:  [2/2, 57ms]
    - should return the names of all columns [0ms]
    - should allow weird column names in all backends [57ms]
[SQLite File] Table.column_count:  [1/1, 0ms]
    - should allow getting the column count [0ms]
[SQLite File] Table.rows:  [6/6, 42ms]
    - should allow to get a Vector of Table rows [5ms]
    - should let you get the first row [5ms]
    - should let you get the second row [4ms]
    - should let you get the last row [6ms]
    - should fetch rows up to the specified limit [3ms]
    - should correctly handle errors [18ms]
[SQLite File] Table.select_columns:  [14/14, 660ms]
    - should work as shown in the doc examples [52ms]
    - should allow to reorder columns if asked to [23ms]
    - should correctly handle regex matching [84ms]
    - should allow negative indices [16ms]
    - should allow mixed names and indexes [67ms]
    - should correctly handle regexes matching multiple names [39ms]
    - should correctly handle problems: out of bounds indices [61ms]
    - should correctly handle edge-cases: duplicate indices [28ms]
    - should correctly handle edge-cases: aliased indices [14ms]
    - should correctly handle edge-cases: duplicate names [67ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [26ms]
    - should correctly handle problems: unmatched names [60ms]
    - should correctly handle problems in mixed case [18ms]
    - should correctly handle problems: no columns in the output [100ms]
[SQLite File] Table.remove_columns:  [11/11, 495ms]
    - should work as shown in the doc examples [64ms]
    - should correctly handle regex matching [126ms]
    - should allow negative indices [21ms]
    - should correctly handle regexes matching multiple names [15ms]
    - should correctly handle problems: out of bounds indices [68ms]
    - should correctly handle edge-cases: duplicate indices [13ms]
    - should correctly handle edge-cases: aliased indices [13ms]
    - should correctly handle edge-cases: duplicate names [13ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [23ms]
    - should correctly handle problems: unmatched names [67ms]
    - should correctly handle problems: no columns in the output [67ms]
[SQLite File] Table.reorder_columns:  [9/9, 353ms]
    - should work as shown in the doc examples [103ms]
    - should correctly handle regex matching [62ms]
    - should allow negative indices [13ms]
    - should correctly handle regexes matching multiple names [12ms]
    - should correctly handle problems: out of bounds indices [66ms]
    - should correctly handle edge-cases: duplicate indices [13ms]
    - should correctly handle edge-cases: aliased indices [14ms]
    - should correctly handle edge-cases: duplicate names [13ms]
    - should correctly handle problems: unmatched names [53ms]
[SQLite File] Table.sort_columns:  [4/4, 144ms]
    - should work as shown in the doc examples [59ms]
    - should correctly handle case-insensitive sorting [14ms]
    - should correctly handle natural order sorting [18ms]
    - should correctly handle various combinations of options [51ms]
[SQLite File] Table.rename_columns:  [20/20, 812ms]
    - should work as shown in the doc examples [71ms]
    - should work by index [18ms]
    - should work by position [15ms]
    - should work by Vector [14ms]
    - should work by Vector of Pairs [19ms]
    - should work by name [22ms]
    - should work by mixed Map [18ms]
    - should work by name case-insensitively [37ms]
    - should work by name using regex [16ms]
    - should work by name using regex substitution [20ms]
    - should correctly handle problems: unmatched names [69ms]
    - should correctly handle problems: out of bounds indices [68ms]
    - should correctly handle edge-cases: aliased indices [34ms]
    - should correctly handle edge-cases: aliased selectors [51ms]
    - should correctly handle problems: invalid names '' [49ms]
    - should correctly handle problems: invalid names Nothing [50ms]
    - should correctly handle problems: invalid names null character [63ms]
    - should correctly handle problems: duplicate names [48ms]
    - should correctly handle problems: new name is clashing with existing name of existing column [81ms]
    - should correctly handle problems: too many input names [40ms]
[SQLite File] Boolean Column Operations:  [4/4, 151ms]
    - iif [41ms]
    - iif on Columns [55ms]
    - [PENDING] iif should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
    - should allow to compute &&, || and not [31ms]
    - [PENDING] should return null if one of arguments is missing
        Reason: TODO null handling
    - should check types [21ms]
[SQLite File] Column Operations - Equality & Null Handling:  [4/4, 104ms]
    - [PENDING] should provide basic == and != comparisons
        Reason: TODO figure out proper null handling
    - should allow to check which values are null [34ms]
    - [PENDING] Column equality should handle nulls correctly
        Reason: TODO
    - equals_ignore_case for ASCII strings [26ms]
    - equals_ignore_case should check types [16ms]
    - [PENDING] Text Column equality (including case-insensitive) should handle nulls correctly
        Reason: TODO
    - should report a warning if checking equality on floating point columns [26ms]
[SQLite File] Column.fill_nothing/empty:  [4/4, 86ms]
    - should allow to fill_nothing from a value [22ms]
    - should allow to fill_nothing from another column [21ms]
    - should allow to fill_empty from a value [27ms]
    - should allow to fill_empty from another column [14ms]
[SQLite File] Table.fill_nothing/empty:  [6/6, 133ms]
    - should allow to fill_nothing from a value [25ms]
    - should allow to fill_nothing from other columns [18ms]
    - should allow to fill_empty from a value [25ms]
    - should allow to fill_empty from other columns [21ms]
    - fill_nothing should leave other columns alone [23ms]
    - fill_nothing should work with integer column selectors [18ms]
[SQLite File] Table.replace:  [0/0, 0ms]
[SQLite File] Column Comparisons:  [4/4, 242ms]
    - should allow to compare numbers [99ms]
    - should allow to compare texts [55ms]
    - should allow to compare booleans [39ms]
    - should report error if incomparable types are compared [48ms]
    - [PENDING] Between should return null if any of the values are null
        Reason: TODO
[SQLite File] Arithmetic Column Operations:  [10/10, 226ms]
    - should allow basic operations [12ms]
    - should allow combining a column with a scalar [10ms]
    - should work with mixed types [34ms]
    - should correctly infer the types [19ms]
    - should check types [38ms]
    - should report that is_nan is not supported [17ms]
    - should support is_infinite [19ms]
    - should support is_blank [19ms]
    - division should be aligned with the Enso arithmetic [37ms]
    - [PENDING] should allow division by 0 and report warnings
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - [PENDING] should limit the number of rows listed in the message
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - should return null if one of arguments is missing [16ms]
[SQLite File] Rounding-like operations:  [15/15, 430ms]
    - should name a rounding column correctly [17ms]
    - should allow round on a (Float 64 bits) column [15ms]
    - should allow round on a float column (to >0 decimal places) [14ms]
    - should allow round on a float column (to <0 decimal places) [64ms]
    - should allow truncate on a (Float 64 bits) column [19ms]
    - should allow ceil on a (Float 64 bits) column [18ms]
    - should allow floor on a (Float 64 bits) column [22ms]
    - should allow round on an int column [52ms]
    - should allow truncate on an int column [15ms]
    - should allow ceil on an int column [14ms]
    - should allow floor on an int column [14ms]
    - should fail on decimal_places out of range [12ms]
    - should allow Nothing/NULL [14ms]
    - should fail on bad column type [15ms]
    - should work with mixed type columns [116ms]
[SQLite File] Rounding numeric tests:  [17/17, 7554ms]
    - Can round positive decimals correctly [136ms]
    - Can round negative decimals correctly [108ms]
    - Explicit and implicit 0 decimal places work the same [53ms]
    - Can round zero and small decimals correctly [41ms]
    - Can round decimals to a specified number of decimal places [120ms]
    - Can round positive decimals to a specified negative number of decimal places [618ms]
    - Can round negative decimals to a specified negative number of decimal places [562ms]
    - Banker's rounding handles half-way values correctly [868ms]
    - Banker's rounding handles non-half-way values just like normal rounding [435ms]
    - Can round correctly near the precision limit [266ms]
    - Can round correctly near the precision limit, using banker's rounding [1124ms]
    - Decimal places out of range [19ms]
    - Floating point imperfect representation counter-examples [61ms]
    - Can round small integers to a specified number of decimal places correctly (value is unchanged) [85ms]
    - Can round integers to a specified number of negative places correctly [920ms]
    - Can round negative integers to a specified number of negative places correctly [1194ms]
    - Can round negative integers to a specified number of negative places with banker's rounding correctly [936ms]
[SQLite File] Text Column Operations:  [5/5, 212ms]
    - should handle operations like starts_with, ends_with, contains [96ms]
    - should handle operations like is_empty, is_blank, fill_empty [23ms]
    - should check types [28ms]
    - should return right types [44ms]
    - should support text concatenation with the + operator [18ms]
[SQLite File] Min/Max Operations:  [2/2, 50ms]
    - should allow one or more args and return the correct type [38ms]
    - should check types [11ms]
[SQLite File] replace: literal text pattern and replacement:  [4/4, 64ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=false [38ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=true [13ms]
    - case_sensitivity=insensitive use_regex=false only_first=false [5ms]
    - case_sensitivity=insensitive use_regex=false only_first=true [6ms]
[SQLite File] replace: literal regex pattern and replacement:  [5/5, 18ms]
    - case_sensitivity=sensitive/default use_regex=True only_first=false [5ms]
    - case_sensitivity=sensitive/default use_regex=True only_first=true [1ms]
    - case_sensitivity=insensitive use_regex=True only_first=false [1ms]
    - case_sensitivity=insensitive use_regex=True only_first=true [1ms]
    - can properly escape complex regexes [9ms]
[SQLite File] replace: pattern and replacement columns:  [4/4, 10ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=false [4ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=true [4ms]
    - case_sensitivity=insensitive use_regex=false only_first=false [1ms]
    - case_sensitivity=insensitive use_regex=false only_first=true [0ms]
[SQLite File] Column Operations - Text Replace:  [2/2, 15ms]
    - should not allow Case_Sensitivity.Insensitive with a non-default locale [2ms]
    - column name [12ms]
[SQLite File] Column Operations - Text Replace (in-memory only):  [0/0, 0ms]
[SQLite File] Column Operations - Text Trim:  [3/3, 55ms]
    - should trim whitespace by default [30ms]
    - should trim custom characters [20ms]
    - should only allow trim on Text columns [4ms]
[SQLite File] Other Column Operations:  [1/1, 25ms]
    - is_in [25ms]
[SQLite File] Colum Operations - Names:  [8/8, 50ms]
    - arithmetic [11ms]
    - comparison [6ms]
    - logical [3ms]
    - text [8ms]
    - nulls [10ms]
    - misc [4ms]
    - composed operations [5ms]
    - sort [0ms]
[SQLite File] Column.rename:  [1/1, 23ms]
    - should not allow illegal names [23ms]
[SQLite File] Column.const:  [3/3, 54ms]
    - Should allow the creation of constant columns [27ms]
    - Should create the correct column name [12ms]
    - Should not allow the creation of a constant column of columns [13ms]
[PENDING] [SQLite File] Date-Time support
    Reason: Date/Time operations are not supported by this backend.
[PENDING] [SQLite File] Date-Time operations
    Reason: Date/Time operations are not supported by this backend.
[SQLite File] partial Date-Time support:  [2/2, 88ms]
    - will fail when uploading a Table containing Dates [23ms]
    - should report a type error when date operations are invoked on a non-date column [64ms]
[SQLite File] Table/Column.cast - to text:  [1/1, 27ms]
    - should allow to cast columns of various basic types to text [27ms]
[SQLite File] Table/Column.cast - numeric:  [3/3, 63ms]
    - should allow to cast a boolean column to integer [14ms]
    - should allow to cast an integer column to floating point [15ms]
    - [PENDING] should allow to cast an integer column to a smaller bit-width and larger bit-width
        Reason: TODO: #5159
    - should allow to cast a floating point column to integer [32ms]
[SQLite File] Table/Column.cast - checking invariants:  [7/7, 123ms]
    - should report an error for unsupported conversions [13ms]
    - should report an error pointing to the Table.parse method where applicable [13ms]
    - should report missing columns [25ms]
    - should work if the first row is NULL [17ms]
    - should not lose the type after further operations were performed on the result [17ms]
    - should not lose the type after further operations were performed on the result, even if the first row is NULL [17ms]
    - Table.cast should cast the columns "in-place" and not reorder them [18ms]
[SQLite File] Simple variant of Table/Column.parse in all backends:  [5/5, 131ms]
    - should be able to parse simple integers [41ms]
    - should be able to parse simple floats [14ms]
    - should report that date parsing is unsupported [13ms]
    - should be able to parse booleans with default format [39ms]
    - should report missing columns [22ms]
[SQLite File] Table.aggregate should summarize whole table:  [7/7, 101ms]
    - should be able to count [6ms]
    - should be able to count missing values [13ms]
    - should be able to count distinct values [16ms]
    - [PENDING] should be able to count distinct values over multiple columns
        Reason: Not supported.
    - should be able to compute sum and average of values [15ms]
    - should be able to compute standard deviation of values [28ms]
    - [PENDING] should be able to create median, mode and percentile values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with mixed ordering
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [9ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [12ms]
[SQLite File] Table.aggregate should summarize empty table:  [7/7, 64ms]
    - should be able to count [5ms]
    - should be able to count missing values [20ms]
    - should be able to count distinct values [10ms]
    - should be able to compute sum and average of values [8ms]
    - should be able to compute standard deviation of values [7ms]
    - [PENDING] should be able to create median, mode and percentile values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [6ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [5ms]
[SQLite File] Table.aggregate should not summarize empty table when grouped:  [7/7, 50ms]
    - should be able to count [6ms]
    - should be able to count missing values [8ms]
    - should be able to count distinct values [7ms]
    - should be able to compute sum and average of values [8ms]
    - should be able to compute standard deviation of values [8ms]
    - [PENDING] should be able to create median values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [6ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [5ms]
[SQLite File] Table.aggregate should be able to group on single field:  [7/7, 95ms]
    - should be able to count [9ms]
    - should be able to count missing values [16ms]
    - should be able to count distinct values [16ms]
    - [PENDING] should be able to count distinct values over multiple columns
        Reason: Not supported.
    - should be able to compute sum and average of values [15ms]
    - should be able to compute standard deviation of values [15ms]
    - [PENDING] should be able to create median values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with mixed ordering
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [13ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [9ms]
[SQLite File] Table.aggregate should be able to group on multiple fields not in left columns:  [7/7, 137ms]
    - should be able to count [11ms]
    - should be able to count missing values [18ms]
    - should be able to count distinct values [23ms]
    - [PENDING] should be able to count distinct values over multiple columns
        Reason: Not supported.
    - should be able to compute sum and average of values [26ms]
    - should be able to compute standard deviation of values [27ms]
    - [PENDING] should be able to create median values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with mixed ordering
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [17ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [12ms]
[PENDING] [SQLite File] Table.aggregate Shortest
    Reason: Not supported.
[SQLite File] Table.aggregate Concatenate:  [6/6, 102ms]
    - should insert the separator, add prefix and suffix [28ms]
    - should correctly escape separator and quote characters but only if necessary [18ms]
    - should correctly handle missing values and empty values with quote character [14ms]
    - will not be able to distinguish missing values from empty values without quote character [13ms]
    - should work with empty separator [13ms]
    - should work with empty separator but non-empty quote [14ms]
[SQLite File] Table.aggregate Count_Distinct:  [1/1, 95ms]
    - should correctly count missing values [95ms]
    - [PENDING] should correctly count all-null keys in multi-column mode
        Reason: Not supported.
[SQLite File] Table.aggregate Standard_Deviation:  [1/1, 20ms]
    - should correctly handle single elements [20ms]
[SQLite File] Table.aggregate should correctly select result types:  [2/2, 41ms]
    - widening to decimals on Average [22ms]
    - [PENDING] widening to decimals on Median
        Reason: Not supported.
    - [PENDING] widening to decimals on Percentile
        Reason: Not supported.
    - widening to decimals on Standard_Deviation [18ms]
[SQLite File] Table.aggregate should correctly handle infinities:  [2/2, 45ms]
    - on Average [27ms]
    - [PENDING] on Median
        Reason: Not supported.
    - [PENDING] on Percentile
        Reason: Not supported.
    - on Standard_Deviation [17ms]
[PENDING] [SQLite File] Table.aggregate should correctly handle NaN
    Reason: Not supported.
[PENDING] [SQLite File] Table.aggregate Mode
    Reason: Not supported.
[SQLite File] Table.aggregate First and Last:  [0/0, 0ms]
    - [PENDING] should not return the same value for groups with different values but equal ordering keys
        Reason: Not supported.
[SQLite File] Table.aggregate:  [1/1, 15ms]
    - should work even if no aggregations apart from groupings are specified [15ms]
[SQLite File] Table.aggregate+Expressions:  [2/2, 50ms]
    - should allow expressions in aggregates [17ms]
    - should warn when encountering invalid expressions, but try to perform the aggregations that are still valid [33ms]
[SQLite File] Table.aggregate should raise warnings when there are issues:  [7/7, 388ms]
    - should fail if there are no output columns, and promote any warnings to errors [55ms]
    - should raise a warning when can't find a column by name, but a hard error if the missing column is in a Group_By [143ms]
    - should raise a warning when a duplicate column name [37ms]
    - should raise a warning when a duplicate column name and rename default names first [38ms]
    - should raise a warning when duplicate column names [47ms]
    - should allow partial matches on Count_Distinct [33ms]
    - should ignore Count_Distinct if no columns matched [32ms]
[SQLite File] Table.aggregate should report warnings and errors based on types:  [4/4, 82ms]
    - should warn if grouping on a floating point [13ms]
    - should error if unsupported operations are selected [12ms]
    - should check types [39ms]
    - should return predictable types [17ms]
[PENDING] [SQLite File] Table.aggregate should raise warnings when there are issues computing aggregation
    Reason: Not supported.
[PENDING] [SQLite File] Table.aggregate should merge warnings when issues computing aggregation
    Reason: Not supported.
[SQLite File] Table.aggregate should report unsupported operations but not block other aggregations in warning mode:  [5/5, 81ms]
    - with First and Last in row order [19ms]
    - with First and Last with ordering [16ms]
    - with Median, Mode and Percentile [16ms]
    - with Shortest and Longest [15ms]
    - with Count_Distinct on multiple fields [14ms]
[SQLite File] Table.filter:  [19/19, 594ms]
    - by integer comparisons [53ms]
    - [PENDING] Not_Equal test cases
        Reason: Specification needs clarifying, see: https://github.com/enso-org/enso/issues/5241#issuecomment-1480167927
    - by text comparisons [40ms]
    - by text search (contains, starts_with, ends_with, not_contains) [71ms]
    - by text search (like, not_like) [23ms]
    - text operations should also match newlines [32ms]
    - by empty text [13ms]
    - should check types for text operations [41ms]
    - by nulls [19ms]
    - by an Is_In check [134ms]
    - by a boolean mask [17ms]
    - should correctly mask all kinds of columns [14ms]
    - should check types of boolean operations [13ms]
    - by a custom expression built from table's columns [16ms]
    - should handle selection errors: unknown column name [9ms]
    - should handle selection errors: out of bounds index [11ms]
    - should handle illegal arguments [10ms]
    - should nicely handle Filter_Condition with unapplied arguments [9ms]
    - should report issues: floating point equality [24ms]
    - already existing warnings should not be escalated to errors in error handling mode [35ms]
[SQLite File] Table.filter_by_expression:  [4/4, 95ms]
    - by a boolean column [16ms]
    - by an integer comparison [15ms]
    - fail gracefully [21ms]
    - should report issues: floating point equality [41ms]
    - [PENDING] should report issues: arithmetic error
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
[SQLite File] Column.map:  [1/1, 11ms]
    - should report unsupported error [11ms]
[SQLite File] Column.zip:  [1/1, 10ms]
    - should report unsupported error [10ms]
[SQLite File] Dropping Missing Values:  [7/7, 222ms]
    - filter_blank_rows should drop rows that contain at least one missing cell [9ms]
    - filter_blank_rows should drop rows that are all blank [8ms]
    - filter_blank_rows should deal with edge cases [34ms]
    - should allow to select blank columns [73ms]
    - should allow to remove blank columns [67ms]
    - this backend treats NaN as Nothing [2ms]
    - select_blank_columns and remove_blank_columns should deal with edge cases [27ms]
[SQLite File] Filling Missing Values:  [3/3, 70ms]
    - should coerce long and double types to double [34ms]
    - should keep String, Boolean, Long and Double type [22ms]
    - should not allow mixing types by default [13ms]
    - [PENDING] should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
[SQLite File] Table.order_by:  [19/19, 174ms]
    - should work as shown in the doc examples [14ms]
    - should work with single column name [5ms]
    - should work with single Sort_Column [14ms]
    - should allow the selector to mix regex and case insensitive matching [6ms]
    - should correctly handle regexes matching multiple names [10ms]
    - should correctly handle problems: out of bounds indices [5ms]
    - should correctly handle edge-cases: duplicate selectors [10ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [4ms]
    - should correctly handle edge-cases: duplicate matches due to regexes [4ms]
    - should correctly handle edge-cases: mixed selector types [19ms]
    - should correctly handle problems: unmatched names [7ms]
    - should report a problem if no columns are selected for ordering [0ms]
    - should stack consecutive ordering operations [10ms]
    - should give priority to the first selected column and use the next ones for breaking ties [26ms]
    - should deal with real numbers [3ms]
    - should deal with nulls [6ms]
    - should behave as expected with Unicode normalization, depending on the defaults settings [3ms]
    - [PENDING] should support natural ordering
        Reason: Natural ordering is not supported.
    - should support case insensitive ordering [17ms]
    - [PENDING] should support natural and case insensitive ordering at the same time
        Reason: Natural ordering or case sensitive ordering is not supported.
    - text ordering settings should not affect numeric columns [2ms]
[PENDING] [SQLite File] Table.take/drop
    Reason: TODO: take/drop are not yet supported by this backend.
[PENDING] [SQLite File] Column.take/drop
    Reason: TODO: take/drop are not yet supported by this backend.
[SQLite File] Expression Integer literals:  [1/1, 13ms]
    - should be able to add an integer column [13ms]
[SQLite File] Expression Decimal literals:  [1/1, 19ms]
    - should be able to add an decimal column [19ms]
[SQLite File] Expression Boolean literals:  [1/1, 26ms]
    - should be able to add a boolean column [26ms]
[SQLite File] Expression Text literals:  [1/1, 24ms]
    - should be able to add a text column [24ms]
[SQLite File] Expression Text literals:  [2/2, 18ms]
    - should be able to get a Column [4ms]
    - should sanitize names [13ms]
[SQLite File] Expression Nothing literals:  [3/3, 64ms]
    - should be able to add an nothing column [19ms]
    - should allow to create a NULL column [18ms]
    - a null column may fail typechecks that expect a concrete type [26ms]
[SQLite File] Expression Date and Time literals:  [0/0, 0ms]
    - [PENDING] should be able to add a date or time column
        Reason: Date/Time operations are not supported by this backend.
    - [PENDING] should be able to add a date-time column
        Reason: Date/Time operations are not supported by this backend.
    - [PENDING] should be able to add a time column with sub-millisecond accuracy
        Reason: Date/Time operations are not supported by this backend.
    - [PENDING] should correctly handle timezones
        Reason: Date/Time operations are not supported by this backend.
[SQLite File] Expression Arithmetic:  [3/3, 137ms]
    - should be able to do basic arithmetic [64ms]
    - should be able to do basic arithmetic with order [26ms]
    - should be able to do basic arithmetic with whitespace [46ms]
[SQLite File] Expression Column Arithmetic:  [2/2, 109ms]
    - should be able to perform arithmetic on columns [63ms]
    - should be able to perform arithmetic on columns with order [45ms]
[SQLite File] Expression Comparison Operators:  [6/6, 198ms]
    - should be able to compare equality [56ms]
    - should be able to compare ordering [25ms]
    - should be able to use between [40ms]
    - should be able to use in [29ms]
    - should be able to check null [30ms]
    - should be able to check empty [16ms]
[SQLite File] Expression Text Operators:  [2/2, 48ms]
    - should be able to concatenate text [14ms]
    - should be able to use like [33ms]
[SQLite File] Expression Boolean Operators:  [4/4, 67ms]
    - should be able to AND booleans [28ms]
    - should be able to OR booleans [18ms]
    - should be able to NOT booleans [9ms]
    - should be able to use IF [11ms]
[SQLite File] Function invocation:  [2/2, 26ms]
    - should be able to call a function with arguments [17ms]
    - should be able to call a variable args function [8ms]
[SQLite File] Expression Errors should be handled:  [4/4, 34ms]
    - should fail with Syntax_Error if badly formed [16ms]
    - should fail with Unsupported_Operation if not sufficient arguments [2ms]
    - should fail with Argument_Mismatch if not sufficient arguments [1ms]
    - should fail with Argument_Mismatch if too many arguments [13ms]
[SQLite File] Expression Warnings should be reported:  [2/2, 108ms]
    - should report floating point equality [69ms]
    - [PENDING] should report arithmetic errors
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - [PENDING] already existing warnings should not be escalated to errors in error handling mode (1)
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - already existing warnings should not be escalated to errors in error handling mode (2) [39ms]
[SQLite File] Table.join:  [26/26, 828ms]
    - should by default do a Left Outer join on equality of first column in the left table, correlated with column of the same name in the right one [22ms]
    - should allow Inner join [9ms]
    - should allow Full join [8ms]
    - should allow Right Outer join [8ms]
    - should allow to perform anti-joins [12ms]
    - should allow to join on equality of multiple columns and drop redundant columns if Inner join [20ms]
    - should support same-name column join shorthand [6ms]
    - should allow to join on text equality ignoring case [28ms]
    - should correctly handle Enso Decimal-Integer equality [34ms]
    - should allow range-based joins (using Between) for numbers [27ms]
    - should allow range-based joins (using Between) for text [27ms]
    - should allow to mix join conditions of various kinds [25ms]
    - should work fine if the same condition is specified multiple times [62ms]
    - should correctly handle joining a table with itself [40ms]
    - should gracefully handle unmatched columns in Join_Conditions [25ms]
    - should report Invalid_Value_Type if non-text columns are provided to Equals_Ignore_Case [27ms]
    - should report Invalid_Value_Type if incompatible types are correlated [22ms]
    - should report Invalid_Value_Type if incompatible columns types are correlated in Between [26ms]
    - should warn when joining on equality of Decimal columns [114ms]
    - [PENDING] should correctly handle nulls in equality conditions
        Reason: TODO: handling NULLs in equality conditions.
    - [PENDING] should correctly handle nulls in case-insensitive equality conditions
        Reason: TODO: handling NULLs in equality conditions.
    - should correctly handle nulls in Between conditions [27ms]
    - should rename columns of the right table to avoid duplicates [84ms]
    - should warn about renamed columns [34ms]
    - should pass dataflow errors through [1ms]
    - [PENDING] should correctly handle all null rows
        Reason: TODO: handling NULLs in equality conditions.
    - should work correctly when composing multiple join operations [28ms]
    - should work correctly when the join is performed on a transformed table [44ms]
    - should allow full joins with more complex join conditions [57ms]
[SQLite File] Table.cross_join:  [8/8, 293ms]
    - should allow to create a cross product of two tables in the right order [34ms]
    - should work correctly with empty tables [32ms]
    - should respect the right row limit [81ms]
    - should ensure 1-1 mapping even with duplicate rows [30ms]
    - should allow self-joins [15ms]
    - should rename columns of the right table to avoid duplicates [48ms]
    - should respect the column ordering [25ms]
    - Cross join is not possible via call to .join [25ms]
[PENDING] [SQLite File] Table.zip
    Reason: Table.zip is still WIP for the DB backend.
[SQLite File] Table.union:  [18/18, 675ms]
    - should merge columns from multiple tables [73ms]
    - should fill unmatched columns (by name matching) with nulls and report a warning by default [81ms]
    - should drop unmatched columns if asked to [31ms]
    - should keep unmatched columns without errors if asked to [40ms]
    - should fail if asked to drop unmatched columns but the set of common columns is empty [29ms]
    - should ignore column names when matching by position [29ms]
    - should fill extra columns (positional matching) with nulls and report a warning by default [58ms]
    - should keep the least number of columns with positional matching if asked to drop unmatched ones [26ms]
    - should keep the greatest number of columns with positional matching if asked to keep unmatched ones, filling missing values with null and reporting no problems [33ms]
    - should use column names from the first table that has enough columns in positional matching mode [64ms]
    - should allow to merge a table with itself [14ms]
    - should not de-duplicate rows [22ms]
    - should gracefully handle the case where no tables to union were provided [35ms]
    - [PENDING] should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
    - should find a common type that will fit the merged columns [19ms]
    - if no common type can be found, should report error and drop the problematic column [28ms]
    - if type widening is not allowed, should use the type from first table that contained the given column [22ms]
    - if type widening is not allowed and types do not match, should report error and drop the problematic column [34ms]
    - if type mismatches cause all columns to be dropped, fail with No_Output_Columns [26ms]
[SQLite File] Table.distinct:  [7/7, 120ms]
    - should group by all columns by default [13ms]
    - should allow to select distinct rows based on a subset of columns, returning any row from each group [15ms]
    - should allow to select distinct rows based on a subset of columns, returning any first from each group if the table was ordered [12ms]
    - should allow to control case-sensitivity of keys [14ms]
    - should report a warning if the key contains floating point values [15ms]
    - should handle nulls correctly [10ms]
    - should report missing input columns [38ms]
[PENDING] [SQLite File] Table.cross_tab
    Reason: Table.transpose is not implemented yet in Database.
[PENDING] [SQLite File] Table.transpose
    Reason: Table.transpose is not implemented yet in Database.
[SQLite File] Table.add_row_number (common):  [6/6, 113ms]
    - should rename existing column upon a name clash [36ms]
    - should allow to order the row numbers by some columns [13ms]
    - should allow mixing grouping with ordering and custom start and step [16ms]
    - should report floating point equality warning when grouping on float columns [18ms]
    - should fail if columns provided in ordering/grouping do not exist [12ms]
    - will respect the row order of order_by [14ms]
[SQLite File] Table.add_row_number (Database specific):  [1/1, 42ms]
    - will use the primary key by default [42ms]
[SQLite File]  Interactions Between various operations:  [8/8, 1390ms]
    - using weird column names with operations and filtering [1240ms]
    - aggregates and joins [34ms]
    - aggregates and distinct [17ms]
    - aggregates and filtering [20ms]
    - aggregates and ordering [17ms]
    - distinct and ordering [23ms]
    - distinct and ordering if first row is returned after ordering [15ms]
    - distinct and filtering [21ms]
[SQLite File] Transaction Support:  [4/4, 101ms]
    - should commit the changes after the transaction returns a regular value [30ms]
    - should rollback the changes after the inner action panics [29ms]
    - should rollback the changes if the inner action returns a dataflow error [20ms]
    - should commit the changes even if the inner action return value has warnings attached [21ms]
[SQLite File] Creating an empty table:  [14/14, 516ms]
    - should allow to specify the column names and types [25ms]
    - should allow to inherit the structure of an existing in-memory table [30ms]
    - should allow to inherit the structure of an existing Database table [48ms]
    - should fail if the table already exists [20ms]
    - should not fail if the table exists, if `allow_existing=True`, even if the structure does not match [20ms]
    - should fail if an unsupported type is specified [38ms]
    - should fail if empty structure is provided [24ms]
    - should include the created table in the tables directory [91ms]
    - should include the temporary table in the tables directory [62ms]
    - should drop the temporary table after the connection is closed [30ms]
    - should preserve the regular table after the connection is closed [38ms]
    - should be able to specify a primary key [18ms]
    - should ensure that primary key columns specified are valid [46ms]
    - should check types of primary key [19ms]
[SQLite File] Uploading an in-memory Table:  [10/10, 797ms]
    - should create a database table with the same contents as the source [32ms]
    - should include the created table in the tables directory [74ms]
    - should include the temporary table in the tables directory [66ms]
    - should drop the temporary table after the connection is closed [38ms]
    - should preserve the regular table after the connection is closed [46ms]
    - should not create any table if upload fails [70ms]
    - should set a primary key for the table [94ms]
    - should ensure that primary key columns are valid [33ms]
    - should fail if the primary key is not unique [305ms]
    - should fail if the target table already exists [35ms]
[SQLite File] Persisting a Database Table (query):  [8/8, 530ms]
    - should be able to create a persistent copy of a DB table [53ms]
    - should be able to persist a complex query with generated columns, joins etc. [112ms]
    - should be able to create a temporary copy of a query [47ms]
    - should be able to specify a primary key [39ms]
    - should ensure that primary key columns are valid [25ms]
    - should fail when the primary key is not unique [188ms]
    - will not allow to upload tables across connections [30ms]
    - should fail if the target table already exists [31ms]
[SQLite File] Appending an in-memory table to a Database table:  [28/28, 1331ms]
    - should be able to append new rows to a table [56ms]
    - should error if new rows clash with existing ones and mode is Insert, target table should remain unchanged [40ms]
    - should use the target table primary key for the key by default [45ms]
    - should be able to Update existing rows in a table [31ms]
    - should fail on unmatched rows in Update mode [47ms]
    - should upsert by default (update existing rows, insert new rows) [33ms]
    - should allow to align an existing table with a source (upsert + delete rows missing from source) [37ms]
    - should match columns by name, reordering to destination order if needed (Insert) [22ms]
    - should match columns by name, reordering to destination order if needed (Upsert) [30ms]
    - should match columns by name, reordering to destination order if needed (Update) [30ms]
    - should match columns by name, reordering to destination order if needed (Align) [29ms]
    - should allow to use a transformed table, with computed fields, as a source [36ms]
    - should allow specifying no key in Insert mode [45ms]
    - should fail if no key is specified in other modes [49ms]
    - should fail if the key is not unique in the input table [112ms]
    - should fail if the key causes update of multiple values (it's not unique in the target table) [209ms]
    - should fail if the source table contains columns not present in the target (data loss) [15ms]
    - should use defaults when inserting [22ms]
    - should use defaults when inserting new values in upsert, but retain existing values [43ms]
    - should use defaults for missing input columns for newly inserted rows when Aligning the tables, but keep existing values for existing rows [45ms]
    - should fail if the source table is missing some columns and the column in the target has no default value [27ms]
    - should fail if the source table is missing some columns, if asked to [15ms]
    - should fail if some of key_columns do not exist in either table [31ms]
    - should fail if the target table does not exist [73ms]
    - should fail if the target table is in-memory [6ms]
    - should warn if type widening occurs [69ms]
    - should fail if types of columns are not compatible [18ms]
    - should not leave behind any garbage temporary tables if the upload fails [105ms]
[SQLite File] Appending a Database table to a Database table:  [28/28, 1332ms]
    - should be able to append new rows to a table [41ms]
    - should error if new rows clash with existing ones and mode is Insert, target table should remain unchanged [49ms]
    - should use the target table primary key for the key by default [45ms]
    - should be able to Update existing rows in a table [32ms]
    - should fail on unmatched rows in Update mode [58ms]
    - should upsert by default (update existing rows, insert new rows) [40ms]
    - should allow to align an existing table with a source (upsert + delete rows missing from source) [36ms]
    - should match columns by name, reordering to destination order if needed (Insert) [29ms]
    - should match columns by name, reordering to destination order if needed (Upsert) [38ms]
    - should match columns by name, reordering to destination order if needed (Update) [36ms]
    - should match columns by name, reordering to destination order if needed (Align) [37ms]
    - should allow to use a transformed table, with computed fields, as a source [53ms]
    - should allow specifying no key in Insert mode [45ms]
    - should fail if no key is specified in other modes [47ms]
    - should fail if the key is not unique in the input table [132ms]
    - should fail if the key causes update of multiple values (it's not unique in the target table) [179ms]
    - should fail if the source table contains columns not present in the target (data loss) [15ms]
    - should use defaults when inserting [21ms]
    - should use defaults when inserting new values in upsert, but retain existing values [42ms]
    - should use defaults for missing input columns for newly inserted rows when Aligning the tables, but keep existing values for existing rows [42ms]
    - should fail if the source table is missing some columns and the column in the target has no default value [26ms]
    - should fail if the source table is missing some columns, if asked to [21ms]
    - should fail if some of key_columns do not exist in either table [31ms]
    - should fail if the target table does not exist [64ms]
    - should fail if the target table is in-memory [14ms]
    - should warn if type widening occurs [49ms]
    - should fail if types of columns are not compatible [16ms]
    - should not leave behind any garbage temporary tables if the upload fails [83ms]
[SQLite File] Output Execution Context for Database operations:  [10/10, 495ms]
    - should forbid executing updates [0ms]
    - should return a temporary table for Connection.create_table [16ms]
    - will not show dry-run tables in the list by default [87ms]
    - [PENDING] will drop a dry run table once it is garbage collected
        Reason: Relying on GC seems not stable enough. Keeping this test so it can be checked manually. In the future we may improve it with better instrumentation of Managed_Resource.
    - will not overwrite an existing table with a dry-run table if the name is clashing (create_table) [58ms]
    - should return a temporary table with a sample of the data for select_into_database_table (from memory) [49ms]
    - should return the target table unchanged for update_database_table (from memory) [17ms]
    - will not overwrite an existing table with a dry-run table if the name is clashing (select_into_database_table) (from memory) [65ms]
    - should return a temporary table with a sample of the data for select_into_database_table (from Database table) [72ms]
    - should return the target table unchanged for update_database_table (from Database table) [37ms]
    - will not overwrite an existing table with a dry-run table if the name is clashing (select_into_database_table) (from Database table) [89ms]
[SQLite In-Memory] Basic Table Access:  [3/3, 41ms]
    - should allow to materialize tables and columns into local memory [2ms]
    - should allow to materialize columns directly into a Vector [2ms]
    - should handle bigger result sets [36ms]
[SQLite In-Memory] Table.query:  [8/8, 60ms]
    - should allow to access a Table by name [3ms]
    - should allow to access a Table by an SQL query [2ms]
    - should allow to access a Table by an SQL query [2ms]
    - should use labels for column names [2ms]
    - should allow a shorthand trying to deduce if the query is a table name or an SQL query [26ms]
    - should report an error depending on input SQL_Query type [6ms]
    - should not allow interpolations in raw user-built queries [1ms]
    - should make a best-effort attempt at returning a reasonable error for the short-hand [15ms]
[SQLite In-Memory] Masking Tables:  [1/1, 10ms]
    - should allow to select rows from a table or column based on an expression [10ms]
[SQLite In-Memory] Missing Values:  [2/2, 19ms]
    - fill_nothing should replace nulls [9ms]
    - should correctly be counted [9ms]
[SQLite In-Memory] Sorting:  [5/5, 29ms]
    - should allow sorting by a single column name [3ms]
    - should allow sorting by multiple column names [5ms]
    - should allow sorting with specific by-column rules [1ms]
    - should correctly reorder all kinds of columns and leave the original columns untouched [15ms]
    - should sort columns with specified ordering and missing placement [2ms]
[SQLite In-Memory] Aggregation:  [2/2, 25ms]
    - should allow counting group sizes and elements [11ms]
    - should allow simple arithmetic aggregations [14ms]
[SQLite In-Memory] Table.filter:  [1/1, 0ms]
    - report error when trying to filter by a custom predicate [0ms]
[SQLite In-Memory] Table.default_ordering:  [4/4, 15ms]
    - will return Nothing if no primary key is defined [2ms]
    - will return the key for a table with a primary key [7ms]
    - will return Nothing for composite tables (join, aggregate) [4ms]
    - will return the ordering determined by order_by [1ms]
[SQLite In-Memory] Schemas and Databases:  [3/3, 1ms]
    - should be able to get current database and list databases [0ms]
    - should be able to get current schema and list schemas [0ms]
    - does not allow changing schema or database [1ms]
[SQLite In-Memory] Tables and Table Types:  [4/4, 33ms]
    - should be able to list table types [0ms]
    - should be able to list tables [5ms]
    - should be able to filter tables by name [22ms]
    - should be able to filter tables by type [4ms]
[SQLite In-Memory] Error Handling:  [1/1, 7ms]
    - should wrap errors [7ms]
[SQLite In-Memory] Metadata:  [2/2, 5ms]
    - should return Table information [3ms]
    - should infer standard types correctly [2ms]
[SQLite In-Memory] Dialect-specific codegen:  [1/1, 3ms]
    - should generate queries for the Distinct operation [3ms]
[SQLite In-Memory] math functions:  [6/6, 720ms]
    - round, trunc, ceil, floor [148ms]
    - Can round correctly near the precision limit [30ms]
    - Can round correctly near the precision limit, using banker's rounding [228ms]
    - Can handle NaN/Infinity [155ms]
    - round returns the correct type [73ms]
    - round returns the correct type [82ms]
[SQLite In-Memory] Table.at:  [3/3, 14ms]
    - should allow selecting columns by name [2ms]
    - should allow selecting columns by index [10ms]
    - should fail with Type Error is not an Integer or Text [1ms]
[SQLite In-Memory] Table.get:  [3/3, 7ms]
    - should allow selecting columns by name [1ms]
    - should allow selecting columns by index [4ms]
    - should fail with Type Error is not an Integer or Text [1ms]
[SQLite In-Memory] Table.set:  [7/7, 94ms]
    - should allow adding a column [2ms]
    - should not allow illegal column names [2ms]
    - should allow replacing a column [3ms]
    - should allow adding a column [2ms]
    - should not affect existing columns that depended on the old column being replaced [25ms]
    - should gracefully handle expression failures [12ms]
    - should forward expression problems [43ms]
[SQLite In-Memory] Table.column_names:  [2/2, 24ms]
    - should return the names of all columns [0ms]
    - should allow weird column names in all backends [24ms]
[SQLite In-Memory] Table.column_count:  [1/1, 0ms]
    - should allow getting the column count [0ms]
[SQLite In-Memory] Table.rows:  [6/6, 20ms]
    - should allow to get a Vector of Table rows [3ms]
    - should let you get the first row [1ms]
    - should let you get the second row [1ms]
    - should let you get the last row [1ms]
    - should fetch rows up to the specified limit [1ms]
    - should correctly handle errors [10ms]
[SQLite In-Memory] Table.select_columns:  [14/14, 350ms]
    - should work as shown in the doc examples [26ms]
    - should allow to reorder columns if asked to [8ms]
    - should correctly handle regex matching [45ms]
    - should allow negative indices [8ms]
    - should allow mixed names and indexes [32ms]
    - should correctly handle regexes matching multiple names [35ms]
    - should correctly handle problems: out of bounds indices [42ms]
    - should correctly handle edge-cases: duplicate indices [18ms]
    - should correctly handle edge-cases: aliased indices [8ms]
    - should correctly handle edge-cases: duplicate names [29ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [15ms]
    - should correctly handle problems: unmatched names [31ms]
    - should correctly handle problems in mixed case [8ms]
    - should correctly handle problems: no columns in the output [39ms]
[SQLite In-Memory] Table.remove_columns:  [11/11, 253ms]
    - should work as shown in the doc examples [28ms]
    - should correctly handle regex matching [50ms]
    - should allow negative indices [7ms]
    - should correctly handle regexes matching multiple names [9ms]
    - should correctly handle problems: out of bounds indices [36ms]
    - should correctly handle edge-cases: duplicate indices [9ms]
    - should correctly handle edge-cases: aliased indices [8ms]
    - should correctly handle edge-cases: duplicate names [11ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [8ms]
    - should correctly handle problems: unmatched names [44ms]
    - should correctly handle problems: no columns in the output [38ms]
[SQLite In-Memory] Table.reorder_columns:  [9/9, 190ms]
    - should work as shown in the doc examples [49ms]
    - should correctly handle regex matching [36ms]
    - should allow negative indices [7ms]
    - should correctly handle regexes matching multiple names [7ms]
    - should correctly handle problems: out of bounds indices [33ms]
    - should correctly handle edge-cases: duplicate indices [7ms]
    - should correctly handle edge-cases: aliased indices [7ms]
    - should correctly handle edge-cases: duplicate names [8ms]
    - should correctly handle problems: unmatched names [31ms]
[SQLite In-Memory] Table.sort_columns:  [4/4, 61ms]
    - should work as shown in the doc examples [30ms]
    - should correctly handle case-insensitive sorting [8ms]
    - should correctly handle natural order sorting [11ms]
    - should correctly handle various combinations of options [10ms]
[SQLite In-Memory] Table.rename_columns:  [20/20, 355ms]
    - should work as shown in the doc examples [34ms]
    - should work by index [8ms]
    - should work by position [7ms]
    - should work by Vector [7ms]
    - should work by Vector of Pairs [8ms]
    - should work by name [8ms]
    - should work by mixed Map [7ms]
    - should work by name case-insensitively [7ms]
    - should work by name using regex [7ms]
    - should work by name using regex substitution [9ms]
    - should correctly handle problems: unmatched names [28ms]
    - should correctly handle problems: out of bounds indices [30ms]
    - should correctly handle edge-cases: aliased indices [13ms]
    - should correctly handle edge-cases: aliased selectors [19ms]
    - should correctly handle problems: invalid names '' [22ms]
    - should correctly handle problems: invalid names Nothing [21ms]
    - should correctly handle problems: invalid names null character [22ms]
    - should correctly handle problems: duplicate names [21ms]
    - should correctly handle problems: new name is clashing with existing name of existing column [45ms]
    - should correctly handle problems: too many input names [24ms]
[SQLite In-Memory] Boolean Column Operations:  [4/4, 93ms]
    - iif [28ms]
    - iif on Columns [30ms]
    - [PENDING] iif should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
    - should allow to compute &&, || and not [19ms]
    - [PENDING] should return null if one of arguments is missing
        Reason: TODO null handling
    - should check types [14ms]
[SQLite In-Memory] Column Operations - Equality & Null Handling:  [4/4, 53ms]
    - [PENDING] should provide basic == and != comparisons
        Reason: TODO figure out proper null handling
    - should allow to check which values are null [18ms]
    - [PENDING] Column equality should handle nulls correctly
        Reason: TODO
    - equals_ignore_case for ASCII strings [10ms]
    - equals_ignore_case should check types [10ms]
    - [PENDING] Text Column equality (including case-insensitive) should handle nulls correctly
        Reason: TODO
    - should report a warning if checking equality on floating point columns [14ms]
[SQLite In-Memory] Column.fill_nothing/empty:  [4/4, 42ms]
    - should allow to fill_nothing from a value [10ms]
    - should allow to fill_nothing from another column [9ms]
    - should allow to fill_empty from a value [11ms]
    - should allow to fill_empty from another column [11ms]
[SQLite In-Memory] Table.fill_nothing/empty:  [6/6, 89ms]
    - should allow to fill_nothing from a value [13ms]
    - should allow to fill_nothing from other columns [13ms]
    - should allow to fill_empty from a value [16ms]
    - should allow to fill_empty from other columns [15ms]
    - fill_nothing should leave other columns alone [14ms]
    - fill_nothing should work with integer column selectors [16ms]
[SQLite In-Memory] Table.replace:  [0/0, 0ms]
[SQLite In-Memory] Column Comparisons:  [4/4, 156ms]
    - should allow to compare numbers [63ms]
    - should allow to compare texts [35ms]
    - should allow to compare booleans [29ms]
    - should report error if incomparable types are compared [28ms]
    - [PENDING] Between should return null if any of the values are null
        Reason: TODO
[SQLite In-Memory] Arithmetic Column Operations:  [10/10, 140ms]
    - should allow basic operations [6ms]
    - should allow combining a column with a scalar [6ms]
    - should work with mixed types [30ms]
    - should correctly infer the types [13ms]
    - should check types [22ms]
    - should report that is_nan is not supported [8ms]
    - should support is_infinite [12ms]
    - should support is_blank [9ms]
    - division should be aligned with the Enso arithmetic [22ms]
    - [PENDING] should allow division by 0 and report warnings
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - [PENDING] should limit the number of rows listed in the message
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - should return null if one of arguments is missing [8ms]
[SQLite In-Memory] Rounding-like operations:  [15/15, 280ms]
    - should name a rounding column correctly [8ms]
    - should allow round on a (Float 64 bits) column [8ms]
    - should allow round on a float column (to >0 decimal places) [9ms]
    - should allow round on a float column (to <0 decimal places) [49ms]
    - should allow truncate on a (Float 64 bits) column [14ms]
    - should allow ceil on a (Float 64 bits) column [16ms]
    - should allow floor on a (Float 64 bits) column [13ms]
    - should allow round on an int column [40ms]
    - should allow truncate on an int column [8ms]
    - should allow ceil on an int column [7ms]
    - should allow floor on an int column [7ms]
    - should fail on decimal_places out of range [6ms]
    - should allow Nothing/NULL [7ms]
    - should fail on bad column type [6ms]
    - should work with mixed type columns [74ms]
[SQLite In-Memory] Rounding numeric tests:  [17/17, 6465ms]
    - Can round positive decimals correctly [63ms]
    - Can round negative decimals correctly [60ms]
    - Explicit and implicit 0 decimal places work the same [45ms]
    - Can round zero and small decimals correctly [34ms]
    - Can round decimals to a specified number of decimal places [86ms]
    - Can round positive decimals to a specified negative number of decimal places [497ms]
    - Can round negative decimals to a specified negative number of decimal places [475ms]
    - Banker's rounding handles half-way values correctly [879ms]
    - Banker's rounding handles non-half-way values just like normal rounding [348ms]
    - Can round correctly near the precision limit [160ms]
    - Can round correctly near the precision limit, using banker's rounding [1066ms]
    - Decimal places out of range [13ms]
    - Floating point imperfect representation counter-examples [61ms]
    - Can round small integers to a specified number of decimal places correctly (value is unchanged) [53ms]
    - Can round integers to a specified number of negative places correctly [852ms]
    - Can round negative integers to a specified number of negative places correctly [787ms]
    - Can round negative integers to a specified number of negative places with banker's rounding correctly [978ms]
[SQLite In-Memory] Text Column Operations:  [5/5, 157ms]
    - should handle operations like starts_with, ends_with, contains [62ms]
    - should handle operations like is_empty, is_blank, fill_empty [22ms]
    - should check types [23ms]
    - should return right types [34ms]
    - should support text concatenation with the + operator [15ms]
[SQLite In-Memory] Min/Max Operations:  [2/2, 59ms]
    - should allow one or more args and return the correct type [44ms]
    - should check types [15ms]
[SQLite In-Memory] replace: literal text pattern and replacement:  [4/4, 31ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=false [13ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=true [7ms]
    - case_sensitivity=insensitive use_regex=false only_first=false [3ms]
    - case_sensitivity=insensitive use_regex=false only_first=true [7ms]
[SQLite In-Memory] replace: literal regex pattern and replacement:  [5/5, 17ms]
    - case_sensitivity=sensitive/default use_regex=True only_first=false [2ms]
    - case_sensitivity=sensitive/default use_regex=True only_first=true [1ms]
    - case_sensitivity=insensitive use_regex=True only_first=false [2ms]
    - case_sensitivity=insensitive use_regex=True only_first=true [2ms]
    - can properly escape complex regexes [8ms]
[SQLite In-Memory] replace: pattern and replacement columns:  [4/4, 9ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=false [4ms]
    - case_sensitivity=sensitive/default use_regex=false only_first=true [1ms]
    - case_sensitivity=insensitive use_regex=false only_first=false [1ms]
    - case_sensitivity=insensitive use_regex=false only_first=true [1ms]
[SQLite In-Memory] Column Operations - Text Replace:  [2/2, 12ms]
    - should not allow Case_Sensitivity.Insensitive with a non-default locale [1ms]
    - column name [11ms]
[SQLite In-Memory] Column Operations - Text Replace (in-memory only):  [0/0, 0ms]
[SQLite In-Memory] Column Operations - Text Trim:  [3/3, 47ms]
    - should trim whitespace by default [19ms]
    - should trim custom characters [22ms]
    - should only allow trim on Text columns [4ms]
[SQLite In-Memory] Other Column Operations:  [1/1, 16ms]
    - is_in [16ms]
[SQLite In-Memory] Colum Operations - Names:  [8/8, 58ms]
    - arithmetic [10ms]
    - comparison [8ms]
    - logical [4ms]
    - text [11ms]
    - nulls [8ms]
    - misc [6ms]
    - composed operations [6ms]
    - sort [0ms]
[SQLite In-Memory] Column.rename:  [1/1, 10ms]
    - should not allow illegal names [10ms]
[SQLite In-Memory] Column.const:  [3/3, 39ms]
    - Should allow the creation of constant columns [18ms]
    - Should create the correct column name [9ms]
    - Should not allow the creation of a constant column of columns [10ms]
[PENDING] [SQLite In-Memory] Date-Time support
    Reason: Date/Time operations are not supported by this backend.
[PENDING] [SQLite In-Memory] Date-Time operations
    Reason: Date/Time operations are not supported by this backend.
[SQLite In-Memory] partial Date-Time support:  [2/2, 28ms]
    - will fail when uploading a Table containing Dates [7ms]
    - should report a type error when date operations are invoked on a non-date column [21ms]
[SQLite In-Memory] Table/Column.cast - to text:  [1/1, 16ms]
    - should allow to cast columns of various basic types to text [16ms]
[SQLite In-Memory] Table/Column.cast - numeric:  [3/3, 36ms]
    - should allow to cast a boolean column to integer [10ms]
    - should allow to cast an integer column to floating point [8ms]
    - [PENDING] should allow to cast an integer column to a smaller bit-width and larger bit-width
        Reason: TODO: #5159
    - should allow to cast a floating point column to integer [17ms]
[SQLite In-Memory] Table/Column.cast - checking invariants:  [7/7, 81ms]
    - should report an error for unsupported conversions [7ms]
    - should report an error pointing to the Table.parse method where applicable [6ms]
    - should report missing columns [18ms]
    - should work if the first row is NULL [10ms]
    - should not lose the type after further operations were performed on the result [12ms]
    - should not lose the type after further operations were performed on the result, even if the first row is NULL [11ms]
    - Table.cast should cast the columns "in-place" and not reorder them [13ms]
[SQLite In-Memory] Simple variant of Table/Column.parse in all backends:  [5/5, 61ms]
    - should be able to parse simple integers [12ms]
    - should be able to parse simple floats [12ms]
    - should report that date parsing is unsupported [8ms]
    - should be able to parse booleans with default format [13ms]
    - should report missing columns [15ms]
[SQLite In-Memory] Table.aggregate should summarize whole table:  [7/7, 63ms]
    - should be able to count [4ms]
    - should be able to count missing values [9ms]
    - should be able to count distinct values [11ms]
    - [PENDING] should be able to count distinct values over multiple columns
        Reason: Not supported.
    - should be able to compute sum and average of values [8ms]
    - should be able to compute standard deviation of values [12ms]
    - [PENDING] should be able to create median, mode and percentile values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with mixed ordering
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [8ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [7ms]
[SQLite In-Memory] Table.aggregate should summarize empty table:  [7/7, 45ms]
    - should be able to count [5ms]
    - should be able to count missing values [9ms]
    - should be able to count distinct values [6ms]
    - should be able to compute sum and average of values [7ms]
    - should be able to compute standard deviation of values [6ms]
    - [PENDING] should be able to create median, mode and percentile values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [6ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [5ms]
[SQLite In-Memory] Table.aggregate should not summarize empty table when grouped:  [7/7, 48ms]
    - should be able to count [5ms]
    - should be able to count missing values [10ms]
    - should be able to count distinct values [5ms]
    - should be able to compute sum and average of values [7ms]
    - should be able to compute standard deviation of values [7ms]
    - [PENDING] should be able to create median values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [6ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [5ms]
[SQLite In-Memory] Table.aggregate should be able to group on single field:  [7/7, 87ms]
    - should be able to count [9ms]
    - should be able to count missing values [14ms]
    - should be able to count distinct values [13ms]
    - [PENDING] should be able to count distinct values over multiple columns
        Reason: Not supported.
    - should be able to compute sum and average of values [12ms]
    - should be able to compute standard deviation of values [15ms]
    - [PENDING] should be able to create median values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with mixed ordering
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [12ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [9ms]
[SQLite In-Memory] Table.aggregate should be able to group on multiple fields not in left columns:  [7/7, 101ms]
    - should be able to count [11ms]
    - should be able to count missing values [16ms]
    - should be able to count distinct values [15ms]
    - [PENDING] should be able to count distinct values over multiple columns
        Reason: Not supported.
    - should be able to compute sum and average of values [16ms]
    - should be able to compute standard deviation of values [17ms]
    - [PENDING] should be able to create median values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with mixed ordering
        Reason: Not supported.
    - [PENDING] should be able to get first and last values with default row order
        Reason: Not supported.
    - should be able to get minimum and maximum values [13ms]
    - [PENDING] should be able to get shortest and longest text values
        Reason: Not supported.
    - should be able to get concatenated text values [11ms]
[PENDING] [SQLite In-Memory] Table.aggregate Shortest
    Reason: Not supported.
[SQLite In-Memory] Table.aggregate Concatenate:  [6/6, 65ms]
    - should insert the separator, add prefix and suffix [11ms]
    - should correctly escape separator and quote characters but only if necessary [10ms]
    - should correctly handle missing values and empty values with quote character [13ms]
    - will not be able to distinguish missing values from empty values without quote character [9ms]
    - should work with empty separator [9ms]
    - should work with empty separator but non-empty quote [11ms]
[SQLite In-Memory] Table.aggregate Count_Distinct:  [1/1, 70ms]
    - should correctly count missing values [70ms]
    - [PENDING] should correctly count all-null keys in multi-column mode
        Reason: Not supported.
[SQLite In-Memory] Table.aggregate Standard_Deviation:  [1/1, 14ms]
    - should correctly handle single elements [14ms]
[SQLite In-Memory] Table.aggregate should correctly select result types:  [2/2, 36ms]
    - widening to decimals on Average [16ms]
    - [PENDING] widening to decimals on Median
        Reason: Not supported.
    - [PENDING] widening to decimals on Percentile
        Reason: Not supported.
    - widening to decimals on Standard_Deviation [19ms]
[SQLite In-Memory] Table.aggregate should correctly handle infinities:  [2/2, 49ms]
    - on Average [32ms]
    - [PENDING] on Median
        Reason: Not supported.
    - [PENDING] on Percentile
        Reason: Not supported.
    - on Standard_Deviation [17ms]
[PENDING] [SQLite In-Memory] Table.aggregate should correctly handle NaN
    Reason: Not supported.
[PENDING] [SQLite In-Memory] Table.aggregate Mode
    Reason: Not supported.
[SQLite In-Memory] Table.aggregate First and Last:  [0/0, 0ms]
    - [PENDING] should not return the same value for groups with different values but equal ordering keys
        Reason: Not supported.
[SQLite In-Memory] Table.aggregate:  [1/1, 18ms]
    - should work even if no aggregations apart from groupings are specified [18ms]
[SQLite In-Memory] Table.aggregate+Expressions:  [2/2, 44ms]
    - should allow expressions in aggregates [17ms]
    - should warn when encountering invalid expressions, but try to perform the aggregations that are still valid [27ms]
[SQLite In-Memory] Table.aggregate should raise warnings when there are issues:  [7/7, 273ms]
    - should fail if there are no output columns, and promote any warnings to errors [46ms]
    - should raise a warning when can't find a column by name, but a hard error if the missing column is in a Group_By [103ms]
    - should raise a warning when a duplicate column name [23ms]
    - should raise a warning when a duplicate column name and rename default names first [23ms]
    - should raise a warning when duplicate column names [24ms]
    - should allow partial matches on Count_Distinct [26ms]
    - should ignore Count_Distinct if no columns matched [24ms]
[SQLite In-Memory] Table.aggregate should report warnings and errors based on types:  [4/4, 70ms]
    - should warn if grouping on a floating point [13ms]
    - should error if unsupported operations are selected [7ms]
    - should check types [37ms]
    - should return predictable types [13ms]
[PENDING] [SQLite In-Memory] Table.aggregate should raise warnings when there are issues computing aggregation
    Reason: Not supported.
[PENDING] [SQLite In-Memory] Table.aggregate should merge warnings when issues computing aggregation
    Reason: Not supported.
[SQLite In-Memory] Table.aggregate should report unsupported operations but not block other aggregations in warning mode:  [5/5, 69ms]
    - with First and Last in row order [13ms]
    - with First and Last with ordering [15ms]
    - with Median, Mode and Percentile [13ms]
    - with Shortest and Longest [14ms]
    - with Count_Distinct on multiple fields [13ms]
[SQLite In-Memory] Table.filter:  [19/19, 481ms]
    - by integer comparisons [45ms]
    - [PENDING] Not_Equal test cases
        Reason: Specification needs clarifying, see: https://github.com/enso-org/enso/issues/5241#issuecomment-1480167927
    - by text comparisons [37ms]
    - by text search (contains, starts_with, ends_with, not_contains) [72ms]
    - by text search (like, not_like) [19ms]
    - text operations should also match newlines [25ms]
    - by empty text [10ms]
    - should check types for text operations [28ms]
    - by nulls [14ms]
    - by an Is_In check [99ms]
    - by a boolean mask [10ms]
    - should correctly mask all kinds of columns [14ms]
    - should check types of boolean operations [8ms]
    - by a custom expression built from table's columns [13ms]
    - should handle selection errors: unknown column name [7ms]
    - should handle selection errors: out of bounds index [7ms]
    - should handle illegal arguments [6ms]
    - should nicely handle Filter_Condition with unapplied arguments [9ms]
    - should report issues: floating point equality [20ms]
    - already existing warnings should not be escalated to errors in error handling mode [28ms]
[SQLite In-Memory] Table.filter_by_expression:  [4/4, 72ms]
    - by a boolean column [12ms]
    - by an integer comparison [12ms]
    - fail gracefully [20ms]
    - should report issues: floating point equality [27ms]
    - [PENDING] should report issues: arithmetic error
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
[SQLite In-Memory] Column.map:  [1/1, 7ms]
    - should report unsupported error [7ms]
[SQLite In-Memory] Column.zip:  [1/1, 7ms]
    - should report unsupported error [7ms]
[SQLite In-Memory] Dropping Missing Values:  [7/7, 170ms]
    - filter_blank_rows should drop rows that contain at least one missing cell [10ms]
    - filter_blank_rows should drop rows that are all blank [8ms]
    - filter_blank_rows should deal with edge cases [22ms]
    - should allow to select blank columns [53ms]
    - should allow to remove blank columns [53ms]
    - this backend treats NaN as Nothing [2ms]
    - select_blank_columns and remove_blank_columns should deal with edge cases [19ms]
[SQLite In-Memory] Filling Missing Values:  [3/3, 51ms]
    - should coerce long and double types to double [26ms]
    - should keep String, Boolean, Long and Double type [15ms]
    - should not allow mixing types by default [9ms]
    - [PENDING] should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
[SQLite In-Memory] Table.order_by:  [19/19, 120ms]
    - should work as shown in the doc examples [20ms]
    - should work with single column name [2ms]
    - should work with single Sort_Column [8ms]
    - should allow the selector to mix regex and case insensitive matching [3ms]
    - should correctly handle regexes matching multiple names [6ms]
    - should correctly handle problems: out of bounds indices [7ms]
    - should correctly handle edge-cases: duplicate selectors [7ms]
    - should correctly handle edge-cases: duplicate matches due to case insensitivity [2ms]
    - should correctly handle edge-cases: duplicate matches due to regexes [4ms]
    - should correctly handle edge-cases: mixed selector types [10ms]
    - should correctly handle problems: unmatched names [8ms]
    - should report a problem if no columns are selected for ordering [0ms]
    - should stack consecutive ordering operations [8ms]
    - should give priority to the first selected column and use the next ones for breaking ties [15ms]
    - should deal with real numbers [1ms]
    - should deal with nulls [4ms]
    - should behave as expected with Unicode normalization, depending on the defaults settings [1ms]
    - [PENDING] should support natural ordering
        Reason: Natural ordering is not supported.
    - should support case insensitive ordering [4ms]
    - [PENDING] should support natural and case insensitive ordering at the same time
        Reason: Natural ordering or case sensitive ordering is not supported.
    - text ordering settings should not affect numeric columns [1ms]
[PENDING] [SQLite In-Memory] Table.take/drop
    Reason: TODO: take/drop are not yet supported by this backend.
[PENDING] [SQLite In-Memory] Column.take/drop
    Reason: TODO: take/drop are not yet supported by this backend.
[SQLite In-Memory] Expression Integer literals:  [1/1, 10ms]
    - should be able to add an integer column [10ms]
[SQLite In-Memory] Expression Decimal literals:  [1/1, 10ms]
    - should be able to add an decimal column [10ms]
[SQLite In-Memory] Expression Boolean literals:  [1/1, 21ms]
    - should be able to add a boolean column [21ms]
[SQLite In-Memory] Expression Text literals:  [1/1, 16ms]
    - should be able to add a text column [16ms]
[SQLite In-Memory] Expression Text literals:  [2/2, 11ms]
    - should be able to get a Column [3ms]
    - should sanitize names [7ms]
[SQLite In-Memory] Expression Nothing literals:  [3/3, 41ms]
    - should be able to add an nothing column [11ms]
    - should allow to create a NULL column [11ms]
    - a null column may fail typechecks that expect a concrete type [18ms]
[SQLite In-Memory] Expression Date and Time literals:  [0/0, 0ms]
    - [PENDING] should be able to add a date or time column
        Reason: Date/Time operations are not supported by this backend.
    - [PENDING] should be able to add a date-time column
        Reason: Date/Time operations are not supported by this backend.
    - [PENDING] should be able to add a time column with sub-millisecond accuracy
        Reason: Date/Time operations are not supported by this backend.
    - [PENDING] should correctly handle timezones
        Reason: Date/Time operations are not supported by this backend.
[SQLite In-Memory] Expression Arithmetic:  [3/3, 189ms]
    - should be able to do basic arithmetic [96ms]
    - should be able to do basic arithmetic with order [38ms]
    - should be able to do basic arithmetic with whitespace [53ms]
[SQLite In-Memory] Expression Column Arithmetic:  [2/2, 139ms]
    - should be able to perform arithmetic on columns [81ms]
    - should be able to perform arithmetic on columns with order [58ms]
[SQLite In-Memory] Expression Comparison Operators:  [6/6, 181ms]
    - should be able to compare equality [42ms]
    - should be able to compare ordering [22ms]
    - should be able to use between [42ms]
    - should be able to use in [34ms]
    - should be able to check null [24ms]
    - should be able to check empty [14ms]
[SQLite In-Memory] Expression Text Operators:  [2/2, 41ms]
    - should be able to concatenate text [11ms]
    - should be able to use like [30ms]
[SQLite In-Memory] Expression Boolean Operators:  [4/4, 58ms]
    - should be able to AND booleans [19ms]
    - should be able to OR booleans [18ms]
    - should be able to NOT booleans [8ms]
    - should be able to use IF [11ms]
[SQLite In-Memory] Function invocation:  [2/2, 25ms]
    - should be able to call a function with arguments [16ms]
    - should be able to call a variable args function [9ms]
[SQLite In-Memory] Expression Errors should be handled:  [4/4, 16ms]
    - should fail with Syntax_Error if badly formed [6ms]
    - should fail with Unsupported_Operation if not sufficient arguments [2ms]
    - should fail with Argument_Mismatch if not sufficient arguments [1ms]
    - should fail with Argument_Mismatch if too many arguments [6ms]
[SQLite In-Memory] Expression Warnings should be reported:  [2/2, 71ms]
    - should report floating point equality [43ms]
    - [PENDING] should report arithmetic errors
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - [PENDING] already existing warnings should not be escalated to errors in error handling mode (1)
        Reason: Arithmetic error handling is currently not implemented for the Database backend.
    - already existing warnings should not be escalated to errors in error handling mode (2) [27ms]
[SQLite In-Memory] Table.join:  [26/26, 582ms]
    - should by default do a Left Outer join on equality of first column in the left table, correlated with column of the same name in the right one [13ms]
    - should allow Inner join [5ms]
    - should allow Full join [5ms]
    - should allow Right Outer join [5ms]
    - should allow to perform anti-joins [9ms]
    - should allow to join on equality of multiple columns and drop redundant columns if Inner join [17ms]
    - should support same-name column join shorthand [6ms]
    - should allow to join on text equality ignoring case [22ms]
    - should correctly handle Enso Decimal-Integer equality [19ms]
    - should allow range-based joins (using Between) for numbers [16ms]
    - should allow range-based joins (using Between) for text [17ms]
    - should allow to mix join conditions of various kinds [21ms]
    - should work fine if the same condition is specified multiple times [47ms]
    - should correctly handle joining a table with itself [30ms]
    - should gracefully handle unmatched columns in Join_Conditions [20ms]
    - should report Invalid_Value_Type if non-text columns are provided to Equals_Ignore_Case [15ms]
    - should report Invalid_Value_Type if incompatible types are correlated [12ms]
    - should report Invalid_Value_Type if incompatible columns types are correlated in Between [18ms]
    - should warn when joining on equality of Decimal columns [58ms]
    - [PENDING] should correctly handle nulls in equality conditions
        Reason: TODO: handling NULLs in equality conditions.
    - [PENDING] should correctly handle nulls in case-insensitive equality conditions
        Reason: TODO: handling NULLs in equality conditions.
    - should correctly handle nulls in Between conditions [15ms]
    - should rename columns of the right table to avoid duplicates [51ms]
    - should warn about renamed columns [29ms]
    - should pass dataflow errors through [1ms]
    - [PENDING] should correctly handle all null rows
        Reason: TODO: handling NULLs in equality conditions.
    - should work correctly when composing multiple join operations [24ms]
    - should work correctly when the join is performed on a transformed table [39ms]
    - should allow full joins with more complex join conditions [54ms]
[SQLite In-Memory] Table.cross_join:  [8/8, 188ms]
    - should allow to create a cross product of two tables in the right order [19ms]
    - should work correctly with empty tables [24ms]
    - should respect the right row limit [45ms]
    - should ensure 1-1 mapping even with duplicate rows [18ms]
    - should allow self-joins [11ms]
    - should rename columns of the right table to avoid duplicates [38ms]
    - should respect the column ordering [18ms]
    - Cross join is not possible via call to .join [11ms]
[PENDING] [SQLite In-Memory] Table.zip
    Reason: Table.zip is still WIP for the DB backend.
[SQLite In-Memory] Table.union:  [18/18, 517ms]
    - should merge columns from multiple tables [36ms]
    - should fill unmatched columns (by name matching) with nulls and report a warning by default [74ms]
    - should drop unmatched columns if asked to [25ms]
    - should keep unmatched columns without errors if asked to [30ms]
    - should fail if asked to drop unmatched columns but the set of common columns is empty [17ms]
    - should ignore column names when matching by position [17ms]
    - should fill extra columns (positional matching) with nulls and report a warning by default [42ms]
    - should keep the least number of columns with positional matching if asked to drop unmatched ones [23ms]
    - should keep the greatest number of columns with positional matching if asked to keep unmatched ones, filling missing values with null and reporting no problems [29ms]
    - should use column names from the first table that has enough columns in positional matching mode [47ms]
    - should allow to merge a table with itself [12ms]
    - should not de-duplicate rows [18ms]
    - should gracefully handle the case where no tables to union were provided [31ms]
    - [PENDING] should correctly unify text columns of various lengths
        Reason: Fixed-length Char columns are not supported by this backend.
    - should find a common type that will fit the merged columns [14ms]
    - if no common type can be found, should report error and drop the problematic column [26ms]
    - if type widening is not allowed, should use the type from first table that contained the given column [18ms]
    - if type widening is not allowed and types do not match, should report error and drop the problematic column [29ms]
    - if type mismatches cause all columns to be dropped, fail with No_Output_Columns [20ms]
[SQLite In-Memory] Table.distinct:  [7/7, 101ms]
    - should group by all columns by default [10ms]
    - should allow to select distinct rows based on a subset of columns, returning any row from each group [13ms]
    - should allow to select distinct rows based on a subset of columns, returning any first from each group if the table was ordered [10ms]
    - should allow to control case-sensitivity of keys [10ms]
    - should report a warning if the key contains floating point values [12ms]
    - should handle nulls correctly [8ms]
    - should report missing input columns [34ms]
[PENDING] [SQLite In-Memory] Table.cross_tab
    Reason: Table.transpose is not implemented yet in Database.
[PENDING] [SQLite In-Memory] Table.transpose
    Reason: Table.transpose is not implemented yet in Database.
[SQLite In-Memory] Table.add_row_number (common):  [6/6, 72ms]
    - should rename existing column upon a name clash [16ms]
    - should allow to order the row numbers by some columns [10ms]
    - should allow mixing grouping with ordering and custom start and step [11ms]
    - should report floating point equality warning when grouping on float columns [14ms]
    - should fail if columns provided in ordering/grouping do not exist [8ms]
    - will respect the row order of order_by [10ms]
[SQLite In-Memory] Table.add_row_number (Database specific):  [1/1, 16ms]
    - will use the primary key by default [16ms]
[SQLite In-Memory]  Interactions Between various operations:  [8/8, 1274ms]
    - using weird column names with operations and filtering [1169ms]
    - aggregates and joins [20ms]
    - aggregates and distinct [12ms]
    - aggregates and filtering [12ms]
    - aggregates and ordering [11ms]
    - distinct and ordering [17ms]
    - distinct and ordering if first row is returned after ordering [11ms]
    - distinct and filtering [18ms]
[SQLite In-Memory] Transaction Support:  [4/4, 52ms]
    - should commit the changes after the transaction returns a regular value [7ms]
    - should rollback the changes after the inner action panics [12ms]
    - should rollback the changes if the inner action returns a dataflow error [23ms]
    - should commit the changes even if the inner action return value has warnings attached [9ms]
[SQLite In-Memory] Creating an empty table:  [12/12, 245ms]
    - should allow to specify the column names and types [12ms]
    - should allow to inherit the structure of an existing in-memory table [14ms]
    - should allow to inherit the structure of an existing Database table [23ms]
    - should fail if the table already exists [18ms]
    - should not fail if the table exists, if `allow_existing=True`, even if the structure does not match [18ms]
    - should fail if an unsupported type is specified [19ms]
    - should fail if empty structure is provided [20ms]
    - should include the created table in the tables directory [26ms]
    - should include the temporary table in the tables directory [24ms]
    - should be able to specify a primary key [10ms]
    - should ensure that primary key columns specified are valid [37ms]
    - should check types of primary key [19ms]
[SQLite In-Memory] Uploading an in-memory Table:  [8/8, 325ms]
    - should create a database table with the same contents as the source [14ms]
    - should include the created table in the tables directory [24ms]
    - should include the temporary table in the tables directory [17ms]
    - should not create any table if upload fails [28ms]
    - should set a primary key for the table [33ms]
    - should ensure that primary key columns are valid [17ms]
    - should fail if the primary key is not unique [167ms]
    - should fail if the target table already exists [22ms]
[SQLite In-Memory] Persisting a Database Table (query):  [8/8, 325ms]
    - should be able to create a persistent copy of a DB table [24ms]
    - should be able to persist a complex query with generated columns, joins etc. [36ms]
    - should be able to create a temporary copy of a query [27ms]
    - should be able to specify a primary key [15ms]
    - should ensure that primary key columns are valid [21ms]
    - should fail when the primary key is not unique [138ms]
    - will not allow to upload tables across connections [28ms]
    - should fail if the target table already exists [34ms]
[SQLite In-Memory] Appending an in-memory table to a Database table:  [28/28, 986ms]
    - should be able to append new rows to a table [36ms]
    - should error if new rows clash with existing ones and mode is Insert, target table should remain unchanged [43ms]
    - should use the target table primary key for the key by default [44ms]
    - should be able to Update existing rows in a table [25ms]
    - should fail on unmatched rows in Update mode [34ms]
    - should upsert by default (update existing rows, insert new rows) [26ms]
    - should allow to align an existing table with a source (upsert + delete rows missing from source) [26ms]
    - should match columns by name, reordering to destination order if needed (Insert) [19ms]
    - should match columns by name, reordering to destination order if needed (Upsert) [26ms]
    - should match columns by name, reordering to destination order if needed (Update) [32ms]
    - should match columns by name, reordering to destination order if needed (Align) [31ms]
    - should allow to use a transformed table, with computed fields, as a source [34ms]
    - should allow specifying no key in Insert mode [43ms]
    - should fail if no key is specified in other modes [36ms]
    - should fail if the key is not unique in the input table [75ms]
    - should fail if the key causes update of multiple values (it's not unique in the target table) [135ms]
    - should fail if the source table contains columns not present in the target (data loss) [10ms]
    - should use defaults when inserting [16ms]
    - should use defaults when inserting new values in upsert, but retain existing values [71ms]
    - should use defaults for missing input columns for newly inserted rows when Aligning the tables, but keep existing values for existing rows [32ms]
    - should fail if the source table is missing some columns and the column in the target has no default value [16ms]
    - should fail if the source table is missing some columns, if asked to [14ms]
    - should fail if some of key_columns do not exist in either table [23ms]
    - should fail if the target table does not exist [35ms]
    - should fail if the target table is in-memory [2ms]
    - should warn if type widening occurs [28ms]
    - should fail if types of columns are not compatible [34ms]
    - should not leave behind any garbage temporary tables if the upload fails [27ms]
[SQLite In-Memory] Appending a Database table to a Database table:  [28/28, 1078ms]
    - should be able to append new rows to a table [37ms]
    - should error if new rows clash with existing ones and mode is Insert, target table should remain unchanged [39ms]
    - should use the target table primary key for the key by default [61ms]
    - should be able to Update existing rows in a table [41ms]
    - should fail on unmatched rows in Update mode [40ms]
    - should upsert by default (update existing rows, insert new rows) [32ms]
    - should allow to align an existing table with a source (upsert + delete rows missing from source) [33ms]
    - should match columns by name, reordering to destination order if needed (Insert) [25ms]
    - should match columns by name, reordering to destination order if needed (Upsert) [33ms]
    - should match columns by name, reordering to destination order if needed (Update) [33ms]
    - should match columns by name, reordering to destination order if needed (Align) [32ms]
    - should allow to use a transformed table, with computed fields, as a source [45ms]
    - should allow specifying no key in Insert mode [43ms]
    - should fail if no key is specified in other modes [36ms]
    - should fail if the key is not unique in the input table [85ms]
    - should fail if the key causes update of multiple values (it's not unique in the target table) [151ms]
    - should fail if the source table contains columns not present in the target (data loss) [13ms]
    - should use defaults when inserting [18ms]
    - should use defaults when inserting new values in upsert, but retain existing values [38ms]
    - should use defaults for missing input columns for newly inserted rows when Aligning the tables, but keep existing values for existing rows [39ms]
    - should fail if the source table is missing some columns and the column in the target has no default value [23ms]
    - should fail if the source table is missing some columns, if asked to [16ms]
    - should fail if some of key_columns do not exist in either table [29ms]
    - should fail if the target table does not exist [37ms]
    - should fail if the target table is in-memory [9ms]
    - should warn if type widening occurs [29ms]
    - should fail if types of columns are not compatible [13ms]
    - should not leave behind any garbage temporary tables if the upload fails [34ms]
[SQLite In-Memory] Output Execution Context for Database operations:  [7/7, 167ms]
    - should forbid executing updates [0ms]
    - should return a temporary table for Connection.create_table [10ms]
    - will not show dry-run tables in the list by default [28ms]
    - [PENDING] will drop a dry run table once it is garbage collected
        Reason: Relying on GC seems not stable enough. Keeping this test so it can be checked manually. In the future we may improve it with better instrumentation of Managed_Resource.
    - should return a temporary table with a sample of the data for select_into_database_table (from memory) [33ms]
    - should return the target table unchanged for update_database_table (from memory) [16ms]
    - should return a temporary table with a sample of the data for select_into_database_table (from Database table) [53ms]
    - should return the target table unchanged for update_database_table (from Database table) [25ms]
[SQLite] Type Mapping:  [8/8, 105ms]
    - should map its basic affinities [26ms]
    - should map complex types to their closest approximation [27ms]
    - should allow for special handling of booleans to support the Boolean type that does not have a builtin affinity [6ms]
    - should correctly handle types through operations [25ms]
    - should approximate types to the closest supported one [7ms]
    - will coerce date/time columns to Text in existing tables [2ms]
    - does not support creating tables with date/time values [5ms]
    - should be able to infer types for all supported operations [3ms]
SQLite_Format should allow connecting to SQLite files:  [5/5, 37ms]
    - should recognise a SQLite database file [5ms]
    - should recognise a sqlite file by extension for writing [4ms]
    - should not recognise nonexistent or empty files for reading [7ms]
    - should connect to a db file [10ms]
    - should not duplicate warnings [9ms]
[PENDING] [PostgreSQL] SSL connectivity tests
    Reason: PostgreSQL SSL test not configured.
[PENDING] [PostgreSQL] Database tests
    Reason: PostgreSQL test database is not configured. See README.md for instructions.
[PostgreSQL] .pgpass:  [3/3, 216ms]
    - should correctly parse the file, including escapes, blank lines and comments [33ms]
    - should only accept the .pgpass file if it has correct permissions [48ms]
    - should correctly match wildcards and use the first matching entry [134ms]
[PostgreSQL] Connection setup:  [3/3, 209ms]
    - should use environment variables as host, port and database defaults and fall back to hardcoded defaults [15ms]
    - should use the given credentials [4ms]
    - should fallback to environment variables and fill-out missing information based on the PGPASS file (if available) [190ms]
[PENDING] [Redshift] Database tests
    Reason: Redshift connection is not set up. Please create a JSON file containing the credentials in `data/redshift_credentials.json`
Unique_Name_Strategy Helper:  [7/7, 13ms]
    - should change an empty name to "Column" [2ms]
    - should change Nothing to "Column" [1ms]
    - should not rename unique names [1ms]
    - should rename duplicates names [2ms]
    - should preserve existing suffix [2ms]
    - should always add a counter when renaming invalid names [1ms]
    - should work as in examples [2ms]
Unique_Name_Strategy.combine_with_prefix:  [6/6, 10ms]
    - should work as in examples [1ms]
    - should work with no prefix [0ms]
    - should work for empty input [0ms]
    - should find the first free spot [2ms]
    - will add a prefix/suffix, not increment an existing counter [2ms]
    - should prioritize existing names when renaming conflicts and rename only ones that are clashing with the other list [3ms]
Value_Type:  [2/2, 20ms]
    - should have a nice display text representation [4ms]
    - should use correct in-memory logic to reconcile pairs of types for operations like union/iif [15ms]
2250 tests succeeded.
2 tests failed.
134 tests skipped.
