/// This module is responsible for loading the WASM binary, its dependencies, and providing the
/// user with a visual representation of this process (welcome screen). It also implements a view
/// allowing to choose a debug rendering test from.

import * as loader_module from './loader'
import * as html_utils from './html_utils'

import host from './host'
import Task from './task'
import Logger from './logger'

// import * as fs from 'fs'
let fs = require('fs')

// =============
// === Utils ===
// =============

/** Parses the provided value as boolean. If it was a boolean value, it is left intact. If it was
 * a string 'true' or 'false', it is converted to a boolean value. Otherwise, null is returned. */
// prettier-ignore
function parseBoolean(value: any): boolean | null {
    switch(value) {
        case true: return true
        case false: return false
        case 'true': return true
        case 'false': return false
        default: return null
    }
}

// ==============
// === Config ===
// ==============

class Config {
    /** The URL of the WASM file generated by ensogl-pack. */
    public wasm_url: string = 'main.wasm'
    /** The URL of the snippets file generated by ensogl-pack. */
    public snippets_url: string = 'snippets.js'
    /** The application entry point. */
    public entry: string = 'ide'
    /** The EnsoGL theme to be used. */
    public theme: string = 'default'
    /** Controls whether the visual loader should be visible on the screen when downloading and
     * compiling WASM sources. */
    public use_loader: boolean = true
    /** The (time needed for WASM download) / (total time including WASM download and WASM app
     * initialization). In case of small WASM apps, this can be set to 1.0. In case of bigger WASM
     * apps, it's desired to show the progress bar growing up to e.g. 70% and leaving the last 30% for WASM app init. */
    public loader_download_to_init_ratio: number = 0.7
    /** Controls whether the application should be run in the debug mode. In this mode all logs are
     * printed to the console. Otherwise, the logs are hidden unless explicitly shown by calling
     * `showLogs`. */
    public debug: boolean = false

    updateFromObject(other: any) {
        for (let key of Object.keys(this)) {
            let self: any = this
            let otherVal = other[key]
            let selfVal = self[key]
            if (otherVal != null) {
                if (typeof selfVal === 'boolean') {
                    let val = parseBoolean(otherVal)
                    if (val == null) {
                        this.printValueUpdateError(key, selfVal, otherVal)
                    } else {
                        self[key] = val
                    }
                } else {
                    self[key] = otherVal.toString()
                }
            }
        }
    }

    printValueUpdateError(key: string, selfVal: any, otherVal: any) {
        console.error(
            `The provided value for Config.${key} is invalid. Expected boolean, got '${otherVal}'. \
            Using the default value '${selfVal}' instead.`
        )
    }
}

// ==================
// === Global API ===
// ==================

class PublicApi {
    async run(inputConfig: Object): Promise<void> {
        let task
        if (host.node) task = Task.start('Running the program.')
        const config = new Config()
        config.updateFromObject(inputConfig)
        config.updateFromObject(urlParams())
        await runEntryPoint(config)
        if (host.node) task.end()
    }

    log(event: string, data?: any) {}
}

const API = new PublicApi()

// ========================
// === Content Download ===
// ========================

/** Loads the WASM binary and its dependencies. If it's run in the browser, the files will be
 * downloaded from a server and a loading progress indicator will be shown. If it's run in node, the
 * files will be read from disk. After the files are fetched, the WASM module is compiled and
 * initialized. */
async function load_wasm(config: Config) {
    if (host.browser) {
        let task = Task.start(`Downloading files ${config.snippets_url} and ${config.wasm_url}.`)
        let snippets_fetch = await fetch(config.snippets_url)
        let wasm_fetch = await fetch(config.wasm_url)
        let loader = new loader_module.Loader([snippets_fetch, wasm_fetch], config)
        loader.done.then(() => task.end())

        let download_size = loader.show_total_bytes()
        let download_info = `Downloading WASM binary and its dependencies (${download_size}).`
        let wasm = await Logger.asyncWithCollapsed(download_info, async () => {
            let snippets_code = await snippets_fetch.text()
            return await init_wasm(snippets_code, wasm_fetch)
        })
        await loader.initialized
        return { wasm, loader }
    } else {
        let message = `Reading files '${config.snippets_url}' and '${config.wasm_url}'.`
        const { snippets_code, wasm_main } = Task.with(message, () => {
            let snippets_code = fs.readFileSync(config.snippets_url, 'utf8')
            let wasm_main = fs.readFileSync(config.wasm_url)
            return { snippets_code, wasm_main }
        })
        let wasm = await init_wasm(snippets_code, wasm_main)
        let loader = null
        return { wasm, loader }
    }
}

async function init_wasm(snippets_code: string, wasm_main: any): Promise<any> {
    return await Task.with('Wasm sompilation.', () => {
        let snippets_fn = Function(
            'let module = {};' +
                snippets_code +
                '; module.exports.init = pkg_default; return module.exports'
        )()
        return snippets_fn.init(wasm_main)
    })
}

// ====================
// === Debug Screen ===
// ====================

/// The name of the main scene in the WASM binary.
let main_entry_point = 'ide'

/// Prefix name of each scene defined in the WASM binary.
let wasm_entry_point_pfx = 'entry_point_'

/// Prefix name of each scene defined in the WASM binary.
let wasm_before_main_pfx = 'before_main_'

function wasm_functions(wasm: any): string[] {
    return Object.getOwnPropertyNames(wasm)
}

function wasm_before_main_functions(wasm: any): string[] {
    let names = []
    for (let fn of wasm_functions(wasm)) {
        if (fn.startsWith(wasm_before_main_pfx)) {
            names.push(fn)
        }
    }
    names.sort()
    return names
}

function wasm_entry_points_stripped(wasm: any): string[] {
    let names = []
    for (let fn of wasm_functions(wasm)) {
        if (fn.startsWith(wasm_entry_point_pfx)) {
            let name = fn.replace(wasm_entry_point_pfx, '')
            names.push(name)
        }
    }
    return names
}

/// Displays a debug screen which allows the user to run one of predefined debug examples.
function show_debug_screen(wasm: any, msg: string) {
    API.log('show_debug_screen')
    let names = wasm_entry_points_stripped(wasm)

    if (msg === '' || msg === null || msg === undefined) {
        msg = ''
    }
    let debug_screen_div = html_utils.new_top_level_div()
    let newDiv = document.createElement('div')
    let newContent = document.createTextNode(msg + 'Available entry points:')
    let ul = document.createElement('ul')
    debug_screen_div.style.position = 'absolute'
    debug_screen_div.style.zIndex = '1'
    newDiv.appendChild(newContent)
    debug_screen_div.appendChild(newDiv)
    newDiv.appendChild(ul)

    for (let name of names) {
        let li = document.createElement('li')
        let a = document.createElement('a')
        let linkText = document.createTextNode(name)
        ul.appendChild(li)
        a.appendChild(linkText)
        a.title = name
        a.href = '?entry=' + name
        li.appendChild(a)
    }
}

// ====================
// === Scam Warning ===
// ====================

function printScamWarning() {
    let headerCSS = `
        color : white;
        background : crimson;
        display : block;
        border-radius : 8px;
        font-weight : bold;
        padding: 10px 20px 10px 20px;
    `
    let headerCSS1 = headerCSS + 'font-size : 46px;'
    let headerCSS2 = headerCSS + 'font-size : 20px;'
    let msgCSS = 'font-size:16px;'

    let msg1 =
        'This is a browser feature intended for developers. If someone told you to ' +
        'copy-paste something here, it is a scam and will give them access to your ' +
        'account and data.'
    let msg2 =
        'See https://github.com/enso-org/enso/blob/develop/docs/security/selfxss.md for more ' +
        'information.'
    console.log('%cStop!', headerCSS1)
    console.log('%cYou may be victim of a scam!', headerCSS2)
    console.log('%c' + msg1, msgCSS)
    console.log('%c' + msg2, msgCSS)
}

// ======================
// === Logs Buffering ===
// ======================

const logsFns = ['log', 'info', 'debug', 'warn', 'error', 'group', 'groupCollapsed', 'groupEnd']

class LogRouter {
    private buffer: any[]
    private readonly raw: {}
    autoFlush: boolean

    constructor() {
        this.buffer = []
        this.raw = {}
        this.autoFlush = true
        // @ts-ignore
        console.autoFlush = true
        for (let name of logsFns) {
            // @ts-ignore
            this.raw[name] = console[name]
            // @ts-ignore
            console[name] = (...args) => {
                this.handle(name, args)
            }
        }
    }

    auto_flush_on() {
        this.autoFlush = true
        // @ts-ignore
        console.autoFlush = true
        for (let { name, args } of this.buffer) {
            // @ts-ignore
            this.raw[name](...args)
        }
        this.buffer = []
    }

    handle(name: string, args: any[]) {
        if (this.autoFlush) {
            // @ts-ignore
            this.raw[name](...args)
        } else {
            this.buffer.push({ name, args })
        }

        // The following code is just a hack to discover if the logs start with `[E]` which
        // indicates errors from Rust logger.
        if (name == 'error') {
            this.handleError(...args)
        } else if (name == 'log') {
            let firstArg = args[0]
            if (firstArg !== undefined) {
                if (!(typeof firstArg === 'string' || firstArg instanceof String)) {
                    firstArg = firstArg.toString()
                }
                if (firstArg.startsWith('%c')) {
                    let firstArgBody = firstArg.slice(2)
                    let bodyStartIndex = firstArgBody.indexOf('%c')
                    if (bodyStartIndex !== -1) {
                        let body = firstArgBody.slice(bodyStartIndex + 3)
                        let is_error = body.startsWith('[E]')
                        if (is_error) {
                            this.handleError(body)
                        }
                    }
                }
            }
        }
    }

    handleError(...args: any[]) {
        API.log('error', args)
    }
}

let logRouter = new LogRouter()

function hideLogs() {
    console.log('All subsequent logs will be hidden. Eval `showLogs()` to reveal them.')
    logRouter.autoFlush = false
    // @ts-ignore
    console.autoFlush = false
}

function showLogs() {
    logRouter.auto_flush_on()
}

// @ts-ignore
// window.showLogs = showLogs

// ======================
// === Crash Handling ===
// ======================

function initCrashHandling() {
    setupCrashDetection()
    if (previousCrashMessageExists()) {
        showCrashBanner(getPreviousCrashMessage())
        clearPreviousCrashMessage()
    }
}

const crashMessageStorageKey = 'crash-message'

function previousCrashMessageExists() {
    return sessionStorage.getItem(crashMessageStorageKey) !== null
}

function getPreviousCrashMessage() {
    return sessionStorage.getItem(crashMessageStorageKey)
}

function storeLastCrashMessage(message: string) {
    sessionStorage.setItem(crashMessageStorageKey, message)
}

function clearPreviousCrashMessage() {
    sessionStorage.removeItem(crashMessageStorageKey)
}

// === Crash detection ===

function setupCrashDetection() {
    // This will only have an effect if the GUI is running in V8.
    // (https://v8.dev/docs/stack-trace-api#compatibility)
    Error.stackTraceLimit = 100

    window.addEventListener('error', function (event) {
        // We prefer stack traces over plain error messages but not all browsers produce traces.
        if (event.error != null && event.error.stack != null) {
            handleCrash(event.error.stack)
        } else {
            handleCrash(event.message)
        }
    })
    window.addEventListener('unhandledrejection', function (event) {
        // As above, we prefer stack traces.
        // But here, `event.reason` is not even guaranteed to be an `Error`.
        handleCrash(event.reason.stack || event.reason.message || 'Unhandled rejection')
    })
}

function handleCrash(message: string) {
    API.log('crash', message)
    if (document.getElementById(crashBannerId) === null) {
        storeLastCrashMessage(message)
        location.reload()
    } else {
        // @ts-ignore
        for (let element of [...document.body.childNodes]) {
            // @ts-ignore
            if (element.id !== crashBannerId) {
                element.remove()
            }
        }
        document.getElementById(crashBannerContentId).insertAdjacentHTML(
            'beforeend',
            `<hr>
             <div>A second error occurred. This time, the IDE will not automatically restart.</div>`
        )
    }
}

// === Crash recovery ===

// Those IDs should be the same that are used in index.html.
const crashBannerId = 'crash-banner'
const crashBannerContentId = 'crash-banner-content'
const crashReportButtonId = 'crash-report-button'
const crashBannerCloseButtonId = 'crash-banner-close-button'

function showCrashBanner(message: string) {
    document.body.insertAdjacentHTML(
        'afterbegin',
        `<div id="${crashBannerId}">
            <button id="${crashBannerCloseButtonId}" class="icon-button">✖</button>
            <div id="${crashBannerContentId}">
                <button id="${crashReportButtonId}">Report</button>
                An internal error occurred and the Enso IDE has been restarted.
            </div>
        </div>`
    )

    const banner = document.getElementById(crashBannerId)
    const content = document.getElementById(crashBannerContentId)
    const report_button = document.getElementById(crashReportButtonId)
    const close_button = document.getElementById(crashBannerCloseButtonId)

    report_button.onclick = async _event => {
        try {
            await reportCrash(message)
            content.textContent = 'Thank you, the crash was reported.'
        } catch (e) {
            content.textContent = 'The crash could not be reported.'
        }
    }
    close_button.onclick = () => {
        banner.remove()
    }
}

async function reportCrash(message: string) {
    // @ts-ignore
    const crashReportHost = API[globalConfig.windowAppScopeConfigName].crash_report_host
    await fetch(`http://${crashReportHost}/`, {
        method: 'POST',
        mode: 'no-cors',
        headers: {
            'Content-Type': 'text/plain',
        },
        body: message,
    })
}

// =====================
// === Version Check ===
// =====================

// An error with the payload.
class ErrorDetails {
    public readonly message: string
    public readonly payload: any

    constructor(message: string, payload: any) {
        this.message = message
        this.payload = payload
    }
}

// ========================
// === Main Entry Point ===
// ========================

function style_root() {
    let root = document.getElementById('root')
    root.style.backgroundColor = 'rgb(249,250,251)'
}

/// Waits for the window to finish its show animation. It is used when the website is run in
/// Electron. Please note that it returns immediately in the web browser.
async function windowShowAnimation() {
    // @ts-ignore
    await window.showAnimation
}

function disableContextMenu() {
    document.body.addEventListener('contextmenu', e => {
        e.preventDefault()
    })
}

export function register_get_shaders_fn(fn: any) {
    console.log('!!!!!!!!!!!!!!!!!!!')
    let out = fn()
    console.log('got', out)
}

// @ts-ignore
host.global.register_get_shaders_fn = register_get_shaders_fn

/// Main entry point. Loads WASM, initializes it, chooses the scene to run.
async function runEntryPoint(config: Config) {
    // @ts-ignore
    // API[globalConfig.windowAppScopeConfigName] = config

    // // Build data injected during the build process. See `webpack.config.js` for the source.
    // // @ts-ignore
    // const hash = GIT_HASH
    // API.log('git_hash', { hash })
    // // @ts-ignore
    // const buildInfo = BUILD_INFO
    // API.log('build_information', buildInfo)
    // // @ts-ignore
    // const status = GIT_STATUS
    // API.log('git_status', { status })

    //initCrashHandling()
    if (host.browser) {
        style_root()
        printScamWarning()
        disableContextMenu()
        if (!config.debug) {
            hideLogs()
        }
    }

    let entryTarget = config.entry != null ? config.entry : main_entry_point
    config.use_loader = config.use_loader && entryTarget === main_entry_point

    if (host.browser) {
        API.log('window_show_animation')
        await windowShowAnimation()
    }
    API.log('load_wasm')
    let { wasm, loader } = await load_wasm(config)
    API.log('wasm_loaded')
    if (entryTarget) {
        let fn_name = wasm_entry_point_pfx + entryTarget
        let fn = wasm[fn_name]
        if (fn) {
            let before_main_fns = wasm_before_main_functions(wasm)
            if (before_main_fns) {
                console.log(`Running ${before_main_fns.length} before main functions.`)
                const t_start = performance.now()
                for (let before_main_fn_name of before_main_fns) {
                    wasm[before_main_fn_name]()
                }
                const t_end = performance.now()
                let ms = Math.round((t_end - t_start) * 100) / 100
                console.log(`Before main functions took ${ms} milliseconds to run.`)
                if (ms > 30) {
                    console.error(
                        `Before main functions took ${ms} milliseconds to run. This is too long. Before main functions should be used for fast initialization only.`
                    )
                }
            }
            console.log(`Running the chosen entry point.`)
            // Loader will be removed by IDE after its initialization.
            // All other code paths need to call `loader.destroy()`.
            fn()
        } else {
            // loader.destroy()
            // show_debug_screen(wasm, "Unknown entry point '" + entryTarget + "'. ")
            let before_main_fns = wasm_before_main_functions(wasm)
            if (before_main_fns) {
                console.log(`Running ${before_main_fns.length} before main functions.`)
                const t_start = performance.now()
                for (let before_main_fn_name of before_main_fns) {
                    wasm[before_main_fn_name]()
                }
                const t_end = performance.now()
                let ms = Math.round((t_end - t_start) * 100) / 100
                console.log(`Before main functions took ${ms} milliseconds to run.`)
                if (ms > 30) {
                    console.error(
                        `Before main functions took ${ms} milliseconds to run. This is too long. Before main functions should be used for fast initialization only.`
                    )
                }
            }
            console.log(`Running the chosen entry point.`)
            // Loader will be removed by IDE after its initialization.
            // All other code paths need to call `loader.destroy()`.
            // fn()
        }
    } else {
        // loader.destroy()
        show_debug_screen(wasm, '')
    }
}

function urlParams(): any {
    if (host.browser) {
        const urlParams = new URLSearchParams(window.location.search)
        return Object.fromEntries(urlParams.entries())
    } else {
        return {}
    }
}

API.run({})
