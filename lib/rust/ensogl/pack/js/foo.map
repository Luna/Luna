{
  "version": 3,
  "sources": ["src/index.ts", "src/html_utils.ts", "src/fs.ts", "src/host.ts", "src/logger.ts", "src/task.ts", "src/animation.ts", "src/math.ts", "src/svg.ts", "src/loader.ts", "src/config.ts", "src/arg-parser.ts", "src/log-router.ts", "src/entry-point.ts"],
  "sourcesContent": ["/// This module is responsible for loading the WASM binary, its dependencies, and providing the\n/// user with a visual representation of this process (welcome screen). It also implements a view\n/// allowing to choose a debug rendering test from.\n\nimport * as html_utils from './html_utils'\nimport * as fs from './fs'\nimport host from './host'\nimport { Loader } from './loader'\nimport { Task } from './task'\nimport { Logger } from './logger'\nimport { Config } from './config'\nimport { Args, parseArgs } from './arg-parser'\nimport { logRouter } from './log-router'\nimport { EntryPoint, wasmFunctions } from './entry-point'\n\n// ===================\n// === PackageInfo ===\n// ===================\n\n/** Package info. It contains the build git hash and git status, both injected during build time.\n * See `bundle.ts` to learn more. It can also contain additional info provided by the user of this\n * library. */\nclass PackageInfo {\n    gitHash: string\n    gitStatus: string\n\n    /** Constructor.\n     * @param info - Optional user provided info. */\n    constructor(info?: any) {\n        const infoObject = info || {}\n        // @ts-ignore\n        this.gitHash = GIT_HASH\n        // @ts-ignore\n        this.gitStatus = GIT_STATUS\n        const self: any = this\n        Object.assign(self, infoObject)\n    }\n\n    /** Display the current info in the console. */\n    display() {\n        Logger.with('Package info.', () => {\n            for (let [key, value] of Object.entries(this)) {\n                if (value) {\n                    Logger.log(`${key}: ${value}`)\n                }\n            }\n        })\n    }\n}\n\n// ========================\n// === Content Download ===\n// ========================\n\n/** Loads the WASM binary and its dependencies. If it's run in the browser, the files will be\n * downloaded from a server and a loading progress indicator will be shown. If it's run in node, the\n * files will be read from disk. After the files are fetched, the WASM module is compiled and\n * initialized. */\nasync function load_wasm(config: Config) {\n    if (host.browser) {\n        let task = Task.start(`Downloading files ${config.snippets_url} and ${config.wasm_url}.`)\n        let snippets_fetch = await fetch(config.snippets_url.value)\n        let wasm_fetch = await fetch(config.wasm_url.value)\n        let loader = new Loader([snippets_fetch, wasm_fetch], config)\n        loader.done.then(() => task.end())\n        // FIXME:\n        let download_size = loader.show_total_bytes()\n\n        let snippets_code = await snippets_fetch.text()\n        let wasm = await init_wasm(snippets_code, wasm_fetch)\n        await loader.initialized\n        return { wasm, loader }\n    } else {\n        let snippets_code = await fs.readFile(config.snippets_url.value, 'utf8')\n        let wasm_main = await fs.readFile(config.wasm_url.value)\n        let wasm = await init_wasm(snippets_code, wasm_main)\n        let loader = null\n        return { wasm, loader }\n    }\n}\n\nasync function init_wasm(snippets_code: string, wasm: Buffer | Response): Promise<any> {\n    return await Task.asyncWith('Wasm compilation.', async () => {\n        let snippets_fn = Function(\n            `let module = {}\n             ${snippets_code}\n             module.exports.init = pkg_default \n             return module.exports`\n        )()\n        return await snippets_fn.init(wasm)\n    })\n}\n\n// ==================\n// === EntryPoint ===\n// ==================\n\n// =========================\n// === EntryPointChooser ===\n// =========================\n\n/// Displays a debug screen which allows the user to run one of predefined debug examples.\nfunction show_debug_screen(wasm: any, msg: string) {\n    Logger.log('show_debug_screen')\n    msg ??= ''\n    let entryPoints = EntryPoint.mainEntryPoints(wasmFunctions(wasm))\n    let debug_screen_div = html_utils.new_top_level_div()\n    let newDiv = document.createElement('div')\n    let newContent = document.createTextNode(msg + 'Available entry points:')\n    let ul = document.createElement('ul')\n    debug_screen_div.style.position = 'absolute'\n    debug_screen_div.style.zIndex = '1'\n    newDiv.appendChild(newContent)\n    debug_screen_div.appendChild(newDiv)\n    newDiv.appendChild(ul)\n\n    for (let entry_point of entryPoints.values()) {\n        let li = document.createElement('li')\n        let a = document.createElement('a')\n        let linkText = document.createTextNode(entry_point.name)\n        ul.appendChild(li)\n        a.appendChild(linkText)\n        a.title = entry_point.name\n        a.href = '?entry=' + entry_point.name\n        li.appendChild(a)\n    }\n}\n\n// ====================\n// === Scam Warning ===\n// ====================\n\nfunction printScamWarning() {\n    let headerCSS = `\n        color : white;\n        background : crimson;\n        display : block;\n        border-radius : 8px;\n        font-weight : bold;\n        padding: 10px 20px 10px 20px;\n    `\n    let headerCSS1 = headerCSS + 'font-size : 46px;'\n    let headerCSS2 = headerCSS + 'font-size : 20px;'\n    let msgCSS = 'font-size:16px;'\n\n    let msg1 =\n        'This is a browser feature intended for developers. If someone told you to ' +\n        'copy-paste something here, it is a scam and will give them access to your ' +\n        'account and data.'\n    let msg2 =\n        'See https://github.com/enso-org/enso/blob/develop/docs/security/selfxss.md for more ' +\n        'information.'\n    console.log('%cStop!', headerCSS1)\n    console.log('%cYou may be victim of a scam!', headerCSS2)\n    console.log('%c' + msg1, msgCSS)\n    console.log('%c' + msg2, msgCSS)\n}\n\n// ========================\n// === Main Entry Point ===\n// ========================\n\nfunction style_root() {\n    let root = document.getElementById('root')\n    if (root != null) {\n        root.style.backgroundColor = 'rgb(249,250,251)'\n    }\n}\n\nfunction disableContextMenu() {\n    document.body.addEventListener('contextmenu', e => {\n        e.preventDefault()\n    })\n}\n\nfunction initBrowser(config: Config) {\n    style_root()\n    printScamWarning()\n    disableContextMenu()\n    if (!config.debug) {\n        logRouter.hideLogs()\n    }\n}\n\n// ===========\n// === App ===\n// ===========\n\ntype AppArgs = {\n    config?: Object\n    info?: Object\n}\n\nexport class App {\n    args: Args\n    info: Object\n    config: Config\n    wasm: any\n    loader: Loader | null\n    logger: Logger\n    wasmFunctions: string[]\n    beforeMainEntryPoints: Map<string, EntryPoint>\n    mainEntryPoints: Map<string, EntryPoint>\n    task: Task | null\n    getShadersFn: any\n\n    constructor() {\n        this.logger = Logger\n    }\n\n    async run(appArgs?: AppArgs): Promise<void> {\n        this.args = parseArgs()\n        this.info = appArgs?.info ?? {}\n        const inputConfig = appArgs?.config ?? {}\n        this.config = new Config(inputConfig, host.urlParams())\n\n        if (host.browser) {\n            await this.init()\n            this.runEntryPoints()\n        } else {\n            if (this.args.genShadersCode.value) {\n                await this.init()\n                this.runBeforeMainEntryPoints()\n                this.generateShadersCode()\n            } else {\n                this.args.printHelpAndExit()\n            }\n        }\n        if (this.task) this.task.end()\n    }\n\n    async init() {\n        if (host.node) this.task = Task.start('Running the program.')\n        let { wasm, loader } = await load_wasm(this.config)\n        this.wasm = wasm\n        this.loader = loader\n        this.wasmFunctions = wasmFunctions(this.wasm)\n        this.beforeMainEntryPoints = EntryPoint.beforeMainEntryPoints(this.wasmFunctions)\n        this.mainEntryPoints = EntryPoint.mainEntryPoints(this.wasmFunctions)\n        this.initBrowser()\n        new PackageInfo(this.info).display()\n    }\n\n    initBrowser() {\n        if (host.browser) {\n            initBrowser(this.config)\n        }\n    }\n\n    runBeforeMainEntryPoints() {\n        if (!this.beforeMainEntryPoints.size) {\n            return\n        }\n        let count = this.beforeMainEntryPoints.size\n        Task.with(`Running ${count} before main entry points.`, () => {\n            for (let entryPoint of this.beforeMainEntryPoints.values()) {\n                const [time, _] = Task.withTimed(`Running ${entryPoint.displayName()}.`, () => {\n                    this.wasm[entryPoint.fullName()]()\n                })\n                this.checkBeforeMainEntryPointTime(time)\n            }\n        })\n    }\n\n    checkBeforeMainEntryPointTime(time: number) {\n        if (time > this.config.maxBeforeMainEntryPointsTimeMs) {\n            Logger.error(`Entry point took ${time} milliseconds to run. This is too long.`)\n            Logger.error('Before main entry points should be used for fast initialization only.')\n        }\n    }\n\n    runEntryPoints() {\n        let entryPointName = this.config.entry.value\n        let entryPoint = this.mainEntryPoints.get(entryPointName)\n        if (entryPoint) {\n            this.runBeforeMainEntryPoints()\n            Logger.log(`Running the main entry point: ${entryPoint.displayName()}.`)\n            this.wasm[entryPoint.fullName()]()\n        } else {\n            show_debug_screen(this.wasm, `Unknown entry point '${entryPointName}'. `)\n        }\n    }\n\n    generateShadersCode() {\n        Task.with('Getting shaders code from EnsoGL.', () => {\n            let out = this.getShadersFn()\n            // console.log('got', out)\n        })\n    }\n}\n\n// ==========================\n// === App Initialization ===\n// ==========================\n\nconst app = new App()\nexport default app\napp.run()\n\nfunction registerGetShadersRustFn(fn: any) {\n    Logger.log(`Registering 'getShadersFn'.`)\n    app.getShadersFn = fn\n}\nhost.exportGlobal({ registerGetShadersRustFn })\n\n// ==============\n// === FIXMES ===\n// ==============\n\n// FIXME: leftover from old script\n// API[globalConfig.windowAppScopeConfigName] = config\n", "// ==================\n// === HTML Utils ===\n// ==================\n\n/** Creates a new top-level div which occupy full size of its parent's space. */\nexport function new_top_level_div(): HTMLDivElement {\n    let node = document.createElement('div')\n    node.style.width = '100%'\n    node.style.height = '100%'\n    document.body.appendChild(node)\n    return node\n}\n", "export * from 'fs/promises'\nimport { ObjectEncodingOptions, OpenMode, PathLike } from 'node:fs'\nimport { FileHandle } from 'fs/promises'\nimport { Abortable } from 'node:events'\nimport { promises as fs } from 'fs'\nimport { Task as LoggedTask } from './task'\n\nexport async function readFile(\n    path: PathLike | FileHandle,\n    options?:\n        | ({\n              encoding?: null | undefined\n              flag?: OpenMode | undefined\n          } & Abortable)\n        | null\n): Promise<Buffer>\n\nexport async function readFile(\n    path: PathLike | FileHandle,\n    options:\n        | ({\n              encoding: BufferEncoding\n              flag?: OpenMode | undefined\n          } & Abortable)\n        | BufferEncoding\n): Promise<string>\n\nexport async function readFile(\n    path: PathLike | FileHandle,\n    options?:\n        | (ObjectEncodingOptions &\n              Abortable & {\n                  flag?: OpenMode | undefined\n              })\n        | BufferEncoding\n        | null\n): Promise<string | Buffer> {\n    return LoggedTask.asyncWith(`Reading file '${path}'.`, async () => {\n        return await fs.readFile(path, options)\n    })\n}\n", "/** Resolves to `true` if we are running the script in the browser. If it's node, resolves to\n * `false`. */\nconst browser = typeof window !== 'undefined'\n\n/** Resolves to `true` if we are running the script in node. If it's a browser, resolves to\n * `false`. */\nconst node = !browser\n\n/** The global object. In case of a browser, this is the window. In case of node, it's the built-in\n * `global` object. */\n// const global = {}\nglobal ??= window\n\nfunction urlParams(): any {\n    if (browser) {\n        const urlParams = new URLSearchParams(window.location.search)\n        return Object.fromEntries(urlParams.entries())\n    } else {\n        return {}\n    }\n}\n\nfunction exportGlobal(exports: { [key: string]: any }) {\n    for (const [key, value] of Object.entries(exports)) {\n        // @ts-ignore\n        global[key] = value\n    }\n}\n\nexportGlobal({ window: global })\n\nexport default {\n    global,\n    exportGlobal,\n    browser,\n    node,\n    urlParams,\n}\n", "import host from './host'\n\nclass Colors {\n    static resetCode = '\\x1b[0m'\n    static redCode = '\\x1b[31m'\n    static orangeCode = '\\x1b[33m'\n    static red(text: string): string {\n        return Colors.redCode + text + Colors.resetCode\n    }\n    static orange(text: string): string {\n        return Colors.orangeCode + text + Colors.resetCode\n    }\n    static bold_start(): string {\n        return '\\x1b[1m'\n    }\n    static reset(): string {\n        return Colors.resetCode\n    }\n    static level(level: number, text: string): string {\n        return Colors.levelStart(level) + text + Colors.resetCode\n    }\n    static levelStart(level: number): string {\n        switch (level) {\n            case 0:\n                return `\\x1b[38;5;155m`\n            case 1:\n                return `\\x1b[38;5;85m`\n            case 2:\n                return `\\x1b[38;5;51m`\n            default:\n                return `\\x1b[38;5;64m`\n        }\n    }\n}\n\nexport class Logger {\n    private static indent_lvl: number = 0\n\n    private static message(fn: string, color: string | null, ...args: any[]) {\n        const strArgs = args.map(arg => arg.toString())\n        const c: any = console\n        if (host.browser) {\n            c[fn](...strArgs)\n        } else {\n            //@ts-ignore\n            const coloredArgs = color ? strArgs.map(arg => Colors[color](arg)) : strArgs\n            if (Logger.indent_lvl > 0) {\n                let indent = Logger.indent()\n                const indentedArgs = coloredArgs.map(arg => arg.replaceAll('\\n', `\\n${indent}    `))\n                c.log(Logger.indent_shorter(), ...indentedArgs)\n            } else {\n                c.log(...strArgs)\n            }\n        }\n    }\n\n    private static indent(): string {\n        let out = ''\n        for (let i = 0; i < Logger.indent_lvl; i++) {\n            let box = Colors.level(i, '\u2502')\n            out += `${box} `\n        }\n        return out\n    }\n\n    private static indent_shorter(): string {\n        return Logger.indent().slice(0, -1)\n    }\n\n    /** Log a message. */\n    static log(...args: any[]) {\n        Logger.message('log', null, ...args)\n    }\n\n    /** Log a warning. */\n    static warn(...args: any[]) {\n        Logger.message('warn', 'orange', ...args)\n    }\n\n    /** Log an error. */\n    static error(...args: any[]) {\n        Logger.message('error', 'red', ...args)\n    }\n\n    /** Start a group and log a message. */\n    static group(...args: any[]) {\n        if (host.browser) {\n            console.group(...args)\n        } else {\n            const styleStart = `${Colors.bold_start()}${Colors.levelStart(Logger.indent_lvl)}`\n            console.log(`${Logger.indent()}${styleStart}\u256D`, ...args, Colors.reset())\n        }\n        Logger.indent_lvl += 1\n    }\n\n    /** Start a group and log a message. */\n    static groupCollapsed(...args: any[]) {\n        if (host.browser) {\n            console.groupCollapsed(...args)\n            Logger.indent_lvl += 1\n        } else {\n            Logger.group(...args)\n        }\n    }\n\n    /** Log a message and end the last opened group. */\n    static groupEnd(...args: any[]) {\n        if (Logger.indent_lvl > 0) {\n            Logger.indent_lvl -= 1\n            if (host.browser) {\n                if (args.length > 0) {\n                    console.log(...args)\n                }\n                console.groupEnd()\n            } else {\n                const styleStart = `${Colors.levelStart(Logger.indent_lvl)}`\n                console.log(`${Logger.indent()}${styleStart}\u2570`, ...args)\n            }\n        } else {\n            Logger.log(...args)\n        }\n    }\n\n    static with<T>(message: string, f: () => T): T {\n        Logger.group(message)\n        let out = f()\n        Logger.groupEnd()\n        return out\n    }\n\n    static withCollapsed<T>(message: string, f: () => T): T {\n        Logger.groupCollapsed(message)\n        let out = f()\n        Logger.groupEnd()\n        return out\n    }\n\n    static async asyncWith<T>(message: string, f: () => Promise<T>): Promise<T> {\n        Logger.group(message)\n        let out = await f()\n        Logger.groupEnd()\n        return out\n    }\n\n    static async asyncWithCollapsed<T>(message: string, f: () => Promise<T>): Promise<T> {\n        Logger.groupCollapsed(message)\n        let out = await f()\n        Logger.groupEnd()\n        return out\n    }\n}\n", "import { Logger } from './logger'\n\nexport class Task {\n    message: string\n    startTime: number = 0\n    endTime: number = 0\n    constructor(message: string) {\n        this.message = message\n    }\n\n    start() {\n        Logger.group(`${this.message}`)\n        this.startTime = performance.now()\n    }\n\n    end(): number {\n        this.endTime = performance.now()\n        const ms = this.endTime - this.startTime\n        let ms_rounded = Math.round(ms * 10) / 10\n        if (ms_rounded == 0) {\n            ms_rounded = Math.round(ms * 100) / 100\n        }\n        if (ms_rounded == 0) {\n            ms_rounded = Math.round(ms * 1000) / 1000\n        }\n        Logger.groupEnd(`Done in ${ms_rounded} ms.`)\n        return ms\n    }\n\n    static start(message: string): Task {\n        const task = new Task(message)\n        task.start()\n        return task\n    }\n\n    static with<T>(message: string, f: () => T): T {\n        const task = Task.start(message)\n        const out = f()\n        task.end()\n        return out\n    }\n\n    static async asyncWith<T>(message: string, f: () => Promise<T>): Promise<T> {\n        const task = Task.start(message)\n        const out = await f()\n        task.end()\n        return out\n    }\n\n    static withTimed<T>(message: string, f: () => T): [number, T] {\n        const task = Task.start(message)\n        const out = f()\n        const ms = task.end()\n        return [ms, out]\n    }\n\n    static async asyncWithTimed<T>(message: string, f: () => Promise<T>): Promise<[number, T]> {\n        const task = Task.start(message)\n        const out = await f()\n        const ms = task.end()\n        return [ms, out]\n    }\n}\n", "/// This module defines a simple set of animation utils. Follow the link to learn more:\n/// https://easings.net/en\n\n// =================\n// === Animation ===\n// =================\n\nexport function ease_in_out_cubic(t: number): number {\n    return t < 0.5 ? 4 * t * t * t : 1 - ((-2 * t + 2) * (-2 * t + 2) * (-2 * t + 2)) / 2\n}\n\nexport function ease_in_out_quad(t: number): number {\n    return t < 0.5 ? 2 * t * t : 1 - ((-2 * t + 2) * (-2 * t + 2)) / 2\n}\n\nexport function ease_out_quart(t: number): number {\n    return 1 - --t * t * t * t\n}\n", "/// This module defines a common math operations.\n\n// ============\n// === Math ===\n// ============\n\n/// Converts the polar coordinates to cartesian ones.\nexport function polar_to_cartesian(\n    radius: number,\n    angle_degrees: number\n): { x: number; y: number } {\n    let angle = ((angle_degrees - 90) * Math.PI) / 180.0\n    return {\n        x: radius * Math.cos(angle),\n        y: radius * Math.sin(angle),\n    }\n}\n\n/// Format bytes as megabytes with a single precision number.\nexport function format_mb(bytes: number): number {\n    return Math.round((10 * bytes) / (1024 * 1024)) / 10\n}\n", "/// This module defines a set of utils for generating and modifying the SVG images.\n\nimport * as math from './math.js'\n\n// ===========\n// === SVG ===\n// ===========\n\n/// Defines a new SVG with the provided source.\nexport function new_svg(width: number, height: number, str: string): string {\n    return `\n    <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n         height=\"${height}\" width=\"${width}\" viewBox=\"0 0 ${height} ${width}\">\n    ${str}\n    </svg>`\n}\n\n/// Returns SVG code for an arc with a defined radius and angle.\nexport function arc(radius: number, end_angle: number): string {\n    let start_angle = 0\n    if (end_angle < 0) {\n        start_angle = end_angle\n        end_angle = 0\n    }\n    let start = math.polar_to_cartesian(radius, end_angle)\n    let end = math.polar_to_cartesian(radius, start_angle)\n    let large_arc = end_angle - start_angle <= 180 ? '0' : '1'\n    return `M 0 0 L ${start.x} ${start.y} A ${radius} ${radius} 0 ${large_arc} 0 ${end.x} ${end.y}`\n}\n", "import * as animation from './animation.js'\nimport * as html_utils from './html_utils.js'\nimport * as math from './math.js'\nimport * as svg from './svg.js'\nimport { Config } from './config'\n\n// =========================\n// === ProgressIndicator ===\n// =========================\n\nlet bg_color = 'rgb(249,250,251)'\nlet loader_color = '#303030'\nlet top_layer_index = '1000'\n\n/// Visual representation of the loader.\nclass ProgressIndicator {\n    dom: HTMLDivElement\n    progress_indicator: HTMLElement\n    progress_indicator_mask: HTMLElement\n    progress_indicator_corner: HTMLElement\n    initialized: Promise<void>\n    destroyed: boolean\n\n    constructor(cfg: Config) {\n        this.dom = html_utils.new_top_level_div()\n        this.dom.id = 'loader'\n        this.dom.style.position = 'fixed'\n        this.dom.style.top = '0'\n        this.dom.style.left = '0'\n        // In the Cloud UI, all layers are stacked, and the progress\n        // indicator must be placed at the top layer.\n        this.dom.style.zIndex = top_layer_index\n\n        let center = document.createElement('div')\n        center.style.width = '100%'\n        center.style.height = '100%'\n        center.style.display = 'flex'\n        center.style.justifyContent = 'center'\n        center.style.alignItems = 'center'\n        this.dom.appendChild(center)\n\n        let progress_bar_svg = this.init_svg()\n        let progress_bar = document.createElement('div')\n        progress_bar.innerHTML = progress_bar_svg\n        center.appendChild(progress_bar)\n\n        //@ts-ignore\n        this.progress_indicator = document.getElementById('progress_indicator')\n        //@ts-ignore\n        this.progress_indicator_mask = document.getElementById('progress_indicator_mask')\n        //@ts-ignore\n        this.progress_indicator_corner = document.getElementById('progress_indicator_corner')\n\n        this.set(0)\n        this.set_opacity(0)\n\n        if (cfg.use_loader) {\n            this.initialized = this.animate_show()\n        } else {\n            this.initialized = new Promise(resolve => {\n                resolve()\n            })\n        }\n        this.animate_rotation()\n        this.destroyed = false\n    }\n\n    /// Initializes the SVG view.\n    init_svg() {\n        let width = 128\n        let height = 128\n        let alpha = 0.9\n        let inner_radius = 48\n        let outer_radius = 60\n        let mid_radius = (inner_radius + outer_radius) / 2\n        let bar_width = outer_radius - inner_radius\n\n        return svg.new_svg(\n            width,\n            height,\n            `\n            <defs>\n                <g id=\"progress_bar\">\n                    <circle fill=\"${loader_color}\" r=\"${outer_radius}\"                               />\n                    <circle fill=\"${bg_color}\"     r=\"${inner_radius}\"                               />\n                    <path   fill=\"${bg_color}\"     opacity=\"${alpha}\" id=\"progress_indicator_mask\"   />\n                    <circle fill=\"${loader_color}\" r=\"${\n                bar_width / 2\n            }\" id=\"progress_indicator_corner\" />\n                    <circle fill=\"${loader_color}\" r=\"${\n                bar_width / 2\n            }\" cy=\"-${mid_radius}\"            />\n                </g>\n            </defs>\n            <g transform=\"translate(${width / 2},${height / 2})\">\n                <g transform=\"rotate(0,0,0)\" id=\"progress_indicator\">\n                    <use xlink:href=\"#progress_bar\"></use>\n                </g>\n            </g>\n        `\n        )\n    }\n\n    /// Destroys the component. Removes it from the stage and destroys attached callbacks.\n    destroy() {\n        let parent = this.dom.parentNode\n        if (parent) {\n            parent.removeChild(this.dom)\n        }\n        this.destroyed = true\n    }\n\n    /// Set the value of the loader [0..1].\n    set(value: number) {\n        let min_angle = 0\n        let max_angle = 359\n        let angle_span = max_angle - min_angle\n        let mask_angle = (1 - value) * angle_span - min_angle\n        let corner_pos = math.polar_to_cartesian(54, -mask_angle)\n        this.progress_indicator_mask.setAttribute('d', svg.arc(128, -mask_angle))\n        this.progress_indicator_corner.setAttribute('cx', `${corner_pos.x}`)\n        this.progress_indicator_corner.setAttribute('cy', `${corner_pos.y}`)\n    }\n\n    /// Set the opacity of the loader.\n    set_opacity(val: number) {\n        this.progress_indicator.setAttribute('opacity', `${val}`)\n    }\n\n    /// Set the rotation of the loader (angles).\n    set_rotation(val: number) {\n        this.progress_indicator.setAttribute('transform', `rotate(${val},0,0)`)\n    }\n\n    /// Start show animation. It is used after the loader is created.\n    animate_show(): Promise<void> {\n        let indicator = this\n        return new Promise(function (resolve, reject) {\n            let alpha = 0\n            function show_step() {\n                if (alpha > 1) {\n                    alpha = 1\n                }\n                indicator.set_opacity(animation.ease_in_out_quad(alpha))\n                alpha += 0.02\n                if (alpha < 1) {\n                    window.requestAnimationFrame(show_step)\n                } else {\n                    resolve()\n                }\n            }\n            window.requestAnimationFrame(show_step)\n        })\n    }\n\n    /// Start the spinning animation.\n    animate_rotation() {\n        let indicator = this\n        let rotation = 0\n        function rotate_step(timestamp: DOMHighResTimeStamp) {\n            indicator.set_rotation(rotation)\n            rotation += 6\n            if (!indicator.destroyed) {\n                window.requestAnimationFrame(rotate_step)\n            }\n        }\n        window.requestAnimationFrame(rotate_step)\n    }\n}\n\n// ==============\n// === Loader ===\n// ==============\n\n/// The main loader class. It connects to the provided fetch responses and tracks their status.\nexport class Loader {\n    indicator: ProgressIndicator\n    total_bytes: number\n    received_bytes: number\n    download_speed: number\n    last_receive_time: number\n    initialized: Promise<void>\n    cap_progress_at: number\n    done: Promise<void>\n    done_resolve: (value: void | PromiseLike<void>) => void\n    constructor(resources: Response[], cfg: Config) {\n        this.indicator = new ProgressIndicator(cfg)\n        this.total_bytes = 0\n        this.received_bytes = 0\n        this.download_speed = 0\n        this.last_receive_time = performance.now()\n        this.initialized = this.indicator.initialized\n        this.cap_progress_at = cfg.loader_download_to_init_ratio.value\n\n        this.done = new Promise(resolve => {\n            this.done_resolve = resolve\n        })\n\n        let missing_content_length = false\n        for (let resource of resources) {\n            let content_length = resource.headers.get('content-length')\n            if (content_length) {\n                this.total_bytes += parseInt(content_length)\n            } else {\n                missing_content_length = true\n            }\n            let body = resource.clone().body\n            if (body) {\n                body.pipeTo(this.input_stream())\n            } else {\n                // FIXME: error\n            }\n        }\n\n        if (missing_content_length || Number.isNaN(this.total_bytes)) {\n            console.error(\n                \"Loader error. Server is not configured to send the 'Content-Length' metadata.\"\n            )\n            this.total_bytes = 0\n        }\n    }\n\n    /// The current loading progress [0..1].\n    value() {\n        if (this.total_bytes == 0) {\n            return 0.3\n        } else {\n            return this.received_bytes / this.total_bytes\n        }\n    }\n\n    /// Returns true if the loader finished.\n    is_done() {\n        return this.received_bytes == this.total_bytes\n    }\n\n    /// Removes the loader with it's dom element.\n    destroy() {\n        this.indicator.destroy()\n    }\n\n    /// Callback run on every new received byte stream.\n    on_receive(new_bytes: number) {\n        this.received_bytes += new_bytes\n        let time = performance.now()\n        let time_diff = time - this.last_receive_time\n        this.download_speed = new_bytes / time_diff\n        this.last_receive_time = time\n\n        let percent = this.show_percentage_value()\n        let speed = this.show_download_speed()\n        let received = this.show_received_bytes()\n        console.log(`${percent}% (${received}) (${speed}).`)\n\n        let indicator_progress = this.value() * this.cap_progress_at\n        this.indicator.set(indicator_progress)\n        if (this.is_done()) {\n            this.done_resolve()\n        }\n    }\n\n    /// Download percentage value.\n    show_percentage_value() {\n        return Math.round(100 * this.value())\n    }\n\n    /// Download total size value.\n    show_total_bytes() {\n        return `${math.format_mb(this.total_bytes)} MB`\n    }\n\n    /// Download received bytes value.\n    show_received_bytes() {\n        return `${math.format_mb(this.received_bytes)} MB`\n    }\n\n    /// Download speed value.\n    show_download_speed() {\n        return `${math.format_mb(1000 * this.download_speed)} MB/s`\n    }\n\n    /// Internal function for attaching new fetch responses.\n    input_stream() {\n        let loader = this\n        return new WritableStream({\n            write(t) {\n                loader.on_receive(t.length)\n            },\n        })\n    }\n}\n", "export const DEFAULT_ENTRY_POINT = 'ide'\n\n// =============\n// === Utils ===\n// =============\n\n/** Parses the provided value as boolean. If it was a boolean value, it is left intact. If it was\n * a string 'true' or 'false', it is converted to a boolean value. Otherwise, null is returned. */\n// prettier-ignore\nfunction parseBoolean(value: any): boolean | null {\n    switch(value) {\n        case true: return true\n        case false: return false\n        case 'true': return true\n        case 'false': return false\n        default: return null\n    }\n}\n\n// =============\n// === Param ===\n// =============\n\nexport class Param<T> {\n    value: T\n    setByUser: boolean = false\n    constructor(value: T) {\n        this.value = value\n    }\n}\n\n// ==============\n// === Config ===\n// ==============\n\nexport class Config {\n    /** The URL of the WASM file generated by ensogl-pack. */\n    wasm_url: Param<string> = new Param('main.wasm')\n    /** The URL of the snippets file generated by ensogl-pack. */\n    snippets_url: Param<string> = new Param('snippets.js')\n    /** The application entry point. */\n    entry: Param<string> = new Param(DEFAULT_ENTRY_POINT)\n    /** The EnsoGL theme to be used. */\n    theme: Param<string> = new Param('default')\n    /** Controls whether the visual loader should be visible on the screen when downloading and\n     * compiling WASM sources. By default, the loader is used only if the `entry` is set to\n     * `DEFAULT_ENTRY_POINT`. */\n    use_loader: Param<boolean> = new Param(true)\n    /** The (time needed for WASM download) / (total time including WASM download and WASM app\n     * initialization). In case of small WASM apps, this can be set to 1.0. In case of bigger WASM\n     * apps, it's desired to show the progress bar growing up to e.g. 70% and leaving the last 30% for WASM app init. */\n    loader_download_to_init_ratio: Param<number> = new Param(0.7)\n    /** Controls whether the application should be run in the debug mode. In this mode all logs are\n     * printed to the console. Otherwise, the logs are hidden unless explicitly shown by calling\n     * `showLogs`. */\n    debug: Param<boolean> = new Param(false)\n    /** The maximum time a before main entry point is allowed to run. After this time, an error will\n     * be printed, but the execution will continue. */\n    maxBeforeMainEntryPointsTimeMs: number = 3\n\n    constructor(...overrides: any[]) {\n        for (let override of overrides) {\n            this.updateFromObject(override)\n        }\n        this.resolve()\n    }\n\n    updateFromObject(other: any) {\n        if (other) {\n            for (let key of Object.keys(this)) {\n                let self: any = this\n                let otherVal = other[key]\n                let selfParam = self[key]\n                let selfVal = selfParam.value\n                if (otherVal != null) {\n                    if (typeof selfVal === 'boolean') {\n                        let newVal = parseBoolean(otherVal)\n                        if (newVal == null) {\n                            this.printValueUpdateError(key, selfVal, otherVal)\n                        } else {\n                            selfParam.value = newVal\n                            selfParam.setByUser = true\n                        }\n                    } else {\n                        selfParam.value = otherVal.toString()\n                        selfParam.setByUser = true\n                    }\n                }\n            }\n        }\n    }\n\n    resolve() {\n        if (!this.use_loader.setByUser && this.entry.value !== DEFAULT_ENTRY_POINT) {\n            this.use_loader.value = false\n        }\n    }\n\n    printValueUpdateError(key: string, selfVal: any, otherVal: any) {\n        console.error(\n            `The provided value for Config.${key} is invalid. Expected boolean, got '${otherVal}'. \\\n            Using the default value '${selfVal}' instead.`\n        )\n    }\n}\n", "import * as nodeUtil from 'node:util'\n\nfunction camelToKebabCase(name: string) {\n    return name\n        .split('')\n        .map((letter, idx) => {\n            return letter.toUpperCase() === letter\n                ? `${idx !== 0 ? '-' : ''}${letter.toLowerCase()}`\n                : letter\n        })\n        .join('')\n}\n\nclass Option {\n    value: string | boolean\n    description: string\n    type: string\n    constructor(value: string | boolean, description: string) {\n        this.value = value\n        this.description = description\n        if (value === true || value === false) {\n            this.type = 'boolean'\n        } else {\n            this.type = 'string'\n        }\n    }\n}\n\nexport class Args {\n    help = new Option(false, 'Print help message.')\n    genShadersCode = new Option(\n        false,\n        'Generate a non-optimized shader code for static EnsoGL shape definitions.'\n    )\n\n    parse() {\n        const optionToFieldNameMap: Map<string, string> = new Map()\n        const options: any = {}\n        for (let [fieldName, option] of Object.entries(this)) {\n            let optionName = camelToKebabCase(fieldName)\n            optionToFieldNameMap.set(optionName, fieldName)\n            options[optionName] = { type: option.type, default: option.value }\n        }\n        try {\n            let out = nodeUtil.parseArgs({ options })\n            for (let [optionName, optionValue] of Object.entries(out.values)) {\n                let fieldName = optionToFieldNameMap.get(optionName)\n                // @ts-ignore\n                this[fieldName].value = optionValue\n            }\n        } catch (error) {\n            console.error(`${error.message}. Use --help to learn about possible options.`)\n            process.exit(1)\n        }\n        if (this.help.value) {\n            this.printHelpAndExit()\n        }\n    }\n\n    printHelp() {\n        console.log(`Options:`)\n        for (let [fieldName, option] of Object.entries(this)) {\n            let optionName = camelToKebabCase(fieldName)\n            console.log()\n            console.log(`--${optionName}`)\n            console.log(option.description)\n        }\n    }\n\n    printHelpAndExit() {\n        this.printHelp()\n        process.exit(0)\n    }\n}\n\nexport function parseArgs(): Args {\n    const argParser = new Args()\n    argParser.parse()\n    return argParser\n}\n", "import host from './host'\n\n// =================\n// === LogRouter ===\n// =================\n\nconst consoleLogNames: (keyof Console)[] = [\n    'log',\n    'info',\n    'debug',\n    'warn',\n    'error',\n    'group',\n    'groupCollapsed',\n    'groupEnd',\n]\n\n// FIXME: fix Rust `autoFlush` handling\nclass LogRouter {\n    private buffer: { name: string; args: any[] }[]\n    private readonly console: any\n    autoFlush: boolean\n\n    constructor() {\n        this.buffer = []\n        this.console = {}\n        this.autoFlush = true\n        for (let name of consoleLogNames) {\n            this.console[name] = console[name]\n            const anyConsole = console as any\n            anyConsole[name] = (...args: any[]) => {\n                this.consume(name, args)\n            }\n        }\n    }\n\n    private auto_flush_on() {\n        this.autoFlush = true\n        for (let { name, args } of this.buffer) {\n            this.console[name](...args)\n        }\n        this.buffer = []\n    }\n\n    private consume(name: string, args: any[]) {\n        if (this.autoFlush) {\n            this.console[name](...args)\n        } else {\n            this.buffer.push({ name, args })\n        }\n    }\n\n    hideLogs() {\n        console.log('All subsequent logs will be hidden. Eval `showLogs()` to reveal them.')\n        this.autoFlush = false\n    }\n\n    showLogs() {\n        this.auto_flush_on()\n    }\n}\n\nexport const logRouter = new LogRouter()\n\nhost.exportGlobal({ logRouter, hideLogs: logRouter.hideLogs, showLogs: logRouter.showLogs })\n", "export const MAIN_ENTRY_POINT_PREFIX = 'entry_point_'\nexport const BEFORE_MAIN_ENTRY_POINT_PREFIX = 'before_main_entry_point_'\nexport const NAME_REGEX = new RegExp(String.raw`(?<underscore>__)|(_(?<specialChar>[0-9]+)_)`, 'g')\n\nexport class EntryPoint {\n    prefix: string\n    name: string\n    private constructor(prefix: string, name: string) {\n        this.prefix = prefix\n        this.name = name\n    }\n\n    fullName(): string {\n        return this.prefix + this.name\n    }\n\n    displayName(): string {\n        return this.name.replace(NAME_REGEX, (...args) => {\n            let groups = args.at(-1)\n            if (groups.underscore) {\n                return '_'\n            } else {\n                return String.fromCharCode(parseInt(groups.specialChar))\n            }\n        })\n    }\n\n    static tryAs(prefix: string, fullName: string): EntryPoint | null {\n        if (fullName.startsWith(prefix)) {\n            return new EntryPoint(prefix, fullName.substring(prefix.length))\n        } else {\n            return null\n        }\n    }\n\n    static tryAsMainEntryPoint(fullName: string): EntryPoint | null {\n        return EntryPoint.tryAs(MAIN_ENTRY_POINT_PREFIX, fullName)\n    }\n\n    static tryAsBeforeMainEntryPoint(fullName: string): EntryPoint | null {\n        return EntryPoint.tryAs(BEFORE_MAIN_ENTRY_POINT_PREFIX, fullName)\n    }\n\n    static entryPoints(prefix: string, names: string[]): Map<string, EntryPoint> {\n        return names\n            .map(n => EntryPoint.tryAs(prefix, n))\n            .filter((n): n is EntryPoint => n != null)\n            .reduce((map, n) => {\n                map.set(n.name, n)\n                return map\n            }, new Map())\n    }\n\n    static mainEntryPoints(names: string[]): Map<string, EntryPoint> {\n        return EntryPoint.entryPoints(MAIN_ENTRY_POINT_PREFIX, names)\n    }\n\n    static beforeMainEntryPoints(names: string[]): Map<string, EntryPoint> {\n        return EntryPoint.entryPoints(BEFORE_MAIN_ENTRY_POINT_PREFIX, names)\n    }\n}\n\nexport function wasmFunctions(wasm: any): string[] {\n    let names = Object.getOwnPropertyNames(wasm)\n    names.sort()\n    return names\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "App", "src_default", "__toCommonJS", "new_top_level_div", "node", "fs_exports", "__export", "readFile", "__reExport", "import_fs", "browser", "node", "urlParams", "exportGlobal", "exports", "key", "value", "host_default", "_Colors", "text", "level", "Colors", "_Logger", "fn", "color", "args", "strArgs", "arg", "c", "host_default", "coloredArgs", "indent", "indentedArgs", "out", "i", "box", "styleStart", "message", "f", "Logger", "Task", "message", "Logger", "ms", "ms_rounded", "task", "f", "out", "readFile", "path", "options", "Task", "fs", "ease_in_out_quad", "t", "polar_to_cartesian", "radius", "angle_degrees", "angle", "format_mb", "bytes", "new_svg", "width", "height", "str", "arc", "radius", "end_angle", "start_angle", "start", "polar_to_cartesian", "end", "large_arc", "bg_color", "loader_color", "top_layer_index", "ProgressIndicator", "cfg", "new_top_level_div", "center", "progress_bar_svg", "progress_bar", "resolve", "width", "height", "alpha", "inner_radius", "outer_radius", "mid_radius", "bar_width", "new_svg", "parent", "value", "min_angle", "angle_span", "mask_angle", "corner_pos", "polar_to_cartesian", "arc", "val", "indicator", "reject", "show_step", "ease_in_out_quad", "rotation", "rotate_step", "timestamp", "Loader", "resources", "missing_content_length", "resource", "content_length", "body", "new_bytes", "time", "time_diff", "percent", "speed", "received", "indicator_progress", "format_mb", "loader", "DEFAULT_ENTRY_POINT", "parseBoolean", "value", "Param", "Config", "overrides", "override", "other", "key", "self", "otherVal", "selfParam", "selfVal", "newVal", "nodeUtil", "camelToKebabCase", "name", "letter", "idx", "Option", "value", "description", "Args", "optionToFieldNameMap", "options", "fieldName", "option", "optionName", "out", "optionValue", "error", "parseArgs", "argParser", "consoleLogNames", "LogRouter", "name", "anyConsole", "args", "logRouter", "host_default", "MAIN_ENTRY_POINT_PREFIX", "BEFORE_MAIN_ENTRY_POINT_PREFIX", "NAME_REGEX", "EntryPoint", "prefix", "name", "args", "groups", "fullName", "names", "n", "map", "wasmFunctions", "wasm", "PackageInfo", "info", "infoObject", "Logger", "key", "value", "load_wasm", "config", "host_default", "task", "Task", "snippets_fetch", "wasm_fetch", "loader", "Loader", "download_size", "snippets_code", "wasm", "init_wasm", "readFile", "wasm_main", "show_debug_screen", "msg", "entryPoints", "EntryPoint", "wasmFunctions", "debug_screen_div", "new_top_level_div", "newDiv", "newContent", "ul", "entry_point", "li", "a", "linkText", "printScamWarning", "headerCSS", "headerCSS1", "headerCSS2", "msgCSS", "msg1", "msg2", "style_root", "root", "disableContextMenu", "e", "initBrowser", "logRouter", "App", "appArgs", "_a", "_b", "parseArgs", "inputConfig", "Config", "count", "entryPoint", "time", "_", "entryPointName", "out", "app", "src_default", "registerGetShadersRustFn", "fn"]
}
