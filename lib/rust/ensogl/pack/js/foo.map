{
  "version": 3,
  "sources": ["src/host.ts", "src/logger.ts", "src/task.ts", "src/fs.ts", "src/index.ts", "src/animation.ts", "src/html_utils.ts", "src/math.ts", "src/svg.ts", "src/loader.ts", "src/config.ts", "src/arg-parser.ts"],
  "sourcesContent": ["/** Resolves to `true` if we are running the script in the browser. If it's node, resolves to\n * `false`. */\nconst browser = typeof window !== 'undefined'\n\n/** Resolves to `true` if we are running the script in node. If it's a browser, resolves to\n * `false`. */\nconst node = !browser\n\n/** The global object. In case of a browser, this is the window. In case of node, it's the built-in\n * `global` object. */\n// const global = {}\nglobal ??= window\n\nexport default {\n    global,\n    browser,\n    node,\n}\n", "import host from './host'\n\nexport default class Logger {\n    private static indent_lvl: number = 0\n\n    private static message(fn: string, ...args: any[]) {\n        const c: any = console\n        if (host.browser) {\n            c[fn](...args)\n        } else {\n            if (Logger.indent_lvl > 0) {\n                c[fn](Logger.indent_shorter(), ...args)\n            } else {\n                c[fn](...args)\n            }\n        }\n    }\n\n    private static indent(): string {\n        return '\u2502 '.repeat(Logger.indent_lvl)\n    }\n\n    private static indent_shorter(): string {\n        return Logger.indent().slice(0, -1)\n    }\n\n    /** Log a message. */\n    static log(...args: any[]) {\n        Logger.message('log', ...args)\n    }\n\n    /** Log a warning. */\n    static warn(...args: any[]) {\n        Logger.message('warn', ...args)\n    }\n\n    /** Log an error. */\n    static error(...args: any[]) {\n        Logger.message('error', ...args)\n    }\n\n    /** Start a group and log a message. */\n    static group(...args: any[]) {\n        if (host.browser) {\n            console.group(...args)\n        } else {\n            console.log(`${Logger.indent()}\u256D`, ...args)\n        }\n        Logger.indent_lvl += 1\n    }\n\n    /** Start a group and log a message. */\n    static groupCollapsed(...args: any[]) {\n        if (host.browser) {\n            console.groupCollapsed(...args)\n        } else {\n            console.log(`${Logger.indent()}\u256D`, ...args)\n        }\n        Logger.indent_lvl += 1\n    }\n\n    /** Log a message and end the last opened group. */\n    static groupEnd(...args: any[]) {\n        if (Logger.indent_lvl > 0) {\n            Logger.indent_lvl -= 1\n            if (host.browser) {\n                if (args.length > 0) {\n                    console.log(...args)\n                }\n                console.groupEnd()\n            } else {\n                console.log(`${Logger.indent()}\u2570`, ...args)\n            }\n        } else {\n            Logger.log(...args)\n        }\n    }\n\n    static with<T>(message: string, f: () => T): T {\n        Logger.group(message)\n        let out = f()\n        Logger.groupEnd()\n        return out\n    }\n\n    static withCollapsed<T>(message: string, f: () => T): T {\n        Logger.groupCollapsed(message)\n        let out = f()\n        Logger.groupEnd()\n        return out\n    }\n\n    static async asyncWith<T>(message: string, f: () => Promise<T>): Promise<T> {\n        Logger.group(message)\n        let out = await f()\n        Logger.groupEnd()\n        return out\n    }\n\n    static async asyncWithCollapsed<T>(message: string, f: () => Promise<T>): Promise<T> {\n        Logger.groupCollapsed(message)\n        let out = await f()\n        Logger.groupEnd()\n        return out\n    }\n}\n", "import Logger from './logger'\n\nexport default class Task {\n    message: string\n    startTime: number = 0\n    endTime: number = 0\n    constructor(message: string) {\n        this.message = message\n    }\n\n    startx() {\n        Logger.group(`${this.message}`)\n        this.startTime = performance.now()\n    }\n\n    end() {\n        this.endTime = performance.now()\n        let ms = Math.round((this.endTime - this.startTime) * 100) / 100\n        Logger.groupEnd(`Done in ${ms} ms.`)\n    }\n\n    static start(message: string): Task {\n        const task = new Task(message)\n        task.startx()\n        return task\n    }\n\n    static with<T>(message: string, f: () => T): T {\n        let task = Task.start(message)\n        let out = f()\n        task.end()\n        return out\n    }\n\n    static async asyncWith<T>(message: string, f: () => Promise<T>): Promise<T> {\n        let task = Task.start(message)\n        let out = await f()\n        task.end()\n        return out\n    }\n}\n", "import { ObjectEncodingOptions, OpenMode, PathLike } from 'node:fs'\nimport { FileHandle } from 'fs/promises'\nimport { Abortable } from 'node:events'\nimport { promises as fs } from 'fs'\n\nexport * from 'fs/promises'\nimport LoggedTask from './task'\n\nexport async function readFile(\n    path: PathLike | FileHandle,\n    options?:\n        | ({\n              encoding?: null | undefined\n              flag?: OpenMode | undefined\n          } & Abortable)\n        | null\n): Promise<Buffer>\n\nexport async function readFile(\n    path: PathLike | FileHandle,\n    options:\n        | ({\n              encoding: BufferEncoding\n              flag?: OpenMode | undefined\n          } & Abortable)\n        | BufferEncoding\n): Promise<string>\n\nexport async function readFile(\n    path: PathLike | FileHandle,\n    options?:\n        | (ObjectEncodingOptions &\n              Abortable & {\n                  flag?: OpenMode | undefined\n              })\n        | BufferEncoding\n        | null\n): Promise<string | Buffer> {\n    return LoggedTask.asyncWith(`Reading file '${path}'.`, async () => {\n        return await fs.readFile(path, options)\n    })\n}\n", "/// This module is responsible for loading the WASM binary, its dependencies, and providing the\n/// user with a visual representation of this process (welcome screen). It also implements a view\n/// allowing to choose a debug rendering test from.\n\nimport Loader from './loader'\nimport * as html_utils from './html_utils'\n\nimport host from './host'\nimport Task from './task'\nimport Logger from './logger'\nimport { Config, DEFAULT_ENTRY_POINT } from './config'\nimport ArgParser from './arg-parser'\n\n// import * as fs from 'fs'\nlet fs = require('./fs')\n\n// ==================\n// === Global API ===\n// ==================\n\nexport default class App {\n    async run(inputConfig: Object): Promise<void> {\n        if (host.node) {\n            Task.asyncWith('Running the program.', async () => {\n                await this.runBody(inputConfig)\n            })\n        } else {\n            await this.runBody(inputConfig)\n        }\n    }\n\n    private async runBody(inputConfig: Object): Promise<void> {\n        const config = new Config()\n        config.updateFromObject(inputConfig)\n        config.updateFromObject(urlParams())\n        config.resolve()\n        await runEntryPoint(config)\n    }\n\n    log(event: string, data?: any) {}\n}\n\n// ========================\n// === Content Download ===\n// ========================\n\n/** Loads the WASM binary and its dependencies. If it's run in the browser, the files will be\n * downloaded from a server and a loading progress indicator will be shown. If it's run in node, the\n * files will be read from disk. After the files are fetched, the WASM module is compiled and\n * initialized. */\nasync function load_wasm(config: Config) {\n    if (host.browser) {\n        let task = Task.start(`Downloading files ${config.snippets_url} and ${config.wasm_url}.`)\n        let snippets_fetch = await fetch(config.snippets_url.value)\n        let wasm_fetch = await fetch(config.wasm_url.value)\n        let loader = new Loader([snippets_fetch, wasm_fetch], config)\n        loader.done.then(() => task.end())\n        // FIXME:\n        let download_size = loader.show_total_bytes()\n\n        let snippets_code = await snippets_fetch.text()\n        let wasm = await init_wasm(snippets_code, wasm_fetch)\n        await loader.initialized\n        return { wasm, loader }\n    } else {\n        let snippets_code = await fs.readFile(config.snippets_url.value, 'utf8')\n        let wasm_main = await fs.readFile(config.wasm_url.value)\n        let wasm = await init_wasm(snippets_code, wasm_main)\n        let loader = null\n        return { wasm, loader }\n    }\n}\n\nasync function init_wasm(snippets_code: string, wasm: Buffer | Response): Promise<any> {\n    return await Task.asyncWith('Wasm compilation.', async () => {\n        let snippets_fn = Function(\n            `let module = {}\n             ${snippets_code}\n             module.exports.init = pkg_default \n             return module.exports`\n        )()\n        return await snippets_fn.init(wasm)\n    })\n}\n\n// ====================\n// === Debug Screen ===\n// ====================\n\nconst MAIN_ENTRY_POINT_PREFIX = 'entry_point_'\nconst BEFORE_MAIN_ENTRY_POINT_PREFIX = 'before_main_entry_point_'\n\nconst NAME_REGEX = new RegExp(String.raw`(?<underscore>__)|(_(?<specialChar>[0-9]+)_)`, 'g')\n\nclass EntryPoint {\n    prefix: string\n    name: string\n    private constructor(prefix: string, name: string) {\n        this.prefix = prefix\n        this.name = name\n    }\n\n    fullName(): string {\n        return this.prefix + this.name\n    }\n\n    displayName(): string {\n        return this.name.replace(NAME_REGEX, (...args) => {\n            let groups = args.at(-1)\n            if (groups.underscore) {\n                return '_'\n            } else {\n                return String.fromCharCode(parseInt(groups.specialChar))\n            }\n        })\n    }\n\n    static tryAs(prefix: string, fullName: string): EntryPoint | null {\n        if (fullName.startsWith(prefix)) {\n            return new EntryPoint(prefix, fullName.substring(prefix.length))\n        } else {\n            return null\n        }\n    }\n\n    static tryAsMainEntryPoint(fullName: string): EntryPoint | null {\n        return EntryPoint.tryAs(MAIN_ENTRY_POINT_PREFIX, fullName)\n    }\n\n    static tryAsBeforeMainEntryPoint(fullName: string): EntryPoint | null {\n        return EntryPoint.tryAs(BEFORE_MAIN_ENTRY_POINT_PREFIX, fullName)\n    }\n\n    static entryPoints(prefix: string, names: string[]): Map<string, EntryPoint> {\n        return names\n            .map(n => EntryPoint.tryAs(prefix, n))\n            .filter((n): n is EntryPoint => n != null)\n            .reduce((map, n) => {\n                map.set(n.name, n)\n                return map\n            }, new Map())\n    }\n\n    static mainEntryPoints(names: string[]): Map<string, EntryPoint> {\n        return EntryPoint.entryPoints(MAIN_ENTRY_POINT_PREFIX, names)\n    }\n\n    static beforeMainEntryPoints(names: string[]): Map<string, EntryPoint> {\n        return EntryPoint.entryPoints(BEFORE_MAIN_ENTRY_POINT_PREFIX, names)\n    }\n}\n\nfunction wasmFunctions(wasm: any): string[] {\n    let names = Object.getOwnPropertyNames(wasm)\n    names.sort()\n    return names\n}\n\n/// Displays a debug screen which allows the user to run one of predefined debug examples.\nfunction show_debug_screen(wasm: any, msg: string) {\n    Logger.log('show_debug_screen')\n    let entryPoints = EntryPoint.mainEntryPoints(wasmFunctions(wasm))\n\n    if (msg === '' || msg === null || msg === undefined) {\n        msg = ''\n    }\n    let debug_screen_div = html_utils.new_top_level_div()\n    let newDiv = document.createElement('div')\n    let newContent = document.createTextNode(msg + 'Available entry points:')\n    let ul = document.createElement('ul')\n    debug_screen_div.style.position = 'absolute'\n    debug_screen_div.style.zIndex = '1'\n    newDiv.appendChild(newContent)\n    debug_screen_div.appendChild(newDiv)\n    newDiv.appendChild(ul)\n\n    for (let entry_point of entryPoints.values()) {\n        let li = document.createElement('li')\n        let a = document.createElement('a')\n        let linkText = document.createTextNode(entry_point.name)\n        ul.appendChild(li)\n        a.appendChild(linkText)\n        a.title = entry_point.name\n        a.href = '?entry=' + entry_point.name\n        li.appendChild(a)\n    }\n}\n\n// ====================\n// === Scam Warning ===\n// ====================\n\nfunction printScamWarning() {\n    let headerCSS = `\n        color : white;\n        background : crimson;\n        display : block;\n        border-radius : 8px;\n        font-weight : bold;\n        padding: 10px 20px 10px 20px;\n    `\n    let headerCSS1 = headerCSS + 'font-size : 46px;'\n    let headerCSS2 = headerCSS + 'font-size : 20px;'\n    let msgCSS = 'font-size:16px;'\n\n    let msg1 =\n        'This is a browser feature intended for developers. If someone told you to ' +\n        'copy-paste something here, it is a scam and will give them access to your ' +\n        'account and data.'\n    let msg2 =\n        'See https://github.com/enso-org/enso/blob/develop/docs/security/selfxss.md for more ' +\n        'information.'\n    console.log('%cStop!', headerCSS1)\n    console.log('%cYou may be victim of a scam!', headerCSS2)\n    console.log('%c' + msg1, msgCSS)\n    console.log('%c' + msg2, msgCSS)\n}\n\n// ======================\n// === Logs Buffering ===\n// ======================\n\nconst logsFns = ['log', 'info', 'debug', 'warn', 'error', 'group', 'groupCollapsed', 'groupEnd']\n\nclass LogRouter {\n    private buffer: any[]\n    private readonly raw: {}\n    autoFlush: boolean\n\n    constructor() {\n        this.buffer = []\n        this.raw = {}\n        this.autoFlush = true\n        // @ts-ignore\n        console.autoFlush = true\n        for (let name of logsFns) {\n            // @ts-ignore\n            this.raw[name] = console[name]\n            // @ts-ignore\n            console[name] = (...args) => {\n                this.handle(name, args)\n            }\n        }\n    }\n\n    auto_flush_on() {\n        this.autoFlush = true\n        // @ts-ignore\n        console.autoFlush = true\n        for (let { name, args } of this.buffer) {\n            // @ts-ignore\n            this.raw[name](...args)\n        }\n        this.buffer = []\n    }\n\n    handle(name: string, args: any[]) {\n        if (this.autoFlush) {\n            // @ts-ignore\n            this.raw[name](...args)\n        } else {\n            this.buffer.push({ name, args })\n        }\n\n        // The following code is just a hack to discover if the logs start with `[E]` which\n        // indicates errors from Rust logger.\n        if (name == 'error') {\n            this.handleError(...args)\n        } else if (name == 'log') {\n            let firstArg = args[0]\n            if (firstArg !== undefined) {\n                if (!(typeof firstArg === 'string' || firstArg instanceof String)) {\n                    firstArg = firstArg.toString()\n                }\n                if (firstArg.startsWith('%c')) {\n                    let firstArgBody = firstArg.slice(2)\n                    let bodyStartIndex = firstArgBody.indexOf('%c')\n                    if (bodyStartIndex !== -1) {\n                        let body = firstArgBody.slice(bodyStartIndex + 3)\n                        let is_error = body.startsWith('[E]')\n                        if (is_error) {\n                            this.handleError(body)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    handleError(...args: any[]) {\n        Logger.log('error', args)\n    }\n}\n\nlet logRouter = new LogRouter()\n\nfunction hideLogs() {\n    console.log('All subsequent logs will be hidden. Eval `showLogs()` to reveal them.')\n    logRouter.autoFlush = false\n    // @ts-ignore\n    console.autoFlush = false\n}\n\nfunction showLogs() {\n    logRouter.auto_flush_on()\n}\n\n// @ts-ignore\n// window.showLogs = showLogs\n\n// ========================\n// === Main Entry Point ===\n// ========================\n\nfunction style_root() {\n    let root = document.getElementById('root')\n    if (root != null) {\n        root.style.backgroundColor = 'rgb(249,250,251)'\n    }\n}\n\nfunction disableContextMenu() {\n    document.body.addEventListener('contextmenu', e => {\n        e.preventDefault()\n    })\n}\n\nfunction registerGetShadersRustFn(fn: any) {\n    console.log('!!!!!!!!!!!!!!!!!!!')\n    let out = fn()\n    console.log('got', out)\n}\n\n// @ts-ignore\nhost.global.registerGetShadersRustFn = registerGetShadersRustFn\n\nfunction initBrowser(config: Config) {\n    style_root()\n    printScamWarning()\n    disableContextMenu()\n    if (!config.debug) {\n        hideLogs()\n    }\n}\n\n/// Main entry point. Loads WASM, initializes it, chooses the scene to run.\nasync function runEntryPoint(config: Config) {\n    // @ts-ignore\n    // API[globalConfig.windowAppScopeConfigName] = config\n\n    // // Build data injected during the build process. See `webpack.config.js` for the source.\n    // // @ts-ignore\n    // const hash = GIT_HASH\n    // Logger.log('git_hash', { hash })\n    // // @ts-ignore\n    // const buildInfo = BUILD_INFO\n    // Logger.log('build_information', buildInfo)\n    // // @ts-ignore\n    // const status = GIT_STATUS\n    // Logger.log('git_status', { status })\n\n    let args = new ArgParser()\n    args.parse()\n\n    if (host.browser) {\n        initBrowser(config)\n    }\n\n    let { wasm, loader } = await load_wasm(config)\n\n    const wasmFns = wasmFunctions(wasm)\n    const mainEntryPoints = EntryPoint.mainEntryPoints(wasmFns)\n    const beforeMainEntryPoints = EntryPoint.beforeMainEntryPoints(wasmFns)\n\n    function runBeforeMainEntryPoints() {\n        if (beforeMainEntryPoints.size != 0) {\n            let count = beforeMainEntryPoints.size\n            Task.with(`Running ${count} before main entry points.`, () => {\n                for (let entryPoint of beforeMainEntryPoints.values()) {\n                    Task.with(`Running ${entryPoint.displayName()}.`, () => {\n                        wasm[entryPoint.fullName()]()\n                    })\n                }\n            })\n            // if (ms > 30) {\n            //     console.error(\n            //         `Before main functions took ${ms} milliseconds to run. This is too long. Before main functions should be used for fast initialization only.`\n            //     )\n            // }\n        }\n    }\n\n    Logger.log('wasm_loaded')\n    if (config.entry) {\n        let entryPoint = mainEntryPoints.get(config.entry.value)\n        if (entryPoint) {\n            runBeforeMainEntryPoints()\n            console.log(`Running the main entry point.`)\n            // Loader will be removed by IDE after its initialization.\n            // All other code paths need to call `loader.destroy()`.\n            wasm[entryPoint.fullName()]()\n        } else {\n            // loader.destroy()\n            // show_debug_screen(wasm, \"Unknown entry point '\" + config.entry + \"'. \")\n            runBeforeMainEntryPoints()\n            // Loader will be removed by IDE after its initialization.\n            // All other code paths need to call `loader.destroy()`.\n            // fn()\n        }\n    } else {\n        // loader.destroy()\n        show_debug_screen(wasm, '')\n    }\n}\n\nfunction urlParams(): any {\n    if (host.browser) {\n        const urlParams = new URLSearchParams(window.location.search)\n        return Object.fromEntries(urlParams.entries())\n    } else {\n        return {}\n    }\n}\n\nnew App().run({})\n", "/// This module defines a simple set of animation utils. Follow the link to learn more:\n/// https://easings.net/en\n\n// =================\n// === Animation ===\n// =================\n\nexport function ease_in_out_cubic(t: number): number {\n    return t < 0.5 ? 4 * t * t * t : 1 - ((-2 * t + 2) * (-2 * t + 2) * (-2 * t + 2)) / 2\n}\n\nexport function ease_in_out_quad(t: number): number {\n    return t < 0.5 ? 2 * t * t : 1 - ((-2 * t + 2) * (-2 * t + 2)) / 2\n}\n\nexport function ease_out_quart(t: number): number {\n    return 1 - --t * t * t * t\n}\n", "// ==================\n// === HTML Utils ===\n// ==================\n\n/** Creates a new top-level div which occupy full size of its parent's space. */\nexport function new_top_level_div(): HTMLDivElement {\n    let node = document.createElement('div')\n    node.style.width = '100%'\n    node.style.height = '100%'\n    document.body.appendChild(node)\n    return node\n}\n", "/// This module defines a common math operations.\n\n// ============\n// === Math ===\n// ============\n\n/// Converts the polar coordinates to cartesian ones.\nexport function polar_to_cartesian(\n    radius: number,\n    angle_degrees: number\n): { x: number; y: number } {\n    let angle = ((angle_degrees - 90) * Math.PI) / 180.0\n    return {\n        x: radius * Math.cos(angle),\n        y: radius * Math.sin(angle),\n    }\n}\n\n/// Format bytes as megabytes with a single precision number.\nexport function format_mb(bytes: number): number {\n    return Math.round((10 * bytes) / (1024 * 1024)) / 10\n}\n", "/// This module defines a set of utils for generating and modifying the SVG images.\n\nimport * as math from './math.js'\n\n// ===========\n// === SVG ===\n// ===========\n\n/// Defines a new SVG with the provided source.\nexport function new_svg(width: number, height: number, str: string): string {\n    return `\n    <svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n         height=\"${height}\" width=\"${width}\" viewBox=\"0 0 ${height} ${width}\">\n    ${str}\n    </svg>`\n}\n\n/// Returns SVG code for an arc with a defined radius and angle.\nexport function arc(radius: number, end_angle: number): string {\n    let start_angle = 0\n    if (end_angle < 0) {\n        start_angle = end_angle\n        end_angle = 0\n    }\n    let start = math.polar_to_cartesian(radius, end_angle)\n    let end = math.polar_to_cartesian(radius, start_angle)\n    let large_arc = end_angle - start_angle <= 180 ? '0' : '1'\n    return `M 0 0 L ${start.x} ${start.y} A ${radius} ${radius} 0 ${large_arc} 0 ${end.x} ${end.y}`\n}\n", "import * as animation from './animation.js'\nimport * as html_utils from './html_utils.js'\nimport * as math from './math.js'\nimport * as svg from './svg.js'\nimport Logger from './logger'\nimport Task from './task'\nimport { Config } from './config'\n\n// =========================\n// === ProgressIndicator ===\n// =========================\n\nlet bg_color = 'rgb(249,250,251)'\nlet loader_color = '#303030'\nlet top_layer_index = '1000'\n\n/// Visual representation of the loader.\nclass ProgressIndicator {\n    dom: HTMLDivElement\n    progress_indicator: HTMLElement\n    progress_indicator_mask: HTMLElement\n    progress_indicator_corner: HTMLElement\n    initialized: Promise<void>\n    destroyed: boolean\n\n    constructor(cfg: Config) {\n        this.dom = html_utils.new_top_level_div()\n        this.dom.id = 'loader'\n        this.dom.style.position = 'fixed'\n        this.dom.style.top = '0'\n        this.dom.style.left = '0'\n        // In the Cloud UI, all layers are stacked, and the progress\n        // indicator must be placed at the top layer.\n        this.dom.style.zIndex = top_layer_index\n\n        let center = document.createElement('div')\n        center.style.width = '100%'\n        center.style.height = '100%'\n        center.style.display = 'flex'\n        center.style.justifyContent = 'center'\n        center.style.alignItems = 'center'\n        this.dom.appendChild(center)\n\n        let progress_bar_svg = this.init_svg()\n        let progress_bar = document.createElement('div')\n        progress_bar.innerHTML = progress_bar_svg\n        center.appendChild(progress_bar)\n\n        //@ts-ignore\n        this.progress_indicator = document.getElementById('progress_indicator')\n        //@ts-ignore\n        this.progress_indicator_mask = document.getElementById('progress_indicator_mask')\n        //@ts-ignore\n        this.progress_indicator_corner = document.getElementById('progress_indicator_corner')\n\n        this.set(0)\n        this.set_opacity(0)\n\n        if (cfg.use_loader) {\n            this.initialized = this.animate_show()\n        } else {\n            this.initialized = new Promise(resolve => {\n                resolve()\n            })\n        }\n        this.animate_rotation()\n        this.destroyed = false\n    }\n\n    /// Initializes the SVG view.\n    init_svg() {\n        let width = 128\n        let height = 128\n        let alpha = 0.9\n        let inner_radius = 48\n        let outer_radius = 60\n        let mid_radius = (inner_radius + outer_radius) / 2\n        let bar_width = outer_radius - inner_radius\n\n        return svg.new_svg(\n            width,\n            height,\n            `\n            <defs>\n                <g id=\"progress_bar\">\n                    <circle fill=\"${loader_color}\" r=\"${outer_radius}\"                               />\n                    <circle fill=\"${bg_color}\"     r=\"${inner_radius}\"                               />\n                    <path   fill=\"${bg_color}\"     opacity=\"${alpha}\" id=\"progress_indicator_mask\"   />\n                    <circle fill=\"${loader_color}\" r=\"${\n                bar_width / 2\n            }\" id=\"progress_indicator_corner\" />\n                    <circle fill=\"${loader_color}\" r=\"${\n                bar_width / 2\n            }\" cy=\"-${mid_radius}\"            />\n                </g>\n            </defs>\n            <g transform=\"translate(${width / 2},${height / 2})\">\n                <g transform=\"rotate(0,0,0)\" id=\"progress_indicator\">\n                    <use xlink:href=\"#progress_bar\"></use>\n                </g>\n            </g>\n        `\n        )\n    }\n\n    /// Destroys the component. Removes it from the stage and destroys attached callbacks.\n    destroy() {\n        let parent = this.dom.parentNode\n        if (parent) {\n            parent.removeChild(this.dom)\n        }\n        this.destroyed = true\n    }\n\n    /// Set the value of the loader [0..1].\n    set(value: number) {\n        let min_angle = 0\n        let max_angle = 359\n        let angle_span = max_angle - min_angle\n        let mask_angle = (1 - value) * angle_span - min_angle\n        let corner_pos = math.polar_to_cartesian(54, -mask_angle)\n        this.progress_indicator_mask.setAttribute('d', svg.arc(128, -mask_angle))\n        this.progress_indicator_corner.setAttribute('cx', `${corner_pos.x}`)\n        this.progress_indicator_corner.setAttribute('cy', `${corner_pos.y}`)\n    }\n\n    /// Set the opacity of the loader.\n    set_opacity(val: number) {\n        this.progress_indicator.setAttribute('opacity', `${val}`)\n    }\n\n    /// Set the rotation of the loader (angles).\n    set_rotation(val: number) {\n        this.progress_indicator.setAttribute('transform', `rotate(${val},0,0)`)\n    }\n\n    /// Start show animation. It is used after the loader is created.\n    animate_show(): Promise<void> {\n        let indicator = this\n        return new Promise(function (resolve, reject) {\n            let alpha = 0\n            function show_step() {\n                if (alpha > 1) {\n                    alpha = 1\n                }\n                indicator.set_opacity(animation.ease_in_out_quad(alpha))\n                alpha += 0.02\n                if (alpha < 1) {\n                    window.requestAnimationFrame(show_step)\n                } else {\n                    resolve()\n                }\n            }\n            window.requestAnimationFrame(show_step)\n        })\n    }\n\n    /// Start the spinning animation.\n    animate_rotation() {\n        let indicator = this\n        let rotation = 0\n        function rotate_step(timestamp: DOMHighResTimeStamp) {\n            indicator.set_rotation(rotation)\n            rotation += 6\n            if (!indicator.destroyed) {\n                window.requestAnimationFrame(rotate_step)\n            }\n        }\n        window.requestAnimationFrame(rotate_step)\n    }\n}\n\n// ==============\n// === Loader ===\n// ==============\n\n/// The main loader class. It connects to the provided fetch responses and tracks their status.\nexport default class Loader {\n    indicator: ProgressIndicator\n    total_bytes: number\n    received_bytes: number\n    download_speed: number\n    last_receive_time: number\n    initialized: Promise<void>\n    cap_progress_at: number\n    done: Promise<void>\n    done_resolve: (value: void | PromiseLike<void>) => void\n    constructor(resources: Response[], cfg: Config) {\n        this.indicator = new ProgressIndicator(cfg)\n        this.total_bytes = 0\n        this.received_bytes = 0\n        this.download_speed = 0\n        this.last_receive_time = performance.now()\n        this.initialized = this.indicator.initialized\n        this.cap_progress_at = cfg.loader_download_to_init_ratio.value\n\n        this.done = new Promise(resolve => {\n            this.done_resolve = resolve\n        })\n\n        let missing_content_length = false\n        for (let resource of resources) {\n            let content_length = resource.headers.get('content-length')\n            if (content_length) {\n                this.total_bytes += parseInt(content_length)\n            } else {\n                missing_content_length = true\n            }\n            let body = resource.clone().body\n            if (body) {\n                body.pipeTo(this.input_stream())\n            } else {\n                // FIXME: error\n            }\n        }\n\n        if (missing_content_length || Number.isNaN(this.total_bytes)) {\n            console.error(\n                \"Loader error. Server is not configured to send the 'Content-Length' metadata.\"\n            )\n            this.total_bytes = 0\n        }\n    }\n\n    /// The current loading progress [0..1].\n    value() {\n        if (this.total_bytes == 0) {\n            return 0.3\n        } else {\n            return this.received_bytes / this.total_bytes\n        }\n    }\n\n    /// Returns true if the loader finished.\n    is_done() {\n        return this.received_bytes == this.total_bytes\n    }\n\n    /// Removes the loader with it's dom element.\n    destroy() {\n        this.indicator.destroy()\n    }\n\n    /// Callback run on every new received byte stream.\n    on_receive(new_bytes: number) {\n        this.received_bytes += new_bytes\n        let time = performance.now()\n        let time_diff = time - this.last_receive_time\n        this.download_speed = new_bytes / time_diff\n        this.last_receive_time = time\n\n        let percent = this.show_percentage_value()\n        let speed = this.show_download_speed()\n        let received = this.show_received_bytes()\n        console.log(`${percent}% (${received}) (${speed}).`)\n\n        let indicator_progress = this.value() * this.cap_progress_at\n        this.indicator.set(indicator_progress)\n        if (this.is_done()) {\n            this.done_resolve()\n        }\n    }\n\n    /// Download percentage value.\n    show_percentage_value() {\n        return Math.round(100 * this.value())\n    }\n\n    /// Download total size value.\n    show_total_bytes() {\n        return `${math.format_mb(this.total_bytes)} MB`\n    }\n\n    /// Download received bytes value.\n    show_received_bytes() {\n        return `${math.format_mb(this.received_bytes)} MB`\n    }\n\n    /// Download speed value.\n    show_download_speed() {\n        return `${math.format_mb(1000 * this.download_speed)} MB/s`\n    }\n\n    /// Internal function for attaching new fetch responses.\n    input_stream() {\n        let loader = this\n        return new WritableStream({\n            write(t) {\n                loader.on_receive(t.length)\n            },\n        })\n    }\n}\n", "export const DEFAULT_ENTRY_POINT = 'ide'\n\n// =============\n// === Utils ===\n// =============\n\n/** Parses the provided value as boolean. If it was a boolean value, it is left intact. If it was\n * a string 'true' or 'false', it is converted to a boolean value. Otherwise, null is returned. */\n// prettier-ignore\nfunction parseBoolean(value: any): boolean | null {\n    switch(value) {\n        case true: return true\n        case false: return false\n        case 'true': return true\n        case 'false': return false\n        default: return null\n    }\n}\n\n// =============\n// === Param ===\n// =============\n\nexport class Param<T> {\n    value: T\n    setByUser: boolean = false\n    constructor(value: T) {\n        this.value = value\n    }\n}\n\n// ==============\n// === Config ===\n// ==============\n\nexport class Config {\n    /** The URL of the WASM file generated by ensogl-pack. */\n    public wasm_url: Param<string> = new Param('main.wasm')\n    /** The URL of the snippets file generated by ensogl-pack. */\n    public snippets_url: Param<string> = new Param('snippets.js')\n    /** The application entry point. */\n    public entry: Param<string> = new Param(DEFAULT_ENTRY_POINT)\n    /** The EnsoGL theme to be used. */\n    public theme: Param<string> = new Param('default')\n    /** Controls whether the visual loader should be visible on the screen when downloading and\n     * compiling WASM sources. By default, the loader is used only if the `entry` is set to\n     * `DEFAULT_ENTRY_POINT`. */\n    public use_loader: Param<boolean> = new Param(true)\n    /** The (time needed for WASM download) / (total time including WASM download and WASM app\n     * initialization). In case of small WASM apps, this can be set to 1.0. In case of bigger WASM\n     * apps, it's desired to show the progress bar growing up to e.g. 70% and leaving the last 30% for WASM app init. */\n    public loader_download_to_init_ratio: Param<number> = new Param(0.7)\n    /** Controls whether the application should be run in the debug mode. In this mode all logs are\n     * printed to the console. Otherwise, the logs are hidden unless explicitly shown by calling\n     * `showLogs`. */\n    public debug: Param<boolean> = new Param(false)\n\n    updateFromObject(other: any) {\n        for (let key of Object.keys(this)) {\n            let self: any = this\n            let otherVal = other[key]\n            let selfParam = self[key]\n            let selfVal = selfParam.value\n            if (otherVal != null) {\n                if (typeof selfVal === 'boolean') {\n                    let newVal = parseBoolean(otherVal)\n                    if (newVal == null) {\n                        this.printValueUpdateError(key, selfVal, otherVal)\n                    } else {\n                        selfParam.value = newVal\n                        selfParam.setByUser = true\n                    }\n                } else {\n                    selfParam.value = otherVal.toString()\n                    selfParam.setByUser = true\n                }\n            }\n        }\n    }\n\n    resolve() {\n        if (!this.use_loader.setByUser && this.entry.value !== DEFAULT_ENTRY_POINT) {\n            this.use_loader.value = false\n        }\n    }\n\n    printValueUpdateError(key: string, selfVal: any, otherVal: any) {\n        console.error(\n            `The provided value for Config.${key} is invalid. Expected boolean, got '${otherVal}'. \\\n            Using the default value '${selfVal}' instead.`\n        )\n    }\n}\n", "import { parseArgs } from 'node:util'\n\nfunction camelToKebabCase(name: string) {\n    return name\n        .split('')\n        .map((letter, idx) => {\n            return letter.toUpperCase() === letter\n                ? `${idx !== 0 ? '-' : ''}${letter.toLowerCase()}`\n                : letter\n        })\n        .join('')\n}\n\nclass Option {\n    value: string | boolean\n    description: string\n    type: string\n    constructor(value: string | boolean, description: string) {\n        this.value = value\n        this.description = description\n        if (value === true || value === false) {\n            this.type = 'boolean'\n        } else {\n            this.type = 'string'\n        }\n    }\n}\n\nexport default class ArgParser {\n    help = new Option(false, 'Print help message.')\n    genShadersCode = new Option(\n        false,\n        'Generate a non-optimized shader code for static EnsoGL shape definitions.'\n    )\n\n    parse() {\n        const optionToFieldNameMap: Map<string, string> = new Map()\n        const options: any = {}\n        for (let [fieldName, option] of Object.entries(this)) {\n            let optionName = camelToKebabCase(fieldName)\n            optionToFieldNameMap.set(optionName, fieldName)\n            options[optionName] = { type: option.type, default: option.value }\n        }\n        try {\n            let out = parseArgs({ options })\n            for (let [optionName, optionValue] of Object.entries(out.values)) {\n                let fieldName = optionToFieldNameMap.get(optionName)\n                // @ts-ignore\n                this[fieldName].value = optionValue\n            }\n        } catch (error) {\n            console.error(`${error.message}. Use --help to learn about possible options.`)\n            process.exit(1)\n        }\n        if (this.help.value) {\n            this.printHelp()\n            process.exit(0)\n        }\n    }\n\n    printHelp() {\n        console.log(`Options:`)\n        for (let [fieldName, option] of Object.entries(this)) {\n            let optionName = camelToKebabCase(fieldName)\n            console.log()\n            console.log(`--${optionName}`)\n            console.log(option.description)\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["browser", "node", "host_default", "init_host", "__esmMin", "_Logger", "Logger", "init_logger", "__esmMin", "init_host", "fn", "args", "c", "host_default", "message", "f", "out", "Task", "init_task", "__esmMin", "init_logger", "message", "Logger", "ms", "task", "f", "out", "fs_exports", "__export", "readFile", "path", "options", "Task", "fs", "import_fs", "init_fs", "__esmMin", "__reExport", "init_task", "src_exports", "__export", "App", "__toCommonJS", "ease_in_out_quad", "t", "new_top_level_div", "node", "polar_to_cartesian", "radius", "angle_degrees", "angle", "format_mb", "bytes", "new_svg", "width", "height", "str", "arc", "radius", "end_angle", "start_angle", "start", "polar_to_cartesian", "end", "large_arc", "bg_color", "loader_color", "top_layer_index", "ProgressIndicator", "cfg", "new_top_level_div", "center", "progress_bar_svg", "progress_bar", "resolve", "width", "height", "alpha", "inner_radius", "outer_radius", "mid_radius", "bar_width", "new_svg", "parent", "value", "min_angle", "angle_span", "mask_angle", "corner_pos", "polar_to_cartesian", "arc", "val", "indicator", "reject", "show_step", "ease_in_out_quad", "rotation", "rotate_step", "timestamp", "Loader", "resources", "missing_content_length", "resource", "content_length", "body", "new_bytes", "time", "time_diff", "percent", "speed", "received", "indicator_progress", "format_mb", "loader", "init_host", "init_task", "init_logger", "DEFAULT_ENTRY_POINT", "parseBoolean", "value", "Param", "Config", "other", "key", "self", "otherVal", "selfParam", "selfVal", "newVal", "import_node_util", "camelToKebabCase", "name", "letter", "idx", "Option", "value", "description", "ArgParser", "optionToFieldNameMap", "options", "fieldName", "option", "optionName", "out", "optionValue", "error", "fs", "App", "inputConfig", "host_default", "Task", "config", "Config", "urlParams", "runEntryPoint", "event", "data", "load_wasm", "task", "snippets_fetch", "wasm_fetch", "loader", "Loader", "download_size", "snippets_code", "wasm", "init_wasm", "wasm_main", "MAIN_ENTRY_POINT_PREFIX", "BEFORE_MAIN_ENTRY_POINT_PREFIX", "NAME_REGEX", "EntryPoint", "prefix", "name", "args", "groups", "fullName", "names", "map", "n", "wasmFunctions", "show_debug_screen", "msg", "Logger", "entryPoints", "debug_screen_div", "new_top_level_div", "newDiv", "newContent", "ul", "entry_point", "li", "a", "linkText", "printScamWarning", "headerCSS", "headerCSS1", "headerCSS2", "msgCSS", "msg1", "msg2", "logsFns", "LogRouter", "firstArg", "firstArgBody", "bodyStartIndex", "body", "logRouter", "hideLogs", "style_root", "root", "disableContextMenu", "e", "registerGetShadersRustFn", "fn", "out", "host_default", "initBrowser", "config", "printScamWarning", "hideLogs", "runEntryPoint", "ArgParser", "wasm", "loader", "load_wasm", "wasmFns", "wasmFunctions", "mainEntryPoints", "EntryPoint", "beforeMainEntryPoints", "runBeforeMainEntryPoints", "count", "Task", "entryPoint", "Logger", "show_debug_screen", "urlParams", "App"]
}
