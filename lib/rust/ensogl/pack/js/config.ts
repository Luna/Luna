export const DEFAULT_ENTRY_POINT = 'ide'

// =============
// === Utils ===
// =============

/** Parses the provided value as boolean. If it was a boolean value, it is left intact. If it was
 * a string 'true' or 'false', it is converted to a boolean value. Otherwise, null is returned. */
// prettier-ignore
function parseBoolean(value: any): boolean | null {
    switch(value) {
        case true: return true
        case false: return false
        case 'true': return true
        case 'false': return false
        default: return null
    }
}

// =============
// === Param ===
// =============

export class Param<T> {
    value: T
    setByUser: boolean = false
    constructor(value: T) {
        this.value = value
    }
}

// ==============
// === Config ===
// ==============

export class Config {
    /** The URL of the WASM file generated by ensogl-pack. */
    public wasm_url: Param<string> = new Param('main.wasm')
    /** The URL of the snippets file generated by ensogl-pack. */
    public snippets_url: Param<string> = new Param('snippets.js')
    /** The application entry point. */
    public entry: Param<string> = new Param(DEFAULT_ENTRY_POINT)
    /** The EnsoGL theme to be used. */
    public theme: Param<string> = new Param('default')
    /** Controls whether the visual loader should be visible on the screen when downloading and
     * compiling WASM sources. By default, the loader is used only if the `entry` is set to
     * `DEFAULT_ENTRY_POINT`. */
    public use_loader: Param<boolean> = new Param(true)
    /** The (time needed for WASM download) / (total time including WASM download and WASM app
     * initialization). In case of small WASM apps, this can be set to 1.0. In case of bigger WASM
     * apps, it's desired to show the progress bar growing up to e.g. 70% and leaving the last 30% for WASM app init. */
    public loader_download_to_init_ratio: Param<number> = new Param(0.7)
    /** Controls whether the application should be run in the debug mode. In this mode all logs are
     * printed to the console. Otherwise, the logs are hidden unless explicitly shown by calling
     * `showLogs`. */
    public debug: Param<boolean> = new Param(false)

    updateFromObject(other: any) {
        for (let key of Object.keys(this)) {
            let self: any = this
            let otherVal = other[key]
            let selfParam = self[key]
            let selfVal = selfParam.value
            if (otherVal != null) {
                if (typeof selfVal === 'boolean') {
                    let newVal = parseBoolean(otherVal)
                    if (newVal == null) {
                        this.printValueUpdateError(key, selfVal, otherVal)
                    } else {
                        selfParam.value = newVal
                        selfParam.setByUser = true
                    }
                } else {
                    selfParam.value = otherVal.toString()
                    selfParam.setByUser = true
                }
            }
        }
    }

    resolve() {
        if (!this.use_loader.setByUser && this.entry.value !== DEFAULT_ENTRY_POINT) {
            this.use_loader.value = false
        }
    }

    printValueUpdateError(key: string, selfVal: any, otherVal: any) {
        console.error(
            `The provided value for Config.${key} is invalid. Expected boolean, got '${otherVal}'. \
            Using the default value '${selfVal}' instead.`
        )
    }
}
