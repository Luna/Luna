export const DEFAULT_ENTRY_POINT = 'ide'

// =============
// === Utils ===
// =============

/** Parses the provided value as boolean. If it was a boolean value, it is left intact. If it was
 * a string 'true' or 'false', it is converted to a boolean value. Otherwise, null is returned. */
// prettier-ignore
function parseBoolean(value: any): boolean | null {
    switch(value) {
        case true: return true
        case false: return false
        case 'true': return true
        case 'false': return false
        default: return null
    }
}

// =============
// === Param ===
// =============

export type ParamValue = string | boolean | number | (string | null)

export class Param<T> {
    default: T
    value: T
    description: string
    setByUser: boolean = false
    constructor(value: T, description: string) {
        this.default = value
        this.value = value
        this.description = description
    }
}

// ==============
// === Config ===
// ==============

export type ExternalConfig = { [key: string]: Param<ParamValue> }

/** The configuration of the EnsoGL application. The options can be overriden by the user. The
 * implementation automatically casts the values to the correct types. For example, if an option
 * override for type boolean was provided as `'true'`, it will be parsed automatically. Moreover,
 * it is possible to extend the provided option list with custom options. See the `extend` method
 * to learn more. */
export class Config {
    mainWasmUrl: Param<string> = new Param(
        'main.wasm',
        'The URL of the WASM file generated by ensogl-pack.'
    )
    mainJsUrl: Param<string> = new Param(
        'main.js',
        'The URL of the main.js file generated by ensogl-pack.'
    )
    entry: Param<string> = new Param(
        DEFAULT_ENTRY_POINT,
        'The application entry point. Use `entry=_` to list available entry points.'
    )
    theme: Param<string> = new Param('default', 'The EnsoGL theme to be used.')
    useLoader: Param<boolean> = new Param(
        true,
        `Controls whether the visual loader should be visible on the screen when downloading and \
        compiling WASM sources. By default, the loader is used only if the \`entry\` is set to \
        \`${DEFAULT_ENTRY_POINT}\`.`
    )
    loaderDownloadToInitRatio: Param<number> = new Param(
        1.0,
        `The (time needed for WASM download) / (total time including WASM download and WASM app \
        initialization). In case of small WASM apps, this can be set to 1.0. In case of bigger \
        WASM apps, it's desired to show the progress bar growing up to e.g. 70% and leaving the \
        last 30% for WASM app init.`
    )
    debug: Param<boolean> = new Param(
        false,
        `Controls whether the application should be run in the debug mode. In this mode all logs \
        are printed to the console. Otherwise, the logs are hidden unless explicitly shown by \
        calling \`showLogs\`. Moreover, EnsoGL extensions are loaded in the debug mode which may \
        cause additional logs to be printed.`
    )
    maxBeforeMainEntryPointsTimeMs: Param<number> = new Param(
        3,
        `The maximum time in milliseconds a before main entry point is allowed to run. After this \
        time, an error will be printed, but the execution will continue`
    )

    resolve(cfg: { overrides: any[] }): null | string[] {
        const allOverrides = {}
        for (let override of cfg.overrides) {
            Object.assign(allOverrides, override)
        }
        const unrecognizedParams = this.updateFromObject(allOverrides)
        this.finalize()
        return unrecognizedParams
    }

    extend(config: ExternalConfig) {
        Object.assign(this, config)
    }

    // FIXME: handle numbers
    updateFromObject(other: { [key: string]: any }): null | string[] {
        const unrecognizedParams = new Set(Object.keys(other))
        for (let key of Object.keys(this)) {
            unrecognizedParams.delete(key)
            let self: any = this
            let otherVal = other[key]
            let selfParam = self[key]
            let selfVal = selfParam.value
            if (otherVal != null) {
                if (typeof selfVal === 'boolean') {
                    let newVal = parseBoolean(otherVal)
                    if (newVal == null) {
                        this.printValueUpdateError(key, selfVal, otherVal)
                    } else {
                        selfParam.value = newVal
                        selfParam.setByUser = true
                    }
                } else {
                    selfParam.value = otherVal.toString()
                    selfParam.setByUser = true
                }
            }
        }
        if (unrecognizedParams.size > 0) {
            return Array.from(unrecognizedParams)
        } else {
            return null
        }
    }

    finalize() {
        if (!this.useLoader.setByUser && this.entry.value !== DEFAULT_ENTRY_POINT) {
            this.useLoader.value = false
        }
    }

    printValueUpdateError(key: string, selfVal: any, otherVal: any) {
        console.error(
            `The provided value for Config.${key} is invalid. Expected boolean, got '${otherVal}'. \
            Using the default value '${selfVal}' instead.`
        )
    }

    strigifiedKeyValueMap(): { [key: string]: any } {
        const map: any = {}
        for (let [key, param] of Object.entries(this)) {
            if (param.value) {
                map[key] = param.value.toString()
            } else {
                map[key] = param.value
            }
        }
        return map
    }
}
