/** @file Configuration parameters for the application. */

import { logger } from 'runner/log'

export const DEFAULT_ENTRY_POINT = 'ide'

// =============
// === Utils ===
// =============

/** Parses the provided value as boolean. If it was a boolean value, it is left intact. If it was
 * a string 'true' or 'false', it is converted to a boolean value. Otherwise, null is returned. */
// prettier-ignore
function parseBoolean(value: any): boolean | null {
    switch(value) {
        case true: return true
        case false: return false
        case 'true': return true
        case 'false': return false
        default: return null
    }
}

// =============
// === Param ===
// =============

export type ParamValue = string | boolean | number | (string | null)

export class Param<T> {
    default: T
    value: T
    description: string
    setByUser = false
    constructor(value: T, description: string) {
        this.default = value
        this.value = value
        this.description = description
    }
}

// ==============
// === Params ===
// ==============

export type ExternalConfig = Record<string, ParamValue>

export class Params {
    [key: string]: Param<ParamValue>

    mainWasmUrl = new Param<string>(
        'main.wasm',
        'The URL of the WASM file generated by ensogl-pack.'
    )
    mainJsUrl = new Param<string>(
        'main.js',
        'The URL of the main.js file generated by ensogl-pack.'
    )
    shadersUrl = new Param<string>('shaders', 'The URL of the pre-compiled shaders directory.')
    entry = new Param<string>(
        DEFAULT_ENTRY_POINT,
        'The application entry point. Use `entry=_` to list available entry points.'
    )
    theme = new Param<string>('default', 'The EnsoGL theme to be used.')
    useLoader = new Param<boolean>(
        true,
        'Controls whether the visual loader should be visible on the screen when downloading and ' +
            'compiling WASM sources. By default, the loader is used only if the `entry` is set ' +
            `to ${DEFAULT_ENTRY_POINT}.`
    )
    loaderDownloadToInitRatio = new Param<number>(
        1.0,
        'The (time needed for WASM download) / (total time including WASM download and WASM app ' +
            'initialization). In case of small WASM apps, this can be set to 1.0. In case of ' +
            'bigger WASM apps, it is desired to show the progress bar growing up to e.g. 70% and ' +
            'leaving the last 30% for WASM app init.'
    )
    debug = new Param<boolean>(
        false,
        'Controls whether the application should be run in the debug mode. In this mode all logs ' +
            'are printed to the console. Otherwise, the logs are hidden unless explicitly shown ' +
            'by calling `showLogs`. Moreover, EnsoGL extensions are loaded in the debug mode ' +
            'which may cause additional logs to be printed.'
    )
    maxBeforeMainEntryPointsTimeMs = new Param<number>(
        30,
        'The maximum time in milliseconds a before main entry point is allowed to run. After ' +
            'this time, an error will be printed, but the execution will continue.'
    )
}

// ==============
// === Config ===
// ==============

/** The configuration of the EnsoGL application. The options can be overriden by the user. The
 * implementation automatically casts the values to the correct types. For example, if an option
 * override for type boolean was provided as `'true'`, it will be parsed automatically. Moreover,
 * it is possible to extend the provided option list with custom options. See the `extend` method
 * to learn more. */
export class Config {
    params = new Params()

    resolve(cfg: { overrides: any[] }): null | string[] {
        const allOverrides = {}
        for (const override of cfg.overrides) {
            Object.assign(allOverrides, override)
        }
        const unrecognizedParams = this.updateFromObject(allOverrides)
        this.finalize()
        return unrecognizedParams
    }

    extend(config: ExternalConfig) {
        Object.assign(this.params, config)
    }

    // FIXME: handle numbers
    updateFromObject(other: Record<string, any>): null | string[] {
        const paramsToBeAssigned = new Set(Object.keys(other))
        const invalidParams = new Set<string>()
        for (const key of Object.keys(this.params)) {
            paramsToBeAssigned.delete(key)
            const otherVal: unknown = other[key]
            const param = this.params[key]
            if (param == null) {
                invalidParams.add(key)
            } else {
                const selfVal = param.value
                if (otherVal != null) {
                    if (typeof selfVal === 'boolean') {
                        const newVal = parseBoolean(otherVal)
                        if (newVal == null) {
                            this.printValueUpdateError(key, selfVal, otherVal)
                        } else {
                            param.value = newVal
                            param.setByUser = true
                        }
                    } else {
                        param.value = String(otherVal)
                        param.setByUser = true
                    }
                }
            }
        }
        if (paramsToBeAssigned.size > 0 || invalidParams.size > 0) {
            return [...paramsToBeAssigned, ...invalidParams]
        } else {
            return null
        }
    }

    finalize() {
        if (!this.params.useLoader.setByUser && this.params.entry.value !== DEFAULT_ENTRY_POINT) {
            this.params.useLoader.value = false
        }
    }

    printValueUpdateError(key: string, selfVal: any, otherVal: any) {
        console.error(
            `The provided value for Config.${key} is invalid. Expected boolean, got '${otherVal}'. \
            Using the default value '${selfVal}' instead.`
        )
    }

    strigifiedKeyValueMap(): Record<string, any> {
        const map: Record<string, any> = {}
        for (const [key, param] of Object.entries(this.params)) {
            if (param.value) {
                map[key] = param.value.toString()
            } else {
                map[key] = param.value
            }
        }
        return map
    }

    print() {
        logger.log(`Resolved config:`, this.strigifiedKeyValueMap())
    }
}
