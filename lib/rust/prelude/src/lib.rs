//! This module re-exports a lot of useful stuff. It is not meant to be used
//! by libraries, but it is definitely usefull for bigger projects. It also
//! defines several aliases and utils which may find their place in new
//! libraries in the future.

// === Features ===
#![feature(trait_alias)]
#![feature(allocator_api)]
#![feature(auto_traits)]
#![feature(negative_impls)]
#![feature(pattern)]
// === Standard Linter Configuration ===
#![deny(non_ascii_idents)]
#![warn(unsafe_code)]
#![allow(clippy::bool_to_int_with_if)]
#![allow(clippy::let_and_return)]
// === Non-Standard Linter Configuration ===
#![warn(missing_copy_implementations)]
#![warn(missing_debug_implementations)]



mod data;
mod macros;
mod not_same;
mod option;
mod result;
mod serde;
mod smallvec;
mod std_reexports;
mod string;
mod vec;

pub use crate::serde::*;
pub use crate::smallvec::*;
pub use enso_zst::*;

pub use anyhow;
pub use data::*;
pub use macros::*;
pub use option::*;
pub use std_reexports::*;
pub use string::*;
pub use vec::*;

pub use boolinator::Boolinator;
pub use derivative::Derivative;
pub use derive_more::*;
pub use enso_reflect::prelude::*;
pub use itertools::Itertools;
pub use paste::paste;
pub use std::ops::AddAssign;


/// Serde reexports for the code generated by declarative macros.
///
/// They cannot be directly reexported from prelude, as the methods `serialize` and `deserialize`
/// that would be brought into scope by this, would collide with the other IDE-defined traits.
pub mod serde_reexports {
    pub use serde::Deserialize;
    pub use serde::Serialize;
}


// ===============
// === Logging ===
// ===============

pub use enso_logging::debug;
pub use enso_logging::debug_span;
pub use enso_logging::error;
pub use enso_logging::error_span;
pub use enso_logging::info;
pub use enso_logging::info_span;
pub use enso_logging::prelude::*;
pub use enso_logging::trace;
pub use enso_logging::trace_span;
pub use enso_logging::warn;
pub use enso_logging::warn_span;
